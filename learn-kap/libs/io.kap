namespace("io")

∇ encodeUtf8Char (ch) {
  code ← ch-@\0
  when {
    (code < 128)     { ,code }
    (code < 2048)    { (192 ∨∵ 31 ∧∵ ¯6 ⌽∵ code)  (128 ∨∵ 63 ∧∵ code) }
    (code < 65536)   { (224 ∨∵ 15 ∧∵ ¯12 ⌽∵ code) (128 ∨∵ 63 ∧∵ ¯6 ⌽∵ code)  (128 ∨∵ 63 ∧∵ code) }
    (code < 1114112) { (240 ∨∵ 7 ∧∵ ¯18 ⌽∵ code)  (128 ∨∵ 63 ∧∵ ¯12 ⌽∵ code) (128 ∨∵ 63 ∧∵ ¯6 ⌽∵ code) (128 ∨∵ 63 ∧∵ code) }
    (1) { throw "Invalid character: ",⍕code }
  }
}

∇ encodeUtf8 (s) {
  ⊃ ,/ encodeUtf8Char¨ s
}

declare(:export encodeUtf8)

base64Chars ← (@A+⍳26) , (@a+⍳26) , (@0+⍳10) , "+/"

base64Encode ⇐ {
  padding ← 3|3-≢⍵
  (padding ⍴ @=) ,⍨ (-padding)↓ base64Chars[,⍉ (4⍴64)⊤ 256 (⊥⍤1)  ¯1 3 ⍴ ⍵ , padding ⍴ 0]
}

declare(:export base64Encode)

∇ toHex {
  (⍵≡0) → "0"
  n ← if (isLocallyBound('⍺)) { ⍺ } else { ⌊1+16⍟|⍵ }
  "0123456789ABCDEF" ⊇⍨ ,(n ⍴ 16) ⊤ ⍵
}

declare(:export toHex)

∇ fromHex {
  decoded ← "0123456789abcdef" ⍳ unicode:toLower ⍵
  16∊decoded and 'kap:KapEvalException int:throwNative "Invalid characters in hex string"
  16 ⊥ decoded
}

declare(:export fromHex)
