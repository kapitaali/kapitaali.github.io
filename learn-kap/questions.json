[
  {
    "question": "Find the last element of an array. Define myFun in such a way that <br/><code>myFun 1 2 3 4</code><br/> gives 4.<br/><p>Note that your answer must produce an integer, not an 1 element array.</p>",
    "answer": "4",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": ["4"],
    "prep": "",
    "check": "myFun 1 2 3 4",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "<p>Find the last-but-one (or second-last) element of an array. Define myFun in such a way that</p><code>myFun 1 2 3 4</code><br/>gives 3.<p>Note that your answer must produce an integer, not an 1 element array.</p>",
    "answer": "13",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": ["13"],
    "prep": "",
    "check": "myFun 11 12 13 14",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "<p>Find the K'th element of an array. Define myFun in such a way that <code>K myFun 1 2 3 4</code> gives the K'th element, e.g.<br/><code>1 myFun 1 2 3 4</code><br/> gives 1. <br/><p>Note that your answer must produce an integer, not an 1 element array.</p>",
    "answer": "14",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": ["14"],
    "prep": "",
    "check": "4 myFun 11 12 13 14 15 16",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "<p>Find the number of elements in an array. Define myFun in such a way that <code>myFun 1 2 3 4 5</code> gives 5.</p><p>Note that your answer must produce an integer, not an 1 element array.</p>",
    "answer": "6",
    "questionSet": "Array",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 21 22 23 24 25 26",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "<p>Reverse an array.</p>Define myFun in such a way that <code>myFun 1 2 3 4 </code> gives 4 3 2 1.</p><br/>",
    "answer": "(14 13 12 11)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 11 12 13 14",
    "answerType": "ARRAY",
    "answerDim": [4]
  },
  {
    "question": "<p>Find out whether an array is a palindrome. Define myFun in such a way that <code>myFun 1 2 3 4 5</code> gives 0 and <code>myFun 1 2 3 2 1</code> gives 1.",
    "answer": "1",
    "questionSet": "Lists",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 21 22 23 22 21",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "<p>Flatten a nested array structure. Define myFun in such a way that <br/><code>myFun 1 ((2 (3)) 4) 5 (6)</code><br/>gives 1 2 3 4 5 6.</p>",
    "answer": "(11 12 13 14 15 16)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 11 ((12 (13)) 14) 15 (16)",
    "answerType": "ARRAY",
    "answerDim": [6]
  },
  {
    "question": "<p>Duplicate the elements of an array. Define myFun in such a way that <br/><code>myFun 1 2 3 3 4</code><br/>gives 1 1 2 2 3 3 3 3 4 4.</p>",
    "answer": "(1 1 2 2 3 3 3 3 4 4)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 1 2 3 3 4",
    "answerType": "ARRAY",
    "answerDim": [10]
  },
  {
    "question": "<p>Eliminate consecutive duplicates of array elements. Define myFun in such a way that <br/><code>myFun \"aaaabccaadeeee\"</code><br/>gives \"abcade\".</p>",
    "answer": "(1 2 3 1 4 5)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 1 1 1 1 2 3 3 1 1 4 5 5 5 5",
    "answerType": "ARRAY",
    "answerDim": [6]
  },
  {
    "question": "<p>Pack consecutive duplicates of array elements into nested arrays. Define myFun in such a way that <br/><code>myFun (A A A A B C C A A D E E E E)</code><br/>gives ((A A A A) (B) (C C) (A A) (D) (E E E E)).</p>",
    "answer": "((1 1 1 1) (<2) (3 3) (1 1) (<4) (5 5 5 5))",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 1 1 1 1 2 3 3 1 1 4 5 5 5 5",
    "answerType": "NESTED_ARRAY",
    "answerDim": [6]
  },
  {
    "question": "<p>Use the result of the previous problem to implement the so-called run-length encoding data compression method. Consecutive duplicates of elements are encoded as lists (N E) where N is the number of duplicates of the element E.</p><p>Define myFun in such a way that<br/><code>myFun \"aaaabccaadeeee\"</code> gives<br/><code>(4 @a) (1 @b) (2 @c) (2 @a) (1 @d) (4 @e)</code></p>",
    "answer": "((4 1) (1 2) (2 3) (2 1) (1 4) (4 5))",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 1 1 1 1 2 3 3 1 1 4 5 5 5 5",
    "answerType": "NESTED_ARRAY",
    "answerDim": [6]
  },
  {
    "question": "<p>Modify the result of the previous problem in such a way that if an element has no duplicates it is simply copied into the result list. Only elements with duplicates are transferred as (N E) lists.</p><p>Define myFun in such a way that<br/><code>myFun \"aaaabccaadeeee\"</code> gives<br/><code>(4 @a) @b (2 @c) (2 @a) @d (4 @e)</code></p>",
    "answer": "((4 1) 2 (2 3) (2 1) 4 (4 5))",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 1 1 1 1 2 3 3 1 1 4 5 5 5 5",
    "answerType": "NESTED_ARRAY",
    "answerDim": [6]
  },
  {
    "question": "<p>Given a run-length code list generated as specified previously. Construct its uncompressed version. Define myFun in such a way that <br/><code>myFun (4 @a) @b (2 @c) (2 @a) @d (4 @e)</code><br/> produces \"aaaabccaadeeee\".</p>",
    "answer": "(1 1 1 1 2 3 3 1 1 4 5 5 5 5)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun (4 1) 2 (2 3) (2 1) 4 (4 5)",
    "answerType": "ARRAY",
    "answerDim": [14]
  },
  {
    "question": "<p>Replicate the elements of an array a given number of times. Define myFun in such a way that <br/><code>3 myFun @a @b @c</code><br/> produces \"aaabbbccc\".",
    "answer": "(1 1 1 2 2 2 3 3 3)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "3 myFun 1 2 3",
    "answerType": "ARRAY",
    "answerDim": [9]
  },
  {
    "question": "<p>Drop every N'th element from a list. Define myFun in such a way that <br/><code>3 myFun \"abcdefghik\"</code><br/> produces \"abdeghk\".",
    "answer": "(1 2 4 5 7 8)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "3 myFun 1 2 3 4 5 6 7 8 9",
    "answerType": "ARRAY",
    "answerDim": [6]
  },
  {
    "question": "<p>Split an array into two parts; the length of the first part is given. Define myFun in such a way that <br/><code>3 myFun 1 2 3 4 5 6 7 8 9</code><br/> produces (1 2 3) (4 5 6 7 8 9).",
    "answer": "((1 2 3) (4 5 6 7 8 9))",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "3 myFun 1 2 3 4 5 6 7 8 9",
    "answerType": "NESTED_ARRAY",
    "answerDim": [2]
  },
  {
    "question": "<p>Extract a slice from an array. Define myFun in such a way that <br/><code>3 7 myFun \"abcdefghijk\"</code><br/> produces \"cdefg\".",
    "answer": "(3 4 5 6 7)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "3 7 myFun 1 2 3 4 5 6 7 8 9",
    "answerType": "ARRAY",
    "answerDim": [5]
  },
  {
    "question": "<p>Rotate an array N places to the left. Define myFun in such a way that <br/><code>3 myFun \"abcdefgh\"</code><br/> produces \"defghabc\" and <br/><code>¯2 myFun \"abcdefgh\"</code><br/> produces \"ghabcdef\".",
    "answer": "(4 5 6 7 8 9 1 2 3)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "3 myFun 1 2 3 4 5 6 7 8 9",
    "answerType": "ARRAY",
    "answerDim": [9]
  },
  {
    "question": "<p>Remove the K'th element from an array. Define myFun in such a way that <br/><code>3 myFun \"abcdef\"</code><br/> produces \"abdef\".",
    "answer": "(1 2 4 5 6 7 8 9)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "3 myFun 1 2 3 4 5 6 7 8 9",
    "answerType": "ARRAY",
    "answerDim": [8]
  },
  {
    "question": "<p>Insert an element at a given position into an array.  Define myFun in such a way that <br/><code>3 72 myFun 1 2 3 4 5 6</code><br/> produces 1 2 72 3 4 5 6.",
    "answer": "(11 12 72 13 14 15 16 17 18)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "3 72 myFun 11 12 13 14 15 16 17 18",
    "answerType": "ARRAY",
    "answerDim": [9]
  },
  {
    "question": "Create an array containing all integers within a given range. Define myFun in such a way that 4 myFun 9 gives 4 5 6 7 8 9.",
    "answer": "(44 45 46 47 48 49)",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "44 myFun 49",
    "answerType": "ARRAY",
    "answerDim": [6]
  },
  {
    "question": "Extract a given number of randomly selected elements from an array.  Define myFun in such a way that 3 myFun \"abcdefgh\" for example gives \"eda\".",
    "answer": "1",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "t←31 32 33 34 35 36 37 38 39",
    "check": "{(⍵[0]∊t) ∧ (⍵[1]∊t) ∧ (⍵[2]∊t)} (3 myFun t)",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "Lotto: Draw N different random numbers from the set 1..M. Define myFun in such a way that <code>6 myFun 49</code> for example gives 23 1 17 33 21 37.",
    "answer": "1",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "t←1+⍳69",
    "check": "1={(⍵[0]∊t) ∧ (⍵[1]∊t) ∧ (⍵[2]∊t) ∧ (⍵[3]∊t) ∧ (⍵[4]∊t) ∧ (⍵[5]∊t) ∧ (6=≢(∪⍵))} (6 myFun 69)",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "Generate a random permutation of the elements of a list. Define myFun in such a way that <code>myFun \"abcdef\"</code> for example gives \"badcef\".",
    "answer": "1",
    "questionSet": "Arrays",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "t←31 32 33 34 35 36",
    "check": "{(⍵[0]∊t) ∧ (⍵[1]∊t) ∧ (⍵[2]∊t) ∧ (⍵[3]∊t) ∧ (⍵[4]∊t) ∧ (⍵[5]∊t)} (myFun t)",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "Generate combinations of K distinct objects chosen from an array of N elements. Define myFun in such a way that <code>2 myFun \"abcdef\"</code> gives \"ab\" \"ac\" \"ad\" \"ae\" \"af\"...\"fe\".",
    "answer": "((11 12) (11 13) (11 14) (11 15) (11 16) (12 11) (12 13) (12 14) (12 15) (12 16) (13 11) (13 12) (13 14) (13 15) (13 16) (14 11) (14 12) (14 13) (14 15) (14 16) (15 11) (15 12) (15 13) (15 14) (15 16) (16 11) (16 12) (16 13) (16 14) (16 15))",
    "questionSet": "Arrays",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "∧2 myFun 11 12 13 14 15 16",
    "answerType": "NESTED_ARRAY",
    "answerDim": [30]
  },
  {
    "question": "Determine whether a given integer number is prime. Define myFun in such a way that <code>myFun 123</code> gives 0 and myFun 127 gives 1. Note that testing might take a while as we test with a large prime.",
    "answer": "1",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 1632899",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "Produce a list of prime numbers in a given range. Define myFun in such a way that <code>10 myFun 20</code> gives 0 and myFun 127 gives 11 13 17 19.",
    "answer": "(211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293)",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "200 myFun 300",
    "answerType": "ARRAY",
    "answerDim": [16]
  },
  {
    "question": "Determine the greatest common divisor of two positive integer numbers. Define myFun in such a way that <code>36 myFun 63</code> gives 9.",
    "answer": "9",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "63 myFun 36",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "Determine whether two positive integer numbers are coprime. Two numbers are coprime if their greatest common divisor equals 1. Define myFun in such a way that <code>35 myFun 64</code> gives 1.",
    "answer": "1",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "64 myFun 35",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "Calculate Euler's totient function phi(m). Euler's so-called totient function phi(m) is defined as the number of positive integers r (1 <= r < m) that are coprime to m. <br/> Example: m = 10: r = 1,3,7,9; thus phi(m) = 4. Note the special case: phi(1) = 1. <br/> Define myFun in such a way that <code>myFun 10</code> gives 4.",
    "answer": "4",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun", "⇐"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 10",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "Determine the prime factors of a given positive integer. Define myFun in such a way that <code>myFun 315</code> gives (3 3 5 7).",
    "answer": "(3 3 5 7)",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "io:println myFun 315 ⋄ myFun 315",
    "answerType": "ARRAY",
    "answerDim": []
  },
  {
    "question": "Determine the prime factors and their multiplicities of a given positive integer. Define myFun in such a way that <code>myFun 315</code> gives ((3 2) (5 1) (7 1)).",
    "answer": "((3 2) (5 1) (7 1))",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 315",
    "answerType": "NESTED_ARRAY",
    "answerDim": []
  },
  {
    "question": "Goldbach's conjecture says that every positive even number greater than 2 is the sum of two prime numbers. Example: 28 = 5 + 23. Define myFun in such a way that myFun33 28 gives (5 23).",
    "answer": "(2 313)",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 315",
    "answerType": "ARRAY",
    "answerDim": []
  },
  {
    "question": "<p>Given a range of integers by its lower and upper limit, print a list of Goldbach compositions of even numbers that have both primes bigger than 50. Define myFun in such a way that <code>100 myFun 120</code> gives ((53 53) (53 59) (53 61) (59 59) (53 67)).</p> Note that there may be more combinations of primes, just return the first prime over 50 and the result of subtraction.",
    "answer": "((53 947) (61 941) (67 937) (53 953) (61 947))",
    "questionSet": "Arithmetic",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "5↑ (1000 myFun 1200)",
    "answerType": "NESTED_ARRAY",
    "answerDim": [5]
  },
  {
    "question": "<p>An n-bit Gray code is a sequence of n-bit strings constructed according to certain rules. For example,<br/>n = 1: C(1) = ((0) (1))<br/>n = 2: C(2) = ((0 0) (0 1) (1 1) (1 0))<br/>n = 3: C(3) = ((0 0 0) (0 0 1) (0 1 1) (0 1 0) (1 1 0) (1 1 1) (1 0 1) (1 0 0))</p> Define myFun in such a way that <code>myFun 4</code> gives <code>((0 0 0 0) (0 0 0 1) (0 0 1 1) (0 0 1 0) (0 1 1 0) (0 1 1 1) (0 1 0 1) (0 1 0 0) (1 1 0 0) (1 1 0 1) (1 1 1 1) (1 1 1 0) (1 0 1 0) (1 0 1 1) (1 0 0 1) (1 0 0 0)</code>.",
    "answer": "((0 0 0 0 0) (0 0 0 0 1) (0 0 0 1 1) (0 0 0 1 0) (0 0 1 1 0) (0 0 1 1 1) (0 0 1 0 1) (0 0 1 0 0) (0 1 1 0 0) (0 1 1 0 1) (0 1 1 1 1) (0 1 1 1 0) (0 1 0 1 0) (0 1 0 1 1) (0 1 0 0 1) (0 1 0 0 0) (1 1 0 0 0) (1 1 0 0 1) (1 1 0 1 1) (1 1 0 1 0) (1 1 1 1 0) (1 1 1 1 1) (1 1 1 0 1) (1 1 1 0 0) (1 0 1 0 0) (1 0 1 0 1) (1 0 1 1 1) (1 0 1 1 0) (1 0 0 1 0) (1 0 0 1 1) (1 0 0 0 1) (1 0 0 0 0))",
    "questionSet": "Logic and codes",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 5",
    "answerType": "NESTED_ARRAY",
    "answerDim": [32]
  },
  {
    "question": "<p>A binary tree is either empty or it is composed of a root element and two successors, which are binary trees themselves. Examples of inary trees: <br/>A binary tree consisting of a root node only: a ← (:a null null)<br/>An empty binary tree: b ← null<br/>A tree of integers: c ← 1 (2 null (4 null null)) (2 null null)</p> Check whether a given term represents a binary tree. Define myFun in such a way that <code>myFun (:a (:b null null) null)</code> gives 1 and <code>myFun (:a (:b null null))</code> gives 0.",
    "answer": "0",
    "questionSet": "Binary trees",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun :a (:b :null :null) :null :null",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "<p>Symmetric binary trees. Write a function to check if a tree is symmetric.</p> Define myFun in such a way that <code>myFun (:a (:b :null :null) (:b :null :null))</code> gives 1 and <code>myFun (:a (:b :null :null) :null)</code> gives 0.",
    "answer": "1",
    "questionSet": "Binary trees",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun :a (:b :null (:c :null :null)) (:b :null (:c :null :null))",
    "answerType": "INTEGER",
    "answerDim": []
  },
  {
    "question": "<p>Binary search trees. Write a function to construct a binary search tree from a list of integer numbers.</p> Define myFun in such a way that <code>myFun 3 2 5 7 1</code> gives <code>(3 (2 (1 :null :null) (5 :null (7 :null :null))))</code> and <code>myFun 11 19 22 25 18 10</code> gives <code>(19 (11 (10 :null :null) (18 :null :null)) (22 :null (25 :null null)))</code>.",
    "answer": "(20 (10 :null (11 :null (18 (15 :null :null) :null))) (32 (24 :null (29 :null :null)) :null))",
    "questionSet": "Binary trees",
    "mustContain": ["myFun"],
    "cannotContain": [],
    "prep": "",
    "check": "myFun 32 10 11 24 18 15 20 29",
    "answerType": "NESTED_ARRAY",
    "answerDim": [3]
  }  
]
