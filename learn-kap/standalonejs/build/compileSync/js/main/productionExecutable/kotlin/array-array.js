(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib.js', './array-kap-util.js', './array-mpbignum.js', './ksoup-ksoup.js', './Kotlin-DateTime-library-kotlinx-datetime.js', './Kotlin-Immutable-Collections-kotlinx-collections-immutable.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib.js'), require('./array-kap-util.js'), require('./array-mpbignum.js'), require('./ksoup-ksoup.js'), require('./Kotlin-DateTime-library-kotlinx-datetime.js'), require('./Kotlin-Immutable-Collections-kotlinx-collections-immutable.js'));
  else {
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'array-array'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'array-array'.");
    }
    if (typeof globalThis['array-kap-util'] === 'undefined') {
      throw new Error("Error loading module 'array-array'. Its dependency 'array-kap-util' was not found. Please, check whether 'array-kap-util' is loaded prior to 'array-array'.");
    }
    if (typeof globalThis['array-mpbignum'] === 'undefined') {
      throw new Error("Error loading module 'array-array'. Its dependency 'array-mpbignum' was not found. Please, check whether 'array-mpbignum' is loaded prior to 'array-array'.");
    }
    if (typeof globalThis['ksoup-ksoup'] === 'undefined') {
      throw new Error("Error loading module 'array-array'. Its dependency 'ksoup-ksoup' was not found. Please, check whether 'ksoup-ksoup' is loaded prior to 'array-array'.");
    }
    if (typeof globalThis['Kotlin-DateTime-library-kotlinx-datetime'] === 'undefined') {
      throw new Error("Error loading module 'array-array'. Its dependency 'Kotlin-DateTime-library-kotlinx-datetime' was not found. Please, check whether 'Kotlin-DateTime-library-kotlinx-datetime' is loaded prior to 'array-array'.");
    }
    if (typeof globalThis['Kotlin-Immutable-Collections-kotlinx-collections-immutable'] === 'undefined') {
      throw new Error("Error loading module 'array-array'. Its dependency 'Kotlin-Immutable-Collections-kotlinx-collections-immutable' was not found. Please, check whether 'Kotlin-Immutable-Collections-kotlinx-collections-immutable' is loaded prior to 'array-array'.");
    }
    globalThis['array-array'] = factory(typeof globalThis['array-array'] === 'undefined' ? {} : globalThis['array-array'], globalThis['kotlin-kotlin-stdlib'], globalThis['array-kap-util'], globalThis['array-mpbignum'], globalThis['ksoup-ksoup'], globalThis['Kotlin-DateTime-library-kotlinx-datetime'], globalThis['Kotlin-Immutable-Collections-kotlinx-collections-immutable']);
  }
}(function (_, kotlin_kotlin, kotlin_array_kap_util, kotlin_array_mpbignum, kotlin_com_fleeksoft_ksoup_ksoup, kotlin_org_jetbrains_kotlinx_kotlinx_datetime, kotlin_org_jetbrains_kotlinx_kotlinx_collections_immutable) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var sign = Math.sign;
  var trunc = Math.trunc;
  var hypot = Math.hypot;
  var sinh = Math.sinh;
  var cosh = Math.cosh;
  var tanh = Math.tanh;
  var asinh = Math.asinh;
  var acosh = Math.acosh;
  var atanh = Math.atanh;
  var protoOf = kotlin_kotlin.$_$.d7;
  var initMetadataForClass = kotlin_kotlin.$_$.p6;
  var VOID = kotlin_kotlin.$_$.d;
  var Left = kotlin_array_kap_util.$_$.b;
  var Right = kotlin_array_kap_util.$_$.c;
  var listOf = kotlin_kotlin.$_$.q4;
  var Unit_instance = kotlin_kotlin.$_$.g2;
  var Long = kotlin_kotlin.$_$.aa;
  var Enum = kotlin_kotlin.$_$.v9;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.oa;
  var lazy = kotlin_kotlin.$_$.na;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.i;
  var joinToString = kotlin_kotlin.$_$.j4;
  var equals = kotlin_kotlin.$_$.i6;
  var toString = kotlin_kotlin.$_$.g7;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.k1;
  var Pair = kotlin_kotlin.$_$.da;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.g1;
  var rangeInLong = kotlin_array_mpbignum.$_$.g1;
  var toLong = kotlin_array_mpbignum.$_$.r1;
  var LongExpressionOverflow = kotlin_array_mpbignum.$_$.c;
  var get_indices = kotlin_kotlin.$_$.h4;
  var arrayCopy = kotlin_kotlin.$_$.x2;
  var fill = kotlin_kotlin.$_$.z3;
  var copyOf = kotlin_kotlin.$_$.p3;
  var contentEquals = kotlin_kotlin.$_$.j3;
  var ensureNotNull = kotlin_kotlin.$_$.ja;
  var longArray = kotlin_kotlin.$_$.x6;
  var HashSet_init_$Create$ = kotlin_kotlin.$_$.l;
  var Regex_init_$Create$ = kotlin_kotlin.$_$.o;
  var initMetadataForCompanion = kotlin_kotlin.$_$.q6;
  var Companion_instance = kotlin_array_mpbignum.$_$.z1;
  var of = kotlin_array_mpbignum.$_$.z;
  var toDouble = kotlin_kotlin.$_$.h9;
  var map = kotlin_kotlin.$_$.y7;
  var toList = kotlin_kotlin.$_$.a8;
  var isInterface = kotlin_kotlin.$_$.v6;
  var initMetadataForObject = kotlin_kotlin.$_$.s6;
  var ArrayUtils_instance = kotlin_array_kap_util.$_$.j;
  var initMetadataForInterface = kotlin_kotlin.$_$.r6;
  var toLong_0 = kotlin_kotlin.$_$.f7;
  var ArithmeticException_init_$Create$ = kotlin_kotlin.$_$.s;
  var ArithmeticException = kotlin_kotlin.$_$.r9;
  var numberToLong = kotlin_kotlin.$_$.b7;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.h;
  var abs = kotlin_kotlin.$_$.h7;
  var toIntArray = kotlin_kotlin.$_$.k5;
  var checkIndexOverflow = kotlin_kotlin.$_$.g3;
  var asReversed = kotlin_kotlin.$_$.b3;
  var until = kotlin_kotlin.$_$.p7;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.h3;
  var plusMod = kotlin_array_kap_util.$_$.d;
  var KProperty1 = kotlin_kotlin.$_$.t7;
  var getPropertyCallableRef = kotlin_kotlin.$_$.m6;
  var xor = kotlin_array_mpbignum.$_$.v1;
  var and = kotlin_array_mpbignum.$_$.e;
  var or = kotlin_array_mpbignum.$_$.a1;
  var inv = kotlin_array_mpbignum.$_$.q;
  var countLeadingZeroBits = kotlin_kotlin.$_$.ha;
  var bitLength = kotlin_array_mpbignum.$_$.f;
  var toBigInt = kotlin_array_mpbignum.$_$.o1;
  var of_0 = kotlin_array_mpbignum.$_$.x;
  var shl = kotlin_array_mpbignum.$_$.l1;
  var BigInt__toString_impl_xmp9e6 = kotlin_array_mpbignum.$_$.y1;
  var rangeInInt = kotlin_array_mpbignum.$_$.f1;
  var shl_0 = kotlin_array_mpbignum.$_$.k1;
  var of_1 = kotlin_array_mpbignum.$_$.y;
  var _ULong___get_data__impl__fggpzb = kotlin_kotlin.$_$.a2;
  var _ULong___init__impl__c78o9k = kotlin_kotlin.$_$.z1;
  var popcnt = kotlin_array_mpbignum.$_$.d1;
  var BigIntConstants_getInstance = kotlin_array_mpbignum.$_$.a2;
  var BigInt = kotlin_array_mpbignum.$_$.a;
  var listOf_0 = kotlin_kotlin.$_$.p4;
  var booleanArray = kotlin_kotlin.$_$.y5;
  var drop = kotlin_kotlin.$_$.u3;
  var numberToInt = kotlin_kotlin.$_$.a7;
  var longArrayOf = kotlin_kotlin.$_$.w6;
  var toMutableList = kotlin_kotlin.$_$.q5;
  var indexOf = kotlin_kotlin.$_$.g4;
  var joinToString_0 = kotlin_kotlin.$_$.k4;
  var distinct = kotlin_kotlin.$_$.r3;
  var copyToArray = kotlin_kotlin.$_$.q3;
  var Companion_getInstance = kotlin_array_mpbignum.$_$.b2;
  var make = kotlin_array_mpbignum.$_$.s;
  var sorted = kotlin_kotlin.$_$.g5;
  var captureStack = kotlin_kotlin.$_$.z5;
  var removeLast = kotlin_kotlin.$_$.x4;
  var emptyMap = kotlin_kotlin.$_$.x3;
  var to = kotlin_kotlin.$_$.va;
  var HashMap_init_$Create$ = kotlin_kotlin.$_$.k;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.r;
  var mapCapacity = kotlin_kotlin.$_$.r4;
  var coerceAtLeast = kotlin_kotlin.$_$.n7;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.m;
  var enumEntries = kotlin_kotlin.$_$.u5;
  var emptyList = kotlin_kotlin.$_$.w3;
  var getKClass = kotlin_kotlin.$_$.b;
  var hashCode = kotlin_kotlin.$_$.o6;
  var FunctionAdapter = kotlin_kotlin.$_$.x5;
  var plus = kotlin_array_mpbignum.$_$.b1;
  var get_LONG_0 = kotlin_array_mpbignum.$_$.b;
  var unaryMinus = kotlin_array_mpbignum.$_$.u1;
  var minus = kotlin_array_mpbignum.$_$.u;
  var signum = kotlin_array_mpbignum.$_$.m1;
  var get_sign = kotlin_kotlin.$_$.l7;
  var times = kotlin_array_mpbignum.$_$.n1;
  var div = kotlin_array_mpbignum.$_$.l;
  var rem = kotlin_array_mpbignum.$_$.j1;
  var toRational = kotlin_array_mpbignum.$_$.t1;
  var pow = kotlin_array_mpbignum.$_$.e1;
  var toDouble_0 = kotlin_array_mpbignum.$_$.p1;
  var compareTo = kotlin_array_mpbignum.$_$.h;
  var compareTo_0 = kotlin_array_mpbignum.$_$.j;
  var log = kotlin_kotlin.$_$.j7;
  var fromDoubleFloor = kotlin_array_mpbignum.$_$.o;
  var compareTo_1 = kotlin_array_mpbignum.$_$.i;
  var get_absoluteValue = kotlin_array_mpbignum.$_$.d;
  var abs_0 = kotlin_kotlin.$_$.i7;
  var IllegalArgumentException = kotlin_kotlin.$_$.x9;
  var rationalise = kotlin_array_mpbignum.$_$.h1;
  var NotImplementedError = kotlin_kotlin.$_$.ba;
  var gcd = kotlin_array_mpbignum.$_$.p;
  var div_0 = kotlin_array_mpbignum.$_$.k;
  var minus_0 = kotlin_array_mpbignum.$_$.v;
  var plus_0 = kotlin_array_mpbignum.$_$.c1;
  var rem_0 = kotlin_array_mpbignum.$_$.i1;
  var round = kotlin_kotlin.$_$.k7;
  var AssertionError_init_$Create$ = kotlin_kotlin.$_$.u;
  var ArithmeticException_init_$Create$_0 = kotlin_kotlin.$_$.t;
  var isFinite = kotlin_kotlin.$_$.ka;
  var Exception = kotlin_kotlin.$_$.w9;
  var THROW_CCE = kotlin_kotlin.$_$.fa;
  var Ksoup_instance = kotlin_com_fleeksoft_ksoup_ksoup.$_$.a;
  var THROW_IAE = kotlin_kotlin.$_$.ga;
  var getProgressionLastElement = kotlin_kotlin.$_$.v5;
  var reversed = kotlin_kotlin.$_$.y4;
  var plus_1 = kotlin_kotlin.$_$.u4;
  var dropLast = kotlin_kotlin.$_$.t3;
  var last = kotlin_kotlin.$_$.o4;
  var isqrt = kotlin_array_mpbignum.$_$.r;
  var compareTo_2 = kotlin_array_mpbignum.$_$.g;
  var div_1 = kotlin_array_mpbignum.$_$.m;
  var HashMap_init_$Create$_0 = kotlin_kotlin.$_$.j;
  var of_2 = kotlin_array_mpbignum.$_$.w;
  var toInt = kotlin_array_mpbignum.$_$.q1;
  var compareTo_3 = kotlin_kotlin.$_$.f6;
  var sortedWith = kotlin_kotlin.$_$.f5;
  var Comparator = kotlin_kotlin.$_$.u9;
  var System_instance = kotlin_org_jetbrains_kotlinx_kotlinx_datetime.$_$.b;
  var Companion_getInstance_0 = kotlin_org_jetbrains_kotlinx_kotlinx_datetime.$_$.c;
  var Char__toInt_impl_vasixd = kotlin_kotlin.$_$.x1;
  var toString_0 = kotlin_kotlin.$_$.m9;
  var LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.n;
  var toMutableList_0 = kotlin_kotlin.$_$.p5;
  var addAll = kotlin_kotlin.$_$.v2;
  var objectCreate = kotlin_kotlin.$_$.c7;
  var SimpleLogger = kotlin_array_kap_util.$_$.a;
  var Exception_init_$Init$ = kotlin_kotlin.$_$.b1;
  var Exception_init_$Init$_0 = kotlin_kotlin.$_$.z;
  var charSequenceGet = kotlin_kotlin.$_$.c6;
  var Char = kotlin_kotlin.$_$.s9;
  var isWhitespace = kotlin_kotlin.$_$.t8;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.u1;
  var Exception_init_$Create$ = kotlin_kotlin.$_$.a1;
  var charSequenceLength = kotlin_kotlin.$_$.d6;
  var UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.s1;
  var get_lastIndex = kotlin_kotlin.$_$.n4;
  var asList = kotlin_kotlin.$_$.z2;
  var IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.m1;
  var toString_1 = kotlin_kotlin.$_$.ua;
  var Level_WARNING_getInstance = kotlin_array_kap_util.$_$.i;
  var asReversed_0 = kotlin_kotlin.$_$.a3;
  var hashSetOf = kotlin_kotlin.$_$.f4;
  var ValueTimeMark__minus_impl_f87sko = kotlin_kotlin.$_$.t1;
  var Duration = kotlin_kotlin.$_$.q9;
  var PrimitiveClasses_getInstance = kotlin_kotlin.$_$.e2;
  var Default_getInstance = kotlin_kotlin.$_$.d2;
  var Level_VERBOSE_getInstance = kotlin_array_kap_util.$_$.h;
  var Collection = kotlin_kotlin.$_$.n2;
  var Level_ERROR_getInstance = kotlin_array_kap_util.$_$.f;
  var Level_INFO_getInstance = kotlin_array_kap_util.$_$.g;
  var Monotonic_instance = kotlin_kotlin.$_$.f2;
  var toMap = kotlin_kotlin.$_$.o5;
  var mutableListOf = kotlin_kotlin.$_$.t4;
  var getNumberHashCode = kotlin_kotlin.$_$.k6;
  var isNaN_0 = kotlin_kotlin.$_$.ma;
  var DoubleCompanionObject_instance = kotlin_kotlin.$_$.b2;
  var doubleFromBits = kotlin_kotlin.$_$.h6;
  var toBits = kotlin_kotlin.$_$.ta;
  var ulongToDouble = kotlin_kotlin.$_$.wa;
  var IllegalArgumentException_init_$Create$_0 = kotlin_kotlin.$_$.e1;
  var toString_2 = kotlin_kotlin.$_$.y1;
  var first = kotlin_kotlin.$_$.c4;
  var isCharSequence = kotlin_kotlin.$_$.u6;
  var trim = kotlin_kotlin.$_$.o9;
  var contentEquals_0 = kotlin_kotlin.$_$.k3;
  var getStringHashCode = kotlin_kotlin.$_$.n6;
  var contentHashCode = kotlin_kotlin.$_$.l3;
  var toLongArray = kotlin_kotlin.$_$.n5;
  var toBooleanArray = kotlin_kotlin.$_$.i5;
  var toDoubleArray = kotlin_kotlin.$_$.j5;
  var generateSequence = kotlin_kotlin.$_$.w7;
  var ArrayDeque_init_$Create$ = kotlin_kotlin.$_$.g;
  var copyOf_0 = kotlin_kotlin.$_$.n3;
  var encodeToByteArray = kotlin_kotlin.$_$.i8;
  var persistentMapOf = kotlin_org_jetbrains_kotlinx_kotlinx_collections_immutable.$_$.b;
  var persistentHashMapOf = kotlin_org_jetbrains_kotlinx_kotlinx_collections_immutable.$_$.a;
  var mapOf = kotlin_kotlin.$_$.s4;
  var KtMap = kotlin_kotlin.$_$.p2;
  var AbstractMutableList = kotlin_kotlin.$_$.i2;
  var UnsupportedOperationException_init_$Create$_0 = kotlin_kotlin.$_$.r1;
  var isInfinite = kotlin_kotlin.$_$.la;
  var toRational_0 = kotlin_array_mpbignum.$_$.s1;
  var BigInt__hashCode_impl_fn8vs3 = kotlin_array_mpbignum.$_$.w1;
  var fromDoubleCeil = kotlin_array_mpbignum.$_$.n;
  var rest = kotlin_array_kap_util.$_$.e;
  var eachCount = kotlin_kotlin.$_$.v3;
  var RegexOption_IGNORE_CASE_getInstance = kotlin_kotlin.$_$.e;
  var RegexOption_MULTILINE_getInstance = kotlin_kotlin.$_$.f;
  var emptySet = kotlin_kotlin.$_$.y3;
  var setOf = kotlin_kotlin.$_$.z4;
  var toSet = kotlin_kotlin.$_$.b8;
  var charArrayOf = kotlin_kotlin.$_$.a6;
  var split = kotlin_kotlin.$_$.d9;
  var sum = kotlin_kotlin.$_$.h5;
  var trimIndent = kotlin_kotlin.$_$.n9;
  var get_sign_0 = kotlin_kotlin.$_$.m7;
  var Comparable = kotlin_kotlin.$_$.t9;
  var make_0 = kotlin_array_mpbignum.$_$.t;
  var toInt_0 = kotlin_kotlin.$_$.k9;
  var NumberFormatException = kotlin_kotlin.$_$.ca;
  var replace = kotlin_kotlin.$_$.c9;
  var hashMapOf = kotlin_kotlin.$_$.e4;
  var sequenceOf = kotlin_kotlin.$_$.z7;
  var get_indices_0 = kotlin_kotlin.$_$.i4;
  var Builder = kotlin_kotlin.$_$.c8;
  var toHexString = kotlin_kotlin.$_$.i9;
  var replace_0 = kotlin_kotlin.$_$.b9;
  var toByte = kotlin_kotlin.$_$.e7;
  var numberToChar = kotlin_kotlin.$_$.z6;
  var isLowSurrogate = kotlin_kotlin.$_$.s8;
  var isHighSurrogate = kotlin_kotlin.$_$.p8;
  var isArray = kotlin_kotlin.$_$.t6;
  var Regex = kotlin_kotlin.$_$.d8;
  var Companion_instance_0 = kotlin_array_kap_util.$_$.k;
  var startsWith = kotlin_kotlin.$_$.f9;
  var split_0 = kotlin_kotlin.$_$.e9;
  //endregion
  //region block: pre-declaration
  function parseAndCombineFunctions(aplParser, currentFn, opPos) {
    var res = parseFunctionForOperatorRightArg(aplParser);
    var tmp;
    if (res instanceof Left) {
      var _destruct__k2r9zo = res.vz_1;
      var fn = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      var combinedFn = this.l2g(currentFn, fn, opPos);
      tmp = combinedFn.i2i(new FunctionInstantiation(opPos.c38_1, opPos.d38_1.g4w(VOID, VOID, VOID, VOID, pos.z4j_1, pos.a4k_1), opPos.e38_1));
    } else {
      if (res instanceof Right) {
        var _destruct__k2r9zo_0 = res.wz_1;
        var symbol = _destruct__k2r9zo_0.de();
        var pos_0 = _destruct__k2r9zo_0.ee();
        throw new ParseException('Expected function, got: ' + toString(symbol), pos_0);
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  }
  initMetadataForInterface(APLOperatorTwoArg, 'APLOperatorTwoArg');
  initMetadataForClass(CallAsyncOp, 'CallAsyncOp', CallAsyncOp, VOID, [APLOperatorTwoArg]);
  initMetadataForClass(APLFunction, 'APLFunction');
  initMetadataForClass(CallAsyncFunctionImpl, 'CallAsyncFunctionImpl', VOID, APLFunction);
  initMetadataForClass(CallAsyncFunction, 'CallAsyncFunction');
  initMetadataForClass(NoAxisAPLFunction, 'NoAxisAPLFunction', VOID, APLFunction);
  initMetadataForClass(IotaAPLFunctionImpl, 'IotaAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(IotaAPLFunction, 'IotaAPLFunction', IotaAPLFunction);
  initMetadataForClass(SizeCalculationMethod, 'SizeCalculationMethod', VOID, Enum);
  initMetadataForClass(RhoAPLFunctionImpl, 'RhoAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RhoAPLFunction, 'RhoAPLFunction', RhoAPLFunction);
  initMetadataForClass(IdentityAPLFunctionImpl, 'IdentityAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(IdentityAPLFunction, 'IdentityAPLFunction', IdentityAPLFunction);
  initMetadataForClass(HideAPLFunctionImpl, 'HideAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(HideAPLFunction, 'HideAPLFunction', HideAPLFunction);
  initMetadataForClass(AccessFromIndexAPLFunctionImpl, 'AccessFromIndexAPLFunctionImpl', VOID, APLFunction);
  initMetadataForClass(AccessFromIndexAPLFunction, 'AccessFromIndexAPLFunction', AccessFromIndexAPLFunction);
  initMetadataForClass(TakeAPLFunctionImpl, 'TakeAPLFunctionImpl', VOID, APLFunction);
  initMetadataForClass(TakeAPLFunction, 'TakeAPLFunction', TakeAPLFunction);
  initMetadataForClass(RotateFunction, 'RotateFunction', VOID, APLFunction);
  initMetadataForClass(RotateHorizFunctionImpl, 'RotateHorizFunctionImpl', VOID, RotateFunction);
  initMetadataForClass(RotateHorizFunction, 'RotateHorizFunction', RotateHorizFunction);
  initMetadataForClass(RotateVertFunctionImpl, 'RotateVertFunctionImpl', VOID, RotateFunction);
  initMetadataForClass(RotateVertFunction, 'RotateVertFunction', RotateVertFunction);
  initMetadataForClass(DropAPLFunctionImpl, 'DropAPLFunctionImpl', VOID, APLFunction);
  initMetadataForClass(DropAPLFunction, 'DropAPLFunction', DropAPLFunction);
  initMetadataForClass(TransposeFunctionImpl, 'TransposeFunctionImpl', VOID, APLFunction);
  initMetadataForClass(TransposeFunction, 'TransposeFunction', TransposeFunction);
  initMetadataForClass(MemberFunctionImpl, 'MemberFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MemberFunction, 'MemberFunction', MemberFunction);
  initMetadataForClass(FindFunctionImpl, 'FindFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(FindFunction, 'FindFunction', FindFunction);
  initMetadataForClass(SelectElementsFunctionImpl, 'SelectElementsFunctionImpl', VOID, APLFunction);
  initMetadataForClass(SelectElementsLastAxisFunctionImpl, 'SelectElementsLastAxisFunctionImpl', VOID, SelectElementsFunctionImpl);
  initMetadataForClass(SelectElementsLastAxisFunction, 'SelectElementsLastAxisFunction', SelectElementsLastAxisFunction);
  initMetadataForClass(SelectElementsFirstAxisFunctionImpl, 'SelectElementsFirstAxisFunctionImpl', VOID, SelectElementsFunctionImpl);
  initMetadataForClass(SelectElementsFirstAxisFunction, 'SelectElementsFirstAxisFunction', SelectElementsFirstAxisFunction);
  initMetadataForClass(FormatAPLFunctionImpl, 'FormatAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(FormatAPLFunction, 'FormatAPLFunction', FormatAPLFunction);
  initMetadataForClass(LocationWithValue, 'LocationWithValue');
  initMetadataForClass(WhereAPLFunctionImpl, 'WhereAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(WhereAPLFunction, 'WhereAPLFunction', WhereAPLFunction);
  initMetadataForClass(UniqueFunctionImpl, 'UniqueFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(UniqueFunction, 'UniqueFunction', UniqueFunction);
  initMetadataForClass(IntersectionAPLFunctionImpl, 'IntersectionAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(IntersectionAPLFunction, 'IntersectionAPLFunction', IntersectionAPLFunction);
  initMetadataForCompanion(Companion);
  initMetadataForClass(ParseNumberFunctionImpl, 'ParseNumberFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ParseNumberFunction, 'ParseNumberFunction', ParseNumberFunction);
  initMetadataForClass(CaseFunctionImpl, 'CaseFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(CaseFunction, 'CaseFunction', CaseFunction);
  initMetadataForClass(PickAPLFunctionImpl, 'PickAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(PickAPLFunction, 'PickAPLFunction', PickAPLFunction);
  initMetadataForClass(APLValue, 'APLValue');
  initMetadataForClass(AbstractAPLValue, 'AbstractAPLValue', VOID, APLValue);
  initMetadataForClass(APLArray, 'APLArray', VOID, AbstractAPLValue);
  initMetadataForClass(GenericResizedArray, 'GenericResizedArray', VOID, APLArray);
  initMetadataForClass(ResizedSingleValueGeneric, 'ResizedSingleValueGeneric', VOID, APLArray);
  initMetadataForClass(ResizedSingleValueLong, 'ResizedSingleValueLong', VOID, APLArray);
  initMetadataForClass(ResizedSingleValueDouble, 'ResizedSingleValueDouble', VOID, APLArray);
  initMetadataForClass(ResizedArrayEqualLength, 'ResizedArrayEqualLength', VOID, APLArray);
  initMetadataForObject(ResizedArrayImpls, 'ResizedArrayImpls');
  initMetadataForCompanion(Companion_0);
  function get_labels() {
    return null;
  }
  function get_defaultValue() {
    return DefaultMetadata_instance.hv();
  }
  function get_isDefault() {
    return false;
  }
  function collapse() {
    return new CollapsedAPLValueMetadata(this);
  }
  initMetadataForInterface(APLValueMetadata, 'APLValueMetadata');
  initMetadataForClass(TransposedAPLValueMetadata, 'TransposedAPLValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(TransposedAPLValue, 'TransposedAPLValue', VOID, APLArray);
  initMetadataForInterface(GenericIotaArrayLong, 'GenericIotaArrayLong');
  initMetadataForClass(IotaArray, 'IotaArray', VOID, APLArray);
  initMetadataForClass(IotaArrayLong, 'IotaArrayLong', VOID, APLArray, [APLArray, GenericIotaArrayLong]);
  initMetadataForClass(ResizedIotaArrayLong, 'ResizedIotaArrayLong', VOID, APLArray, [APLArray, GenericIotaArrayLong]);
  initMetadataForClass(FindIndexArray1DLeftArg, 'FindIndexArray1DLeftArg', VOID, APLArray);
  initMetadataForClass(FindIndexArrayMultiDimensionalLeftArg, 'FindIndexArrayMultiDimensionalLeftArg', VOID, APLArray);
  initMetadataForClass(ExtendedRavelArray, 'ExtendedRavelArray', VOID, APLArray);
  initMetadataForClass(DropArrayValueMetadata, 'DropArrayValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(DropArrayValue, 'DropArrayValue', VOID, APLArray);
  initMetadataForClass(TakeArrayValueMetadata, 'TakeArrayValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(TakeArrayValue, 'TakeArrayValue', VOID, APLArray);
  initMetadataForClass(OverlayReplacementValueMetadata, 'OverlayReplacementValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(OverlayReplacementValue, 'OverlayReplacementValue', VOID, APLArray);
  initMetadataForClass(MemberResultValueHashGeneric, 'MemberResultValueHashGeneric', VOID, APLArray);
  initMetadataForClass(FindResultValue, 'FindResultValue', VOID, APLArray);
  initMetadataForClass(CaseValue, 'CaseValue', VOID, APLArray);
  initMetadataForClass(PickResultValue, 'PickResultValue', VOID, APLArray);
  initMetadataForCompanion(Companion_1);
  initMetadataForClass(InverseAPLValueMetadata, 'InverseAPLValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(InverseAPLValue, 'InverseAPLValue', VOID, APLArray);
  initMetadataForCompanion(Companion_2);
  initMetadataForClass(RotatedAPLValueMetadata, 'RotatedAPLValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(RotatedAPLValue, 'RotatedAPLValue', VOID, APLArray);
  initMetadataForClass(MultiRotatedAPLValueMetadata, 'MultiRotatedAPLValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(MultiRotationRotatedAPLValue, 'MultiRotationRotatedAPLValue', VOID, APLArray);
  initMetadataForClass(SelectElementsValueMetadata, 'SelectElementsValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(SelectElementsValue, 'SelectElementsValue', VOID, APLArray);
  initMetadataForClass(PickOverlayReplacementValue, 'PickOverlayReplacementValue', VOID, APLArray);
  initMetadataForClass(AxisActionFactors, 'AxisActionFactors');
  function parseAndCombineFunctions_0(aplParser, currentFn, opPos) {
    return this.n2w(currentFn, opPos).i2i(new FunctionInstantiation(opPos.c38_1, opPos.d38_1.g4w(VOID, currentFn.t2g_1.w4j_1, currentFn.t2g_1.x4j_1), opPos.e38_1));
  }
  initMetadataForInterface(APLOperatorOneArg, 'APLOperatorOneArg');
  initMetadataForClass(BitwiseOp, 'BitwiseOp', BitwiseOp, VOID, [APLOperatorOneArg]);
  initMetadataForClass(MathCombineAPLFunction, 'MathCombineAPLFunction', VOID, APLFunction);
  initMetadataForClass(BitwiseCombineAPLFunction, 'BitwiseCombineAPLFunction', VOID, MathCombineAPLFunction);
  initMetadataForClass(BitwiseXorFunctionImpl, 'BitwiseXorFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseXorFunction, 'BitwiseXorFunction', BitwiseXorFunction);
  initMetadataForClass(BitwiseAndFunctionImpl, 'BitwiseAndFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseAndFunction, 'BitwiseAndFunction', BitwiseAndFunction);
  initMetadataForClass(BitwiseOrFunctionImpl, 'BitwiseOrFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseOrFunction, 'BitwiseOrFunction', BitwiseOrFunction);
  initMetadataForClass(BitwiseNotFunctionImpl, 'BitwiseNotFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseNotFunction, 'BitwiseNotFunction', BitwiseNotFunction);
  initMetadataForClass(BitwiseNandFunctionImpl, 'BitwiseNandFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseNandFunction, 'BitwiseNandFunction', BitwiseNandFunction);
  initMetadataForClass(BitwiseNorFunctionImpl, 'BitwiseNorFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseNorFunction, 'BitwiseNorFunction', BitwiseNorFunction);
  initMetadataForClass(BitwiseBitLengthFunctionImpl, 'BitwiseBitLengthFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseBitLengthFunction, 'BitwiseBitLengthFunction', BitwiseBitLengthFunction);
  initMetadataForClass(BitwiseShiftFunctionImpl, 'BitwiseShiftFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(BitwiseShiftFunction, 'BitwiseShiftFunction', BitwiseShiftFunction);
  initMetadataForClass(BitwiseCountBitsFunctionImpl, 'BitwiseCountBitsFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseCountBitsFunction, 'BitwiseCountBitsFunction', BitwiseCountBitsFunction);
  initMetadataForClass(BitwiseNorFunctionImpl_0, 'BitwiseNorFunctionImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseXnorFunction, 'BitwiseXnorFunction', BitwiseXnorFunction);
  initMetadataForClass(BitwiseLessThanImpl, 'BitwiseLessThanImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseLessThan, 'BitwiseLessThan', BitwiseLessThan);
  initMetadataForClass(BitwiseGreaterThanImpl, 'BitwiseGreaterThanImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseGreaterThan, 'BitwiseGreaterThan', BitwiseGreaterThan);
  initMetadataForClass(BitwiseLessThanOrEqualImpl, 'BitwiseLessThanOrEqualImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseLessThanOrEqual, 'BitwiseLessThanOrEqual', BitwiseLessThanOrEqual);
  initMetadataForClass(BitwiseGreaterThanOrEqualImpl, 'BitwiseGreaterThanOrEqualImpl', VOID, BitwiseCombineAPLFunction);
  initMetadataForClass(BitwiseGreaterThanOrEqual, 'BitwiseGreaterThanOrEqual', BitwiseGreaterThanOrEqual);
  initMetadataForClass(BooleanAndFunctionImpl, 'BooleanAndFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(BooleanAndFunction, 'BooleanAndFunction', BooleanAndFunction);
  initMetadataForClass(BooleanOrFunctionImpl, 'BooleanOrFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(BooleanOrFunction, 'BooleanOrFunction', BooleanOrFunction);
  initMetadataForClass(CommuteFunctionImpl, 'CommuteFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(CommuteFunctionDescriptor, 'CommuteFunctionDescriptor');
  initMetadataForClass(CommuteOp, 'CommuteOp', CommuteOp, VOID, [APLOperatorOneArg]);
  initMetadataForClass(EqualsAPLFunctionImpl, 'EqualsAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(EqualsAPLFunction, 'EqualsAPLFunction', EqualsAPLFunction);
  initMetadataForClass(NotEqualsAPLFunctionImpl, 'NotEqualsAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(NotEqualsAPLFunction, 'NotEqualsAPLFunction', NotEqualsAPLFunction);
  initMetadataForClass(LessThanResultMetadata, 'LessThanResultMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(LessThanAPLFunctionImpl, 'LessThanAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(LessThanAPLFunction, 'LessThanAPLFunction', LessThanAPLFunction);
  initMetadataForClass(GreaterThanResultMetadata, 'GreaterThanResultMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(GreaterThanAPLFunctionImpl, 'GreaterThanAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(GreaterThanAPLFunction, 'GreaterThanAPLFunction', GreaterThanAPLFunction);
  initMetadataForClass(LessThanEqualAPLFunctionImpl, 'LessThanEqualAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(LessThanEqualAPLFunction, 'LessThanEqualAPLFunction', LessThanEqualAPLFunction);
  initMetadataForClass(GreaterThanEqualAPLFunctionImpl, 'GreaterThanEqualAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(GreaterThanEqualAPLFunction, 'GreaterThanEqualAPLFunction', GreaterThanEqualAPLFunction);
  initMetadataForClass(CompareFunctionImpl, 'CompareFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(CompareFunction, 'CompareFunction', CompareFunction);
  initMetadataForClass(CompareNotEqualFunctionImpl, 'CompareNotEqualFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(CompareNotEqualFunction, 'CompareNotEqualFunction', CompareNotEqualFunction);
  initMetadataForClass(CompareObjectsFunctionImpl, 'CompareObjectsFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(CompareObjectsFunction, 'CompareObjectsFunction', CompareObjectsFunction);
  initMetadataForObject(NumericRelationErrors, 'NumericRelationErrors');
  initMetadataForClass(ConcatenateAPLFunctionImpl, 'ConcatenateAPLFunctionImpl', VOID, APLFunction);
  initMetadataForClass(ConcatenateAPLFunctionLastAxisImpl, 'ConcatenateAPLFunctionLastAxisImpl', VOID, ConcatenateAPLFunctionImpl);
  initMetadataForClass(ConcatenateAPLFunctionLastAxis, 'ConcatenateAPLFunctionLastAxis', ConcatenateAPLFunctionLastAxis);
  initMetadataForClass(ConcatenateAPLFunctionFirstAxisImpl, 'ConcatenateAPLFunctionFirstAxisImpl', VOID, ConcatenateAPLFunctionImpl);
  initMetadataForClass(ConcatenateAPLFunctionFirstAxis, 'ConcatenateAPLFunctionFirstAxis', ConcatenateAPLFunctionFirstAxis);
  initMetadataForClass(Concatenated1DArraysMetadata, 'Concatenated1DArraysMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(Concatenated1DArrays, 'Concatenated1DArrays', VOID, APLArray);
  initMetadataForClass(ConcatenatedMultiDimensionalArraysMetadata, 'ConcatenatedMultiDimensionalArraysMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(ConcatenatedMultiDimensionalArrays, 'ConcatenatedMultiDimensionalArrays', VOID, APLArray);
  initMetadataForClass(EncloseAPLFunctionImpl, 'EncloseAPLFunctionImpl', VOID, APLFunction);
  initMetadataForClass(EncloseAPLFunction, 'EncloseAPLFunction', EncloseAPLFunction);
  initMetadataForClass(DiscloseAPLFunctionImpl, 'DiscloseAPLFunctionImpl', VOID, APLFunction);
  initMetadataForCompanion(Companion_3);
  initMetadataForClass(DiscloseAPLFunction, 'DiscloseAPLFunction', DiscloseAPLFunction);
  initMetadataForClass(PartitionedEncloseFunctionImpl, 'PartitionedEncloseFunctionImpl', VOID, APLFunction);
  initMetadataForClass(PartitionedEncloseFunction, 'PartitionedEncloseFunction', PartitionedEncloseFunction);
  initMetadataForClass(AxisMultiDimensionEnclosedValue, 'AxisMultiDimensionEnclosedValue', VOID, APLArray);
  initMetadataForClass(DisclosedArrayValue, 'DisclosedArrayValue', VOID, APLArray);
  initMetadataForClass(AxisEnclosedValue, 'AxisEnclosedValue', VOID, APLArray);
  initMetadataForClass(PartitionedValue, 'PartitionedValue', VOID, APLArray);
  initMetadataForClass(ReturnFunctionImpl, 'ReturnFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReturnFunction, 'ReturnFunction', ReturnFunction);
  initMetadataForClass(ThrowFunctionImpl, 'ThrowFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ThrowFunction, 'ThrowFunction', ThrowFunction);
  initMetadataForClass(CatchOperator$CatchFunctionDescriptor$make$1, VOID, VOID, NoAxisAPLFunction);
  initMetadataForClass(CatchFunctionDescriptor, 'CatchFunctionDescriptor');
  initMetadataForClass(CatchOperator, 'CatchOperator', CatchOperator, VOID, [APLOperatorOneArg]);
  initMetadataForClass(LabelsFunctionImpl, 'LabelsFunctionImpl', VOID, APLFunction);
  initMetadataForClass(LabelsFunction, 'LabelsFunction', LabelsFunction);
  initMetadataForClass(UnwindProtectAPLFunctionImpl, 'UnwindProtectAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(UnwindProtectAPLFunction, 'UnwindProtectAPLFunction', UnwindProtectAPLFunction);
  initMetadataForClass(DeferAPLOperator$DeferAPLFunction$make$1, VOID, VOID, NoAxisAPLFunction);
  initMetadataForClass(DeferAPLFunction, 'DeferAPLFunction');
  initMetadataForClass(DeferAPLOperator, 'DeferAPLOperator', DeferAPLOperator, VOID, [APLOperatorOneArg]);
  initMetadataForClass(EnsureTypeFunctionImpl, 'EnsureTypeFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(EnsureTypeFunction, 'EnsureTypeFunction');
  initMetadataForClass(AsBigintFunctionImpl, 'AsBigintFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(AsBigintFunction, 'AsBigintFunction', AsBigintFunction);
  initMetadataForClass(AsRationalFunctionImpl, 'AsRationalFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(AsRationalFunction, 'AsRationalFunction', AsRationalFunction);
  initMetadataForClass(AtLeaveScopeOperator$AtLeaveScopeFunctionDescriptor$make$1, VOID, VOID, APLFunction);
  initMetadataForClass(AtLeaveScopeFunctionDescriptor, 'AtLeaveScopeFunctionDescriptor');
  initMetadataForClass(AtLeaveScopeOperator, 'AtLeaveScopeOperator', AtLeaveScopeOperator, VOID, [APLOperatorOneArg]);
  initMetadataForClass(ToListFunctionImpl, 'ToListFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ToListFunction, 'ToListFunction', ToListFunction);
  initMetadataForClass(FromListFunctionImpl, 'FromListFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(FromListFunction, 'FromListFunction', FromListFunction);
  initMetadataForClass(ToBooleanFunctionImpl, 'ToBooleanFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ToBooleanFunction, 'ToBooleanFunction', ToBooleanFunction);
  initMetadataForClass(HashCodeAPLFunctionImpl, 'HashCodeAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(HashCodeAPLFunction, 'HashCodeAPLFunction', HashCodeAPLFunction);
  initMetadataForClass(IsStringFunctionImpl, 'IsStringFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(IsStringFunction, 'IsStringFunction', IsStringFunction);
  initMetadataForClass(TypeofFunctionImpl, 'TypeofFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(TypeofFunction, 'TypeofFunction', TypeofFunction);
  initMetadataForClass(IsLocallyBoundFunctionImpl, 'IsLocallyBoundFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(IsLocallyBoundFunction, 'IsLocallyBoundFunction', IsLocallyBoundFunction);
  initMetadataForClass(CompFunctionImpl, 'CompFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(CompFunction, 'CompFunction', CompFunction);
  initMetadataForClass(SystemParameterFunctionImpl, 'SystemParameterFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(SystemParameterFunction, 'SystemParameterFunction', SystemParameterFunction);
  initMetadataForClass(InternalValueInfoFunctionImpl, 'InternalValueInfoFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(InternalValueInfoFunction, 'InternalValueInfoFunction', InternalValueInfoFunction);
  initMetadataForClass(ListModulesFunctionImpl, 'ListModulesFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ListModulesFunction, 'ListModulesFunction', ListModulesFunction);
  initMetadataForClass(HasLabelsFunctionImpl, 'HasLabelsFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(HasLabelsFunction, 'HasLabelsFunction', HasLabelsFunction);
  initMetadataForClass(ThrowableTag, 'ThrowableTag');
  initMetadataForClass(APLGenericException, 'APLGenericException', VOID, Exception);
  initMetadataForClass(APLEvalException, 'APLEvalException', VOID, APLGenericException);
  initMetadataForClass(TagCatch, 'TagCatch', VOID, APLEvalException);
  initMetadataForClass(DeferredAPLValue1Arg, 'DeferredAPLValue1Arg', VOID, APLArray);
  initMetadataForClass(DeferredAPLValue2Arg, 'DeferredAPLValue2Arg', VOID, APLArray);
  initMetadataForClass(AbstractDelegatedValue, 'AbstractDelegatedValue', VOID, APLValue);
  initMetadataForClass(DelegatedValue, 'DelegatedValue', VOID, AbstractDelegatedValue);
  initMetadataForClass(ForcedElementTypeArray, 'ForcedElementTypeArray', VOID, DelegatedValue);
  initMetadataForClass(SystemParameterNotFound, 'SystemParameterNotFound', VOID, APLEvalException);
  initMetadataForClass(ExpandFunctionImpl, 'ExpandFunctionImpl', VOID, APLFunction);
  initMetadataForClass(ExpandLastAxisFunctionImpl, 'ExpandLastAxisFunctionImpl', VOID, ExpandFunctionImpl);
  initMetadataForClass(ExpandLastAxisFunction, 'ExpandLastAxisFunction', ExpandLastAxisFunction);
  initMetadataForClass(ExpandFirstAxisFunctionImpl, 'ExpandFirstAxisFunctionImpl', VOID, ExpandFunctionImpl);
  initMetadataForClass(ExpandFirstAxisFunction, 'ExpandFirstAxisFunction', ExpandFirstAxisFunction);
  initMetadataForClass(ExpandValue, 'ExpandValue', VOID, APLArray);
  initMetadataForClass(ForEachOp, 'ForEachOp', ForEachOp, VOID, [APLOperatorOneArg]);
  initMetadataForClass(ForEachResult2Arg, 'ForEachResult2Arg', VOID, APLArray);
  initMetadataForInterface(ParallelSupported, 'ParallelSupported');
  initMetadataForClass(ForEachFunctionImpl, 'ForEachFunctionImpl', VOID, APLFunction, [APLFunction, ParallelSupported]);
  initMetadataForCompanion(Companion_4);
  initMetadataForClass(ForEachFunctionDescriptor, 'ForEachFunctionDescriptor');
  initMetadataForClass(ForEachResult1ArgMetadata, 'ForEachResult1ArgMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(ForEachResult1Arg, 'ForEachResult1Arg', VOID, APLArray);
  initMetadataForClass(ConcatenatedArraysValue, 'ConcatenatedArraysValue', VOID, APLArray);
  initMetadataForClass(GroupFunctionImpl, 'GroupFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(GroupFunction, 'GroupFunction', GroupFunction);
  initMetadataForClass(HttpRequestFunctionImpl, 'HttpRequestFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(HttpRequestFunction, 'HttpRequestFunction');
  initMetadataForClass(ReadFunctionImpl, 'ReadFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReadFunction, 'ReadFunction', ReadFunction);
  initMetadataForClass(WriteFunctionImpl, 'WriteFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(WriteFunction, 'WriteFunction', WriteFunction);
  initMetadataForClass(PrintAPLFunctionImpl, 'PrintAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(PrintAPLFunction, 'PrintAPLFunction', PrintAPLFunction);
  initMetadataForClass(PrintLnAPLFunctionImpl, 'PrintLnAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(PrintLnAPLFunction, 'PrintLnAPLFunction', PrintLnAPLFunction);
  initMetadataForClass(ReadLineFunctionImpl, 'ReadLineFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReadLineFunction, 'ReadLineFunction', ReadLineFunction);
  initMetadataForClass(WriteCsvFunctionImpl, 'WriteCsvFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(WriteCsvFunction, 'WriteCsvFunction', WriteCsvFunction);
  initMetadataForClass(ReadCsvFunctionImpl, 'ReadCsvFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReadCsvFunction, 'ReadCsvFunction', ReadCsvFunction);
  initMetadataForClass(ReadFileFunctionImpl, 'ReadFileFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReadFileFunction, 'ReadFileFunction', ReadFileFunction);
  initMetadataForClass(LoadFunctionImpl, 'LoadFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(LoadFunction, 'LoadFunction', LoadFunction);
  initMetadataForClass(ReaddirFunctionImpl, 'ReaddirFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(OutputType, 'OutputType', VOID, Enum);
  initMetadataForClass(ReaddirFunction, 'ReaddirFunction', ReaddirFunction);
  initMetadataForClass(ToHtmlFunctionImpl, 'ToHtmlFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ToHtmlFunction, 'ToHtmlFunction', ToHtmlFunction);
  initMetadataForClass(OpenFunctionImpl, 'OpenFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(OpenOptions, 'OpenOptions');
  initMetadataForClass(StreamMode, 'StreamMode', VOID, Enum);
  initMetadataForClass(StreamType, 'StreamType', VOID, Enum);
  initMetadataForClass(OpenFunction, 'OpenFunction', OpenFunction);
  initMetadataForClass(ReadFromStreamFunctionImpl, 'ReadFromStreamFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReadFromStreamFunction, 'ReadFromStreamFunction', ReadFromStreamFunction);
  initMetadataForClass(ReadLineFromStreamFunctionImpl, 'ReadLineFromStreamFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReadLineFromStreamFunction, 'ReadLineFromStreamFunction', ReadLineFromStreamFunction);
  initMetadataForClass(WriteToStreamFunctionImpl, 'WriteToStreamFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(WriteToStreamFunction, 'WriteToStreamFunction', WriteToStreamFunction);
  initMetadataForClass(APLSingleValue, 'APLSingleValue', VOID, AbstractAPLValue);
  initMetadataForClass(KotlinObjectWrappedValue, 'KotlinObjectWrappedValue', VOID, APLSingleValue);
  initMetadataForCompanion(Companion_5);
  initMetadataForClass(APLCharInputStream, 'APLCharInputStream', VOID, KotlinObjectWrappedValue);
  initMetadataForCompanion(Companion_6);
  initMetadataForClass(APLBinaryInputStream, 'APLBinaryInputStream', VOID, KotlinObjectWrappedValue);
  initMetadataForCompanion(Companion_7);
  initMetadataForClass(APLCharOutputStream, 'APLCharOutputStream', VOID, KotlinObjectWrappedValue);
  initMetadataForCompanion(Companion_8);
  initMetadataForClass(APLBinaryOutputStream, 'APLBinaryOutputStream', VOID, KotlinObjectWrappedValue);
  initMetadataForInterface(ClosableHandler, 'ClosableHandler');
  initMetadataForClass(sam$com_dhsdevelopments_kap_ClosableHandler$0, 'sam$com_dhsdevelopments_kap_ClosableHandler$0', VOID, VOID, [ClosableHandler, FunctionAdapter]);
  initMetadataForClass(MapAPLFunctionImpl, 'MapAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MapAPLFunction, 'MapAPLFunction', MapAPLFunction);
  initMetadataForClass(MapGetAPLFunctionImpl, 'MapGetAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MapGetAPLFunction, 'MapGetAPLFunction', MapGetAPLFunction);
  initMetadataForClass(MapPutAPLFunctionImpl, 'MapPutAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MapPutAPLFunction, 'MapPutAPLFunction', MapPutAPLFunction);
  initMetadataForClass(MapRemoveAPLFunctionImpl, 'MapRemoveAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MapRemoveAPLFunction, 'MapRemoveAPLFunction', MapRemoveAPLFunction);
  initMetadataForClass(MapKeyValuesFunctionImpl, 'MapKeyValuesFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MapKeyValuesFunction, 'MapKeyValuesFunction', MapKeyValuesFunction);
  initMetadataForClass(MapSizeFunctionImpl, 'MapSizeFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MapSizeFunction, 'MapSizeFunction', MapSizeFunction);
  initMetadataForClass(MapKeysFunctionImpl, 'MapKeysFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MapKeysFunction, 'MapKeysFunction', MapKeysFunction);
  initMetadataForClass(MapLookupResult, 'MapLookupResult', VOID, APLArray);
  initMetadataForClass(AddAPLFunctionImpl, 'AddAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(AddAPLFunction, 'AddAPLFunction', AddAPLFunction);
  initMetadataForClass(SubAPLFunctionImpl, 'SubAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(SubAPLFunction, 'SubAPLFunction', SubAPLFunction);
  initMetadataForClass(MulAPLFunctionImpl, 'MulAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(MulAPLFunction, 'MulAPLFunction', MulAPLFunction);
  initMetadataForCompanion(Companion_9);
  initMetadataForClass(DivAPLFunctionImpl, 'DivAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(DivAPLFunction, 'DivAPLFunction', DivAPLFunction);
  initMetadataForClass(MathNumericCombineAPLFunction, 'MathNumericCombineAPLFunction', VOID, MathCombineAPLFunction);
  initMetadataForClass(PowerAPLFunctionImpl, 'PowerAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(PowerAPLFunction, 'PowerAPLFunction', PowerAPLFunction);
  initMetadataForClass(LogAPLFunctionImpl, 'LogAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(LogAPLFunction, 'LogAPLFunction', LogAPLFunction);
  initMetadataForClass(AndAPLFunctionImpl, 'AndAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(AndAPLFunction, 'AndAPLFunction', AndAPLFunction);
  initMetadataForClass(OrAPLFunctionImpl, 'OrAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(OrAPLFunction, 'OrAPLFunction', OrAPLFunction);
  initMetadataForClass(MinAPLFunctionImpl, 'MinAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(MinAPLFunction, 'MinAPLFunction', MinAPLFunction);
  initMetadataForClass(MaxAPLFunctionImpl, 'MaxAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(MaxAPLFunction, 'MaxAPLFunction', MaxAPLFunction);
  initMetadataForClass(ModAPLFunctionImpl, 'ModAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(ModAPLFunction, 'ModAPLFunction', ModAPLFunction);
  initMetadataForClass(NotAPLFunctionImpl, 'NotAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(NotAPLFunction, 'NotAPLFunction', NotAPLFunction);
  initMetadataForClass(NandAPLFunctionImpl, 'NandAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(NandAPLFunction, 'NandAPLFunction', NandAPLFunction);
  initMetadataForClass(NorAPLFunctionImpl, 'NorAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(NorAPLFunction, 'NorAPLFunction', NorAPLFunction);
  initMetadataForClass(BinomialAPLFunctionImpl, 'BinomialAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(BinomialAPLFunction, 'BinomialAPLFunction', BinomialAPLFunction);
  initMetadataForClass(RationaliseAPLFunctionImpl, 'RationaliseAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(RationaliseAPLFunction, 'RationaliseAPLFunction', RationaliseAPLFunction);
  initMetadataForClass(RenderRationalFunctionImpl, 'RenderRationalFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RenderRationalFunction, 'RenderRationalFunction', RenderRationalFunction);
  initMetadataForClass(SinAPLFunctionImpl, 'SinAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(SinAPLFunction, 'SinAPLFunction', SinAPLFunction);
  initMetadataForClass(CosAPLFunctionImpl, 'CosAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(CosAPLFunction, 'CosAPLFunction', CosAPLFunction);
  initMetadataForClass(TanAPLFunctionImpl, 'TanAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(TanAPLFunction, 'TanAPLFunction', TanAPLFunction);
  initMetadataForClass(AsinAPLFunctionImpl, 'AsinAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(AsinAPLFunction, 'AsinAPLFunction', AsinAPLFunction);
  initMetadataForClass(AcosAPLFunctionImpl, 'AcosAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(AcosAPLFunction, 'AcosAPLFunction', AcosAPLFunction);
  initMetadataForClass(AtanAPLFunctionImpl, 'AtanAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(AtanAPLFunction, 'AtanAPLFunction', AtanAPLFunction);
  initMetadataForClass(SinhAPLFunctionImpl, 'SinhAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(SinhAPLFunction, 'SinhAPLFunction', SinhAPLFunction);
  initMetadataForClass(CoshAPLFunctionImpl, 'CoshAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(CoshAPLFunction, 'CoshAPLFunction', CoshAPLFunction);
  initMetadataForClass(TanhAPLFunctionImpl, 'TanhAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(TanhAPLFunction, 'TanhAPLFunction', TanhAPLFunction);
  initMetadataForClass(AsinhAPLFunctionImpl, 'AsinhAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(AsinhAPLFunction, 'AsinhAPLFunction', AsinhAPLFunction);
  initMetadataForClass(AcoshAPLFunctionImpl, 'AcoshAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(AcoshAPLFunction, 'AcoshAPLFunction', AcoshAPLFunction);
  initMetadataForClass(AtanhAPLFunctionImpl, 'AtanhAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(AtanhAPLFunction, 'AtanhAPLFunction', AtanhAPLFunction);
  initMetadataForClass(SqrtAPLFunctionImpl, 'SqrtAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(SqrtAPLFunction, 'SqrtAPLFunction', SqrtAPLFunction);
  initMetadataForClass(GcdAPLFunctionImpl, 'GcdAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(GcdAPLFunction, 'GcdAPLFunction', GcdAPLFunction);
  initMetadataForClass(LcmAPLFunctionImpl, 'LcmAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(LcmAPLFunction, 'LcmAPLFunction', LcmAPLFunction);
  initMetadataForClass(NumeratorAPLFunctionImpl, 'NumeratorAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(NumeratorAPLFunction, 'NumeratorAPLFunction', NumeratorAPLFunction);
  initMetadataForClass(DenominatorAPLFunctionImpl, 'DenominatorAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(DenominatorAPLFunction, 'DenominatorAPLFunction', DenominatorAPLFunction);
  initMetadataForClass(RealpartAPLFunctionImpl, 'RealpartAPLFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(RealpartAPLFunction, 'RealpartAPLFunction', RealpartAPLFunction);
  initMetadataForClass(ImagpartAPLFunction, 'ImagpartAPLFunction', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(ImagpartAPLFunction_0, 'ImagpartAPLFunction', ImagpartAPLFunction_0);
  initMetadataForClass(ComplexFloorFunctionImpl, 'ComplexFloorFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(ComplexFloorFunction, 'ComplexFloorFunction', ComplexFloorFunction);
  initMetadataForClass(ComplexCeilFunctionImpl, 'ComplexCeilFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(ComplexCeilFunction, 'ComplexCeilFunction', ComplexCeilFunction);
  initMetadataForClass(RoundNumFunctionImpl, 'RoundNumFunctionImpl', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(RoundNumFunction, 'RoundNumFunction', RoundNumFunction);
  initMetadataForInterface(CellSumFunction1ArgLong, 'CellSumFunction1ArgLong');
  initMetadataForClass(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgLong$0, 'sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgLong$0', VOID, VOID, [CellSumFunction1ArgLong, FunctionAdapter]);
  initMetadataForInterface(CellSumFunction1ArgDouble, 'CellSumFunction1ArgDouble');
  initMetadataForClass(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgDouble$0, 'sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgDouble$0', VOID, VOID, [CellSumFunction1ArgDouble, FunctionAdapter]);
  initMetadataForInterface(CellSumFunction1ArgGeneric, 'CellSumFunction1ArgGeneric');
  initMetadataForClass(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgGeneric$0, 'sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgGeneric$0', VOID, VOID, [CellSumFunction1ArgGeneric, FunctionAdapter]);
  initMetadataForClass(LongArraySum1Arg, 'LongArraySum1Arg', VOID, APLArray);
  initMetadataForClass(DoubleArraySum1Arg, 'DoubleArraySum1Arg', VOID, APLArray);
  initMetadataForClass(GenericArraySum1ArgLongResult, 'GenericArraySum1ArgLongResult', VOID, APLArray);
  initMetadataForClass(GenericArraySumDoubleResult, 'GenericArraySumDoubleResult', VOID, APLArray);
  initMetadataForClass(GenericArraySum1Arg, 'GenericArraySum1Arg', VOID, APLArray);
  initMetadataForCompanion(Companion_10);
  initMetadataForClass(LongArraySum2ArgsLeftScalar, 'LongArraySum2ArgsLeftScalar', VOID, APLArray);
  initMetadataForClass(DoubleArraySum2ArgsLeftScalar, 'DoubleArraySum2ArgsLeftScalar', VOID, APLArray);
  initMetadataForCompanion(Companion_11);
  initMetadataForClass(LongArraySum2ArgsRightScalar, 'LongArraySum2ArgsRightScalar', VOID, APLArray);
  initMetadataForClass(DoubleArraySum2ArgsRightScalar, 'DoubleArraySum2ArgsRightScalar', VOID, APLArray);
  initMetadataForCompanion(Companion_12);
  initMetadataForClass(LongArraySum2Args, 'LongArraySum2Args', VOID, APLArray);
  initMetadataForClass(DoubleArraySum2Args, 'DoubleArraySum2Args', VOID, APLArray);
  initMetadataForClass(GenericArraySum2Args, 'GenericArraySum2Args', VOID, APLArray);
  initMetadataForClass(GenericArraySum2ArgsGeneric, 'GenericArraySum2ArgsGeneric', VOID, GenericArraySum2Args);
  initMetadataForClass(GenericArraySum2ArgsLong, 'GenericArraySum2ArgsLong', VOID, GenericArraySum2Args);
  initMetadataForClass(GenericArraySum2ArgsDouble, 'GenericArraySum2ArgsDouble', VOID, GenericArraySum2Args);
  initMetadataForClass(PowerAPLOperator$PowerAPLFunctionWithValueDescriptor$make$1, VOID, VOID, APLFunction);
  initMetadataForClass(PowerAPLOperator$PowerAPLFunctionDescriptor$make$1, VOID, VOID, APLFunction);
  initMetadataForClass(PowerAPLFunctionWithValueDescriptor, 'PowerAPLFunctionWithValueDescriptor');
  initMetadataForClass(PowerAPLFunctionDescriptor, 'PowerAPLFunctionDescriptor');
  function parseAndCombineFunctions_1(aplParser, currentFn, opPos) {
    var rightArg = aplParser.a4l();
    var tmp;
    if (rightArg instanceof InstrParseResult) {
      aplParser.u4k_1.l52(rightArg.c4l_1);
      tmp = this.r42(currentFn, rightArg.l4l_1, opPos).i2i(opPos);
    } else {
      if (rightArg instanceof FnParseResult) {
        aplParser.u4k_1.l52(rightArg.c4l_1);
        tmp = this.s42(currentFn, rightArg.u52_1, opPos).i2i(opPos);
      } else {
        if (rightArg instanceof EmptyParseResult) {
          throw new ParseException('Expected function or value', rightArg.d4l_1);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  }
  initMetadataForInterface(APLOperatorCombinedRightArg, 'APLOperatorCombinedRightArg');
  initMetadataForClass(PowerAPLOperator, 'PowerAPLOperator', PowerAPLOperator, VOID, [APLOperatorCombinedRightArg]);
  initMetadataForClass(RankOperator$combineFunction$1, VOID, VOID, APLFunction);
  function parseAndCombineFunctions_2(aplParser, currentFn, opPos) {
    var rightArg = aplParser.a4l();
    if (!(rightArg instanceof InstrParseResult)) {
      throw new ParseException('Right argument is not a value', rightArg.d4l_1);
    }
    aplParser.u4k_1.l52(rightArg.c4l_1);
    return this.a43(currentFn, rightArg.l4l_1, opPos);
  }
  initMetadataForInterface(APLOperatorValueRightArg, 'APLOperatorValueRightArg');
  initMetadataForClass(RankOperator, 'RankOperator', RankOperator, VOID, [APLOperatorValueRightArg]);
  initMetadataForClass(ComposeOp, 'ComposeOp', ComposeOp, VOID, [APLOperatorTwoArg]);
  initMetadataForClass(OverOp, 'OverOp', OverOp, VOID, [APLOperatorTwoArg]);
  initMetadataForClass(ReverseComposeOp, 'ReverseComposeOp', ReverseComposeOp, VOID, [APLOperatorTwoArg]);
  initMetadataForClass(StructuralUnderOp, 'StructuralUnderOp', StructuralUnderOp, VOID, [APLOperatorTwoArg]);
  initMetadataForClass(ComposeFunctionDescriptor$ComposeFunctionImpl$evalWithStructuralUnder1Arg$nb$1, VOID, VOID, APLFunction);
  initMetadataForClass(ComposeFunctionDescriptor$ComposeFunctionImpl$evalWithStructuralUnder2Arg$nb$1, VOID, VOID, APLFunction);
  initMetadataForClass(ComposeFunctionImpl, 'ComposeFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ComposeFunctionDescriptor, 'ComposeFunctionDescriptor');
  initMetadataForClass(OverDerivedFunctionImpl, 'OverDerivedFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(OverDerivedFunctionDescriptor, 'OverDerivedFunctionDescriptor');
  initMetadataForClass(ReverseComposeFunctionImpl, 'ReverseComposeFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReverseComposeFunctionDescriptor, 'ReverseComposeFunctionDescriptor');
  initMetadataForClass(StructuralUnderDerivedFunctionImpl, 'StructuralUnderDerivedFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(StructuralUnderDerivedFunction, 'StructuralUnderDerivedFunction');
  initMetadataForClass(NullFunctionImpl, 'NullFunctionImpl', VOID, APLFunction);
  initMetadataForClass(NullFunction, 'NullFunction', NullFunction);
  initMetadataForClass(OuterJoinOp, 'OuterJoinOp', OuterJoinOp, VOID, [APLOperatorOneArg]);
  initMetadataForClass(OuterJoinFunctionImpl, 'OuterJoinFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(InnerJoinFunctionImpl, 'InnerJoinFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(OuterJoinFunctionDescriptor, 'OuterJoinFunctionDescriptor');
  initMetadataForClass(InnerJoinFunctionDescriptor, 'InnerJoinFunctionDescriptor');
  initMetadataForClass(OuterInnerJoinOp, 'OuterInnerJoinOp', OuterInnerJoinOp, VOID, [APLOperatorTwoArg]);
  initMetadataForClass(OuterJoinResult, 'OuterJoinResult', VOID, APLArray);
  initMetadataForClass(OuterJoinResultLong, 'OuterJoinResultLong', VOID, OuterJoinResult);
  initMetadataForClass(OuterJoinResultDouble, 'OuterJoinResultDouble', VOID, OuterJoinResult);
  initMetadataForClass(InnerJoinResult, 'InnerJoinResult', VOID, APLArray);
  initMetadataForClass(StridedSubarray, 'StridedSubarray', VOID, APLArray);
  initMetadataForClass(PairAPLFunctionImpl, 'PairAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(PairAPLFunction, 'PairAPLFunction', PairAPLFunction);
  initMetadataForClass(ParallelOp, 'ParallelOp', ParallelOp, VOID, [APLOperatorOneArg]);
  initMetadataForClass(ParallelTaskList, 'ParallelTaskList');
  initMetadataForClass(ParallelCompressTask, 'ParallelCompressTask');
  initMetadataForClass(ParallelCompressResult, 'ParallelCompressResult');
  initMetadataForCompanion(Companion_13);
  initMetadataForClass(ParallelCompressTaskList, 'ParallelCompressTaskList', VOID, ParallelTaskList);
  initMetadataForClass(ParallelHandlerImpl, 'ParallelHandlerImpl', VOID, APLFunction);
  initMetadataForClass(ParallelHandler, 'ParallelHandler');
  initMetadataForClass(ParallelWrappedException, 'ParallelWrappedException', VOID, APLEvalException);
  initMetadataForClass(ConstantParallelTaskList, 'ConstantParallelTaskList', VOID, ParallelTaskList);
  initMetadataForClass(FromHtmlTableFunctionImpl, 'FromHtmlTableFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(FromHtmlTableFunction, 'FromHtmlTableFunction', FromHtmlTableFunction);
  initMetadataForClass(HtmlParserException, 'HtmlParserException', VOID, APLEvalException);
  initMetadataForClass(FactorAPLFunctionImpl, 'FactorAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(FactorAPLFunction, 'FactorAPLFunction', FactorAPLFunction);
  initMetadataForClass(DivisorsAPLFunctionImpl, 'DivisorsAPLFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(DivisorsAPLFunction, 'DivisorsAPLFunction', DivisorsAPLFunction);
  initMetadataForClass(RandomAPLFunctionImpl, 'RandomAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RandomAPLFunction, 'RandomAPLFunction', RandomAPLFunction);
  initMetadataForClass(RangeFunctionImpl, 'RangeFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RangeFunction, 'RangeFunction', RangeFunction);
  initMetadataForClass(RangeValueGeneric, 'RangeValueGeneric', VOID, APLArray);
  initMetadataForClass(RangeValueLong, 'RangeValueLong', VOID, RangeValueGeneric);
  initMetadataForClass(RangeValueChar, 'RangeValueChar', VOID, RangeValueGeneric);
  initMetadataForClass(RangeValueBigInt, 'RangeValueBigInt', VOID, RangeValueGeneric);
  initMetadataForCompanion(Companion_14);
  initMetadataForClass(ReduceOpFunctionDescriptor, 'ReduceOpFunctionDescriptor');
  initMetadataForClass(ReduceOpLastAxis, 'ReduceOpLastAxis', ReduceOpLastAxis, VOID, [APLOperatorOneArg]);
  initMetadataForClass(ReduceOpFunctionDescriptor_0, 'ReduceOpFunctionDescriptor');
  initMetadataForClass(ReduceOpFirstAxis, 'ReduceOpFirstAxis', ReduceOpFirstAxis, VOID, [APLOperatorOneArg]);
  initMetadataForClass(ScanOpFunctionDescriptor, 'ScanOpFunctionDescriptor');
  initMetadataForClass(ScanLastAxisOp, 'ScanLastAxisOp', ScanLastAxisOp, VOID, [APLOperatorOneArg]);
  initMetadataForClass(ScanOpFunctionDescriptor_0, 'ScanOpFunctionDescriptor');
  initMetadataForClass(ScanFirstAxisOp, 'ScanFirstAxisOp', ScanFirstAxisOp, VOID, [APLOperatorOneArg]);
  initMetadataForClass(ReduceResult1Arg, 'ReduceResult1Arg', VOID, APLArray);
  initMetadataForClass(ReduceFunctionImpl, 'ReduceFunctionImpl', VOID, APLFunction);
  initMetadataForClass(ReduceFunctionImplLastAxis, 'ReduceFunctionImplLastAxis', VOID, ReduceFunctionImpl);
  initMetadataForClass(ReduceFunctionImplFirstAxis, 'ReduceFunctionImplFirstAxis', VOID, ReduceFunctionImpl);
  initMetadataForClass(ScanFunctionImpl, 'ScanFunctionImpl', VOID, APLFunction);
  initMetadataForClass(ScanLastAxisFunctionImpl, 'ScanLastAxisFunctionImpl', VOID, ScanFunctionImpl);
  initMetadataForClass(ScanFirstAxisFunctionImpl, 'ScanFirstAxisFunctionImpl', VOID, ScanFunctionImpl);
  initMetadataForClass(ReduceNWiseResultValue, 'ReduceNWiseResultValue', VOID, APLArray);
  initMetadataForClass(ScanResult1Arg, 'ScanResult1Arg', VOID, APLArray);
  initMetadataForClass(GradeFunction, 'GradeFunction', VOID, NoAxisAPLFunction);
  initMetadataForClass(GradeUpFunctionImpl, 'GradeUpFunctionImpl', VOID, GradeFunction);
  initMetadataForClass(GradeUpFunction, 'GradeUpFunction', GradeUpFunction);
  initMetadataForClass(GradeDownFunctionImpl, 'GradeDownFunctionImpl', VOID, GradeFunction);
  initMetadataForClass(GradeDownFunction, 'GradeDownFunction', GradeDownFunction);
  initMetadataForClass(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(sam$kotlin_Comparator$0_0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(sam$kotlin_Comparator$0_1, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(DerivedAPLValueMetadata, 'DerivedAPLValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(SortedAPLArrayMetadata, 'SortedAPLArrayMetadata', VOID, DerivedAPLValueMetadata);
  initMetadataForClass(SortedAPLArray, 'SortedAPLArray', VOID, APLArray);
  initMetadataForClass(sortKapArray$comparator$1, VOID, VOID, VOID, [Comparator]);
  initMetadataForClass(InternFunctionImpl, 'InternFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(InternFunction, 'InternFunction', InternFunction);
  initMetadataForClass(SymbolNameFunctionImpl, 'SymbolNameFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(SymbolNameFunction, 'SymbolNameFunction', SymbolNameFunction);
  initMetadataForClass(ThrowNativeFunctionImpl, 'ThrowNativeFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ThrowNativeFunction, 'ThrowNativeFunction', ThrowNativeFunction);
  initMetadataForClass(SleepFunctionImpl, 'SleepFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(SleepFunction, 'SleepFunction', SleepFunction);
  initMetadataForClass(TimeMillisFunctionImpl, 'TimeMillisFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(TimeMillisFunction, 'TimeMillisFunction', TimeMillisFunction);
  initMetadataForClass(MakeTimerFunctionImpl, 'MakeTimerFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MakeTimerFunction, 'MakeTimerFunction', MakeTimerFunction);
  initMetadataForClass(ToTimestampFunctionImpl, 'ToTimestampFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(ToTimestampFunction, 'ToTimestampFunction', ToTimestampFunction);
  initMetadataForClass(FromTimestampFunctionImpl, 'FromTimestampFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(FromTimestampFunction, 'FromTimestampFunction', FromTimestampFunction);
  initMetadataForClass(FormatTimestampFunctionImpl, 'FormatTimestampFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(FormatTimestampFunction, 'FormatTimestampFunction', FormatTimestampFunction);
  initMetadataForClass(ParseTimestampFunctionImpl, 'ParseTimestampFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ParseTimestampFunction, 'ParseTimestampFunction', ParseTimestampFunction);
  function close() {
  }
  initMetadataForInterface(KapModule, 'KapModule');
  initMetadataForClass(UnicodeModule, 'UnicodeModule', UnicodeModule, VOID, [KapModule]);
  initMetadataForClass(MakeCodepointsImpl, 'MakeCodepointsImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(MakeCodepoints, 'MakeCodepoints', MakeCodepoints);
  initMetadataForClass(MakeCharsFromCodepointsImpl, 'MakeCharsFromCodepointsImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(MakeCharsFromCodepoints, 'MakeCharsFromCodepoints', MakeCharsFromCodepoints);
  initMetadataForClass(GraphemesFunctionImpl, 'GraphemesFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(GraphemesFunction, 'GraphemesFunction', GraphemesFunction);
  initMetadataForClass(ToLowerFunctionImpl, 'ToLowerFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ToLowerFunction, 'ToLowerFunction', ToLowerFunction);
  initMetadataForClass(ToUpperFunctionImpl, 'ToUpperFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ToUpperFunction, 'ToUpperFunction', ToUpperFunction);
  initMetadataForClass(ToNamesFunctionImpl, 'ToNamesFunctionImpl', VOID, MathCombineAPLFunction);
  initMetadataForClass(ToNamesFunction, 'ToNamesFunction', ToNamesFunction);
  initMetadataForCompanion(Companion_15);
  initMetadataForClass(NoArgCommandHandler, 'NoArgCommandHandler');
  initMetadataForClass(HelpCommandHandler, 'HelpCommandHandler', VOID, NoArgCommandHandler);
  initMetadataForClass(CommandManager, 'CommandManager');
  initMetadataForClass(RegisterCmdFunction$RegisterCmdFunctionImpl$evalMultiArgument$cmdHandler$1);
  initMetadataForClass(MultiArgumentAPLFunction, 'MultiArgumentAPLFunction', VOID, NoAxisAPLFunction);
  initMetadataForClass(RegisterCmdFunctionImpl, 'RegisterCmdFunctionImpl', VOID, MultiArgumentAPLFunction);
  initMetadataForClass(RegisterCmdFunction, 'RegisterCmdFunction', RegisterCmdFunction);
  initMetadataForClass(NumArgsCheckedCommandHandler, 'NumArgsCheckedCommandHandler');
  initMetadataForClass(InvalidDimensionsException, 'InvalidDimensionsException', VOID, APLEvalException);
  initMetadataForClass(ArraySizeException, 'ArraySizeException', VOID, APLEvalException);
  initMetadataForClass(APLIndexOutOfBoundsException, 'APLIndexOutOfBoundsException', VOID, APLEvalException);
  initMetadataForClass(CapturedStorageStackFrame, 'CapturedStorageStackFrame');
  initMetadataForClass(CapturedStorageStack, 'CapturedStorageStack');
  initMetadataForClass(ReturnValue, 'ReturnValue', VOID, APLEvalException);
  initMetadataForObject(KapLogger, 'KapLogger', VOID, SimpleLogger);
  initMetadataForClass(APLEvaluationInterrupted, 'APLEvaluationInterrupted', APLEvaluationInterrupted, APLGenericException);
  initMetadataForClass(UnmodifiableSystemParameterException, 'UnmodifiableSystemParameterException', UnmodifiableSystemParameterException, APLEvalException);
  initMetadataForClass(IllegalArgumentNumException, 'IllegalArgumentNumException', VOID, APLEvalException);
  initMetadataForClass(Unimplemented1ArgException, 'Unimplemented1ArgException', Unimplemented1ArgException, APLEvalException);
  initMetadataForClass(Unimplemented2ArgException, 'Unimplemented2ArgException', Unimplemented2ArgException, APLEvalException);
  initMetadataForClass(InverseNotAvailable, 'InverseNotAvailable', InverseNotAvailable, APLEvalException);
  initMetadataForClass(StructuralUnderNotSupported, 'StructuralUnderNotSupported', StructuralUnderNotSupported, APLEvalException);
  initMetadataForClass(AsyncNotSupported, 'AsyncNotSupported', VOID, APLEvalException);
  initMetadataForClass(AxisNotSupported, 'AxisNotSupported', VOID, APLEvalException);
  initMetadataForClass(ParseException, 'ParseException', VOID, APLGenericException);
  initMetadataForClass(IncompatibleTypeParseException, 'IncompatibleTypeParseException', VOID, ParseException);
  initMetadataForClass(KapOverflowException, 'KapOverflowException', VOID, APLEvalException);
  initMetadataForClass(IntMagnitudeException, 'IntMagnitudeException', VOID, KapOverflowException);
  initMetadataForClass(APLIllegalArgumentException, 'APLIllegalArgumentException', VOID, APLEvalException);
  initMetadataForClass(NumericComparisonNotSupported, 'NumericComparisonNotSupported', VOID, APLIllegalArgumentException);
  initMetadataForClass(APLArgumentComplexOrderingException, 'APLArgumentComplexOrderingException', APLArgumentComplexOrderingException, NumericComparisonNotSupported);
  initMetadataForClass(APLArgumentIsNotANumberException, 'APLArgumentIsNotANumberException', APLArgumentIsNotANumberException, NumericComparisonNotSupported);
  initMetadataForClass(LongMagnitudeException, 'LongMagnitudeException', VOID, KapOverflowException);
  initMetadataForClass(IncompatibleTypeException, 'IncompatibleTypeException', VOID, APLEvalException);
  initMetadataForClass(IllegalContextForFunction, 'IllegalContextForFunction', IllegalContextForFunction, ParseException);
  initMetadataForClass(UnexpectedToken, 'UnexpectedToken', VOID, ParseException);
  initMetadataForClass(InvalidFunctionRedefinition, 'InvalidFunctionRedefinition', VOID, ParseException);
  initMetadataForClass(InvalidOperatorArgument, 'InvalidOperatorArgument', VOID, ParseException);
  initMetadataForClass(IllegalDeclaration, 'IllegalDeclaration', VOID, ParseException);
  initMetadataForClass(SyntaxRuleMismatch, 'SyntaxRuleMismatch', VOID, ParseException);
  initMetadataForClass(SyntaxSubRuleNotFound, 'SyntaxSubRuleNotFound', VOID, ParseException);
  initMetadataForClass(UnexpectedSymbol, 'UnexpectedSymbol', VOID, ParseException);
  initMetadataForClass(IllegalNumberFormat, 'IllegalNumberFormat', VOID, ParseException);
  initMetadataForClass(ListOutOfBounds, 'ListOutOfBounds', VOID, APLEvalException);
  initMetadataForClass(APLArithmeticException, 'APLArithmeticException', VOID, APLEvalException);
  initMetadataForClass(IllegalAxisException, 'IllegalAxisException', VOID, APLEvalException);
  initMetadataForClass(ArrayTooLargeException, 'ArrayTooLargeException', VOID, KapOverflowException);
  initMetadataForClass(BitwiseNotSupported, 'BitwiseNotSupported', BitwiseNotSupported, ParseException);
  initMetadataForClass(ParallelNotSupported, 'ParallelNotSupported', ParallelNotSupported, ParseException);
  initMetadataForClass(LeftAssigned2ArgException, 'LeftAssigned2ArgException', LeftAssigned2ArgException, APLEvalException);
  initMetadataForClass(DestructuringAssignmentShapeMismatch, 'DestructuringAssignmentShapeMismatch', DestructuringAssignmentShapeMismatch_init_$Create$, APLEvalException);
  initMetadataForClass(KeyNotFoundException, 'KeyNotFoundException', KeyNotFoundException, APLEvalException);
  initMetadataForClass(VariableNotAssigned, 'VariableNotAssigned', VOID, APLEvalException);
  initMetadataForClass(AssignmentToConstantException, 'AssignmentToConstantException', VOID, ParseException);
  initMetadataForClass(CircularDynamicAssignment, 'CircularDynamicAssignment', CircularDynamicAssignment, APLEvalException);
  initMetadataForClass(CsvParseException, 'CsvParseException', VOID, Exception);
  initMetadataForCompanion(Companion_16);
  initMetadataForClass(CsvReader, 'CsvReader', CsvReader);
  initMetadataForClass(CsvWriter, 'CsvWriter');
  function updateValue(newValue, pos) {
    throwAPLException(new UnmodifiableSystemParameterException(pos));
  }
  initMetadataForInterface(SystemParameterProvider, 'SystemParameterProvider');
  initMetadataForClass(CustomRendererParameter, 'CustomRendererParameter', VOID, VOID, [SystemParameterProvider]);
  initMetadataForClass(APLTimestamp, 'APLTimestamp', VOID, APLSingleValue);
  initMetadataForCompanion(Companion_17);
  initMetadataForClass(Dimensions, 'Dimensions');
  initMetadataForClass(RegexpParseException, 'RegexpParseException', VOID, Exception);
  initMetadataForClass(SingleThreadedThreadPoolExecutor$start$1);
  initMetadataForClass(SingleThreadedThreadPoolExecutor, 'SingleThreadedThreadPoolExecutor', SingleThreadedThreadPoolExecutor);
  initMetadataForClass(SleepNotSupportedException, 'SleepNotSupportedException', SleepNotSupportedException, Exception);
  initMetadataForCompanion(Companion_18);
  initMetadataForInterface(VariableUpdateListener, 'VariableUpdateListener');
  initMetadataForClass(sam$com_dhsdevelopments_kap_VariableUpdateListener$0, 'sam$com_dhsdevelopments_kap_VariableUpdateListener$0', VOID, VOID, [VariableUpdateListener, FunctionAdapter]);
  initMetadataForCompanion(Companion_19);
  initMetadataForCompanion(Companion_20);
  initMetadataForClass(UpdateTracker, 'UpdateTracker');
  initMetadataForClass(UpdateId, 'UpdateId', UpdateId);
  initMetadataForClass(DynamicValue, 'DynamicValue', VOID, AbstractDelegatedValue);
  initMetadataForClass(Instruction, 'Instruction');
  initMetadataForClass(DynamicAssignmentInstruction, 'DynamicAssignmentInstruction', VOID, Instruction);
  initMetadataForClass(WeakRefVariableUpdateListener, 'WeakRefVariableUpdateListener', VOID, VOID, [VariableUpdateListener]);
  initMetadataForClass(StorageStackFrame, 'StorageStackFrame');
  initMetadataForClass(StorageStack, 'StorageStack');
  initMetadataForClass(VariableHolder, 'VariableHolder', VariableHolder);
  initMetadataForClass(Engine, 'Engine', Engine_init_$Create$);
  function functionDefined(name, fn) {
    return Unit_instance;
  }
  function operatorDefined(name, fn) {
    return Unit_instance;
  }
  initMetadataForInterface(FunctionDefinitionListener, 'FunctionDefinitionListener');
  initMetadataForClass(StandardSymbols, 'StandardSymbols');
  initMetadataForClass(CloseAPLFunctionImpl, 'CloseAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(CloseAPLFunction, 'CloseAPLFunction', CloseAPLFunction);
  initMetadataForClass(ChangeWorkingDirectoryCommandHandler, 'ChangeWorkingDirectoryCommandHandler', ChangeWorkingDirectoryCommandHandler, NumArgsCheckedCommandHandler);
  initMetadataForClass(RuntimeContext, 'RuntimeContext');
  initMetadataForClass(FunctionInstantiation, 'FunctionInstantiation');
  initMetadataForClass(ConstantSymbolSystemParameterProvider, 'ConstantSymbolSystemParameterProvider', VOID, VOID, [SystemParameterProvider]);
  initMetadataForCompanion(Companion_21);
  initMetadataForClass(OptimisationFlags, 'OptimisationFlags');
  initMetadataForClass(LeftAssignedFunction, 'LeftAssignedFunction', VOID, APLFunction);
  initMetadataForClass(DelegatedAPLFunctionImpl, 'DelegatedAPLFunctionImpl', VOID, APLFunction);
  initMetadataForClass(DeclaredFunctionImpl, 'DeclaredFunctionImpl', VOID, APLFunction);
  initMetadataForClass(DeclaredFunction, 'DeclaredFunction');
  initMetadataForClass(DeclaredNonBoundFunctionImpl, 'DeclaredNonBoundFunctionImpl', VOID, APLFunction);
  initMetadataForClass(DeclaredNonBoundFunction, 'DeclaredNonBoundFunction');
  initMetadataForClass(AxisValAssignedFunctionDirect, 'AxisValAssignedFunctionDirect', VOID, NoAxisAPLFunction);
  initMetadataForClass(SaveStackSupport, 'SaveStackSupport');
  initMetadataForCompanion(Companion_22);
  initMetadataForClass(APLArgumentCountMismatch, 'APLArgumentCountMismatch', VOID, APLIllegalArgumentException);
  initMetadataForClass(DoubleSet, 'DoubleSet');
  initMetadataForClass(RoundingMode, 'RoundingMode', VOID, Enum);
  initMetadataForObject(NumberWithThousandsSeparator, 'NumberWithThousandsSeparator');
  initMetadataForClass(HttpMethod, 'HttpMethod', VOID, Enum);
  initMetadataForClass(HttpRequestData, 'HttpRequestData');
  initMetadataForClass(ArrayIndex, 'ArrayIndex', VOID, Instruction);
  initMetadataForCompanion(Companion_23);
  initMetadataForClass(AxisValueAndOffset, 'AxisValueAndOffset');
  initMetadataForClass(IndexedArrayValueMetadata, 'IndexedArrayValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(IndexedArrayValue, 'IndexedArrayValue', VOID, APLArray);
  initMetadataForClass(LiteralAPLValueInstruction, 'LiteralAPLValueInstruction', VOID, Instruction);
  initMetadataForClass(LiteralInteger, 'LiteralInteger', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(LiteralDouble, 'LiteralDouble', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(LiteralRational, 'LiteralRational', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(LiteralBigInt, 'LiteralBigInt', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(LiteralComplex, 'LiteralComplex', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(LiteralCharacter, 'LiteralCharacter', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(ConstantValueInstruction, 'ConstantValueInstruction', VOID, LiteralAPLValueInstruction);
  initMetadataForCompanion(Companion_24);
  initMetadataForClass(Literal1DArray$deriveLvalueReader$1);
  initMetadataForClass(Literal1DArray, 'Literal1DArray', VOID, Instruction);
  initMetadataForClass(UserFunctionImpl, 'UserFunctionImpl', VOID, APLFunction);
  initMetadataForClass(UserFunction, 'UserFunction');
  initMetadataForClass(EmptyValueMarker, 'EmptyValueMarker', VOID, Instruction);
  initMetadataForClass(LiteralAPLList$deriveLvalueReader$1);
  initMetadataForClass(LiteralAPLList, 'LiteralAPLList', VOID, Instruction);
  initMetadataForClass(FunctionCallInstruction, 'FunctionCallInstruction', VOID, Instruction);
  initMetadataForClass(FunctionCall2Arg, 'FunctionCall2Arg', VOID, FunctionCallInstruction);
  initMetadataForClass(FunctionCall1Arg, 'FunctionCall1Arg', VOID, FunctionCallInstruction);
  initMetadataForClass(FunctionCallChain, 'FunctionCallChain', VOID, APLFunction);
  initMetadataForClass(Chain2, 'Chain2', VOID, FunctionCallChain);
  initMetadataForClass(Chain3, 'Chain3', VOID, FunctionCallChain);
  initMetadataForClass(DestructureAssignInstruction, 'DestructureAssignInstruction', VOID, Instruction);
  initMetadataForClass(LiteralAPLNullValue, 'LiteralAPLNullValue', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(DummyInstr, 'DummyInstr', VOID, Instruction);
  initMetadataForClass(MemberDereferenceInstruction, 'MemberDereferenceInstruction', VOID, Instruction);
  initMetadataForClass(LiteralSymbol, 'LiteralSymbol', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(LiteralStringValue, 'LiteralStringValue', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(EvalLambdaFnx, 'EvalLambdaFnx', VOID, Instruction);
  initMetadataForClass(VariableRef$deriveLvalueReader$1);
  initMetadataForClass(VariableRef, 'VariableRef', VOID, Instruction);
  initMetadataForClass(DynamicFunctionImpl, 'DynamicFunctionImpl', VOID, APLFunction);
  initMetadataForClass(DynamicFunctionDescriptor, 'DynamicFunctionDescriptor');
  initMetadataForCompanion(Companion_25);
  initMetadataForClass(InstructionList, 'InstructionList', VOID, Instruction);
  initMetadataForCompanion(Companion_26);
  initMetadataForClass(AssignmentInstruction, 'AssignmentInstruction', VOID, Instruction);
  initMetadataForClass(LiteralBooleanArray, 'LiteralBooleanArray', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(LiteralLongArray, 'LiteralLongArray', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(LiteralDoubleArray, 'LiteralDoubleArray', VOID, LiteralAPLValueInstruction);
  initMetadataForClass(NullCharacterOutput, 'NullCharacterOutput', NullCharacterOutput);
  function nextLine() {
    var buf = StringBuilder_init_$Create$();
    while (true) {
      var ch = this.e3j();
      if (ch == null) {
        var s = buf.toString();
        // Inline function 'kotlin.text.ifEmpty' call
        var tmp;
        // Inline function 'kotlin.text.isEmpty' call
        if (charSequenceLength(s) === 0) {
          tmp = null;
        } else {
          tmp = s;
        }
        return tmp;
      } else {
        // Inline function 'kotlin.code' call
        var this_0 = _Char___init__impl__6a9atx(10);
        if (ch === Char__toInt_impl_vasixd(this_0)) {
          return buf.toString();
        }
      }
      addCodepoint(buf, ch);
    }
  }
  function lines() {
    return generateSequence(CharacterProvider$lines$lambda(this));
  }
  initMetadataForInterface(CharacterProvider, 'CharacterProvider');
  initMetadataForClass(NullCharacterProvider, 'NullCharacterProvider', NullCharacterProvider, VOID, [CharacterProvider]);
  initMetadataForCompanion(Companion_27);
  initMetadataForClass(FileNameType, 'FileNameType', VOID, Enum);
  initMetadataForClass(StringBuilderOutput, 'StringBuilderOutput', StringBuilderOutput);
  initMetadataForClass(MPFileException, 'MPFileException', VOID, Exception);
  initMetadataForClass(CharWithPosition, 'CharWithPosition');
  initMetadataForClass(PushBackCharacterProvider, 'PushBackCharacterProvider', VOID, VOID, [CharacterProvider]);
  initMetadataForClass(ByteToCharacterProvider, 'ByteToCharacterProvider', VOID, VOID, [CharacterProvider]);
  function readBlock(buffer, start, length) {
    var startPos = start == null ? 0 : start;
    var n = length == null ? buffer.length - startPos | 0 : length;
    var i = 0;
    $l$loop: while (i < n) {
      var tmp2_elvis_lhs = this.h4x();
      var tmp;
      if (tmp2_elvis_lhs == null) {
        break $l$loop;
      } else {
        tmp = tmp2_elvis_lhs;
      }
      var value = tmp;
      buffer[startPos + i | 0] = value;
      i = i + 1 | 0;
    }
    return i;
  }
  initMetadataForInterface(ByteProvider, 'ByteProvider');
  initMetadataForClass(MPFileNotFoundException, 'MPFileNotFoundException', VOID, MPFileException);
  initMetadataForClass(ByteArrayByteProvider, 'ByteArrayByteProvider', VOID, VOID, [ByteProvider]);
  function writeString(s) {
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = asCodepointList(s).k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      this.l4x(element);
    }
  }
  initMetadataForInterface(CharacterConsumer, 'CharacterConsumer');
  initMetadataForClass(PathEntry, 'PathEntry');
  function writeBlock(buffer, offset, length) {
    var inductionVariable = offset;
    var last = offset + (length == null ? buffer.length - offset | 0 : length) | 0;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        this.a3l(buffer[i]);
      }
       while (inductionVariable < last);
  }
  function writeBlock$default(buffer, offset, length, $super) {
    offset = offset === VOID ? 0 : offset;
    length = length === VOID ? null : length;
    var tmp;
    if ($super === VOID) {
      this.k3k(buffer, offset, length);
      tmp = Unit_instance;
    } else {
      writeBlock(buffer, offset, length);
      tmp = Unit_instance;
    }
    return tmp;
  }
  initMetadataForInterface(ByteConsumer, 'ByteConsumer');
  initMetadataForClass(ByteArrayByteConsumer, 'ByteArrayByteConsumer', ByteArrayByteConsumer, VOID, [ByteConsumer]);
  initMetadataForClass(CharacterToByteConsumer, 'CharacterToByteConsumer', VOID, VOID, [CharacterConsumer]);
  initMetadataForClass(JsonAPLModule, 'JsonAPLModule', JsonAPLModule, VOID, [KapModule]);
  initMetadataForClass(ReadJsonAPLFunctionImpl, 'ReadJsonAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReadJsonAPLFunction, 'ReadJsonAPLFunction', ReadJsonAPLFunction);
  initMetadataForClass(ReadStringJsonAPLFunctionImpl, 'ReadStringJsonAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ReadStringJsonAPLFunction, 'ReadStringJsonAPLFunction', ReadStringJsonAPLFunction);
  initMetadataForClass(WriteStringJsonAPLFunctionImpl, 'WriteStringJsonAPLFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(WriteStringJsonAPLFunction, 'WriteStringJsonAPLFunction', WriteStringJsonAPLFunction);
  initMetadataForClass(JsonParseException, 'JsonParseException', VOID, Exception);
  initMetadataForClass(JsonDecodeException, 'JsonDecodeException', VOID, APLEvalException);
  initMetadataForClass(JsonEncodeException, 'JsonEncodeException', VOID, APLEvalException);
  initMetadataForCompanion(Companion_28);
  initMetadataForClass(Complex, 'Complex');
  initMetadataForObject(ComplexFieldExtension, 'ComplexFieldExtension');
  initMetadataForCompanion(Companion_29);
  initMetadataForClass(ImmutableMap2, 'ImmutableMap2', ImmutableMap2_init_$Create$, VOID, [KtMap]);
  function resolveMethod(engine, ref, methodName, pos) {
    throwAPLException(new APLEvalException('Invalid target object', pos));
  }
  initMetadataForInterface(KapClass, 'KapClass');
  initMetadataForClass(SystemClass, 'SystemClass', VOID, VOID, [KapClass]);
  initMetadataForClass(MapClass, 'MapClass', MapClass, SystemClass);
  initMetadataForClass(MethodCallFunctionImpl, 'MethodCallFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MethodCallFunction, 'MethodCallFunction');
  initMetadataForClass(MethodNotFoundException, 'MethodNotFoundException', VOID, APLEvalException);
  initMetadataForClass(APLFunctionMethodCall, 'APLFunctionMethodCall');
  initMetadataForClass(ModListCommandHandler, 'ModListCommandHandler', ModListCommandHandler, NoArgCommandHandler);
  initMetadataForClass(ModuleInitSkipped, 'ModuleInitSkipped', VOID, Exception);
  initMetadataForClass(ModuleInitFailedException, 'ModuleInitFailedException', VOID, Exception);
  initMetadataForClass(MTSafeArrayList, 'MTSafeArrayList', MTSafeArrayList, AbstractMutableList);
  initMetadataForClass(MTSafeIterator, 'MTSafeIterator');
  initMetadataForClass(MTSafeListIterator, 'MTSafeListIterator');
  initMetadataForClass(APLNumber, 'APLNumber', VOID, APLSingleValue);
  initMetadataForCompanion(Companion_30);
  initMetadataForClass(APLDouble, 'APLDouble', VOID, APLNumber);
  initMetadataForCompanion(Companion_31);
  initMetadataForInterface(APLInteger, 'APLInteger');
  initMetadataForClass(APLLong, 'APLLong', VOID, APLNumber, [APLNumber, APLInteger]);
  initMetadataForClass(APLBigInt, 'APLBigInt', VOID, APLNumber, [APLNumber, APLInteger]);
  initMetadataForCompanion(Companion_32);
  initMetadataForClass(APLComplex, 'APLComplex', VOID, APLNumber);
  initMetadataForClass(APLRational, 'APLRational', VOID, APLNumber);
  initMetadataForClass(NumberComplexException, 'NumberComplexException', VOID, IncompatibleTypeException);
  initMetadataForClass(ClassManager, 'ClassManager');
  initMetadataForCompanion(Companion_33);
  initMetadataForClass(UserDefinedClass, 'UserDefinedClass', VOID, VOID, [KapClass]);
  initMetadataForClass(DefclassFunctionImpl, 'DefclassFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(DefclassFunctionDescriptor, 'DefclassFunctionDescriptor', DefclassFunctionDescriptor);
  initMetadataForClass(MakeClassInstanceFunctionImpl, 'MakeClassInstanceFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(MakeClassInstanceFunctionDescriptor, 'MakeClassInstanceFunctionDescriptor', MakeClassInstanceFunctionDescriptor);
  initMetadataForClass(TagOfFunctionImpl, 'TagOfFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(TagOfFunctionDescriptor, 'TagOfFunctionDescriptor', TagOfFunctionDescriptor);
  initMetadataForClass(ExtractFunctionImpl, 'ExtractFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(ExtractFunctionDescriptor, 'ExtractFunctionDescriptor', ExtractFunctionDescriptor);
  initMetadataForClass(KapClassNotFound, 'KapClassNotFound', VOID, APLEvalException);
  initMetadataForClass(TypedAPLValue, 'TypedAPLValue', VOID, APLSingleValue);
  initMetadataForClass(InverseFnOp, 'InverseFnOp', InverseFnOp, VOID, [APLOperatorOneArg]);
  initMetadataForClass(InverseFn, 'InverseFn', VOID, APLFunction);
  initMetadataForClass(InverseFnFunctionDescriptor, 'InverseFnFunctionDescriptor');
  initMetadataForClass(UserDefinedOperatorFn, 'UserDefinedOperatorFn', VOID, NoAxisAPLFunction);
  initMetadataForClass(UserDefinedOperatorOneArg$combineFunction$1);
  initMetadataForClass(UserDefinedOperatorOneArg, 'UserDefinedOperatorOneArg', VOID, VOID, [APLOperatorOneArg]);
  initMetadataForClass(APLUserDefinedOperatorFunction, 'APLUserDefinedOperatorFunction', VOID, NoAxisAPLFunction);
  initMetadataForClass(FnCall, 'FnCall', VOID, APLUserDefinedOperatorFunction);
  initMetadataForClass(ValueCall, 'ValueCall', VOID, APLUserDefinedOperatorFunction);
  initMetadataForClass(UserDefinedOperatorTwoArg, 'UserDefinedOperatorTwoArg');
  initMetadataForClass(Scalar2ArgInstructionChainOptimiser, 'Scalar2ArgInstructionChainOptimiser');
  initMetadataForObject(DivideToFloorInstructionOptimiser, 'DivideToFloorInstructionOptimiser', VOID, Scalar2ArgInstructionChainOptimiser);
  initMetadataForObject(DivideToCeilInstructionOptimiser, 'DivideToCeilInstructionOptimiser', VOID, Scalar2ArgInstructionChainOptimiser);
  initMetadataForClass(AbstractMergedFloorCeilDivFunction, 'AbstractMergedFloorCeilDivFunction', VOID, MathNumericCombineAPLFunction);
  initMetadataForClass(MergedFloorDivFunction, 'MergedFloorDivFunction', VOID, AbstractMergedFloorCeilDivFunction);
  initMetadataForClass(MergedCeilDivFunction, 'MergedCeilDivFunction', VOID, AbstractMergedFloorCeilDivFunction);
  initMetadataForCompanion(Companion_34);
  initMetadataForClass(NonScalar1ArgInstructionChainOptimiser, 'NonScalar1ArgInstructionChainOptimiser');
  initMetadataForObject(IndexOfMaxInstructionOptimiser, 'IndexOfMaxInstructionOptimiser', VOID, NonScalar1ArgInstructionChainOptimiser);
  initMetadataForObject(IndexOfMinInstructionOptimiser, 'IndexOfMinInstructionOptimiser', VOID, NonScalar1ArgInstructionChainOptimiser);
  initMetadataForClass(AbstractMergedIndexOfMaxMinFunction, 'AbstractMergedIndexOfMaxMinFunction', VOID, APLFunction);
  initMetadataForClass(MergedIndexOfMaxFunction, 'MergedIndexOfMaxFunction', VOID, AbstractMergedIndexOfMaxMinFunction);
  initMetadataForClass(MergedIndexOfMinFunction, 'MergedIndexOfMinFunction', VOID, AbstractMergedIndexOfMaxMinFunction);
  initMetadataForClass(WidthAndOffset, 'WidthAndOffset');
  initMetadataForObject(IotaAddOptimiser, 'IotaAddOptimiser');
  initMetadataForObject(SingleElementConstantListOptimiser, 'SingleElementConstantListOptimiser');
  initMetadataForClass(OptimisedConstantListInstruction, 'OptimisedConstantListInstruction', VOID, LiteralAPLValueInstruction);
  initMetadataForObject(StandardOptimiser, 'StandardOptimiser');
  initMetadataForClass(ParserLevel, 'ParserLevel', VOID, Enum);
  initMetadataForClass(ParserCallbackManager, 'ParserCallbackManager');
  initMetadataForClass(Environment, 'Environment');
  initMetadataForClass(StackStorageRef, 'StackStorageRef');
  initMetadataForClass(StackStorageDescriptor, 'StackStorageDescriptor');
  initMetadataForClass(ExternalStorageRef, 'ExternalStorageRef');
  initMetadataForClass(UpdateableFunctionImpl, 'UpdateableFunctionImpl', VOID, DelegatedAPLFunctionImpl);
  initMetadataForClass(TokenParseResult, 'TokenParseResult');
  initMetadataForClass(Instr, 'Instr', VOID, TokenParseResult);
  initMetadataForClass(ResHolder, 'ResHolder', VOID, TokenParseResult);
  initMetadataForClass(Empty, 'Empty', Empty, TokenParseResult);
  initMetadataForClass(DefinedUserFunction, 'DefinedUserFunction');
  initMetadataForClass(UpdateableFunction, 'UpdateableFunction');
  initMetadataForClass(UpdateLocalFunctionInstruction, 'UpdateLocalFunctionInstruction', VOID, Instruction);
  initMetadataForClass(LocalFunctionCall, 'LocalFunctionCall', VOID, APLFunction);
  initMetadataForClass(ParseToplevelResult, 'ParseToplevelResult');
  initMetadataForCompanion(Companion_35);
  initMetadataForClass(APLParser$parseAndDefineUserDefinedFn$FnArgComponent, 'FnArgComponent');
  initMetadataForClass(APLParser$parseAndDefineUserDefinedFn$processFnWithArg$$inlined$groupingBy$1);
  initMetadataForClass(APLParser, 'APLParser');
  initMetadataForClass(EnvironmentBinding, 'EnvironmentBinding');
  initMetadataForCompanion(Companion_36);
  initMetadataForClass(ParseResultHolder, 'ParseResultHolder');
  initMetadataForClass(InstrParseResult, 'InstrParseResult', VOID, ParseResultHolder);
  initMetadataForClass(FnParseResult, 'FnParseResult', VOID, ParseResultHolder);
  initMetadataForClass(EmptyParseResult, 'EmptyParseResult', VOID, ParseResultHolder);
  initMetadataForClass(RegexpModule, 'RegexpModule', RegexpModule, VOID, [KapModule]);
  initMetadataForClass(RegexpMatchesFunctionImpl, 'RegexpMatchesFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RegexpMatchesFunction, 'RegexpMatchesFunction', RegexpMatchesFunction);
  initMetadataForClass(RegexpFindFunctionImpl, 'RegexpFindFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RegexpFindFunction, 'RegexpFindFunction', RegexpFindFunction);
  initMetadataForClass(RegexFindAllFunctionImpl, 'RegexFindAllFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RegexpFindAllFunction, 'RegexpFindAllFunction', RegexpFindAllFunction);
  initMetadataForClass(CreateRegexpFunctionImpl, 'CreateRegexpFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(CreateRegexpFunction, 'CreateRegexpFunction', CreateRegexpFunction);
  initMetadataForClass(RegexpSplitFunctionImpl, 'RegexpSplitFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RegexpSplitFunction, 'RegexpSplitFunction', RegexpSplitFunction);
  initMetadataForClass(RegexpReplaceFunctionImpl, 'RegexpReplaceFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(RegexpReplaceFunction, 'RegexpReplaceFunction', RegexpReplaceFunction);
  initMetadataForClass(RegexpMatcherValue, 'RegexpMatcherValue', VOID, KotlinObjectWrappedValue);
  initMetadataForClass(InvalidRegexp, 'InvalidRegexp', VOID, APLEvalException);
  initMetadataForClass(String2D, 'String2D');
  initMetadataForClass(CustomSyntax, 'CustomSyntax');
  initMetadataForClass(SyntaxRuleVariableBinding, 'SyntaxRuleVariableBinding');
  initMetadataForCompanion(Companion_37);
  initMetadataForClass(CallWithVarInstruction, 'CallWithVarInstruction', VOID, Instruction);
  initMetadataForClass(ConstantSyntaxRule, 'ConstantSyntaxRule');
  initMetadataForCompanion(Companion_38);
  initMetadataForClass(TokenSyntaxRule, 'TokenSyntaxRule');
  initMetadataForClass(ValueSyntaxRule, 'ValueSyntaxRule');
  initMetadataForClass(StringSyntaxRule, 'StringSyntaxRule');
  initMetadataForClass(FunctionSyntaxRule, 'FunctionSyntaxRule');
  initMetadataForClass(BFunctionSyntaxRule, 'BFunctionSyntaxRule', VOID, FunctionSyntaxRule);
  initMetadataForClass(NFunctionSyntaxRule, 'NFunctionSyntaxRule', VOID, FunctionSyntaxRule);
  initMetadataForClass(ExprFunctionSyntaxRule, 'ExprFunctionSyntaxRule', VOID, FunctionSyntaxRule);
  initMetadataForClass(NExprFunctionSyntaxRule, 'NExprFunctionSyntaxRule', VOID, FunctionSyntaxRule);
  initMetadataForClass(OptionalSyntaxRule, 'OptionalSyntaxRule');
  initMetadataForClass(RepeatSyntaxRule, 'RepeatSyntaxRule');
  initMetadataForClass(MultiResultInstr, 'MultiResultInstr', VOID, Instruction);
  initMetadataForClass(Position, 'Position');
  initMetadataForClass(Token, 'Token');
  initMetadataForClass(Symbol, 'Symbol', VOID, Token, [Token, Comparable]);
  initMetadataForCompanion(Companion_39);
  initMetadataForClass(NamespaceList, 'NamespaceList', NamespaceList);
  initMetadataForClass(NamespaceEntry, 'NamespaceEntry');
  initMetadataForClass(Namespace, 'Namespace');
  initMetadataForClass(NumberParser, 'NumberParser');
  initMetadataForCompanion(Companion_40);
  initMetadataForClass(TokenGenerator, 'TokenGenerator');
  initMetadataForClass(NamespaceName, 'NamespaceName');
  function get_name() {
    return null;
  }
  initMetadataForInterface(SourceLocation, 'SourceLocation');
  initMetadataForObject(EndOfFile, 'EndOfFile', VOID, Token);
  initMetadataForClass(TokenWithPosition, 'TokenWithPosition');
  initMetadataForObject(StatementSeparator, 'StatementSeparator', VOID, Token);
  initMetadataForObject(Newline, 'Newline', VOID, Token);
  initMetadataForObject(ListSeparator, 'ListSeparator', VOID, Token);
  initMetadataForObject(AndToken, 'AndToken', VOID, Token);
  initMetadataForObject(OrToken, 'OrToken', VOID, Token);
  initMetadataForObject(FunctionCallOpenParen, 'FunctionCallOpenParen', VOID, Token);
  initMetadataForObject(FunctionCallCloseParen, 'FunctionCallCloseParen', VOID, Token);
  initMetadataForObject(CloseParen, 'CloseParen', VOID, Token);
  initMetadataForObject(CloseFnDef, 'CloseFnDef', VOID, Token);
  initMetadataForObject(OpenFnDef, 'OpenFnDef', VOID, Token);
  initMetadataForObject(OpenParen, 'OpenParen', VOID, Token);
  initMetadataForObject(CloseBracket, 'CloseBracket', VOID, Token);
  initMetadataForObject(FnDefArrow, 'FnDefArrow', VOID, Token);
  initMetadataForObject(ApplyToken, 'ApplyToken', VOID, Token);
  initMetadataForObject(MethodCallToken, 'MethodCallToken', VOID, Token);
  initMetadataForClass(ConstantToken, 'ConstantToken', VOID, Token);
  initMetadataForClass(ParsedLong, 'ParsedLong', VOID, ConstantToken);
  initMetadataForClass(ParsedDouble, 'ParsedDouble', VOID, ConstantToken);
  initMetadataForClass(ParsedComplex, 'ParsedComplex', VOID, ConstantToken);
  initMetadataForClass(ParsedBigInt, 'ParsedBigInt', VOID, ConstantToken);
  initMetadataForClass(ParsedRational, 'ParsedRational', VOID, ConstantToken);
  initMetadataForClass(ParsedCharacter, 'ParsedCharacter', VOID, ConstantToken);
  initMetadataForObject(LeftArrow, 'LeftArrow', VOID, Token);
  initMetadataForObject(DynassignToken, 'DynassignToken', VOID, Token);
  initMetadataForObject(FnDefSym, 'FnDefSym', VOID, Token);
  initMetadataForObject(APLNullSym, 'APLNullSym', VOID, Token);
  initMetadataForObject(NilToken, 'NilToken', VOID, ConstantToken);
  initMetadataForClass(StringToken, 'StringToken', VOID, ConstantToken);
  initMetadataForObject(QuotePrefix, 'QuotePrefix', VOID, Token);
  initMetadataForObject(LambdaToken, 'LambdaToken', VOID, Token);
  initMetadataForObject(NamespaceToken, 'NamespaceToken', VOID, Token);
  initMetadataForObject(ImportToken, 'ImportToken', VOID, Token);
  initMetadataForObject(DefsyntaxSubToken, 'DefsyntaxSubToken', VOID, Token);
  initMetadataForObject(DefsyntaxToken, 'DefsyntaxToken', VOID, Token);
  initMetadataForObject(IncludeToken, 'IncludeToken', VOID, Token);
  initMetadataForObject(DeclareToken, 'DeclareToken', VOID, Token);
  initMetadataForObject(OpenBracket, 'OpenBracket', VOID, Token);
  initMetadataForObject(MemberDereferenceToken, 'MemberDereferenceToken', VOID, Token);
  initMetadataForClass(FileSourceLocation, 'FileSourceLocation', VOID, VOID, [SourceLocation]);
  initMetadataForObject(LeftForkToken, 'LeftForkToken', VOID, Token);
  initMetadataForObject(RightForkToken, 'RightForkToken', VOID, Token);
  initMetadataForObject(Whitespace, 'Whitespace', VOID, Token);
  initMetadataForObject(Comment, 'Comment', VOID, Token);
  initMetadataForClass(StringSourceLocation, 'StringSourceLocation', VOID, VOID, [SourceLocation]);
  initMetadataForInterface(APLValueKey, 'APLValueKey');
  initMetadataForClass(CmpKey, 'CmpKey', VOID, VOID, [APLValueKey]);
  initMetadataForClass(NumericKey, 'NumericKey', VOID, VOID, [APLValueKey]);
  initMetadataForCompanion(Companion_41);
  initMetadataForClass(APLValue$membersSequence$1);
  initMetadataForClass(APLValue$membersSequence$$inlined$Sequence$1);
  initMetadataForCompanion(Companion_42);
  initMetadataForClass(LambdaValue$makeClosure$1, VOID, VOID, APLFunction);
  initMetadataForClass(LambdaValue, 'LambdaValue', VOID, APLSingleValue);
  initMetadataForCompanion(Companion_43);
  initMetadataForClass(ArrayMemberType, 'ArrayMemberType');
  initMetadataForClass(FormatStyle, 'FormatStyle', VOID, Enum);
  initMetadataForClass(APLList, 'APLList', VOID, APLSingleValue);
  initMetadataForCompanion(Companion_44);
  initMetadataForClass(APLString, 'APLString', VOID, APLArray);
  initMetadataForClass(APLMap, 'APLMap', VOID, APLSingleValue);
  initMetadataForClass(APLSymbol, 'APLSymbol', VOID, APLSingleValue);
  initMetadataForObject(APLNilValue, 'APLNilValue', VOID, APLSingleValue);
  initMetadataForCompanion(Companion_45);
  initMetadataForClass(APLChar, 'APLChar', VOID, APLSingleValue);
  initMetadataForCompanion(Companion_46);
  initMetadataForClass(APLArrayImpl, 'APLArrayImpl', VOID, APLArray);
  initMetadataForObject(APLNullValue, 'APLNullValue', VOID, APLArray);
  initMetadataForCompanion(Companion_47);
  initMetadataForClass(APLArrayList, 'APLArrayList', VOID, APLArray);
  initMetadataForClass(AxisLabel, 'AxisLabel');
  initMetadataForCompanion(Companion_48);
  initMetadataForClass(DimensionLabels, 'DimensionLabels');
  initMetadataForObject(UnusedResultAPLValue, 'UnusedResultAPLValue', VOID, APLValue);
  initMetadataForClass(CollapsedAPLList, 'CollapsedAPLList', VOID, APLList);
  initMetadataForCompanion(Companion_49);
  initMetadataForClass(EnclosedAPLValue, 'EnclosedAPLValue', VOID, APLArray);
  initMetadataForCompanion(Companion_50);
  initMetadataForClass(CollapsedArrayImpl, 'CollapsedArrayImpl', VOID, APLArrayImpl);
  initMetadataForClass(APLEmptyArray, 'APLEmptyArray', VOID, APLArray);
  initMetadataForClass(APLArrayBoolean, 'APLArrayBoolean', VOID, APLArray);
  initMetadataForCompanion(Companion_51);
  initMetadataForClass(APLArrayLong, 'APLArrayLong', VOID, APLArray);
  initMetadataForClass(APLArrayDouble, 'APLArrayDouble', VOID, APLArray);
  initMetadataForClass(LongToDoubleArrayProjection, 'LongToDoubleArrayProjection', VOID, DelegatedValue);
  initMetadataForClass(EmptyValueMetadata, 'EmptyValueMetadata', EmptyValueMetadata, VOID, [APLValueMetadata]);
  initMetadataForObject(EmptyValue, 'EmptyValue', VOID, APLArray);
  initMetadataForCompanion(Companion_52);
  initMetadataForClass(IntArrayValue, 'IntArrayValue', VOID, APLArray);
  initMetadataForClass(APLArrayInt, 'APLArrayInt', VOID, APLArray);
  initMetadataForClass(ConstantArray, 'ConstantArray', VOID, APLArray);
  initMetadataForClass(APLArrayByte, 'APLArrayByte', VOID, APLArray);
  initMetadataForClass(APLValueMetadataOverridePrototype, 'APLValueMetadataOverridePrototype', VOID, VOID, [APLValueMetadata]);
  initMetadataForCompanion(Companion_53);
  initMetadataForClass(AssignPrototypeFunctionImpl, 'AssignPrototypeFunctionImpl', VOID, NoAxisAPLFunction);
  initMetadataForClass(AssignPrototypeFunction, 'AssignPrototypeFunction', AssignPrototypeFunction);
  initMetadataForObject(DefaultMetadata, 'DefaultMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(CollapsedAPLValueMetadata, 'CollapsedAPLValueMetadata', VOID, VOID, [APLValueMetadata]);
  initMetadataForCompanion(Companion_54);
  initMetadataForClass(APLValueMetadataOverrideLabels, 'APLValueMetadataOverrideLabels', VOID, VOID, [APLValueMetadata]);
  initMetadataForClass(MetadataOverrideArray, 'MetadataOverrideArray', VOID, AbstractDelegatedValue);
  initMetadataForClass(JsNativeData, 'JsNativeData', JsNativeData);
  initMetadataForClass(JsWeakReference, 'JsWeakReference');
  initMetadataForClass(RegisteredEntry, 'RegisteredEntry');
  initMetadataForClass(File, 'File', VOID, RegisteredEntry);
  initMetadataForClass(Directory, 'Directory', VOID, RegisteredEntry);
  initMetadataForClass(JsStringCharacterProvider, 'JsStringCharacterProvider', VOID, VOID, [CharacterProvider]);
  initMetadataForCompanion(Companion_55);
  initMetadataForClass(FileEntryData, 'FileEntryData', FileEntryData);
  initMetadataForClass(FileEntryDataByteConsumer, 'FileEntryDataByteConsumer', VOID, VOID, [ByteConsumer]);
  initMetadataForClass(MPLock, 'MPLock', MPLock);
  initMetadataForClass(JsAtomicRefArray, 'JsAtomicRefArray');
  initMetadataForClass(makeMPThreadLocalBackend$1);
  //endregion
  function CallAsyncOp() {
  }
  protoOf(CallAsyncOp).l2g = function (fn0, fn1, opPos) {
    return new CallAsyncFunction(fn0, fn1);
  };
  function CallAsyncFunction$CallAsyncFunctionImpl$eval1Arg$lambda(this$0) {
    return function (context0, res) {
      var tmp;
      try {
        var v0 = this$0.r2g().w2g(context0, res, null).x2g();
        tmp = new Left(v0);
      } catch ($p) {
        var tmp_0;
        if ($p instanceof APLGenericException) {
          var e = $p;
          tmp_0 = new Right(e);
        } else {
          throw $p;
        }
        tmp = tmp_0;
      }
      return tmp;
    };
  }
  function CallAsyncFunction$CallAsyncFunctionImpl$eval2Arg$lambda(this$0) {
    return function (context0, res) {
      var tmp;
      try {
        var v0 = this$0.r2g().w2g(context0, res, null).x2g();
        tmp = new Left(v0);
      } catch ($p) {
        var tmp_0;
        if ($p instanceof APLGenericException) {
          var e = $p;
          tmp_0 = new Right(e);
        } else {
          throw $p;
        }
        tmp = tmp_0;
      }
      return tmp;
    };
  }
  function CallAsyncFunctionImpl(fn0, fn1, pos) {
    APLFunction.call(this, pos, listOf([fn0, fn1]));
  }
  protoOf(CallAsyncFunctionImpl).r2g = function () {
    return this.s2g_1.p(0);
  };
  protoOf(CallAsyncFunctionImpl).y2g = function () {
    return this.s2g_1.p(1);
  };
  protoOf(CallAsyncFunctionImpl).w2g = function (context, a, axis) {
    var a0 = a.x2g();
    var axis0 = axis == null ? null : axis.x2g();
    var tmp = this.y2g();
    tmp.z2g(context, a0, axis0, CallAsyncFunction$CallAsyncFunctionImpl$eval1Arg$lambda(this));
    return APLNullValue_getInstance();
  };
  protoOf(CallAsyncFunctionImpl).a2h = function (context, a, b, axis) {
    var b0 = b.x2g();
    var axis0 = axis == null ? null : axis.x2g();
    var a0 = a.x2g();
    var tmp = this.y2g();
    tmp.b2h(context, a0, b0, axis0, CallAsyncFunction$CallAsyncFunctionImpl$eval2Arg$lambda(this));
    return APLNullValue_getInstance();
  };
  function CallAsyncFunction(fn0, fn1) {
    this.g2i_1 = fn0;
    this.h2i_1 = fn1;
  }
  protoOf(CallAsyncFunction).i2i = function (instantiation) {
    return new CallAsyncFunctionImpl(this.g2i_1, this.h2i_1, instantiation);
  };
  function IotaAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(IotaAPLFunctionImpl).n2i = function (context, a) {
    var aDimensions = a.o2i();
    var tmp;
    switch (_Dimensions___get_size__impl__uu37ek(aDimensions)) {
      case 0:
        tmp = new IotaArrayLong(a.p2i(this.t2g_1).q2i(this.t2g_1));
        break;
      case 1:
        var tmp_0;
        if (Dimensions__get_impl_4npepw(aDimensions, 0) === 0) {
          tmp_0 = Companion_instance_51.s2i(APLNullValue_getInstance());
        } else {
          var tmp_1 = 0;
          var tmp_2 = Dimensions__get_impl_4npepw(aDimensions, 0);
          var tmp_3 = new Int32Array(tmp_2);
          while (tmp_1 < tmp_2) {
            var tmp_4 = tmp_1;
            tmp_3[tmp_4] = a.r2i(tmp_4, this.t2g_1);
            tmp_1 = tmp_1 + 1 | 0;
          }
          tmp_0 = new IotaArray(tmp_3);
        }

        tmp = tmp_0;
        break;
      default:
        throwAPLException(new InvalidDimensionsException('Right argument must be rank 0 or 1', this.t2g_1));
        break;
    }
    return tmp;
  };
  protoOf(IotaAPLFunctionImpl).t2i = function (context, a, b) {
    var tmp;
    if (a.v2i() <= 1) {
      tmp = new FindIndexArray1DLeftArg(a.u2i(), b);
    } else {
      tmp = new FindIndexArrayMultiDimensionalLeftArg(a.u2i(), b);
    }
    return tmp;
  };
  protoOf(IotaAPLFunctionImpl).z2h = function () {
    return 'iota';
  };
  protoOf(IotaAPLFunctionImpl).a2i = function () {
    return 'index';
  };
  function IotaAPLFunction() {
  }
  protoOf(IotaAPLFunction).i2i = function (instantiation) {
    return new IotaAPLFunctionImpl(instantiation);
  };
  var SizeCalculationMethod_MATCH_instance;
  var SizeCalculationMethod_FILL_instance;
  var SizeCalculationMethod_TRUNCATE_instance;
  var SizeCalculationMethod_RECYCLE_instance;
  var SizeCalculationMethod_entriesInitialized;
  function SizeCalculationMethod_initEntries() {
    if (SizeCalculationMethod_entriesInitialized)
      return Unit_instance;
    SizeCalculationMethod_entriesInitialized = true;
    SizeCalculationMethod_MATCH_instance = new SizeCalculationMethod('MATCH', 0);
    SizeCalculationMethod_FILL_instance = new SizeCalculationMethod('FILL', 1);
    SizeCalculationMethod_TRUNCATE_instance = new SizeCalculationMethod('TRUNCATE', 2);
    SizeCalculationMethod_RECYCLE_instance = new SizeCalculationMethod('RECYCLE', 3);
  }
  function findSizeCalculationMethod($this, a) {
    var tmp;
    if (a instanceof APLNumber) {
      tmp = a.f2j().equals(new Long(-1, -1));
    } else {
      tmp = false;
    }
    if (tmp) {
      return SizeCalculationMethod_MATCH_getInstance();
    }
    if (!(a instanceof APLSymbol)) {
      return null;
    }
    var sym = a.g2j_1;
    if (!(sym.i2j_1 === Companion_getInstance_41().k2j_1)) {
      return null;
    }
    switch (sym.h2j_1) {
      case 'match':
        return SizeCalculationMethod_MATCH_getInstance();
      case 'fill':
        return SizeCalculationMethod_FILL_getInstance();
      case 'truncate':
        return SizeCalculationMethod_TRUNCATE_getInstance();
      case 'recycle':
        return SizeCalculationMethod_RECYCLE_getInstance();
      default:
        return null;
    }
  }
  function SizeCalculationMethod(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function eval2Arg$makeResult(v, resultDimensions, updatedCalculatedSize, updatedSrc) {
    var tmp = 0;
    var tmp_0 = Dimensions__get_impl_4npepw(v.o2i(), 0);
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'kotlin.let' call
      var s = resultDimensions[tmp_2];
      tmp_1[tmp_2] = s === -1 ? updatedCalculatedSize : s;
      tmp = tmp + 1 | 0;
    }
    var newDimensions = tmp_1;
    return ResizedArrayImpls_instance.n2j(_Dimensions___init__impl__sxkzw4(newDimensions), updatedSrc);
  }
  function SizeCalculationMethod_MATCH_getInstance() {
    SizeCalculationMethod_initEntries();
    return SizeCalculationMethod_MATCH_instance;
  }
  function SizeCalculationMethod_FILL_getInstance() {
    SizeCalculationMethod_initEntries();
    return SizeCalculationMethod_FILL_instance;
  }
  function SizeCalculationMethod_TRUNCATE_getInstance() {
    SizeCalculationMethod_initEntries();
    return SizeCalculationMethod_TRUNCATE_instance;
  }
  function SizeCalculationMethod_RECYCLE_getInstance() {
    SizeCalculationMethod_initEntries();
    return SizeCalculationMethod_RECYCLE_instance;
  }
  function RhoAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RhoAPLFunctionImpl).n2i = function (context, a) {
    var argDimensions = a.o2i();
    // Inline function 'com.dhsdevelopments.kap.Companion.make' call
    var dimensions = dimensionsOfSize(new Int32Array([_Dimensions___get_size__impl__uu37ek(argDimensions)]));
    var st = {_v: new ArrayMemberType(Companion_getInstance_45().d2k_1)};
    var tmp = 0;
    var tmp_0 = Dimensions__contentSize_impl_4eihds(dimensions);
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'kotlin.also' call
      var this_0 = makeAPLNumber_4(Dimensions__get_impl_4npepw(argDimensions, tmp_2));
      st._v = new ArrayMemberType(ArrayMemberType__intersection_impl_osmuy1(st._v.e2k_1, this_0.f2k()));
      tmp_1[tmp_2] = this_0;
      tmp = tmp + 1 | 0;
    }
    var content = tmp_1;
    return new APLArrayImpl(dimensions, content, st._v.e2k_1);
  };
  protoOf(RhoAPLFunctionImpl).t2i = function (context, a, b) {
    var d = a.o2i();
    if (_Dimensions___get_size__impl__uu37ek(d) > 1) {
      throwAPLException(new InvalidDimensionsException('Left side of rho must be scalar or a one-dimensional array', this.t2g_1));
    }
    var v = a.g2k();
    if (_Dimensions___get_size__impl__uu37ek(d) === 1 && Dimensions__get_impl_4npepw(d, 0) === 0) {
      return Companion_instance_51.s2i(b.u2i().h2k(0));
    } else {
      if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
        var v0 = v.g2k();
        var calculatedType = findSizeCalculationMethod(this, v0);
        var tmp;
        if (!(calculatedType == null)) {
          tmp = dimensionsOfSize(new Int32Array([b.n()]));
        } else {
          var s = v0.p2i(this.t2g_1).i2k();
          var tmp_0;
          if (s < 0) {
            throwAPLException(new InvalidDimensionsException('Attempt to reshape to dimension with negative size: ' + s, this.t2g_1));
          } else {
            tmp_0 = dimensionsOfSize(new Int32Array([s]));
          }
          tmp = tmp_0;
        }
        var d1 = tmp;
        return ResizedArrayImpls_instance.n2j(d1, b);
      } else {
        var calculationMethod = {_v: null};
        var totalSize = {_v: 1};
        var tmp_1 = 0;
        var tmp_2 = Dimensions__get_impl_4npepw(v.o2i(), 0);
        var tmp_3 = new Int32Array(tmp_2);
        while (tmp_1 < tmp_2) {
          var tmp_4 = tmp_1;
          var v1 = v.h2k(tmp_4).g2k();
          var calculatedType_0 = findSizeCalculationMethod(this, v1);
          var tmp_5;
          if (!(calculatedType_0 == null)) {
            if (!(calculationMethod._v == null)) {
              throwAPLException(new InvalidDimensionsException('Only a single dimension is allowed to be marked as computed', this.t2g_1));
            }
            calculationMethod._v = calculatedType_0;
            tmp_5 = -1;
          } else {
            // Inline function 'kotlin.also' call
            var this_0 = v1.p2i(this.t2g_1).q2i(this.t2g_1);
            totalSize._v = imul(totalSize._v, this_0);
            tmp_5 = this_0;
          }
          tmp_3[tmp_4] = tmp_5;
          tmp_1 = tmp_1 + 1 | 0;
        }
        var resultDimensions = tmp_3;
        if (calculationMethod._v == null) {
          return ResizedArrayImpls_instance.n2j(_Dimensions___init__impl__sxkzw4(resultDimensions), b);
        } else {
          var bDimensions = b.o2i();
          if (_Dimensions___get_size__impl__uu37ek(bDimensions) === 0) {
            throwAPLException(new APLIllegalArgumentException('Calculated dimensions can only be used with array arguments', this.t2g_1));
          }
          var bContentSize = Dimensions__contentSize_impl_4eihds(bDimensions);
          var calculatedSize = bContentSize / totalSize._v | 0;
          var calculatedRemainder = bContentSize % totalSize._v | 0;
          if (calculatedRemainder === 0) {
            return eval2Arg$makeResult(v, resultDimensions, calculatedSize, b);
          }
          var tmp0_subject = calculationMethod._v;
          switch (tmp0_subject == null ? -1 : tmp0_subject.o2_1) {
            case 0:
              if (!(calculatedRemainder === 0)) {
                throwAPLException(new InvalidDimensionsException('Invalid size of right argument: ' + bContentSize + '. Should be divisible by ' + totalSize._v + '.', this.t2g_1));
              }

              return eval2Arg$makeResult(v, resultDimensions, calculatedSize, b);
            case 1:
              return eval2Arg$makeResult(v, resultDimensions, calculatedSize + 1 | 0, new ExtendedRavelArray(b, imul(calculatedSize + 1 | 0, totalSize._v), this.t2g_1));
            case 2:
              return eval2Arg$makeResult(v, resultDimensions, calculatedSize, b);
            case 3:
              return eval2Arg$makeResult(v, resultDimensions, calculatedSize + 1 | 0, b);
            default:
              noWhenBranchMatchedException();
              break;
          }
        }
      }
    }
  };
  protoOf(RhoAPLFunctionImpl).e2j = function (baseFn, context, a, b) {
    var bDimensions = b.o2i();
    var underValue = this.a2h(context, a, b, null);
    var underValueDimensions = underValue.o2i();
    var aContentSize = Dimensions__contentSize_impl_4eihds(bDimensions);
    var underValueContentSize = Dimensions__contentSize_impl_4eihds(underValueDimensions);
    if (aContentSize < underValueContentSize) {
      throwAPLException(new InvalidDimensionsException('When performing an operation under a reshape, the new shape must be smaller than or equal to the original shape', this.t2g_1));
    }
    var updated = baseFn.w2g(context, underValue, null);
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!Dimensions__compareEquals_impl_5g4nme(updated.o2i(), underValueDimensions)) {
      throwAPLException(new InvalidDimensionsException('Result does not have the same dimensions as input. Expected: ' + Dimensions__toString_impl_fhouq4(underValue.o2i()) + ', got: ' + Dimensions__toString_impl_fhouq4(updated.o2i()), this.t2g_1));
    }
    var tmp;
    if (aContentSize === underValueContentSize) {
      tmp = ResizedArrayImpls_instance.n2j(bDimensions, updated);
    } else {
      var tmp_0 = ResizedArrayImpls_instance;
      var tmp_1 = ResizedArrayImpls_instance.n2j(dimensionsOfSize(new Int32Array([underValueContentSize])), updated);
      // Inline function 'kotlin.intArrayOf' call
      var tmp$ret$2 = new Int32Array([underValueContentSize]);
      tmp = tmp_0.n2j(bDimensions, new Concatenated1DArrays(tmp_1, new DropArrayValue(tmp$ret$2, ResizedArrayImpls_instance.n2j(dimensionsOfSize(new Int32Array([aContentSize])), b), this.t2g_1)));
    }
    return tmp;
  };
  protoOf(RhoAPLFunctionImpl).k2h = function () {
    return new BitwiseBitLengthFunction();
  };
  protoOf(RhoAPLFunctionImpl).z2h = function () {
    return 'shape';
  };
  protoOf(RhoAPLFunctionImpl).a2i = function () {
    return 'reshape';
  };
  function RhoAPLFunction() {
  }
  protoOf(RhoAPLFunction).i2i = function (instantiation) {
    return new RhoAPLFunctionImpl(instantiation);
  };
  function IdentityAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(IdentityAPLFunctionImpl).n2i = function (context, a) {
    return a;
  };
  protoOf(IdentityAPLFunctionImpl).t2i = function (context, a, b) {
    return b;
  };
  protoOf(IdentityAPLFunctionImpl).m2h = function (context, a, axis) {
    return a;
  };
  protoOf(IdentityAPLFunctionImpl).n2h = function (context, a, axis) {
    return a;
  };
  protoOf(IdentityAPLFunctionImpl).o2h = function (context, a, b, axis) {
    return b;
  };
  protoOf(IdentityAPLFunctionImpl).p2h = function (context, a, b, axis) {
    return b;
  };
  protoOf(IdentityAPLFunctionImpl).a2j = function (context, a) {
    return a;
  };
  protoOf(IdentityAPLFunctionImpl).b2j = function (context, a, b) {
    return b;
  };
  protoOf(IdentityAPLFunctionImpl).d2j = function (baseFn, context, a) {
    return baseFn.w2g(context, a, null);
  };
  protoOf(IdentityAPLFunctionImpl).e2j = function (baseFn, context, a, b) {
    return baseFn.w2g(context, b, null);
  };
  protoOf(IdentityAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(15);
  };
  protoOf(IdentityAPLFunctionImpl).z2h = function () {
    return 'identity';
  };
  protoOf(IdentityAPLFunctionImpl).a2i = function () {
    return 'right';
  };
  function IdentityAPLFunction() {
  }
  protoOf(IdentityAPLFunction).i2i = function (instantiation) {
    return new IdentityAPLFunctionImpl(instantiation);
  };
  function HideAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(HideAPLFunctionImpl).n2i = function (context, a) {
    a.r2k(true);
    return EmptyValue_getInstance();
  };
  protoOf(HideAPLFunctionImpl).t2i = function (context, a, b) {
    return a;
  };
  protoOf(HideAPLFunctionImpl).m2h = function (context, a, axis) {
    return a;
  };
  protoOf(HideAPLFunctionImpl).n2h = function (context, a, axis) {
    return a;
  };
  protoOf(HideAPLFunctionImpl).o2h = function (context, a, b, axis) {
    return a;
  };
  protoOf(HideAPLFunctionImpl).p2h = function (context, a, b, axis) {
    return a;
  };
  protoOf(HideAPLFunctionImpl).c2j = function (context, a, b) {
    return a;
  };
  protoOf(HideAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(15);
  };
  protoOf(HideAPLFunctionImpl).z2h = function () {
    return 'identity';
  };
  protoOf(HideAPLFunctionImpl).a2i = function () {
    return 'left';
  };
  function HideAPLFunction() {
  }
  protoOf(HideAPLFunction).i2i = function (instantiation) {
    return new HideAPLFunctionImpl(instantiation);
  };
  function _get_fromListFunction__u53e5n($this) {
    var tmp0 = $this.w2k_1;
    // Inline function 'kotlin.getValue' call
    fromListFunction$factory();
    return tmp0.x1();
  }
  function _get_toListFunction__tpl8je($this) {
    var tmp0 = $this.x2k_1;
    // Inline function 'kotlin.getValue' call
    toListFunction$factory();
    return tmp0.x1();
  }
  function makeAllIndexList($this, size) {
    var tmp = dimensionsOfSize(new Int32Array([size]));
    var tmp_0 = 0;
    var tmp_1 = new Int32Array(size);
    while (tmp_0 < size) {
      var tmp_2 = tmp_0;
      tmp_1[tmp_2] = tmp_2;
      tmp_0 = tmp_0 + 1 | 0;
    }
    return new Right(new IntArrayValue(tmp, tmp_1));
  }
  function containsDuplicates($this, values) {
    var inductionVariable = 1;
    var last = values.length;
    if (inductionVariable < last)
      do {
        var i0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var v0 = values[i0];
        var inductionVariable_0 = 0;
        if (inductionVariable_0 < i0)
          do {
            var i1 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            if (values[i1] === v0)
              return true;
          }
           while (inductionVariable_0 < i0);
      }
       while (inductionVariable < last);
    return false;
  }
  function AccessFromIndexAPLFunction$AccessFromIndexAPLFunctionImpl$fromListFunction$delegate$lambda($pos) {
    return function () {
      return new FromListFunctionImpl($pos);
    };
  }
  function AccessFromIndexAPLFunction$AccessFromIndexAPLFunctionImpl$toListFunction$delegate$lambda($pos) {
    return function () {
      return new ToListFunctionImpl($pos);
    };
  }
  function AccessFromIndexAPLFunctionImpl(pos) {
    APLFunction.call(this, pos);
    var tmp = this;
    tmp.w2k_1 = lazy(AccessFromIndexAPLFunction$AccessFromIndexAPLFunctionImpl$fromListFunction$delegate$lambda(pos));
    var tmp_0 = this;
    tmp_0.x2k_1 = lazy(AccessFromIndexAPLFunction$AccessFromIndexAPLFunctionImpl$toListFunction$delegate$lambda(pos));
  }
  protoOf(AccessFromIndexAPLFunctionImpl).w2g = function (context, a, axis) {
    return _get_fromListFunction__u53e5n(this).w2g(context, listify(a), axis);
  };
  protoOf(AccessFromIndexAPLFunctionImpl).q2h = function (context, a, axis) {
    return _get_toListFunction__tpl8je(this).w2g(context, a, axis);
  };
  protoOf(AccessFromIndexAPLFunctionImpl).a2h = function (context, a, b, axis) {
    var aFixed = a.u2i();
    var ad = aFixed.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(ad) === 1)) {
      throwAPLException(new InvalidDimensionsException('Position argument is not rank 1', this.t2g_1));
    }
    var bd = b.o2i();
    var tmp;
    if (axis == null) {
      if (Dimensions__get_impl_4npepw(ad, 0) > _Dimensions___get_size__impl__uu37ek(bd)) {
        throwAPLException(new InvalidDimensionsException('Number of values in position argument must be less than on equal to the number of dimensions', this.t2g_1));
      }
      var tmp_0 = 0;
      var tmp_1 = _Dimensions___get_size__impl__uu37ek(bd);
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_2 = Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var axisSize = Dimensions__get_impl_4npepw(bd, tmp_3);
        var tmp_4;
        if (tmp_3 < Dimensions__get_impl_4npepw(ad, 0)) {
          var indexValue = aFixed.h2k(tmp_3);
          var tmp_5;
          if (_Dimensions___get_size__impl__uu37ek(indexValue.o2i()) > 0) {
            // Inline function 'com.dhsdevelopments.kap.Companion.fromAPLValue' call
            var pos = this.t2g_1;
            var tmp_6;
            if (indexValue instanceof IntArrayValue) {
              // Inline function 'kotlin.error' call
              throw IllegalStateException_init_$Create$(toString('foo'));
            } else {
              var tmp_7 = 0;
              var tmp_8 = indexValue.n();
              var tmp_9 = new Int32Array(tmp_8);
              while (tmp_7 < tmp_8) {
                var tmp_10 = tmp_7;
                var v = indexValue.r2i(tmp_10, pos);
                tmp_9[tmp_10] = Companion_getInstance_19().a2l(v, axisSize, this.t2g_1);
                tmp_7 = tmp_7 + 1 | 0;
              }
              var values = tmp_9;
              tmp_6 = new IntArrayValue(indexValue.o2i(), values);
            }
            var tmp$ret$3 = tmp_6;
            tmp_5 = new Right(tmp$ret$3);
          } else if (equals(indexValue, APLNilValue_getInstance())) {
            tmp_5 = makeAllIndexList(this, axisSize);
          } else {
            tmp_5 = new Left(Companion_getInstance_19().a2l(indexValue.p2i(this.t2g_1).q2i(this.t2g_1), axisSize, this.t2g_1));
          }
          tmp_4 = tmp_5;
        } else {
          tmp_4 = makeAllIndexList(this, axisSize);
        }
        tmp_2[tmp_3] = tmp_4;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = tmp_2;
    } else {
      if (_Dimensions___get_size__impl__uu37ek(axis.o2i()) > 1) {
        throwAPLException(new InvalidDimensionsException('Axis argument must be a scalar number or a 1-dimensional array of numbers', this.t2g_1));
      }
      var list = ArrayList_init_$Create$();
      // Inline function 'kotlin.repeat' call
      var times = _Dimensions___get_size__impl__uu37ek(bd);
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          list.h(null);
        }
         while (inductionVariable < times);
      var axesArray = axis.u2i().y2k(this.t2g_1);
      var tmp$ret$8;
      $l$block: {
        // Inline function 'kotlin.collections.any' call
        var inductionVariable_0 = 0;
        var last = axesArray.length;
        while (inductionVariable_0 < last) {
          var element = axesArray[inductionVariable_0];
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (element < 0 || element >= _Dimensions___get_size__impl__uu37ek(bd)) {
            tmp$ret$8 = true;
            break $l$block;
          }
        }
        tmp$ret$8 = false;
      }
      if (tmp$ret$8) {
        throwAPLException(details(new IllegalAxisException('Invalid axis in axis specification', this.t2g_1), reformatLines('\n                                    The axis specification was [' + joinToString(axesArray, ', ') + '], this argument must be an\n                                    array of integers where each value must be greater or equal to 0, and less than the\n                                    number of dimensions of the right argument: ' + _Dimensions___get_size__impl__uu37ek(bd) + '.\n                                ')));
      }
      if (containsDuplicates(this, axesArray)) {
        throwAPLException(new IllegalAxisException('Duplicated axis in axis specification', this.t2g_1));
      }
      if (!(Dimensions__get_impl_4npepw(ad, 0) === axesArray.length)) {
        throwAPLException(details(new IllegalAxisException('Number of values in position argument must match the number of axes in axis specification', this.t2g_1), reformatLines('\n                                The axis argument contains ' + Dimensions__get_impl_4npepw(ad, 0) + ' values. The axis specification is [' + joinToString(axesArray, ', ') + '], which\n                                is of size ' + axesArray.length + '.\n                            ')));
      }
      // Inline function 'com.dhsdevelopments.kap.iterateMembersWithPosition' call
      if (aFixed.b2l()) {
        var axisInt = axesArray[0];
        var axisSize_0 = Dimensions__get_impl_4npepw(bd, axisInt);
        var tmp_11;
        if (!(_Dimensions___get_size__impl__uu37ek(aFixed.o2i()) === 0)) {
          // Inline function 'com.dhsdevelopments.kap.Companion.fromAPLValue' call
          var pos_0 = this.t2g_1;
          var tmp_12;
          if (aFixed instanceof IntArrayValue) {
            // Inline function 'kotlin.error' call
            throw IllegalStateException_init_$Create$(toString('foo'));
          } else {
            var tmp_13 = 0;
            var tmp_14 = aFixed.n();
            var tmp_15 = new Int32Array(tmp_14);
            while (tmp_13 < tmp_14) {
              var tmp_16 = tmp_13;
              var v_0 = aFixed.r2i(tmp_16, pos_0);
              tmp_15[tmp_16] = Companion_getInstance_19().a2l(v_0, axisSize_0, this.t2g_1);
              tmp_13 = tmp_13 + 1 | 0;
            }
            var values_0 = tmp_15;
            tmp_12 = new IntArrayValue(aFixed.o2i(), values_0);
          }
          var tmp$ret$11 = tmp_12;
          tmp_11 = new Right(tmp$ret$11);
        } else if (equals(aFixed, APLNilValue_getInstance())) {
          tmp_11 = makeAllIndexList(this, axisSize_0);
        } else {
          tmp_11 = new Left(Companion_getInstance_19().a2l(aFixed.p2i(this.t2g_1).q2i(this.t2g_1), axisSize_0, this.t2g_1));
        }
        var v_1 = tmp_11;
        list.g2(axisInt, v_1);
      } else {
        var inductionVariable_1 = 0;
        var last_0 = aFixed.n();
        if (inductionVariable_1 < last_0)
          do {
            var i = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            var m = aFixed.h2k(i);
            var axisInt_0 = axesArray[i];
            var axisSize_1 = Dimensions__get_impl_4npepw(bd, axisInt_0);
            var tmp_17;
            if (!(_Dimensions___get_size__impl__uu37ek(m.o2i()) === 0)) {
              // Inline function 'com.dhsdevelopments.kap.Companion.fromAPLValue' call
              var pos_1 = this.t2g_1;
              var tmp_18;
              if (m instanceof IntArrayValue) {
                // Inline function 'kotlin.error' call
                throw IllegalStateException_init_$Create$(toString('foo'));
              } else {
                var tmp_19 = 0;
                var tmp_20 = m.n();
                var tmp_21 = new Int32Array(tmp_20);
                while (tmp_19 < tmp_20) {
                  var tmp_22 = tmp_19;
                  var v_2 = m.r2i(tmp_22, pos_1);
                  tmp_21[tmp_22] = Companion_getInstance_19().a2l(v_2, axisSize_1, this.t2g_1);
                  tmp_19 = tmp_19 + 1 | 0;
                }
                var values_1 = tmp_21;
                tmp_18 = new IntArrayValue(m.o2i(), values_1);
              }
              var tmp$ret$15 = tmp_18;
              tmp_17 = new Right(tmp$ret$15);
            } else if (equals(m, APLNilValue_getInstance())) {
              tmp_17 = makeAllIndexList(this, axisSize_1);
            } else {
              tmp_17 = new Left(Companion_getInstance_19().a2l(m.p2i(this.t2g_1).q2i(this.t2g_1), axisSize_1, this.t2g_1));
            }
            var v_3 = tmp_17;
            list.g2(axisInt_0, v_3);
          }
           while (inductionVariable_1 < last_0);
      }
      var tmp_23 = 0;
      var tmp_24 = _Dimensions___get_size__impl__uu37ek(bd);
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_25 = Array(tmp_24);
      while (tmp_23 < tmp_24) {
        var tmp_26 = tmp_23;
        var tmp0_elvis_lhs = list.p(tmp_26);
        tmp_25[tmp_26] = tmp0_elvis_lhs == null ? makeAllIndexList(this, Dimensions__get_impl_4npepw(bd, tmp_26)) : tmp0_elvis_lhs;
        tmp_23 = tmp_23 + 1 | 0;
      }
      tmp = tmp_25;
    }
    var indexList = tmp;
    return Companion_instance_25.c2l(b, indexList);
  };
  protoOf(AccessFromIndexAPLFunctionImpl).z2h = function () {
    return _get_fromListFunction__u53e5n(this).z2h();
  };
  protoOf(AccessFromIndexAPLFunctionImpl).a2i = function () {
    return 'lookup index';
  };
  function AccessFromIndexAPLFunction() {
  }
  protoOf(AccessFromIndexAPLFunction).i2i = function (instantiation) {
    return new AccessFromIndexAPLFunctionImpl(instantiation);
  };
  function TakeAPLFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(TakeAPLFunctionImpl).w2g = function (context, a, axis) {
    if (!(axis == null)) {
      throwAPLException(new AxisNotSupported(this.t2g_1));
    }
    var v = a.g2k();
    var tmp;
    if (v instanceof APLSingleValue) {
      tmp = v;
    } else {
      if (v.n2l()) {
        tmp = v.h2k(0);
      } else {
        if (v.n() === 0) {
          tmp = v.m2l().hv();
        } else {
          tmp = v.h2k(0);
        }
      }
    }
    return tmp;
  };
  protoOf(TakeAPLFunctionImpl).a2h = function (context, a, b, axis) {
    var tmp;
    if (axis == null) {
      var a0 = a.u2i();
      var aDimensions = a0.o2i();
      if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === 1)) {
        throwAPLException(new InvalidDimensionsException('A must be a scalar or one-dimensional array', this.t2g_1));
      }
      var tmp_0;
      if (Dimensions__isEmpty_impl_2yd13(b.o2i())) {
        var tmp_1 = ResizedArrayImpls_instance;
        var tmp_2 = 0;
        var tmp_3 = a0.n();
        var tmp_4 = new Int32Array(tmp_3);
        while (tmp_2 < tmp_3) {
          tmp_4[tmp_2] = 1;
          tmp_2 = tmp_2 + 1 | 0;
        }
        tmp_0 = tmp_1.p2l(_Dimensions___init__impl__sxkzw4(tmp_4), b.o2l());
      } else {
        tmp_0 = b;
      }
      var b0 = tmp_0;
      var bDimensions = b0.o2i();
      var numSelections = Dimensions__get_impl_4npepw(aDimensions, 0);
      if (numSelections > _Dimensions___get_size__impl__uu37ek(bDimensions)) {
        throwAPLException(new InvalidDimensionsException('Size of A must be less than or equal to the rank of B', this.t2g_1));
      }
      var tmp_5 = 0;
      var tmp_6 = _Dimensions___get_size__impl__uu37ek(bDimensions);
      var tmp_7 = new Int32Array(tmp_6);
      while (tmp_5 < tmp_6) {
        var tmp_8 = tmp_5;
        var tmp_9;
        if (tmp_8 < numSelections) {
          var s = a0.h2k(tmp_8).g2k();
          var tmp_10;
          if (s instanceof APLNilValue) {
            tmp_10 = Dimensions__get_impl_4npepw(bDimensions, tmp_8);
          } else {
            tmp_10 = s.p2i(this.t2g_1).q2i(this.t2g_1);
          }
          tmp_9 = tmp_10;
        } else {
          tmp_9 = Dimensions__get_impl_4npepw(bDimensions, tmp_8);
        }
        tmp_7[tmp_8] = tmp_9;
        tmp_5 = tmp_5 + 1 | 0;
      }
      var sel = tmp_7;
      tmp = new Pair(sel, b0);
    } else {
      var b0_0 = b.u2i();
      var axisInt = axis.p2i(this.t2g_1).i2k();
      var a0_0 = a.g2k();
      var a0Dimensions = a0_0.o2i();
      var tmp_11;
      if (_Dimensions___get_size__impl__uu37ek(a0Dimensions) === 0) {
        tmp_11 = a0_0.p2i(this.t2g_1).i2k();
      } else if (_Dimensions___get_size__impl__uu37ek(a0Dimensions) === 1 && Dimensions__get_impl_4npepw(a0Dimensions, 0) === 1) {
        tmp_11 = a0_0.r2i(0, this.t2g_1);
      } else {
        throwAPLException(new APLIllegalArgumentException('When given an explicit axis, the left argument must be a single integer', this.t2g_1));
      }
      var argInteger = tmp_11;
      var bDimensions_0 = b0_0.o2i();
      ensureValidAxis(axisInt, bDimensions_0, this.t2g_1);
      var tmp_12 = 0;
      var tmp_13 = _Dimensions___get_size__impl__uu37ek(bDimensions_0);
      var tmp_14 = new Int32Array(tmp_13);
      while (tmp_12 < tmp_13) {
        var tmp_15 = tmp_12;
        var tmp_16;
        if (tmp_15 === axisInt) {
          tmp_16 = argInteger;
        } else {
          tmp_16 = Dimensions__get_impl_4npepw(bDimensions_0, tmp_15);
        }
        tmp_14[tmp_15] = tmp_16;
        tmp_12 = tmp_12 + 1 | 0;
      }
      var sel_0 = tmp_14;
      tmp = new Pair(sel_0, b0_0);
    }
    var _destruct__k2r9zo = tmp;
    var selection = _destruct__k2r9zo.de();
    var res = _destruct__k2r9zo.ee();
    return new TakeArrayValue(selection, res, this.t2g_1);
  };
  protoOf(TakeAPLFunctionImpl).v2h = function (baseFn, context, a, axis) {
    var underValue = this.w2g(context, a, axis);
    var updated = baseFn.w2g(context, underValue, null);
    var tmp;
    if (a.n() === 0) {
      tmp = a;
    } else {
      var tmp_0 = 0;
      var tmp_1 = _Dimensions___get_size__impl__uu37ek(a.o2i());
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        tmp_2[tmp_0] = 1;
        tmp_0 = tmp_0 + 1 | 0;
      }
      var replacementDimensions = _Dimensions___init__impl__sxkzw4(tmp_2);
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$3 = [updated];
      var replacement = new APLArrayImpl(replacementDimensions, tmp$ret$3);
      var tmp_3 = 0;
      var tmp_4 = _Dimensions___get_size__impl__uu37ek(a.o2i());
      var tmp_5 = new Int32Array(tmp_4);
      while (tmp_3 < tmp_4) {
        tmp_5[tmp_3] = 0;
        tmp_3 = tmp_3 + 1 | 0;
      }
      tmp = new OverlayReplacementValue(a, replacementDimensions, replacement, tmp_5, this.t2g_1);
    }
    return tmp;
  };
  protoOf(TakeAPLFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    var underValue = this.a2h(context, a, b, axis);
    // Inline function 'kotlin.require' call
    if (!(underValue instanceof TakeArrayValue)) {
      var message = 'Result is not of the correct type. Type = ' + toString(getKClassFromExpression(underValue));
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var updated = baseFn.w2g(context, underValue, null);
    return underValue.a2m(updated);
  };
  protoOf(TakeAPLFunctionImpl).z2h = function () {
    return 'take';
  };
  protoOf(TakeAPLFunctionImpl).a2i = function () {
    return 'take';
  };
  function TakeAPLFunction() {
  }
  protoOf(TakeAPLFunction).i2i = function (instantiation) {
    return new TakeAPLFunctionImpl(instantiation);
  };
  function RotateHorizFunctionImpl(pos) {
    RotateFunction.call(this, pos);
  }
  protoOf(RotateHorizFunctionImpl).f2m = function (value) {
    return value.v2i() - 1 | 0;
  };
  protoOf(RotateHorizFunctionImpl).k2h = function () {
    return new BitwiseShiftFunction();
  };
  protoOf(RotateHorizFunctionImpl).z2h = function () {
    return 'reverse horiz';
  };
  protoOf(RotateHorizFunctionImpl).a2i = function () {
    return 'rotate horiz';
  };
  function RotateHorizFunction() {
  }
  protoOf(RotateHorizFunction).i2i = function (instantiation) {
    return new RotateHorizFunctionImpl(instantiation);
  };
  function RotateVertFunctionImpl(pos) {
    RotateFunction.call(this, pos);
  }
  protoOf(RotateVertFunctionImpl).f2m = function (value) {
    return 0;
  };
  protoOf(RotateVertFunctionImpl).z2h = function () {
    return 'reverse vert';
  };
  protoOf(RotateVertFunctionImpl).a2i = function () {
    return 'rotate vert';
  };
  function RotateVertFunction() {
  }
  protoOf(RotateVertFunction).i2i = function (instantiation) {
    return new RotateVertFunctionImpl(instantiation);
  };
  function DropAPLFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(DropAPLFunctionImpl).w2g = function (context, a, axis) {
    if (!(axis == null)) {
      throwAPLException(new AxisNotSupported(this.t2g_1));
    }
    var tmp = 0;
    var tmp_0 = _Dimensions___get_size__impl__uu37ek(a.o2i());
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = tmp_2 === 0 ? 1 : 0;
      tmp = tmp + 1 | 0;
    }
    var sel = tmp_1;
    return new DropArrayValue(sel, a, this.t2g_1);
  };
  protoOf(DropAPLFunctionImpl).a2h = function (context, a, b, axis) {
    var b0 = b.u2i();
    var tmp;
    if (axis == null) {
      var a0 = a.u2i();
      var aDimensions = a0.o2i();
      if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === 1)) {
        throwAPLException(new InvalidDimensionsException('Left argument to drop must be a scalar or 1-dimensional array', this.t2g_1));
      }
      var bDimensions = b0.o2i();
      if (Dimensions__get_impl_4npepw(aDimensions, 0) > _Dimensions___get_size__impl__uu37ek(bDimensions)) {
        throwAPLException(new InvalidDimensionsException('Size of A must be less than or equal to the rank of B', this.t2g_1));
      }
      var tmp_0 = 0;
      var tmp_1 = _Dimensions___get_size__impl__uu37ek(bDimensions);
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var tmp_4;
        if (tmp_3 < Dimensions__get_impl_4npepw(aDimensions, 0)) {
          tmp_4 = a0.r2i(tmp_3, this.t2g_1);
        } else {
          tmp_4 = 0;
        }
        tmp_2[tmp_3] = tmp_4;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = tmp_2;
    } else {
      var axisInt = axis.p2i(this.t2g_1).i2k();
      var a0_0 = a.g2k();
      var a0Dimensions = a0_0.o2i();
      var tmp_5;
      if (_Dimensions___get_size__impl__uu37ek(a0Dimensions) === 0) {
        tmp_5 = a0_0.p2i(this.t2g_1).i2k();
      } else if (_Dimensions___get_size__impl__uu37ek(a0Dimensions) === 1 && Dimensions__get_impl_4npepw(a0Dimensions, 0) === 1) {
        tmp_5 = a0_0.h2k(0).p2i(this.t2g_1).i2k();
      } else {
        throwAPLException(new APLIllegalArgumentException('When given an explicit axis, the left argument must be a single integer', this.t2g_1));
      }
      var argInteger = tmp_5;
      var bDimensions_0 = b0.o2i();
      ensureValidAxis(axisInt, bDimensions_0, this.t2g_1);
      var tmp_6 = 0;
      var tmp_7 = _Dimensions___get_size__impl__uu37ek(bDimensions_0);
      var tmp_8 = new Int32Array(tmp_7);
      while (tmp_6 < tmp_7) {
        var tmp_9 = tmp_6;
        tmp_8[tmp_9] = tmp_9 === axisInt ? argInteger : 0;
        tmp_6 = tmp_6 + 1 | 0;
      }
      tmp = tmp_8;
    }
    var axisArray = tmp;
    return new DropArrayValue(axisArray, b0, this.t2g_1);
  };
  protoOf(DropAPLFunctionImpl).v2h = function (baseFn, context, a, axis) {
    var underValue = this.w2g(context, a, axis);
    if (!(underValue instanceof DropArrayValue)) {
      throw IllegalStateException_init_$Create$('Result is not of the correct type. Type = ' + toString(getKClassFromExpression(underValue)));
    }
    var updated = baseFn.w2g(context, underValue, null);
    return underValue.a2m(updated);
  };
  protoOf(DropAPLFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    var underValue = this.a2h(context, a, b, axis);
    // Inline function 'kotlin.require' call
    if (!(underValue instanceof DropArrayValue)) {
      var message = 'Result is not of the correct type. Type = ' + toString(getKClassFromExpression(underValue));
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var updated = baseFn.w2g(context, underValue, null);
    return underValue.a2m(updated);
  };
  protoOf(DropAPLFunctionImpl).z2h = function () {
    return 'drop';
  };
  protoOf(DropAPLFunctionImpl).a2i = function () {
    return 'drop';
  };
  function DropAPLFunction() {
  }
  protoOf(DropAPLFunction).i2i = function (instantiation) {
    return new DropAPLFunctionImpl(instantiation);
  };
  function computeTranspose($this, a, b, invert) {
    var a1 = a.u2i();
    var aDimensions = a1.o2i();
    var bDimensions = b.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === 1) || !(Dimensions__get_impl_4npepw(aDimensions, 0) === _Dimensions___get_size__impl__uu37ek(bDimensions))) {
      throwAPLException(new InvalidDimensionsException('Transpose arguments have wrong dimensions', $this.t2g_1));
    }
    if (b.n2l()) {
      if (Dimensions__get_impl_4npepw(aDimensions, 0) === 0) {
        return b;
      } else {
        throwAPLException(new InvalidDimensionsException('Transpose of scalar values requires empty left argument', $this.t2g_1));
      }
    }
    var tmp = 0;
    var tmp_0 = Dimensions__get_impl_4npepw(aDimensions, 0);
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = a1.r2i(tmp_2, $this.t2g_1);
      tmp = tmp + 1 | 0;
    }
    var transposeAxis = tmp_1;
    return new TransposedAPLValue(transposeAxis, b, $this.t2g_1, invert);
  }
  function TransposeFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(TransposeFunctionImpl).w2g = function (context, a, axis) {
    var tmp;
    if (a.n2l()) {
      tmp = a;
    } else {
      var size = _Dimensions___get_size__impl__uu37ek(a.o2i());
      var tmp_0 = 0;
      var tmp_1 = new Int32Array(size);
      while (tmp_0 < size) {
        var tmp_2 = tmp_0;
        tmp_1[tmp_2] = (size - tmp_2 | 0) - 1 | 0;
        tmp_0 = tmp_0 + 1 | 0;
      }
      var axisArg = tmp_1;
      tmp = new TransposedAPLValue(axisArg, a, this.t2g_1, false);
    }
    return tmp;
  };
  protoOf(TransposeFunctionImpl).a2h = function (context, a, b, axis) {
    return computeTranspose(this, a, b, false);
  };
  protoOf(TransposeFunctionImpl).q2h = function (context, a, axis) {
    ensureAxisNull(this, axis);
    return this.w2g(context, a, axis);
  };
  protoOf(TransposeFunctionImpl).r2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    return computeTranspose(this, a, b, true);
  };
  protoOf(TransposeFunctionImpl).v2h = function (baseFn, context, a, axis) {
    return this.k2m(this, baseFn, context, a, axis);
  };
  protoOf(TransposeFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    return this.l2m(this, baseFn, context, a, b, axis);
  };
  protoOf(TransposeFunctionImpl).z2h = function () {
    return 'transpose';
  };
  protoOf(TransposeFunctionImpl).a2i = function () {
    return 'transpose';
  };
  function TransposeFunction() {
  }
  protoOf(TransposeFunction).i2i = function (instantiation) {
    return new TransposeFunctionImpl(instantiation);
  };
  function enlistInner($this, result, value, level, limit) {
    var v = value.g2k();
    var tmp;
    if (v.b2l() || (!(limit == null) && level > limit)) {
      result.h(v);
      tmp = v.f2k();
    } else {
      var type = Companion_getInstance_45().d2k_1;
      // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
      if (v.b2l()) {
        var newType = enlistInner($this, result, v, level + 1 | 0, limit);
        type = ArrayMemberType__intersection_impl_osmuy1(type, newType);
      } else {
        var inductionVariable = 0;
        var last = v.n();
        if (inductionVariable < last)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var inner = v.h2k(i);
            var newType_0 = enlistInner($this, result, inner, level + 1 | 0, limit);
            type = ArrayMemberType__intersection_impl_osmuy1(type, newType_0);
          }
           while (inductionVariable < last);
      }
      tmp = type;
    }
    return tmp;
  }
  function linearSearch($this, a, b) {
    var bst = b.f2n();
    var tmp;
    var tmp_0;
    if (a instanceof APLLong) {
      tmp_0 = _ArrayMemberType___get_isLong__impl__xzhfcp(bst);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = linearSearchLong($this, a.g2n_1, b);
    } else {
      tmp = linearSearchGeneric($this, a, b);
    }
    return tmp;
  }
  function linearSearchGeneric($this, a, b) {
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (b.b2l()) {
      if (a.h2n(b, $this.t2g_1, false)) {
        return get_APLLONG_1();
      }
    } else {
      var inductionVariable = 0;
      var last = b.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = b.h2k(i);
          if (a.h2n(v, $this.t2g_1, false)) {
            return get_APLLONG_1();
          }
        }
         while (inductionVariable < last);
    }
    return get_APLLONG_0();
  }
  function linearSearchLong($this, a, b) {
    // Inline function 'kotlin.repeat' call
    var times = b.n();
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        try {
          if (b.i2n(index).equals(a)) {
            return get_APLLONG_1();
          }
        } catch ($p) {
          if ($p instanceof LongExpressionOverflow) {
            var e = $p;
            if (rangeInLong(e.ek_1) && toLong(e.ek_1).equals(a)) {
              return get_APLLONG_1();
            }
          } else {
            throw $p;
          }
        }
      }
       while (inductionVariable < times);
    return get_APLLONG_0();
  }
  function MemberFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MemberFunctionImpl).w2g = function (context, a, axis) {
    var tmp;
    if (_ArrayMemberType___get_isAtom__impl__6h2tm6(a.f2n())) {
      var tmp_0;
      if (_Dimensions___get_size__impl__uu37ek(a.o2i()) <= 1) {
        tmp_0 = a;
      } else {
        tmp_0 = ResizedArrayImpls_instance.n2j(dimensionsOfSize(new Int32Array([a.n()])), a);
      }
      tmp = tmp_0;
    } else {
      var tmp_1;
      if (axis == null) {
        tmp_1 = null;
      } else {
        // Inline function 'kotlin.let' call
        tmp_1 = axis.p2i(this.t2g_1).q2i(this.t2g_1);
      }
      var limit = tmp_1;
      if (!(limit == null)) {
        if (limit < 0) {
          throwAPLException(new APLIllegalArgumentException('Negative enlist limit: ' + limit));
        }
        if (limit === 0) {
          return a;
        }
      }
      var result = ArrayList_init_$Create$();
      var specialisedType = enlistInner(this, result, a, 0, limit);
      return new APLArrayList(dimensionsOfSize(new Int32Array([result.n()])), result, specialisedType);
    }
    return tmp;
  };
  protoOf(MemberFunctionImpl).t2i = function (context, a, b) {
    var tmp;
    if (a.n2l()) {
      tmp = linearSearch(this, a.o2l(), b);
    } else {
      tmp = new MemberResultValueHashGeneric(a, b);
    }
    return tmp;
  };
  protoOf(MemberFunctionImpl).z2h = function () {
    return 'enlist';
  };
  protoOf(MemberFunctionImpl).a2i = function () {
    return 'member';
  };
  function MemberFunction() {
  }
  protoOf(MemberFunction).i2i = function (instantiation) {
    return new MemberFunctionImpl(instantiation);
  };
  function FindFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(FindFunctionImpl).t2i = function (context, a, b) {
    var tmp;
    if (_Dimensions___get_size__impl__uu37ek(b.o2i()) === 0) {
      tmp = a.r2n(b, this.t2g_1) ? get_APLLONG_1() : get_APLLONG_0();
    } else {
      tmp = new FindResultValue(context, a, b);
    }
    return tmp;
  };
  protoOf(FindFunctionImpl).a2i = function () {
    return 'find';
  };
  function FindFunction() {
  }
  protoOf(FindFunction).i2i = function (instantiation) {
    return new FindFunctionImpl(instantiation);
  };
  function SelectElementsLastAxisFunctionImpl(pos) {
    SelectElementsFunctionImpl.call(this, pos);
  }
  protoOf(SelectElementsLastAxisFunctionImpl).f2m = function (value) {
    return Dimensions__lastAxis_impl_jffa09(value.o2i(), this.t2g_1);
  };
  protoOf(SelectElementsLastAxisFunctionImpl).a2i = function () {
    return 'select last axis';
  };
  function SelectElementsLastAxisFunction() {
  }
  protoOf(SelectElementsLastAxisFunction).i2i = function (instantiation) {
    return new SelectElementsLastAxisFunctionImpl(instantiation);
  };
  function SelectElementsFirstAxisFunctionImpl(pos) {
    SelectElementsFunctionImpl.call(this, pos);
  }
  protoOf(SelectElementsFirstAxisFunctionImpl).f2m = function (value) {
    return 0;
  };
  protoOf(SelectElementsFirstAxisFunctionImpl).a2i = function () {
    return 'select first axis';
  };
  function SelectElementsFirstAxisFunction() {
  }
  protoOf(SelectElementsFirstAxisFunction).i2i = function (instantiation) {
    return new SelectElementsFirstAxisFunctionImpl(instantiation);
  };
  function FormatAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(FormatAPLFunctionImpl).n2i = function (context, a) {
    return Companion_getInstance_46().k2o(a.i2o(FormatStyle_PLAIN_getInstance()));
  };
  protoOf(FormatAPLFunctionImpl).z2h = function () {
    return 'format';
  };
  function FormatAPLFunction() {
  }
  protoOf(FormatAPLFunction).i2i = function (instantiation) {
    return new FormatAPLFunctionImpl(instantiation);
  };
  function LocationWithValue(location, value) {
    value = value === VOID ? new Long(1, 0) : value;
    this.l2o_1 = location;
    this.m2o_1 = value;
  }
  protoOf(LocationWithValue).n2o = function (other) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(this.l2o_1.length === other.length)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.collections.forEach' call
    var progression = get_indices(this.l2o_1);
    var inductionVariable = progression.u_1;
    var last = progression.v_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var i = element;
        var otherPos = other[i];
        var locationPos = this.l2o_1[i];
        if (otherPos < locationPos)
          return true;
        else if (otherPos > locationPos)
          return false;
      }
       while (!(element === last));
    return false;
  };
  function makeLocationWithValue($this, location) {
    // Inline function 'kotlin.collections.forEach' call
    var inductionVariable = 0;
    var last = location.length;
    while (inductionVariable < last) {
      var element = location[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (element < 0) {
        throwAPLException(new IncompatibleTypeException('Negative argument', $this.t2g_1));
      }
    }
    return new LocationWithValue(location);
  }
  function WhereAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(WhereAPLFunctionImpl).n2i = function (context, a) {
    var tmp;
    if (a.n2l()) {
      var v = a.g2k();
      var tmp_0;
      if (v instanceof APLNumber) {
        tmp_0 = APLNullValue_getInstance();
      } else {
        throwAPLException(new IncompatibleTypeException('Argument must be a number', this.t2g_1));
      }
      tmp = tmp_0;
    } else {
      var aDimensions = a.o2i();
      var multipliers = Dimensions__multipliers_impl_u1suko(aDimensions);
      var tmp_1;
      if (_Dimensions___get_size__impl__uu37ek(aDimensions) === 1) {
        var resultArray = new Int32Array(10);
        var size = 0;
        // Inline function 'kotlin.repeat' call
        var times = Dimensions__get_impl_4npepw(aDimensions, 0);
        var inductionVariable = 0;
        if (inductionVariable < times)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var n = a.r2i(index, this.t2g_1);
            var newSize = size + n | 0;
            if (newSize >= resultArray.length) {
              // Inline function 'kotlin.math.max' call
              var b = resultArray.length + (resultArray.length >> 1) | 0;
              var updatedArraySize = Math.max(newSize, b);
              var newArray = new Int32Array(updatedArraySize);
              var tmp2 = resultArray;
              // Inline function 'kotlin.collections.copyInto' call
              var endIndex = tmp2.length;
              // Inline function 'kotlin.js.unsafeCast' call
              // Inline function 'kotlin.js.asDynamic' call
              var tmp_2 = tmp2;
              // Inline function 'kotlin.js.unsafeCast' call
              // Inline function 'kotlin.js.asDynamic' call
              arrayCopy(tmp_2, newArray, 0, 0, endIndex);
              resultArray = newArray;
            }
            var prevSize = size;
            size = newSize;
            fill(resultArray, index, prevSize, newSize);
          }
           while (inductionVariable < times);
        if (!(size === resultArray.length)) {
          resultArray = copyOf(resultArray, size);
        }
        return new APLArrayInt(dimensionsOfSize(new Int32Array([size])), resultArray);
      } else {
        var result = ArrayList_init_$Create$();
        // Inline function 'com.dhsdevelopments.kap.iterateMembersWithPosition' call
        if (a.b2l()) {
          var n_0 = a.p2i(this.t2g_1).q2i(this.t2g_1);
          if (n_0 > 0) {
            var tmp_3;
            if (_Dimensions___get_size__impl__uu37ek(aDimensions) === 1) {
              tmp_3 = makeAPLNumber_4(0);
            } else {
              var positionIndex = DimensionMultipliers__positionFromIndex_impl_en9oiu(multipliers, 0);
              var tmp_4 = 0;
              var tmp_5 = positionIndex.length;
              // Inline function 'kotlin.arrayOfNulls' call
              var tmp_6 = Array(tmp_5);
              while (tmp_4 < tmp_5) {
                var tmp_7 = tmp_4;
                tmp_6[tmp_7] = makeAPLNumber_4(positionIndex[tmp_7]);
                tmp_4 = tmp_4 + 1 | 0;
              }
              var valueArray = tmp_6;
              tmp_3 = new APLArrayImpl(dimensionsOfSize(new Int32Array([valueArray.length])), valueArray);
            }
            var index_0 = tmp_3;
            // Inline function 'kotlin.repeat' call
            var inductionVariable_0 = 0;
            if (inductionVariable_0 < n_0)
              do {
                var index_1 = inductionVariable_0;
                inductionVariable_0 = inductionVariable_0 + 1 | 0;
                result.h(index_0);
              }
               while (inductionVariable_0 < n_0);
          } else if (n_0 < 0) {
            throwAPLException(new IncompatibleTypeException('Negative value found in right argument', this.t2g_1));
          }
        } else {
          var inductionVariable_1 = 0;
          var last = a.n();
          if (inductionVariable_1 < last)
            do {
              var i = inductionVariable_1;
              inductionVariable_1 = inductionVariable_1 + 1 | 0;
              var n_1 = a.h2k(i).p2i(this.t2g_1).q2i(this.t2g_1);
              if (n_1 > 0) {
                var tmp_8;
                if (_Dimensions___get_size__impl__uu37ek(aDimensions) === 1) {
                  tmp_8 = makeAPLNumber_4(i);
                } else {
                  var positionIndex_0 = DimensionMultipliers__positionFromIndex_impl_en9oiu(multipliers, i);
                  var tmp_9 = 0;
                  var tmp_10 = positionIndex_0.length;
                  // Inline function 'kotlin.arrayOfNulls' call
                  var tmp_11 = Array(tmp_10);
                  while (tmp_9 < tmp_10) {
                    var tmp_12 = tmp_9;
                    tmp_11[tmp_12] = makeAPLNumber_4(positionIndex_0[tmp_12]);
                    tmp_9 = tmp_9 + 1 | 0;
                  }
                  var valueArray_0 = tmp_11;
                  tmp_8 = new APLArrayImpl(dimensionsOfSize(new Int32Array([valueArray_0.length])), valueArray_0);
                }
                var index_2 = tmp_8;
                // Inline function 'kotlin.repeat' call
                var inductionVariable_2 = 0;
                if (inductionVariable_2 < n_1)
                  do {
                    var index_3 = inductionVariable_2;
                    inductionVariable_2 = inductionVariable_2 + 1 | 0;
                    result.h(index_2);
                  }
                   while (inductionVariable_2 < n_1);
              } else if (n_1 < 0) {
                throwAPLException(new IncompatibleTypeException('Negative value found in right argument', this.t2g_1));
              }
            }
             while (inductionVariable_1 < last);
        }
        tmp_1 = new APLArrayList(dimensionsOfSize(new Int32Array([result.n()])), result);
      }
      tmp = tmp_1;
    }
    return tmp;
  };
  protoOf(WhereAPLFunctionImpl).a2j = function (context, a) {
    var a0 = a.x2g();
    if (!(_Dimensions___get_size__impl__uu37ek(a0.o2i()) === 1)) {
      throwAPLException(new IncompatibleTypeException('Argument must be a one-dimensional array, got ' + Dimensions__toString_impl_fhouq4(a0.o2i()), this.t2g_1));
    }
    if (Dimensions__get_impl_4npepw(a0.o2i(), 0) === 0) {
      return APLNullValue_getInstance();
    }
    var valuesList = ArrayList_init_$Create$();
    var maxSize = null;
    var prevElement = null;
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (a0.b2l()) {
      var v0 = a0.u2i();
      if (!(v0.v2i() === 1)) {
        throwAPLException(new InvalidDimensionsException('All arguments must be scalars or one-dimensional arrays', this.t2g_1));
      }
      var v0Array = v0.y2k(this.t2g_1);
      if (maxSize == null) {
        var tmp = 0;
        var tmp_0 = v0Array.length;
        var tmp_1 = new Int32Array(tmp_0);
        while (tmp < tmp_0) {
          var tmp_2 = tmp;
          tmp_1[tmp_2] = v0Array[tmp_2] + 1 | 0;
          tmp = tmp + 1 | 0;
        }
        maxSize = tmp_1;
      } else if (!(v0Array.length === maxSize.length)) {
        throwAPLException(new InvalidDimensionsException('All arguments must have the same size', this.t2g_1));
      } else {
        // Inline function 'kotlin.collections.forEach' call
        var progression = get_indices(v0Array);
        var inductionVariable = progression.u_1;
        var last = progression.v_1;
        if (inductionVariable <= last)
          do {
            var element = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var i = element;
            var size = v0Array[i] + 1 | 0;
            if (maxSize[i] < size) {
              maxSize[i] = size;
            }
          }
           while (!(element === last));
      }
      if (!(prevElement == null)) {
        if (contentEquals(v0Array, prevElement.l2o_1)) {
          var _receiver__tnumb7 = prevElement;
          _receiver__tnumb7.m2o_1 = _receiver__tnumb7.m2o_1.b3();
        } else if (prevElement.n2o(v0Array)) {
          throwAPLException(new IncompatibleTypeException('All arguments must be ordered', this.t2g_1));
        } else {
          // Inline function 'kotlin.also' call
          var this_0 = makeLocationWithValue(this, v0Array);
          valuesList.h(this_0);
          prevElement = this_0;
        }
      } else {
        // Inline function 'kotlin.also' call
        var this_1 = makeLocationWithValue(this, v0Array);
        valuesList.h(this_1);
        prevElement = this_1;
      }
    } else {
      var inductionVariable_0 = 0;
      var last_0 = a0.n();
      if (inductionVariable_0 < last_0)
        do {
          var i_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          var v0_0 = a0.h2k(i_0).u2i();
          if (!(v0_0.v2i() === 1)) {
            throwAPLException(new InvalidDimensionsException('All arguments must be scalars or one-dimensional arrays', this.t2g_1));
          }
          var v0Array_0 = v0_0.y2k(this.t2g_1);
          if (maxSize == null) {
            var tmp_3 = 0;
            var tmp_4 = v0Array_0.length;
            var tmp_5 = new Int32Array(tmp_4);
            while (tmp_3 < tmp_4) {
              var tmp_6 = tmp_3;
              tmp_5[tmp_6] = v0Array_0[tmp_6] + 1 | 0;
              tmp_3 = tmp_3 + 1 | 0;
            }
            maxSize = tmp_5;
          } else if (!(v0Array_0.length === maxSize.length)) {
            throwAPLException(new InvalidDimensionsException('All arguments must have the same size', this.t2g_1));
          } else {
            // Inline function 'kotlin.collections.forEach' call
            var progression_0 = get_indices(v0Array_0);
            var inductionVariable_1 = progression_0.u_1;
            var last_1 = progression_0.v_1;
            if (inductionVariable_1 <= last_1)
              do {
                var element_0 = inductionVariable_1;
                inductionVariable_1 = inductionVariable_1 + 1 | 0;
                var i_1 = element_0;
                var size_0 = v0Array_0[i_1] + 1 | 0;
                if (maxSize[i_1] < size_0) {
                  maxSize[i_1] = size_0;
                }
              }
               while (!(element_0 === last_1));
          }
          if (!(prevElement == null)) {
            if (contentEquals(v0Array_0, prevElement.l2o_1)) {
              var _receiver__tnumb7_0 = prevElement;
              _receiver__tnumb7_0.m2o_1 = _receiver__tnumb7_0.m2o_1.b3();
            } else if (prevElement.n2o(v0Array_0)) {
              throwAPLException(new IncompatibleTypeException('All arguments must be ordered', this.t2g_1));
            } else {
              // Inline function 'kotlin.also' call
              var this_2 = makeLocationWithValue(this, v0Array_0);
              valuesList.h(this_2);
              prevElement = this_2;
            }
          } else {
            // Inline function 'kotlin.also' call
            var this_3 = makeLocationWithValue(this, v0Array_0);
            valuesList.h(this_3);
            prevElement = this_3;
          }
        }
         while (inductionVariable_0 < last_0);
    }
    var d = _Dimensions___init__impl__sxkzw4(ensureNotNull(maxSize));
    var currIndex = {_v: 0};
    var curr = {_v: valuesList.p(0)};
    var position = new Int32Array(maxSize.length);
    var valuesListSize = valuesList.n();
    var tmp_7 = 0;
    var tmp_8 = Dimensions__contentSize_impl_4eihds(d);
    var tmp_9 = longArray(tmp_8);
    while (tmp_7 < tmp_8) {
      var tmp_10 = tmp_7;
      var tmp_11;
      if (currIndex._v < valuesListSize && contentEquals(position, ensureNotNull(curr._v).l2o_1)) {
        // Inline function 'kotlin.also' call
        var this_4 = curr._v.m2o_1;
        var tmp_12;
        currIndex._v = currIndex._v + 1 | 0;
        if (currIndex._v < valuesListSize) {
          tmp_12 = valuesList.p(currIndex._v);
        } else {
          tmp_12 = null;
        }
        curr._v = tmp_12;
        tmp_11 = this_4;
      } else {
        tmp_11 = new Long(0, 0);
      }
      var result = tmp_11;
      Dimensions__incrementMutablePosition_impl_to8c4g(d, position);
      tmp_9[tmp_10] = result;
      tmp_7 = tmp_7 + 1 | 0;
    }
    var content = tmp_9;
    return new APLArrayLong(d, content);
  };
  protoOf(WhereAPLFunctionImpl).k2h = function () {
    return new BitwiseCountBitsFunction();
  };
  protoOf(WhereAPLFunctionImpl).z2h = function () {
    return 'where';
  };
  function WhereAPLFunction() {
  }
  protoOf(WhereAPLFunction).i2i = function (instantiation) {
    return new WhereAPLFunctionImpl(instantiation);
  };
  function iterateUnique($this, value) {
    var a1 = value.u2i().x2g();
    var rank = a1.v2i();
    var tmp;
    switch (rank) {
      case 1:
        tmp = new Pair(a1, false);
        break;
      case 0:
        var message = 'Got rank-0 argmuent';
        throw IllegalStateException_init_$Create$(toString(message));
      default:
        tmp = new Pair(new AxisMultiDimensionEnclosedValue(a1, rank - 1 | 0), true);
        break;
    }
    var _destruct__k2r9zo = tmp;
    var value0 = _destruct__k2r9zo.de();
    var needsDisclose = _destruct__k2r9zo.ee();
    var map = HashSet_init_$Create$();
    var result = ArrayList_init_$Create$();
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (value0.b2l()) {
      var key = value0.s2o();
      if (!map.s1(key)) {
        result.h(value0);
        map.h(key);
      }
    } else {
      var inductionVariable = 0;
      var last = value0.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = value0.h2k(i);
          var key_0 = v.s2o();
          if (!map.s1(key_0)) {
            result.h(v);
            map.h(key_0);
          }
        }
         while (inductionVariable < last);
    }
    var res = new APLArrayList(dimensionsOfSize(new Int32Array([result.n()])), result);
    var tmp_0;
    if (needsDisclose) {
      tmp_0 = new DisclosedArrayValue(res, APLNilValue_getInstance());
    } else {
      tmp_0 = res;
    }
    return tmp_0;
  }
  function UniqueFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(UniqueFunctionImpl).n2i = function (context, a) {
    return iterateUnique(this, a);
  };
  protoOf(UniqueFunctionImpl).t2i = function (context, a, b) {
    var a0 = a.u2i();
    var b0 = b.u2i();
    if (!(a0.v2i() === 1) || !(b0.v2i() === 1)) {
      throwAPLException(new InvalidDimensionsException('Currently, dyadic unique requires both arguments to be of rank 1. Ranks: A=' + a0.v2i() + ', B=' + b0.v2i(), this.t2g_1));
    }
    return iterateUnique(this, new Concatenated1DArrays(a0, b0));
  };
  protoOf(UniqueFunctionImpl).z2h = function () {
    return 'unique';
  };
  protoOf(UniqueFunctionImpl).a2i = function () {
    return 'unique';
  };
  function UniqueFunction() {
  }
  protoOf(UniqueFunction).i2i = function (instantiation) {
    return new UniqueFunctionImpl(instantiation);
  };
  function collapseAndCheckRank($this, a) {
    var a1 = a.u2i().x2g();
    if (!(a1.v2i() === 1)) {
      throwAPLException(new InvalidDimensionsException('Argument to intersection must be a scalar or a 1-dimensional array', $this.t2g_1));
    }
    return a1;
  }
  function IntersectionAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(IntersectionAPLFunctionImpl).t2i = function (context, a, b) {
    var map = HashSet_init_$Create$();
    var leftKeys = HashSet_init_$Create$();
    var a0 = collapseAndCheckRank(this, a);
    var b0 = collapseAndCheckRank(this, b);
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (b0.b2l()) {
      map.h(b0.s2o());
    } else {
      var inductionVariable = 0;
      var last = b0.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = b0.h2k(i);
          map.h(v.s2o());
        }
         while (inductionVariable < last);
    }
    var result = ArrayList_init_$Create$();
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (a0.b2l()) {
      var key = a0.s2o();
      if (map.s1(key) && !leftKeys.s1(key)) {
        result.h(a0);
        leftKeys.h(key);
      }
    } else {
      var inductionVariable_0 = 0;
      var last_0 = a0.n();
      if (inductionVariable_0 < last_0)
        do {
          var i_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          var v_0 = a0.h2k(i_0);
          var key_0 = v_0.s2o();
          if (map.s1(key_0) && !leftKeys.s1(key_0)) {
            result.h(v_0);
            leftKeys.h(key_0);
          }
        }
         while (inductionVariable_0 < last_0);
    }
    return new APLArrayList(dimensionsOfSize(new Int32Array([result.n()])), result);
  };
  protoOf(IntersectionAPLFunctionImpl).a2i = function () {
    return 'intersection';
  };
  function IntersectionAPLFunction() {
  }
  protoOf(IntersectionAPLFunction).i2i = function (instantiation) {
    return new IntersectionAPLFunctionImpl(instantiation);
  };
  function Companion() {
    Companion_instance_1 = this;
    var tmp = this;
    // Inline function 'kotlin.text.toRegex' call
    var this_0 = '^[ \t]*(-?[0-9]+)[ \t]*$';
    tmp.b2p_1 = Regex_init_$Create$(this_0);
    var tmp_0 = this;
    // Inline function 'kotlin.text.toRegex' call
    var this_1 = '^[ \t]*(-?[0-9]*\\.[0-9]*)[ \t]*$';
    tmp_0.c2p_1 = Regex_init_$Create$(this_1);
  }
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion();
    return Companion_instance_1;
  }
  function eval1Arg$throwParseError(s, this$0) {
    throwAPLException(new APLEvalException("Value cannot be parsed as a number: '" + s + "'", this$0.t2g_1));
  }
  function ParseNumberFunctionImpl(pos) {
    Companion_getInstance_1();
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ParseNumberFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var s = result;
    var intMatch = Companion_getInstance_1().b2p_1.hb(s);
    if (!(intMatch == null)) {
      return makeAPLNumberWithReduction(of(Companion_instance, ensureNotNull(intMatch.wb().p(1)).sb_1));
    }
    var doubleMatch = Companion_getInstance_1().c2p_1.hb(s);
    if (!(doubleMatch == null)) {
      var doubleAsString = ensureNotNull(doubleMatch.wb().p(1)).sb_1;
      if (doubleAsString === '.') {
        eval1Arg$throwParseError(s, this);
      }
      return makeAPLNumber(toDouble(doubleAsString));
    }
    eval1Arg$throwParseError(s, this);
  };
  protoOf(ParseNumberFunctionImpl).z2h = function () {
    return 'parse number';
  };
  function ParseNumberFunction() {
  }
  protoOf(ParseNumberFunction).i2i = function (instantiation) {
    return new ParseNumberFunctionImpl(instantiation);
  };
  function CaseFunction$CaseFunctionImpl$eval2Arg$lambda($aDimensions, this$0) {
    return function (v) {
      var d = v.o2i();
      // Inline function 'com.dhsdevelopments.kap.unless' call
      if (!(_Dimensions___get_size__impl__uu37ek(d) === 0 || Dimensions__compareEquals_impl_5g4nme(d, $aDimensions))) {
        throwAPLException(new InvalidDimensionsException('Unmatched dimensions in selection list', this$0.t2g_1));
      }
      return v;
    };
  }
  function CaseFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(CaseFunctionImpl).t2i = function (context, a, b) {
    var bDimensions = b.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(bDimensions) === 1)) {
      throwAPLException(new InvalidDimensionsException('Right argument must be a 1-dimensional array', this.t2g_1));
    }
    var aDimensions = a.o2i();
    var tmp = b.l2p();
    var values = toList(map(tmp, CaseFunction$CaseFunctionImpl$eval2Arg$lambda(aDimensions, this)));
    return new CaseValue(a, values, this.t2g_1);
  };
  protoOf(CaseFunctionImpl).a2i = function () {
    return 'case';
  };
  function CaseFunction() {
  }
  protoOf(CaseFunction).i2i = function (instantiation) {
    return new CaseFunctionImpl(instantiation);
  };
  function PickAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(PickAPLFunctionImpl).t2i = function (context, a, b) {
    return new PickResultValue(a.g2k(), b, this.t2g_1);
  };
  protoOf(PickAPLFunctionImpl).e2j = function (baseFn, context, a, b) {
    var a0 = a.x2g();
    var underValue = this.a2h(context, a0, b, null);
    // Inline function 'kotlin.require' call
    if (!(underValue instanceof PickResultValue)) {
      var message = 'Result is not of the correct type. Type = ' + toString(getKClassFromExpression(underValue));
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var updated = baseFn.w2g(context, underValue, null);
    var tmp;
    if (updated.n2l() && !underValue.n2l()) {
      tmp = ResizedArrayImpls_instance.n2j(underValue.t2p_1, updated);
    } else {
      tmp = updated;
    }
    var updated0 = tmp;
    return underValue.a2m(updated0);
  };
  protoOf(PickAPLFunctionImpl).a2i = function () {
    return 'pick';
  };
  function PickAPLFunction() {
  }
  protoOf(PickAPLFunction).i2i = function (instantiation) {
    return new PickAPLFunctionImpl(instantiation);
  };
  function GenericResizedArray(dimensions, value) {
    APLArray.call(this);
    this.w2p_1 = dimensions;
    this.x2p_1 = value;
  }
  protoOf(GenericResizedArray).o2i = function () {
    return this.w2p_1;
  };
  protoOf(GenericResizedArray).f2n = function () {
    return this.x2p_1.f2n();
  };
  protoOf(GenericResizedArray).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.GenericResizedArray.valueAtImpl' call
    var s = this.x2p_1.n();
    var p0 = p < s ? p : p % s | 0;
    return this.x2p_1.h2k(p0);
  };
  protoOf(GenericResizedArray).r2i = function (p, pos) {
    // Inline function 'com.dhsdevelopments.kap.builtins.GenericResizedArray.valueAtImpl' call
    var s = this.x2p_1.n();
    var p0 = p < s ? p : p % s | 0;
    return this.x2p_1.r2i(p0, pos);
  };
  protoOf(GenericResizedArray).i2n = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.GenericResizedArray.valueAtImpl' call
    var s = this.x2p_1.n();
    var p0 = p < s ? p : p % s | 0;
    return this.x2p_1.i2n(p0);
  };
  protoOf(GenericResizedArray).y2p = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.GenericResizedArray.valueAtImpl' call
    var s = this.x2p_1.n();
    var p0 = p < s ? p : p % s | 0;
    return this.x2p_1.y2p(p0);
  };
  function ResizedSingleValueGeneric(dimensions, value) {
    APLArray.call(this);
    this.x2q_1 = dimensions;
    this.y2q_1 = value;
  }
  protoOf(ResizedSingleValueGeneric).o2i = function () {
    return this.x2q_1;
  };
  protoOf(ResizedSingleValueGeneric).f2n = function () {
    return this.y2q_1.f2k();
  };
  protoOf(ResizedSingleValueGeneric).h2k = function (p) {
    return this.y2q_1;
  };
  protoOf(ResizedSingleValueGeneric).i2n = function (p) {
    var tmp0_subject = this.y2q_1;
    var tmp;
    if (tmp0_subject instanceof APLLong) {
      tmp = this.y2q_1.g2n_1;
    } else {
      if (tmp0_subject instanceof APLBigInt) {
        throw new LongExpressionOverflow(this.y2q_1.z2q_1);
      } else {
        throw IllegalStateException_init_$Create$('Trying to read integer result from a non-integer value: ' + getKClassFromExpression(this.y2q_1).b9());
      }
    }
    return tmp;
  };
  protoOf(ResizedSingleValueGeneric).y2p = function (p) {
    var tmp = this.y2q_1;
    if (!(tmp instanceof APLDouble)) {
      throw IllegalStateException_init_$Create$('Trying to read double result from a non-double value: ' + getKClassFromExpression(this.y2q_1).b9());
    }
    return this.y2q_1.a2r_1;
  };
  function ResizedSingleValueLong(dimensions, boxed) {
    APLArray.call(this);
    this.b2r_1 = dimensions;
    this.c2r_1 = boxed;
  }
  protoOf(ResizedSingleValueLong).o2i = function () {
    return this.b2r_1;
  };
  protoOf(ResizedSingleValueLong).f2n = function () {
    // Inline function 'kotlin.let' call
    var v = this.c2r_1.g2n_1;
    return v.equals(new Long(0, 0)) || v.equals(new Long(1, 0)) ? Companion_getInstance_45().a2k_1 : Companion_getInstance_45().x2j_1;
  };
  protoOf(ResizedSingleValueLong).h2k = function (p) {
    return this.c2r_1;
  };
  protoOf(ResizedSingleValueLong).i2n = function (p) {
    return this.c2r_1.g2n_1;
  };
  function ResizedSingleValueDouble(dimensions, boxed) {
    APLArray.call(this);
    this.d2r_1 = dimensions;
    this.e2r_1 = boxed;
  }
  protoOf(ResizedSingleValueDouble).o2i = function () {
    return this.d2r_1;
  };
  protoOf(ResizedSingleValueDouble).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(ResizedSingleValueDouble).h2k = function (p) {
    return this.e2r_1;
  };
  protoOf(ResizedSingleValueDouble).y2p = function (p) {
    return this.e2r_1.a2r_1;
  };
  function ResizedArrayEqualLength(dimensions, value) {
    APLArray.call(this);
    this.f2r_1 = dimensions;
    this.g2r_1 = value;
  }
  protoOf(ResizedArrayEqualLength).o2i = function () {
    return this.f2r_1;
  };
  protoOf(ResizedArrayEqualLength).f2n = function () {
    return this.g2r_1.f2n();
  };
  protoOf(ResizedArrayEqualLength).h2k = function (p) {
    return this.g2r_1.h2k(p);
  };
  protoOf(ResizedArrayEqualLength).i2n = function (p) {
    return this.g2r_1.i2n(p);
  };
  protoOf(ResizedArrayEqualLength).y2p = function (p) {
    return this.g2r_1.y2p(p);
  };
  function findUnderlyingArray($this, a, requestedSize) {
    var curr = a.g2k();
    $l$loop: while (true) {
      var tmp;
      var tmp_0;
      if (curr instanceof GenericResizedArray) {
        tmp_0 = curr.n() === requestedSize;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = curr.x2p_1;
      } else {
        if (curr instanceof MetadataOverrideArray) {
          tmp = curr.h2r_1;
        } else {
          break $l$loop;
        }
      }
      curr = tmp;
    }
    return curr;
  }
  function ResizedArrayImpls() {
  }
  protoOf(ResizedArrayImpls).n2j = function (dimensions, value) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(_Dimensions___get_size__impl__uu37ek(dimensions) >= 1)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var v0 = findUnderlyingArray(this, value, Dimensions__contentSize_impl_4eihds(dimensions));
    var dimensionsSize = Dimensions__contentSize_impl_4eihds(dimensions);
    var tmp;
    if (Dimensions__contentSize_impl_4eihds(dimensions) === 0) {
      tmp = new APLEmptyArray(dimensions);
    } else {
      if (Dimensions__compareEquals_impl_5g4nme(dimensions, v0.o2i())) {
        tmp = v0;
      } else {
        if (isInterface(value, GenericIotaArrayLong)) {
          tmp = value.j2r(dimensions, new Long(0, 0));
        } else {
          if (v0 instanceof APLSingleValue) {
            tmp = this.p2l(dimensions, v0);
          } else {
            if (_Dimensions___get_size__impl__uu37ek(dimensions) === 0) {
              tmp = this.p2l(dimensions, v0.o2l());
            } else {
              var tmp0_subject = v0.n();
              tmp = tmp0_subject === 0 ? this.p2l(dimensions, value.m2l().hv()) : tmp0_subject === dimensionsSize ? new ResizedArrayEqualLength(dimensions, v0) : new GenericResizedArray(dimensions, v0);
            }
          }
        }
      }
    }
    var resized = tmp;
    var def = value.m2l().hv();
    var tmp_0;
    if (def === DefaultMetadata_instance.hv()) {
      tmp_0 = resized;
    } else {
      tmp_0 = Companion_instance_55.k2r(resized, def);
    }
    return tmp_0;
  };
  protoOf(ResizedArrayImpls).p2l = function (dimensions, v) {
    var tmp;
    if (v instanceof APLLong) {
      tmp = new ResizedSingleValueLong(dimensions, v);
    } else {
      if (v instanceof APLDouble) {
        tmp = new ResizedSingleValueDouble(dimensions, v);
      } else {
        tmp = new ResizedSingleValueGeneric(dimensions, v);
      }
    }
    return tmp;
  };
  var ResizedArrayImpls_instance;
  function ResizedArrayImpls_getInstance() {
    return ResizedArrayImpls_instance;
  }
  function resolveLabels($this) {
    var tmp0_elvis_lhs = $this.l2r_1.p2r();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var parent = tmp;
    var parentList = parent.q2r_1;
    var newLabels = ArrayList_init_$Create$();
    var indexedObject = $this.m2r_1;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var origAxis = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      newLabels.h(parentList.p(origAxis));
    }
    return new DimensionLabels(newLabels);
  }
  function TransposedAPLValue$TransposedAPLValueMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return resolveLabels(this$0);
    };
  }
  function destinationIndex($this, p) {
    var c = DimensionMultipliers__positionFromIndex_impl_en9oiu($this.t2r_1, p);
    var tmp = 0;
    var tmp_0 = _Dimensions___get_size__impl__uu37ek($this.s2r_1);
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = c[$this.v2r_1[tmp_2]];
      tmp = tmp + 1 | 0;
    }
    var newPos = tmp_1;
    return Dimensions__indexFromPosition$default_impl_khimhk($this.u2r_1, newPos);
  }
  function Companion_0() {
  }
  protoOf(Companion_0).x2r = function (transposeAxis, pos) {
    var tmp = 0;
    var tmp_0 = transposeAxis.length;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var res = -1;
      var inductionVariable = 0;
      var last = transposeAxis.length - 1 | 0;
      if (inductionVariable <= last)
        $l$loop: do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (transposeAxis[i] === tmp_2) {
            res = i;
            break $l$loop;
          }
        }
         while (inductionVariable <= last);
      if (res === -1) {
        throwAPLException(new InvalidDimensionsException('Not all axis represented in transpose definition: ' + ArrayUtils_instance.uz(transposeAxis), pos));
      }
      tmp_1[tmp_2] = res;
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  };
  var Companion_instance_2;
  function Companion_getInstance_2() {
    return Companion_instance_2;
  }
  function TransposedAPLValueMetadata(parent) {
    this.l2r_1 = parent.r2r_1.m2l();
    this.m2r_1 = parent.v2r_1;
    var tmp = this;
    tmp.n2r_1 = lazy(TransposedAPLValue$TransposedAPLValueMetadata$labels$delegate$lambda(this));
    this.o2r_1 = DefaultMetadata_instance.hv();
  }
  protoOf(TransposedAPLValueMetadata).p2r = function () {
    var tmp0 = this.n2r_1;
    // Inline function 'kotlin.getValue' call
    labels$factory();
    return tmp0.x1();
  };
  protoOf(TransposedAPLValueMetadata).hv = function () {
    return this.o2r_1;
  };
  function TransposedAPLValue$metadata$delegate$lambda(this$0) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var tmp;
      if (this$0.r2r_1.m2l().y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new TransposedAPLValueMetadata(this$0);
      }
      return tmp;
    };
  }
  function TransposedAPLValue(axisList, b, pos, invert) {
    APLArray.call(this);
    this.r2r_1 = b;
    var tmp = this;
    tmp.w2r_1 = lazy(TransposedAPLValue$metadata$delegate$lambda(this));
    var inverseTransposedAxis;
    if (invert) {
      this.v2r_1 = Companion_instance_2.x2r(axisList, pos);
      inverseTransposedAxis = axisList;
    } else {
      this.v2r_1 = axisList;
      inverseTransposedAxis = Companion_instance_2.x2r(axisList, pos);
    }
    this.u2r_1 = this.r2r_1.o2i();
    var tmp_0 = this;
    var tmp_1 = 0;
    var tmp_2 = _Dimensions___get_size__impl__uu37ek(this.u2r_1);
    var tmp_3 = new Int32Array(tmp_2);
    while (tmp_1 < tmp_2) {
      var tmp_4 = tmp_1;
      tmp_3[tmp_4] = Dimensions__get_impl_4npepw(this.u2r_1, inverseTransposedAxis[tmp_4]);
      tmp_1 = tmp_1 + 1 | 0;
    }
    tmp_0.s2r_1 = _Dimensions___init__impl__sxkzw4(tmp_3);
    this.t2r_1 = Dimensions__multipliers_impl_u1suko(this.s2r_1);
  }
  protoOf(TransposedAPLValue).o2i = function () {
    return this.s2r_1;
  };
  protoOf(TransposedAPLValue).f2n = function () {
    return this.r2r_1.f2n();
  };
  protoOf(TransposedAPLValue).m2l = function () {
    var tmp0 = this.w2r_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory();
    return tmp0.x1();
  };
  protoOf(TransposedAPLValue).h2k = function (p) {
    return this.r2r_1.h2k(destinationIndex(this, p));
  };
  protoOf(TransposedAPLValue).i2n = function (p) {
    return this.r2r_1.i2n(destinationIndex(this, p));
  };
  protoOf(TransposedAPLValue).y2p = function (p) {
    return this.r2r_1.y2p(destinationIndex(this, p));
  };
  function GenericIotaArrayLong() {
  }
  function IotaArray(indexes) {
    APLArray.call(this);
    this.a2s_1 = indexes;
    this.b2s_1 = _Dimensions___init__impl__sxkzw4(this.a2s_1);
    this.c2s_1 = Dimensions__multipliers_impl_u1suko(this.b2s_1);
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.collections.isEmpty' call
    // Inline function 'kotlin.require' call
    if (!!(this.a2s_1.length === 0)) {
      var message = 'indexes is empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(IotaArray).o2i = function () {
    return this.b2s_1;
  };
  protoOf(IotaArray).h2k = function (p) {
    var index = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.c2s_1, p);
    var tmp = dimensionsOfSize(new Int32Array([this.a2s_1.length]));
    var tmp_0 = 0;
    var tmp_1 = index.length;
    var tmp_2 = longArray(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = toLong_0(index[tmp_3]);
      tmp_0 = tmp_0 + 1 | 0;
    }
    return new APLArrayLong(tmp, tmp_2);
  };
  function IotaArrayLong(length) {
    APLArray.call(this);
    this.d2s_1 = length;
    this.e2s_1 = dimensionsOfSize(new Int32Array([this.d2s_1]));
  }
  protoOf(IotaArrayLong).o2i = function () {
    return this.e2s_1;
  };
  protoOf(IotaArrayLong).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(IotaArrayLong).b2q = function (withDiscard) {
    return this;
  };
  protoOf(IotaArrayLong).r2i = function (p, pos) {
    if (p < 0 || p >= this.d2s_1) {
      throwAPLException(new APLIndexOutOfBoundsException('Position in array: ' + p + ', size: ' + this.d2s_1, pos));
    }
    return p;
  };
  protoOf(IotaArrayLong).i2n = function (p) {
    return toLong_0(this.r2i(p, null));
  };
  protoOf(IotaArrayLong).h2k = function (p) {
    return makeAPLNumber_0(this.i2n(p));
  };
  protoOf(IotaArrayLong).j2r = function (d, updatedOffset) {
    return new ResizedIotaArrayLong(d, this.d2s_1, updatedOffset);
  };
  function ResizedIotaArrayLong(dimensions, width, offset) {
    APLArray.call(this);
    this.f2s_1 = dimensions;
    this.g2s_1 = width;
    this.h2s_1 = offset;
    this.i2s_1 = Dimensions__contentSize_impl_4eihds(this.f2s_1);
    if (this.g2s_1 > 0) {
      try {
        // Inline function 'kotlin.Long.minus' call
        var tmp2 = toLong_0(this.g2s_1).x2(toLong_0(1));
        // Inline function 'com.dhsdevelopments.mpbignum.addExact' call
        var b = this.h2s_1;
        if (tmp2.a1(new Long(0, 0)) > 0 && b.a1(new Long(0, 0)) > 0) {
          if (tmp2.a1((new Long(-1, 2147483647)).x2(b)) > 0) {
            throw ArithmeticException_init_$Create$();
          }
        } else if (tmp2.a1(new Long(0, 0)) < 0 && b.a1(new Long(0, 0)) < 0) {
          if (tmp2.a1((new Long(0, -2147483648)).x2(b)) < 0) {
            throw ArithmeticException_init_$Create$();
          }
        }
        tmp2.w2(b);
      } catch ($p) {
        if ($p instanceof ArithmeticException) {
          var _unused_var__etf5q3 = $p;
          // Inline function 'kotlin.error' call
          var message = 'offset+width does not fit in a long';
          throw IllegalStateException_init_$Create$(toString(message));
        } else {
          throw $p;
        }
      }
    }
  }
  protoOf(ResizedIotaArrayLong).o2i = function () {
    return this.f2s_1;
  };
  protoOf(ResizedIotaArrayLong).n = function () {
    return this.i2s_1;
  };
  protoOf(ResizedIotaArrayLong).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(ResizedIotaArrayLong).b2q = function (withDiscard) {
    return this;
  };
  protoOf(ResizedIotaArrayLong).i2n = function (p) {
    var tmp;
    if (p < 0 || p >= this.i2s_1) {
      throwAPLException(new APLIndexOutOfBoundsException('Position in array: ' + p + ', size: ' + this.i2s_1));
    } else if (p < this.g2s_1) {
      tmp = numberToLong(p).w2(this.h2s_1);
    } else {
      tmp = numberToLong(p % this.g2s_1 | 0).w2(this.h2s_1);
    }
    return tmp;
  };
  protoOf(ResizedIotaArrayLong).h2k = function (p) {
    return makeAPLNumber_0(this.i2n(p));
  };
  protoOf(ResizedIotaArrayLong).j2r = function (d, updatedOffset) {
    var tmp;
    if (Dimensions__contentSize_impl_4eihds(d) === this.g2s_1) {
      tmp = new ResizedIotaArrayLong(d, this.g2s_1, this.h2s_1.w2(updatedOffset));
    } else {
      tmp = new GenericResizedArray(d, this);
    }
    return tmp;
  };
  function findFromRef($this, reference) {
    var refColl = reference.x2g();
    // Inline function 'com.dhsdevelopments.kap.iterateMembersWithPosition' call
    var this_0 = $this.j2s_1;
    if (this_0.b2l()) {
      if (this_0.r2n(refColl, VOID, false)) {
        return toLong_0(0);
      }
    } else {
      var inductionVariable = 0;
      var last = this_0.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (this_0.h2k(i).r2n(refColl, VOID, false)) {
            return toLong_0(i);
          }
        }
         while (inductionVariable < last);
    }
    return toLong_0($this.j2s_1.n());
  }
  function FindIndexArray1DLeftArg(a, b) {
    APLArray.call(this);
    this.j2s_1 = a;
    this.k2s_1 = b;
    this.l2s_1 = this.k2s_1.o2i();
  }
  protoOf(FindIndexArray1DLeftArg).o2i = function () {
    return this.l2s_1;
  };
  protoOf(FindIndexArray1DLeftArg).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(FindIndexArray1DLeftArg).h2k = function (p) {
    return makeAPLNumber_0(this.i2n(p));
  };
  protoOf(FindIndexArray1DLeftArg).i2n = function (p) {
    var reference = this.k2s_1.h2k(p);
    return findFromRef(this, reference);
  };
  protoOf(FindIndexArray1DLeftArg).g2k = function () {
    var tmp;
    if (Dimensions__isEmpty_impl_2yd13(this.l2s_1)) {
      tmp = makeAPLNumber_0(findFromRef(this, this.k2s_1.o2l()));
    } else {
      tmp = this;
    }
    return tmp;
  };
  function FindIndexArrayMultiDimensionalLeftArg(a, b) {
    APLArray.call(this);
    this.m2s_1 = a;
    this.n2s_1 = b;
    this.o2s_1 = this.n2s_1.o2i();
    this.p2s_1 = Dimensions__multipliers_impl_u1suko(this.m2s_1.o2i());
  }
  protoOf(FindIndexArrayMultiDimensionalLeftArg).o2i = function () {
    return this.o2s_1;
  };
  protoOf(FindIndexArrayMultiDimensionalLeftArg).h2k = function (p) {
    var ref = this.n2s_1.h2k(p).x2g();
    // Inline function 'com.dhsdevelopments.kap.iterateMembersWithPosition' call
    var this_0 = this.m2s_1;
    if (this_0.b2l()) {
      if (this_0.r2n(ref, VOID, false)) {
        var coord = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.p2s_1, 0);
        return new APLArrayInt(dimensionsOfSize(new Int32Array([coord.length])), coord);
      }
    } else {
      var inductionVariable = 0;
      var last = this_0.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (this_0.h2k(i).r2n(ref, VOID, false)) {
            var coord_0 = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.p2s_1, i);
            return new APLArrayInt(dimensionsOfSize(new Int32Array([coord_0.length])), coord_0);
          }
        }
         while (inductionVariable < last);
    }
    return APLNilValue_getInstance();
  };
  function ExtendedRavelArray(src, newSize, pos) {
    APLArray.call(this);
    this.q2s_1 = src;
    this.r2s_1 = pos;
    this.s2s_1 = dimensionsOfSize(new Int32Array([newSize]));
    this.t2s_1 = Dimensions__contentSize_impl_4eihds(this.q2s_1.o2i());
    this.u2s_1 = this.q2s_1.m2l().hv();
    this.v2s_1 = ArrayMemberType__intersection_impl_osmuy1(this.q2s_1.f2n(), this.u2s_1.f2k());
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(Dimensions__contentSize_impl_4eihds(this.q2s_1.o2i()) < newSize)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(ExtendedRavelArray).o2i = function () {
    return this.s2s_1;
  };
  protoOf(ExtendedRavelArray).f2n = function () {
    return this.v2s_1;
  };
  protoOf(ExtendedRavelArray).h2k = function (p) {
    var tmp;
    if (p < this.t2s_1) {
      tmp = this.q2s_1.h2k(p);
    } else {
      tmp = this.u2s_1;
    }
    return tmp;
  };
  protoOf(ExtendedRavelArray).i2n = function (p) {
    var tmp;
    if (p < this.t2s_1) {
      tmp = this.q2s_1.i2n(p);
    } else {
      tmp = this.u2s_1.p2i(this.r2s_1).w2s(this.r2s_1);
    }
    return tmp;
  };
  protoOf(ExtendedRavelArray).y2p = function (p) {
    var tmp;
    if (p < this.t2s_1) {
      tmp = this.q2s_1.y2p(p);
    } else {
      tmp = this.u2s_1.p2i(this.r2s_1).x2s(this.r2s_1);
    }
    return tmp;
  };
  function resolveLabels_0($this) {
    var tmp0 = $this.y2s_1;
    var tmp1 = $this.z2s_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.builtins.computeTakeDropLabels' call
      var tmp0_elvis_lhs = tmp0.p2r();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        tmp$ret$0 = null;
        break $l$block;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var sourceLabels = tmp;
      var resultLabels = ArrayList_init_$Create$();
      // Inline function 'kotlin.collections.forEachIndexed' call
      var index = 0;
      var inductionVariable = 0;
      var last = tmp1.length;
      while (inductionVariable < last) {
        var item = tmp1[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        var axisLabels = sourceLabels.q2r_1.p(_unary__edvuaz);
        var tmp_0;
        if (axisLabels == null) {
          tmp_0 = null;
        } else {
          var tmp_1;
          if (item >= 0) {
            tmp_1 = axisLabels.u1(item, axisLabels.n());
          } else {
            tmp_1 = axisLabels.u1(0, axisLabels.n() + item | 0);
          }
          tmp_0 = tmp_1;
        }
        var res = tmp_0;
        resultLabels.h(res);
      }
      tmp$ret$0 = new DimensionLabels(resultLabels);
    }
    return tmp$ret$0;
  }
  function DropArrayValue$DropArrayValueMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return resolveLabels_0(this$0);
    };
  }
  function computeIndex($this, p) {
    var tmp;
    switch (_DimensionMultipliers___get_size__impl__pshf43($this.z2m_1)) {
      case 0:
        tmp = 0;
        break;
      case 1:
        // Inline function 'kotlin.let' call

        var d = $this.u2m_1[0];
        tmp = d >= 0 ? d + p | 0 : p;
        break;
      default:
        var coords = DimensionMultipliers__positionFromIndex_impl_en9oiu($this.z2m_1, p);
        var tmp_0 = 0;
        var tmp_1 = coords.length;
        var tmp_2 = new Int32Array(tmp_1);
        while (tmp_0 < tmp_1) {
          var tmp_3 = tmp_0;
          var d_0 = $this.u2m_1[tmp_3];
          var v = coords[tmp_3];
          var tmp_4;
          if (d_0 >= 0) {
            tmp_4 = d_0 + v | 0;
          } else {
            tmp_4 = v;
          }
          tmp_2[tmp_3] = tmp_4;
          tmp_0 = tmp_0 + 1 | 0;
        }

        var adjusted = tmp_2;
        tmp = Dimensions__indexFromPosition$default_impl_khimhk($this.x2m_1, adjusted);
        break;
    }
    return tmp;
  }
  function DropArrayValueMetadata(sourceMetadata, selection) {
    this.y2s_1 = sourceMetadata;
    this.z2s_1 = selection;
    var tmp = this;
    tmp.a2t_1 = lazy(DropArrayValue$DropArrayValueMetadata$labels$delegate$lambda(this));
  }
  protoOf(DropArrayValueMetadata).p2r = function () {
    var tmp0 = this.a2t_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_0();
    return tmp0.x1();
  };
  protoOf(DropArrayValueMetadata).hv = function () {
    return this.y2s_1.hv();
  };
  function DropArrayValue$metadata$delegate$lambda(this$0) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var sourceMetadata = this$0.v2m_1.m2l();
      var tmp;
      if (sourceMetadata.y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new DropArrayValueMetadata(sourceMetadata, this$0.u2m_1);
      }
      return tmp;
    };
  }
  function DropArrayValue(selection, source, pos) {
    APLArray.call(this);
    this.u2m_1 = selection;
    this.v2m_1 = source;
    this.w2m_1 = pos;
    this.x2m_1 = this.v2m_1.o2i();
    var tmp = this;
    // Inline function 'kotlin.collections.mapIndexed' call
    var this_0 = this.u2m_1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$_0(this_0.length);
    var index = 0;
    var inductionVariable = 0;
    var last = this_0.length;
    while (inductionVariable < last) {
      var item = this_0[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var tmp_0 = Dimensions__get_impl_4npepw(this.x2m_1, _unary__edvuaz);
      // Inline function 'kotlin.math.absoluteValue' call
      // Inline function 'kotlin.math.max' call
      var b = tmp_0 - abs(item) | 0;
      var tmp$ret$2 = Math.max(0, b);
      destination.h(tmp$ret$2);
    }
    tmp.y2m_1 = _Dimensions___init__impl__sxkzw4(toIntArray(destination));
    this.z2m_1 = Dimensions__multipliers_impl_u1suko(this.y2m_1);
    var tmp_1 = this;
    tmp_1.a2n_1 = lazy(DropArrayValue$metadata$delegate$lambda(this));
  }
  protoOf(DropArrayValue).o2i = function () {
    return this.y2m_1;
  };
  protoOf(DropArrayValue).f2n = function () {
    return this.v2m_1.f2n();
  };
  protoOf(DropArrayValue).m2l = function () {
    var tmp0 = this.a2n_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_0();
    return tmp0.x1();
  };
  protoOf(DropArrayValue).h2k = function (p) {
    return this.v2m_1.h2k(computeIndex(this, p));
  };
  protoOf(DropArrayValue).i2n = function (p) {
    return this.v2m_1.i2n(computeIndex(this, p));
  };
  protoOf(DropArrayValue).y2p = function (p) {
    return this.v2m_1.y2p(computeIndex(this, p));
  };
  protoOf(DropArrayValue).a2m = function (replacement) {
    var tmp = 0;
    var tmp_0 = _Dimensions___get_size__impl__uu37ek(this.y2m_1);
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var selectionValue = this.u2m_1[tmp_2];
      var tmp_3;
      if (selectionValue >= 0) {
        tmp_3 = selectionValue;
      } else {
        tmp_3 = 0;
      }
      tmp_1[tmp_2] = tmp_3;
      tmp = tmp + 1 | 0;
    }
    var offset = tmp_1;
    return new OverlayReplacementValue(this.v2m_1, this.y2m_1, replacement, offset, this.w2m_1);
  };
  function resolveLabels_1($this) {
    var tmp0 = $this.b2t_1;
    var tmp1 = $this.c2t_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.builtins.computeTakeDropLabels' call
      var tmp0_elvis_lhs = tmp0.p2r();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        tmp$ret$0 = null;
        break $l$block;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var sourceLabels = tmp;
      var resultLabels = ArrayList_init_$Create$();
      // Inline function 'kotlin.collections.forEachIndexed' call
      var index = 0;
      var inductionVariable = 0;
      var last = tmp1.length;
      while (inductionVariable < last) {
        var item = tmp1[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        var axisLabels = sourceLabels.q2r_1.p(_unary__edvuaz);
        var tmp_0;
        if (axisLabels == null) {
          tmp_0 = null;
        } else {
          var tmp_1;
          if (item >= 0) {
            var tmp_2;
            if (item <= axisLabels.n()) {
              tmp_2 = axisLabels.u1(0, item);
            } else {
              var res = ArrayList_init_$Create$();
              res.q(axisLabels);
              // Inline function 'kotlin.repeat' call
              var times = item - axisLabels.n() | 0;
              var inductionVariable_0 = 0;
              if (inductionVariable_0 < times)
                do {
                  var index_0 = inductionVariable_0;
                  inductionVariable_0 = inductionVariable_0 + 1 | 0;
                  res.h(null);
                }
                 while (inductionVariable_0 < times);
              tmp_2 = res;
            }
            tmp_1 = tmp_2;
          } else {
            var tmp_3;
            if ((-item | 0) <= axisLabels.n()) {
              tmp_3 = axisLabels.u1(axisLabels.n() + item | 0, axisLabels.n());
            } else {
              var res_0 = ArrayList_init_$Create$();
              // Inline function 'kotlin.repeat' call
              var times_0 = (-item | 0) - axisLabels.n() | 0;
              var inductionVariable_1 = 0;
              if (inductionVariable_1 < times_0)
                do {
                  var index_1 = inductionVariable_1;
                  inductionVariable_1 = inductionVariable_1 + 1 | 0;
                  res_0.h(null);
                }
                 while (inductionVariable_1 < times_0);
              res_0.q(axisLabels);
              tmp_3 = res_0;
            }
            tmp_1 = tmp_3;
          }
          tmp_0 = tmp_1;
        }
        var res_1 = tmp_0;
        resultLabels.h(res_1);
      }
      tmp$ret$0 = new DimensionLabels(resultLabels);
    }
    return tmp$ret$0;
  }
  function TakeArrayValue$TakeArrayValueMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return resolveLabels_1(this$0);
    };
  }
  function _get_needsFill__t85qwf($this) {
    var tmp0 = $this.v2l_1;
    // Inline function 'kotlin.getValue' call
    needsFill$factory();
    return tmp0.x1();
  }
  function computeNeedsFill($this) {
    // Inline function 'com.dhsdevelopments.kap.Dimensions.forEachIndexed' call
    var this_0 = $this.r2l_1.o2i();
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek(this_0);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var size = Dimensions__get_impl_4npepw(this_0, index);
        // Inline function 'kotlin.math.absoluteValue' call
        var this_1 = $this.q2l_1[index];
        if (abs(this_1) > size) {
          return true;
        }
      }
       while (inductionVariable < times);
    return false;
  }
  function TakeArrayValueMetadata(sourceMetadata, selection) {
    this.b2t_1 = sourceMetadata;
    this.c2t_1 = selection;
    var tmp = this;
    tmp.d2t_1 = lazy(TakeArrayValue$TakeArrayValueMetadata$labels$delegate$lambda(this));
  }
  protoOf(TakeArrayValueMetadata).p2r = function () {
    var tmp0 = this.d2t_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_1();
    return tmp0.x1();
  };
  protoOf(TakeArrayValueMetadata).hv = function () {
    return this.b2t_1.hv();
  };
  function TakeArrayValue$metadata$delegate$lambda(this$0) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var sourceMetadata = this$0.r2l_1.m2l();
      var tmp;
      if (sourceMetadata.y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new TakeArrayValueMetadata(sourceMetadata, this$0.q2l_1);
      }
      return tmp;
    };
  }
  function TakeArrayValue$needsFill$delegate$lambda(this$0) {
    return function () {
      return computeNeedsFill(this$0);
    };
  }
  function TakeArrayValue$specialisedType$delegate$lambda(this$0) {
    return function () {
      return new ArrayMemberType(_get_needsFill__t85qwf(this$0) ? ArrayMemberType__intersection_impl_osmuy1(this$0.r2l_1.f2n(), this$0.m2l().hv().f2k()) : this$0.r2l_1.f2n());
    };
  }
  function TakeArrayValue(selection, source, pos) {
    pos = pos === VOID ? null : pos;
    APLArray.call(this);
    this.q2l_1 = selection;
    this.r2l_1 = source;
    this.s2l_1 = pos;
    var tmp = this;
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.q2l_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(this_0.length);
    var inductionVariable = 0;
    var last = this_0.length;
    while (inductionVariable < last) {
      var item = this_0[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'kotlin.math.absoluteValue' call
      var tmp$ret$1 = abs(item);
      destination.h(tmp$ret$1);
    }
    tmp.t2l_1 = _Dimensions___init__impl__sxkzw4(toIntArray(destination));
    var tmp_0 = this;
    tmp_0.u2l_1 = lazy(TakeArrayValue$metadata$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.v2l_1 = lazy(TakeArrayValue$needsFill$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.w2l_1 = lazy(TakeArrayValue$specialisedType$delegate$lambda(this));
    this.x2l_1 = Dimensions__multipliers_impl_u1suko(this.t2l_1);
    this.y2l_1 = this.r2l_1.o2i();
    this.z2l_1 = Dimensions__multipliers_impl_u1suko(this.y2l_1);
  }
  protoOf(TakeArrayValue).o2i = function () {
    return this.t2l_1;
  };
  protoOf(TakeArrayValue).m2l = function () {
    var tmp0 = this.u2l_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_1();
    return tmp0.x1();
  };
  protoOf(TakeArrayValue).f2n = function () {
    var tmp0 = this.w2l_1;
    // Inline function 'kotlin.getValue' call
    specialisedType$factory();
    return tmp0.x1().e2k_1;
  };
  protoOf(TakeArrayValue).h2k = function (p) {
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.builtins.TakeArrayValue.resolveIndex' call
      var tmp;
      switch (_DimensionMultipliers___get_size__impl__pshf43(this.x2l_1)) {
        case 0:
          tmp = 0;
          break;
        case 1:
          var d = this.q2l_1[0];
          var size = Dimensions__get_impl_4npepw(this.y2l_1, 0);
          var index = d >= 0 ? p : (size + d | 0) + p | 0;
          var tmp_0;
          if (index < 0 || index >= size) {
            tmp$ret$1 = this.r2l_1.m2l().hv();
            break $l$block_0;
          } else {
            tmp_0 = index;
          }

          tmp = tmp_0;
          break;
        default:
          var coords = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.x2l_1, p);
          var curr = 0;
          // Inline function 'kotlin.collections.forEachIndexed' call

          var index_0 = 0;
          var inductionVariable = 0;
          var last = coords.length;
          while (inductionVariable < last) {
            var item = coords[inductionVariable];
            inductionVariable = inductionVariable + 1 | 0;
            var _unary__edvuaz = index_0;
            index_0 = _unary__edvuaz + 1 | 0;
            var d_0 = this.q2l_1[_unary__edvuaz];
            var di = Dimensions__get_impl_4npepw(this.y2l_1, _unary__edvuaz);
            var pi = d_0 >= 0 ? item : (di + d_0 | 0) + item | 0;
            if (pi < 0 || pi >= di) {
              tmp$ret$1 = this.r2l_1.m2l().hv();
              break $l$block_0;
            }
            curr = curr + imul(pi, DimensionMultipliers__get_impl_90rsg3(this.z2l_1, _unary__edvuaz)) | 0;
          }

          tmp = curr;
          break;
      }
      var srcIndex = tmp;
      tmp$ret$1 = this.r2l_1.h2k(srcIndex);
    }
    return tmp$ret$1;
  };
  protoOf(TakeArrayValue).i2n = function (p) {
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.builtins.TakeArrayValue.resolveIndex' call
      var tmp;
      switch (_DimensionMultipliers___get_size__impl__pshf43(this.x2l_1)) {
        case 0:
          tmp = 0;
          break;
        case 1:
          var d = this.q2l_1[0];
          var size = Dimensions__get_impl_4npepw(this.y2l_1, 0);
          var index = d >= 0 ? p : (size + d | 0) + p | 0;
          var tmp_0;
          if (index < 0 || index >= size) {
            tmp$ret$1 = this.r2l_1.m2l().hv().p2i(this.s2l_1).w2s(this.s2l_1);
            break $l$block_0;
          } else {
            tmp_0 = index;
          }

          tmp = tmp_0;
          break;
        default:
          var coords = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.x2l_1, p);
          var curr = 0;
          // Inline function 'kotlin.collections.forEachIndexed' call

          var index_0 = 0;
          var inductionVariable = 0;
          var last = coords.length;
          while (inductionVariable < last) {
            var item = coords[inductionVariable];
            inductionVariable = inductionVariable + 1 | 0;
            var _unary__edvuaz = index_0;
            index_0 = _unary__edvuaz + 1 | 0;
            var d_0 = this.q2l_1[_unary__edvuaz];
            var di = Dimensions__get_impl_4npepw(this.y2l_1, _unary__edvuaz);
            var pi = d_0 >= 0 ? item : (di + d_0 | 0) + item | 0;
            if (pi < 0 || pi >= di) {
              tmp$ret$1 = this.r2l_1.m2l().hv().p2i(this.s2l_1).w2s(this.s2l_1);
              break $l$block_0;
            }
            curr = curr + imul(pi, DimensionMultipliers__get_impl_90rsg3(this.z2l_1, _unary__edvuaz)) | 0;
          }

          tmp = curr;
          break;
      }
      var srcIndex = tmp;
      tmp$ret$1 = this.r2l_1.i2n(srcIndex);
    }
    return tmp$ret$1;
  };
  protoOf(TakeArrayValue).y2p = function (p) {
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.builtins.TakeArrayValue.resolveIndex' call
      var tmp;
      switch (_DimensionMultipliers___get_size__impl__pshf43(this.x2l_1)) {
        case 0:
          tmp = 0;
          break;
        case 1:
          var d = this.q2l_1[0];
          var size = Dimensions__get_impl_4npepw(this.y2l_1, 0);
          var index = d >= 0 ? p : (size + d | 0) + p | 0;
          var tmp_0;
          if (index < 0 || index >= size) {
            tmp$ret$1 = this.r2l_1.m2l().hv().p2i(this.s2l_1).x2s(this.s2l_1);
            break $l$block_0;
          } else {
            tmp_0 = index;
          }

          tmp = tmp_0;
          break;
        default:
          var coords = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.x2l_1, p);
          var curr = 0;
          // Inline function 'kotlin.collections.forEachIndexed' call

          var index_0 = 0;
          var inductionVariable = 0;
          var last = coords.length;
          while (inductionVariable < last) {
            var item = coords[inductionVariable];
            inductionVariable = inductionVariable + 1 | 0;
            var _unary__edvuaz = index_0;
            index_0 = _unary__edvuaz + 1 | 0;
            var d_0 = this.q2l_1[_unary__edvuaz];
            var di = Dimensions__get_impl_4npepw(this.y2l_1, _unary__edvuaz);
            var pi = d_0 >= 0 ? item : (di + d_0 | 0) + item | 0;
            if (pi < 0 || pi >= di) {
              tmp$ret$1 = this.r2l_1.m2l().hv().p2i(this.s2l_1).x2s(this.s2l_1);
              break $l$block_0;
            }
            curr = curr + imul(pi, DimensionMultipliers__get_impl_90rsg3(this.z2l_1, _unary__edvuaz)) | 0;
          }

          tmp = curr;
          break;
      }
      var srcIndex = tmp;
      tmp$ret$1 = this.r2l_1.y2p(srcIndex);
    }
    return tmp$ret$1;
  };
  protoOf(TakeArrayValue).a2m = function (replacement) {
    var tmp = 0;
    var tmp_0 = _Dimensions___get_size__impl__uu37ek(this.t2l_1);
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var selectionValue = this.q2l_1[tmp_2];
      var tmp_3;
      if (selectionValue >= 0) {
        tmp_3 = 0;
      } else {
        tmp_3 = Dimensions__get_impl_4npepw(this.y2l_1, tmp_2) + selectionValue | 0;
      }
      tmp_1[tmp_2] = tmp_3;
      tmp = tmp + 1 | 0;
    }
    var offset = tmp_1;
    return new OverlayReplacementValue(this.r2l_1, this.t2l_1, replacement, offset, this.s2l_1);
  };
  function resolveLabels_2($this) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(_Dimensions___get_size__impl__uu37ek($this.e2t_1) === _Dimensions___get_size__impl__uu37ek($this.h2t_1))) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var srcLabels = $this.f2t_1.p2r();
    var replLabels = $this.i2t_1.p2r();
    if (srcLabels == null && replLabels == null) {
      return null;
    }
    var resultList = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var progression = _Dimensions___get_indices__impl__n5lmcy($this.e2t_1);
    var inductionVariable = progression.u_1;
    var last = progression.v_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var axisIndex = element;
        var isResized = !(Dimensions__get_impl_4npepw($this.g2t_1, axisIndex) === Dimensions__get_impl_4npepw($this.h2t_1, axisIndex));
        var tmp;
        if (srcLabels == null) {
          tmp = null;
        } else {
          // Inline function 'kotlin.let' call
          tmp = srcLabels.q2r_1.p(axisIndex);
        }
        var srcAxisLabels = tmp;
        var tmp_0;
        if (replLabels == null) {
          tmp_0 = null;
        } else {
          // Inline function 'kotlin.let' call
          tmp_0 = replLabels.q2r_1.p(axisIndex);
        }
        var replAxisLabels = tmp_0;
        var tmp_1;
        if (srcAxisLabels == null && replAxisLabels == null) {
          tmp_1 = null;
        } else if (isResized) {
          var srcSize = Dimensions__get_impl_4npepw($this.e2t_1, axisIndex);
          var srcReplSize = Dimensions__get_impl_4npepw($this.g2t_1, axisIndex);
          var replSize = Dimensions__get_impl_4npepw($this.h2t_1, axisIndex);
          var offsetIndex = $this.j2t_1[axisIndex];
          var updatedLabels = ArrayList_init_$Create$();
          // Inline function 'kotlin.repeat' call
          var times = (srcSize - srcReplSize | 0) + replSize | 0;
          var inductionVariable_0 = 0;
          if (inductionVariable_0 < times)
            do {
              var index = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              var tmp_2;
              if (index < offsetIndex) {
                var tmp_3;
                if (srcAxisLabels == null) {
                  tmp_3 = null;
                } else {
                  // Inline function 'kotlin.let' call
                  tmp_3 = srcAxisLabels.p(index);
                }
                tmp_2 = tmp_3;
              } else if (index < (offsetIndex + replSize | 0)) {
                var tmp_4;
                if (replAxisLabels == null) {
                  tmp_4 = null;
                } else {
                  // Inline function 'kotlin.let' call
                  tmp_4 = replAxisLabels.p(index - offsetIndex | 0);
                }
                tmp_2 = tmp_4;
              } else {
                var tmp_5;
                if (srcAxisLabels == null) {
                  tmp_5 = null;
                } else {
                  // Inline function 'kotlin.let' call
                  tmp_5 = srcAxisLabels.p((index - replSize | 0) + srcReplSize | 0);
                }
                tmp_2 = tmp_5;
              }
              var label = tmp_2;
              updatedLabels.h(label);
            }
             while (inductionVariable_0 < times);
          tmp_1 = updatedLabels;
        } else {
          tmp_1 = srcAxisLabels;
        }
        var res = tmp_1;
        resultList.h(res);
      }
       while (!(element === last));
    return new DimensionLabels(resultList);
  }
  function OverlayReplacementValue$OverlayReplacementValueMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return resolveLabels_2(this$0);
    };
  }
  function isWithinReplacement($this, posArray) {
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek($this.r2t_1);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var p = posArray[index];
        var offsetValue = $this.o2t_1[index];
        if (p < offsetValue || p >= (Dimensions__get_impl_4npepw($this.q2t_1, index) + offsetValue | 0)) {
          return false;
        }
      }
       while (inductionVariable < times);
    return true;
  }
  function OverlayReplacementValueMetadata(srcDimensions, srcMetadata, srcReplDimensions, replDimensions, replMetadata, offsetList) {
    this.e2t_1 = srcDimensions;
    this.f2t_1 = srcMetadata;
    this.g2t_1 = srcReplDimensions;
    this.h2t_1 = replDimensions;
    this.i2t_1 = replMetadata;
    this.j2t_1 = offsetList;
    var tmp = this;
    tmp.k2t_1 = lazy(OverlayReplacementValue$OverlayReplacementValueMetadata$labels$delegate$lambda(this));
  }
  protoOf(OverlayReplacementValueMetadata).p2r = function () {
    var tmp0 = this.k2t_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_2();
    return tmp0.x1();
  };
  function OverlayReplacementValue$metadata$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.l2t_1.m2l().y2r() && this$0.n2t_1.m2l().y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new OverlayReplacementValueMetadata(this$0.p2t_1, this$0.l2t_1.m2l(), this$0.m2t_1, this$0.q2t_1, this$0.n2t_1.m2l(), this$0.o2t_1);
      }
      return tmp;
    };
  }
  function OverlayReplacementValue(src, srcReplacementDimensions, replacement, offset, pos) {
    APLArray.call(this);
    this.l2t_1 = src;
    this.m2t_1 = srcReplacementDimensions;
    this.n2t_1 = replacement;
    this.o2t_1 = offset;
    this.p2t_1 = this.l2t_1.o2i();
    this.q2t_1 = this.n2t_1.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(this.q2t_1) === _Dimensions___get_size__impl__uu37ek(this.p2t_1))) {
      throwAPLException(new InvalidDimensionsException('Replacement value must have the same rank as the original data. Got rank=' + _Dimensions___get_size__impl__uu37ek(this.q2t_1) + ', original=' + _Dimensions___get_size__impl__uu37ek(this.p2t_1), pos));
    }
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = _Dimensions___get_size__impl__uu37ek(this.m2t_1);
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = (Dimensions__get_impl_4npepw(this.p2t_1, tmp_3) - Dimensions__get_impl_4npepw(this.m2t_1, tmp_3) | 0) + Dimensions__get_impl_4npepw(this.q2t_1, tmp_3) | 0;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.r2t_1 = _Dimensions___init__impl__sxkzw4(tmp_2);
    this.s2t_1 = Dimensions__multipliers_impl_u1suko(this.r2t_1);
    if (!(_Dimensions___get_size__impl__uu37ek(this.r2t_1) === this.o2t_1.length)) {
      throw IllegalStateException_init_$Create$('offset size does not match src dimensions');
    }
    if (!(_Dimensions___get_size__impl__uu37ek(this.r2t_1) === _Dimensions___get_size__impl__uu37ek(this.q2t_1))) {
      throwAPLException(new InvalidDimensionsException('replacement array rank mismatch', pos));
    }
    var resizableDimension = null;
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek(this.r2t_1);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!(Dimensions__get_impl_4npepw(this.q2t_1, index) === Dimensions__get_impl_4npepw(this.p2t_1, index))) {
          resizableDimension = resizableDimension == null ? index : -1;
        }
      }
       while (inductionVariable < times);
    // Inline function 'kotlin.repeat' call
    var times_0 = _Dimensions___get_size__impl__uu37ek(this.r2t_1);
    var inductionVariable_0 = 0;
    if (inductionVariable_0 < times_0)
      do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        if (!(resizableDimension == null)) {
          if (!(Dimensions__get_impl_4npepw(this.m2t_1, index_0) === Dimensions__get_impl_4npepw(this.q2t_1, index_0)) && !(index_0 === resizableDimension)) {
            throwAPLException(new InvalidDimensionsException('cannot resize axis: ' + index_0, pos));
          }
        }
        if (Dimensions__get_impl_4npepw(this.r2t_1, index_0) < (this.o2t_1[index_0] + Dimensions__get_impl_4npepw(this.q2t_1, index_0) | 0)) {
          throwAPLException(new InvalidDimensionsException('replacement array size overflows at index ' + index_0, pos));
        }
      }
       while (inductionVariable_0 < times_0);
    var tmp_4 = this;
    tmp_4.t2t_1 = lazy(OverlayReplacementValue$metadata$delegate$lambda(this));
  }
  protoOf(OverlayReplacementValue).o2i = function () {
    return this.r2t_1;
  };
  protoOf(OverlayReplacementValue).m2l = function () {
    var tmp0 = this.t2t_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_2();
    return tmp0.x1();
  };
  protoOf(OverlayReplacementValue).h2k = function (p) {
    var posArray = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.s2t_1, p);
    var tmp;
    if (isWithinReplacement(this, posArray)) {
      var tmp_0 = 0;
      var tmp_1 = posArray.length;
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        tmp_2[tmp_3] = posArray[tmp_3] - this.o2t_1[tmp_3] | 0;
        tmp_0 = tmp_0 + 1 | 0;
      }
      var newPosArray = tmp_2;
      tmp = this.n2t_1.h2k(Dimensions__indexFromPosition$default_impl_khimhk(this.q2t_1, newPosArray));
    } else {
      var tmp_4 = 0;
      var tmp_5 = posArray.length;
      var tmp_6 = new Int32Array(tmp_5);
      while (tmp_4 < tmp_5) {
        var tmp_7 = tmp_4;
        var posOnAxis = posArray[tmp_7];
        var tmp_8;
        if (posOnAxis < this.o2t_1[tmp_7]) {
          tmp_8 = posOnAxis;
        } else {
          tmp_8 = (posOnAxis - Dimensions__get_impl_4npepw(this.q2t_1, tmp_7) | 0) + Dimensions__get_impl_4npepw(this.m2t_1, tmp_7) | 0;
        }
        tmp_6[tmp_7] = tmp_8;
        tmp_4 = tmp_4 + 1 | 0;
      }
      var newPosArray_0 = tmp_6;
      tmp = this.l2t_1.h2k(Dimensions__indexFromPosition$default_impl_khimhk(this.p2t_1, newPosArray_0));
    }
    return tmp;
  };
  function evalWithOptionalInverse($this, a, b, axis, inverse) {
    var bDimensions = b.o2i();
    var axisInt = computeAxis($this, b, axis);
    var a0 = a.u2i();
    if (a0.n() === 1) {
      var numShifts = a.h2k(0).p2i($this.t2g_1).w2s($this.t2g_1);
      var tmp = Companion_instance_4;
      // Inline function 'kotlin.Long.times' call
      var other = inverse ? -1 : 1;
      var tmp$ret$0 = numShifts.y2(toLong_0(other));
      return tmp.u2t(b, axisInt, tmp$ret$0);
    } else {
      var a0Collapsed = a0.x2g();
      var aDimensions = a0Collapsed.o2i();
      if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === (_Dimensions___get_size__impl__uu37ek(bDimensions) - 1 | 0))) {
        throwAPLException(new InvalidDimensionsException('The rank of the rotation specifier must be one less than the rank of the array to be rotated', $this.t2g_1));
      }
      // Inline function 'kotlin.repeat' call
      var times = _Dimensions___get_size__impl__uu37ek(aDimensions);
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (!(Dimensions__get_impl_4npepw(aDimensions, index) === Dimensions__get_impl_4npepw(bDimensions, index < axisInt ? index : index + 1 | 0))) {
            throwAPLException(new InvalidDimensionsException('Invalid dimension', $this.t2g_1));
          }
        }
         while (inductionVariable < times);
      var tmp_0;
      if (inverse) {
        var tmp_1 = 0;
        var tmp_2 = a0Collapsed.n();
        var tmp_3 = new Int32Array(tmp_2);
        while (tmp_1 < tmp_2) {
          var tmp_4 = tmp_1;
          tmp_3[tmp_4] = -a0Collapsed.r2i(tmp_4, $this.t2g_1) | 0;
          tmp_1 = tmp_1 + 1 | 0;
        }
        tmp_0 = tmp_3;
      } else {
        tmp_0 = a0Collapsed.y2k($this.t2g_1);
      }
      var a0Ints = tmp_0;
      return new MultiRotationRotatedAPLValue(b, axisInt, Dimensions__multipliers_impl_u1suko(a0Collapsed.o2i()), a0Ints);
    }
  }
  function computeAxis($this, v, axis) {
    var tmp;
    if (axis == null) {
      tmp = $this.f2m(v);
    } else {
      // Inline function 'kotlin.also' call
      var this_0 = axis.p2i($this.t2g_1).q2i($this.t2g_1);
      ensureValidAxis(this_0, v.o2i(), $this.t2g_1);
      tmp = this_0;
    }
    return tmp;
  }
  function RotateFunction(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(RotateFunction).w2g = function (context, a, axis) {
    var axisInt = computeAxis(this, a, axis);
    return Companion_instance_3.v2t(a, axisInt);
  };
  protoOf(RotateFunction).a2h = function (context, a, b, axis) {
    return evalWithOptionalInverse(this, a, b, axis, false);
  };
  protoOf(RotateFunction).q2h = function (context, a, axis) {
    return this.w2g(context, a, axis);
  };
  protoOf(RotateFunction).r2h = function (context, a, b, axis) {
    return evalWithOptionalInverse(this, a, b, axis, true);
  };
  protoOf(RotateFunction).v2h = function (baseFn, context, a, axis) {
    return this.k2m(this, baseFn, context, a, axis);
  };
  protoOf(RotateFunction).w2h = function (baseFn, context, a, b, axis) {
    return this.l2m(this, baseFn, context, a, b, axis);
  };
  function opLong($this, p) {
    var target = $this.w2t_1.h2k(p);
    var targetKey = target.u2q();
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    $this.a2u_1;
    if ($this.z2t_1.s1(targetKey)) {
      return true;
    }
    while ($this.b2u_1 < $this.c2u_1) {
      var _unary__edvuaz = $this.b2u_1;
      $this.b2u_1 = _unary__edvuaz + 1 | 0;
      var v = $this.x2t_1.h2k(_unary__edvuaz);
      $this.z2t_1.h(v.u2q());
      if (target.r2n(v, VOID, false)) {
        return true;
      }
    }
    return false;
  }
  function MemberResultValueHashGeneric(a, b) {
    APLArray.call(this);
    this.w2t_1 = a;
    this.x2t_1 = b;
    this.y2t_1 = this.w2t_1.o2i();
    this.z2t_1 = HashSet_init_$Create$();
    this.a2u_1 = new MPLock();
    this.b2u_1 = 0;
    this.c2u_1 = this.x2t_1.n();
  }
  protoOf(MemberResultValueHashGeneric).o2i = function () {
    return this.y2t_1;
  };
  protoOf(MemberResultValueHashGeneric).f2n = function () {
    return Companion_getInstance_45().a2k_1;
  };
  protoOf(MemberResultValueHashGeneric).i2n = function (p) {
    return opLong(this, p) ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(MemberResultValueHashGeneric).h2k = function (p) {
    return makeAPLNumberAsBoolean(opLong(this, p));
  };
  function opLong_0($this, p) {
    var dimensionsDiff = _Dimensions___get_size__impl__uu37ek($this.g2u_1) - _Dimensions___get_size__impl__uu37ek($this.h2u_1) | 0;
    var coord = DimensionMultipliers__positionFromIndex_impl_en9oiu($this.j2u_1, p);
    if (_Dimensions___get_size__impl__uu37ek($this.h2u_1) > _Dimensions___get_size__impl__uu37ek($this.g2u_1)) {
      return false;
    }
    // Inline function 'com.dhsdevelopments.kap.Dimensions.forEachIndexed' call
    var this_0 = $this.h2u_1;
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek(this_0);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var v = Dimensions__get_impl_4npepw(this_0, index);
        if (coord[dimensionsDiff + index | 0] > (Dimensions__get_impl_4npepw($this.g2u_1, dimensionsDiff + index | 0) - v | 0)) {
          return false;
        }
      }
       while (inductionVariable < times);
    return opLong$processOneLevel($this, dimensionsDiff, 0, 0, p);
  }
  function opLong$processOneLevel(this$0, dimensionsDiff, level, aCurr, bCurr) {
    if (level === _Dimensions___get_size__impl__uu37ek(this$0.h2u_1)) {
      return this$0.e2u_1.h2k(aCurr).r2n(this$0.f2u_1.h2k(bCurr), VOID, false);
    } else {
      var axis = dimensionsDiff + level | 0;
      var aStride = DimensionMultipliers__get_impl_90rsg3(this$0.i2u_1, level);
      var bStride = DimensionMultipliers__get_impl_90rsg3(this$0.j2u_1, axis);
      var length = Dimensions__get_impl_4npepw(this$0.h2u_1, level);
      var inductionVariable = 0;
      if (inductionVariable < length)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var ap = aCurr + imul(i, aStride) | 0;
          var bp = bCurr + imul(i, bStride) | 0;
          if (!opLong$processOneLevel(this$0, dimensionsDiff, level + 1 | 0, ap, bp)) {
            return false;
          }
        }
         while (inductionVariable < length);
      return true;
    }
  }
  function FindResultValue(context, a, b) {
    APLArray.call(this);
    this.d2u_1 = context;
    this.e2u_1 = a;
    this.f2u_1 = b;
    this.g2u_1 = this.f2u_1.o2i();
    this.h2u_1 = this.e2u_1.o2i();
    this.i2u_1 = Dimensions__multipliers_impl_u1suko(this.h2u_1);
    this.j2u_1 = Dimensions__multipliers_impl_u1suko(this.g2u_1);
  }
  protoOf(FindResultValue).o2i = function () {
    return this.g2u_1;
  };
  protoOf(FindResultValue).f2n = function () {
    return Companion_getInstance_45().a2k_1;
  };
  protoOf(FindResultValue).i2n = function (p) {
    return opLong_0(this, p) ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(FindResultValue).h2k = function (p) {
    return makeAPLNumberAsBoolean(opLong_0(this, p));
  };
  function SelectElementsFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(SelectElementsFunctionImpl).a2h = function (context, a, b, axis) {
    var bFixed = b.u2i();
    var aDimensions = a.o2i();
    var bDimensions = bFixed.o2i();
    var axisInt = axis == null ? this.f2m(bFixed) : axis.p2i(this.t2g_1).q2i(this.t2g_1);
    ensureValidAxis(axisInt, bDimensions, this.t2g_1);
    if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === 0 || (_Dimensions___get_size__impl__uu37ek(aDimensions) === 1 && Dimensions__get_impl_4npepw(aDimensions, 0) === Dimensions__get_impl_4npepw(bDimensions, axisInt)))) {
      throwAPLException(new InvalidDimensionsException('A must be a single-dimensional array of the same size as the dimension of B along the selected axis.', this.t2g_1));
    }
    var tmp;
    if (a.n2l()) {
      // Inline function 'kotlin.let' call
      var v = a.p2i(this.t2g_1).q2i(this.t2g_1);
      if (v < 0) {
        throwAPLException(new IncompatibleTypeException('Selection index is negative', this.t2g_1));
      }
      var tmp_0 = 0;
      var tmp_1 = Dimensions__get_impl_4npepw(bDimensions, axisInt);
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        tmp_2[tmp_0] = v;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = tmp_2;
    } else {
      // Inline function 'kotlin.collections.onEach' call
      // Inline function 'kotlin.apply' call
      var this_0 = a.y2k(this.t2g_1);
      var inductionVariable = 0;
      var last = this_0.length;
      while (inductionVariable < last) {
        var element = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        if (element < 0) {
          throwAPLException(new IncompatibleTypeException('Selection index is negative', this.t2g_1));
        }
      }
      tmp = this_0;
    }
    var selectIndexes = tmp;
    return new SelectElementsValue(selectIndexes, bFixed, axisInt);
  };
  function CaseValue(selectionArray, values, pos) {
    APLArray.call(this);
    this.k2u_1 = selectionArray;
    this.l2u_1 = values;
    this.m2u_1 = pos;
  }
  protoOf(CaseValue).o2i = function () {
    return this.k2u_1.o2i();
  };
  protoOf(CaseValue).h2k = function (p) {
    var index = this.k2u_1.r2i(p, this.m2u_1);
    if (index < 0 || index >= this.l2u_1.n()) {
      throwAPLException(new InvalidDimensionsException('Attempt to read index ' + index + ' from array (size=' + this.l2u_1.n() + ')', this.m2u_1));
    }
    var v = this.l2u_1.p(index);
    var tmp;
    if (v.n2l()) {
      tmp = v.o2l();
    } else {
      tmp = v.h2k(p);
    }
    return tmp;
  };
  function computePos($this, p) {
    var indexCoord = $this.q2p_1.h2k(p);
    return indexCoordToPosition($this, indexCoord);
  }
  function indexCoordToPosition($this, indexCoord) {
    var indexCoordDimensions = indexCoord.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(indexCoordDimensions) === 0 && _Dimensions___get_size__impl__uu37ek($this.u2p_1) === 1 || (_Dimensions___get_size__impl__uu37ek(indexCoordDimensions) === 1 && _Dimensions___get_size__impl__uu37ek($this.u2p_1) === Dimensions__get_impl_4npepw(indexCoordDimensions, 0)))) {
      throwAPLException(new InvalidDimensionsException('Lookup index has rank ' + _Dimensions___get_size__impl__uu37ek(indexCoordDimensions) + '. Not compatible with rank: ' + _Dimensions___get_size__impl__uu37ek($this.u2p_1), $this.s2p_1));
    }
    var tmp;
    if (_Dimensions___get_size__impl__uu37ek(indexCoordDimensions) === 0) {
      // Inline function 'kotlin.intArrayOf' call
      tmp = new Int32Array([indexCoord.p2i($this.s2p_1).q2i($this.s2p_1)]);
    } else {
      tmp = indexCoord.y2k($this.s2p_1);
    }
    var coordArray = tmp;
    return Dimensions__indexFromPositionNegativeSupport_impl_bjb4c5($this.u2p_1, coordArray, $this.s2p_1);
  }
  function PickResultValue(a, b, pos) {
    APLArray.call(this);
    this.q2p_1 = a;
    this.r2p_1 = b;
    this.s2p_1 = pos;
    this.t2p_1 = this.q2p_1.o2i();
    this.u2p_1 = this.r2p_1.o2i();
    this.v2p_1 = this.r2p_1.f2n();
  }
  protoOf(PickResultValue).o2i = function () {
    return this.t2p_1;
  };
  protoOf(PickResultValue).f2n = function () {
    return this.v2p_1;
  };
  protoOf(PickResultValue).h2k = function (p) {
    return this.r2p_1.h2k(computePos(this, p));
  };
  protoOf(PickResultValue).i2n = function (p) {
    return this.r2p_1.i2n(computePos(this, p));
  };
  protoOf(PickResultValue).y2p = function (p) {
    return this.r2p_1.y2p(computePos(this, p));
  };
  protoOf(PickResultValue).g2k = function () {
    return unwrapEnclosedSingleValue(this);
  };
  protoOf(PickResultValue).a2m = function (updated) {
    if (!Dimensions__compareEquals_impl_5g4nme(updated.o2i(), this.t2p_1)) {
      throwAPLException(new InvalidDimensionsException('Updated result does not have the same dimensions as selection. Updated: ' + Dimensions__toString_impl_fhouq4(updated.o2i()) + ', selection: ' + Dimensions__toString_impl_fhouq4(this.t2p_1), this.s2p_1));
    }
    var tmp;
    if (this.n() === 0) {
      tmp = this.r2p_1;
    } else {
      var positionList = new Int32Array(Dimensions__contentSize_impl_4eihds(this.u2p_1));
      fill(positionList, -1);
      // Inline function 'com.dhsdevelopments.kap.iterateMembersWithPosition' call
      var this_0 = this.q2p_1;
      if (this_0.b2l()) {
        var resultPos = indexCoordToPosition(this, this_0);
        positionList[resultPos] = 0;
      } else {
        var inductionVariable = 0;
        var last = this_0.n();
        if (inductionVariable < last)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var indexCoord = this_0.h2k(i);
            var resultPos_0 = indexCoordToPosition(this, indexCoord);
            positionList[resultPos_0] = i;
          }
           while (inductionVariable < last);
      }
      tmp = new PickOverlayReplacementValue(this.u2p_1, updated, this.r2p_1, positionList);
    }
    return tmp;
  };
  function resolveLabels_3($this, sourceMetadata) {
    var tmp0_elvis_lhs = sourceMetadata.p2r();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var parent = tmp;
    var parentList = parent.q2r_1;
    var newLabels = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = parentList.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var i = checkIndexOverflow(_unary__edvuaz);
      var newAxisLabels = item == null ? null : i === $this.o2u_1 ? asReversed(item) : item;
      newLabels.h(newAxisLabels);
    }
    return new DimensionLabels(newLabels);
  }
  function InverseAPLValue$InverseAPLValueMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return resolveLabels_3(this$0, this$0.n2u_1);
    };
  }
  function destinationIndex_0($this, p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.AxisActionFactors.withFactors' call
    var this_0 = $this.t2u_1;
    var f = this_0.z2u_1;
    var m = this_0.y2u_1;
    var lowVal = p % m | 0;
    var highVal = p / f | 0;
    var r = p % f | 0;
    var axisCoord = r / m | 0;
    var coord = (Dimensions__get_impl_4npepw($this.t2u_1.w2u_1, $this.s2u_1) - axisCoord | 0) - 1 | 0;
    return (imul(highVal, $this.t2u_1.z2u_1) + imul(coord, DimensionMultipliers__get_impl_90rsg3($this.t2u_1.x2u_1, $this.s2u_1)) | 0) + lowVal | 0;
  }
  function Companion_1() {
  }
  protoOf(Companion_1).v2t = function (source, axis) {
    var dimensions = source.o2i();
    var tmp;
    if (Dimensions__isEmpty_impl_2yd13(dimensions) || Dimensions__get_impl_4npepw(dimensions, axis) <= 1) {
      tmp = source;
    } else {
      tmp = new InverseAPLValue(source, axis);
    }
    return tmp;
  };
  var Companion_instance_3;
  function Companion_getInstance_3() {
    return Companion_instance_3;
  }
  function InverseAPLValueMetadata(parent) {
    this.n2u_1 = parent.r2u_1.m2l();
    this.o2u_1 = parent.s2u_1;
    var tmp = this;
    tmp.p2u_1 = lazy(InverseAPLValue$InverseAPLValueMetadata$labels$delegate$lambda(this));
    this.q2u_1 = DefaultMetadata_instance.hv();
  }
  protoOf(InverseAPLValueMetadata).p2r = function () {
    var tmp0 = this.p2u_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_3();
    return tmp0.x1();
  };
  protoOf(InverseAPLValueMetadata).hv = function () {
    return this.q2u_1;
  };
  function InverseAPLValue$metadata$delegate$lambda(this$0) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var tmp;
      if (this$0.r2u_1.m2l().y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new InverseAPLValueMetadata(this$0);
      }
      return tmp;
    };
  }
  function InverseAPLValue(source, axis) {
    APLArray.call(this);
    this.r2u_1 = source;
    this.s2u_1 = axis;
    this.t2u_1 = new AxisActionFactors(this.r2u_1.o2i(), this.s2u_1);
    this.u2u_1 = this.r2u_1.o2i();
    var tmp = this;
    tmp.v2u_1 = lazy(InverseAPLValue$metadata$delegate$lambda(this));
  }
  protoOf(InverseAPLValue).o2i = function () {
    return this.u2u_1;
  };
  protoOf(InverseAPLValue).f2n = function () {
    return this.r2u_1.f2n();
  };
  protoOf(InverseAPLValue).m2l = function () {
    var tmp0 = this.v2u_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_3();
    return tmp0.x1();
  };
  protoOf(InverseAPLValue).h2k = function (p) {
    return this.r2u_1.h2k(destinationIndex_0(this, p));
  };
  protoOf(InverseAPLValue).i2n = function (p) {
    return this.r2u_1.i2n(destinationIndex_0(this, p));
  };
  protoOf(InverseAPLValue).y2p = function (p) {
    return this.r2u_1.y2p(destinationIndex_0(this, p));
  };
  function resolveLabels_4($this, sourceMetadata) {
    var tmp0_elvis_lhs = sourceMetadata.p2r();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var parent = tmp;
    var parentList = parent.q2r_1;
    var newLabels = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = parentList.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var i = checkIndexOverflow(_unary__edvuaz);
      var tmp_0;
      if (item == null) {
        tmp_0 = null;
      } else if (i === $this.a2v_1) {
        // Inline function 'kotlin.collections.map' call
        var this_0 = until(0, Dimensions__get_impl_4npepw($this.e2v_1, $this.a2v_1));
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
        var inductionVariable = this_0.u_1;
        var last = this_0.v_1;
        if (inductionVariable <= last)
          do {
            var item_0 = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var i2 = item_0;
            var tmp$ret$0 = item.p(plusMod(numberToLong(i2).w2($this.b2v_1), toLong_0(Dimensions__get_impl_4npepw($this.e2v_1, $this.a2v_1))).c1());
            destination.h(tmp$ret$0);
          }
           while (!(item_0 === last));
        tmp_0 = destination;
      } else {
        tmp_0 = item;
      }
      var newAxisLabels = tmp_0;
      newLabels.h(newAxisLabels);
    }
    return new DimensionLabels(newLabels);
  }
  function RotatedAPLValue$RotatedAPLValueMetadata$labels$delegate$lambda(this$0, $source) {
    return function () {
      return resolveLabels_4(this$0, $source.m2l());
    };
  }
  function computeValueAt($this, p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.AxisActionFactors.withFactors' call
    var this_0 = $this.i2v_1;
    var f = this_0.z2u_1;
    var m = this_0.y2u_1;
    var lowVal = p % m | 0;
    var highVal = p / f | 0;
    var r = p % f | 0;
    var axisCoord = r / m | 0;
    var coord = plusMod(numberToLong(axisCoord).w2($this.h2v_1), toLong_0(Dimensions__get_impl_4npepw($this.o2i(), $this.g2v_1))).c1();
    return (imul(highVal, $this.i2v_1.z2u_1) + imul(coord, DimensionMultipliers__get_impl_90rsg3($this.i2v_1.x2u_1, $this.g2v_1)) | 0) + lowVal | 0;
  }
  function Companion_2() {
  }
  protoOf(Companion_2).u2t = function (source, axis, numShifts) {
    var dimensions = source.o2i();
    var tmp;
    var tmp_0;
    if (Dimensions__isEmpty_impl_2yd13(dimensions)) {
      tmp_0 = true;
    } else {
      // Inline function 'kotlin.Long.rem' call
      var other = Dimensions__get_impl_4npepw(dimensions, axis);
      tmp_0 = numShifts.a3(toLong_0(other)).equals(new Long(0, 0));
    }
    if (tmp_0) {
      tmp = source;
    } else {
      tmp = new RotatedAPLValue(source, axis, numShifts);
    }
    return tmp;
  };
  var Companion_instance_4;
  function Companion_getInstance_4() {
    return Companion_instance_4;
  }
  function RotatedAPLValueMetadata(source, axis, numShifts) {
    this.a2v_1 = axis;
    this.b2v_1 = numShifts;
    var tmp = this;
    tmp.c2v_1 = lazy(RotatedAPLValue$RotatedAPLValueMetadata$labels$delegate$lambda(this, source));
    this.d2v_1 = DefaultMetadata_instance.hv();
    this.e2v_1 = source.o2i();
  }
  protoOf(RotatedAPLValueMetadata).p2r = function () {
    var tmp0 = this.c2v_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_4();
    return tmp0.x1();
  };
  protoOf(RotatedAPLValueMetadata).hv = function () {
    return this.d2v_1;
  };
  function RotatedAPLValue$metadata$delegate$lambda(this$0) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var tmp;
      if (this$0.f2v_1.m2l().y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new RotatedAPLValueMetadata(this$0.f2v_1, this$0.g2v_1, this$0.h2v_1);
      }
      return tmp;
    };
  }
  function RotatedAPLValue(source, axis, numShifts) {
    APLArray.call(this);
    this.f2v_1 = source;
    this.g2v_1 = axis;
    this.h2v_1 = numShifts;
    this.i2v_1 = new AxisActionFactors(this.f2v_1.o2i(), this.g2v_1);
    var tmp = this;
    tmp.j2v_1 = lazy(RotatedAPLValue$metadata$delegate$lambda(this));
  }
  protoOf(RotatedAPLValue).o2i = function () {
    return this.f2v_1.o2i();
  };
  protoOf(RotatedAPLValue).f2n = function () {
    return this.f2v_1.f2n();
  };
  protoOf(RotatedAPLValue).h2k = function (p) {
    return this.f2v_1.h2k(computeValueAt(this, p));
  };
  protoOf(RotatedAPLValue).i2n = function (p) {
    return this.f2v_1.i2n(computeValueAt(this, p));
  };
  protoOf(RotatedAPLValue).y2p = function (p) {
    return this.f2v_1.y2p(computeValueAt(this, p));
  };
  protoOf(RotatedAPLValue).m2l = function () {
    var tmp0 = this.j2v_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_4();
    return tmp0.x1();
  };
  function resolveLabels_5($this, sourceMetadata) {
    var tmp0_elvis_lhs = sourceMetadata.p2r();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var parent = tmp;
    // Inline function 'kotlin.collections.mapIndexed' call
    var this_0 = parent.q2r_1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var index = 0;
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var tmp$ret$0 = checkIndexOverflow(_unary__edvuaz) === $this.k2v_1 ? null : item;
      destination.h(tmp$ret$0);
    }
    var newLabels = destination;
    return new DimensionLabels(newLabels);
  }
  function MultiRotationRotatedAPLValue$MultiRotatedAPLValueMetadata$labels$delegate$lambda(this$0, $source) {
    return function () {
      return resolveLabels_5(this$0, $source.m2l());
    };
  }
  function MultiRotatedAPLValueMetadata(source, axis) {
    this.k2v_1 = axis;
    var tmp = this;
    tmp.l2v_1 = lazy(MultiRotationRotatedAPLValue$MultiRotatedAPLValueMetadata$labels$delegate$lambda(this, source));
    this.m2v_1 = DefaultMetadata_instance.hv();
  }
  protoOf(MultiRotatedAPLValueMetadata).p2r = function () {
    var tmp0 = this.l2v_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_5();
    return tmp0.x1();
  };
  protoOf(MultiRotatedAPLValueMetadata).hv = function () {
    return this.m2v_1;
  };
  function MultiRotationRotatedAPLValue$metadata$delegate$lambda(this$0) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var tmp;
      if (this$0.n2v_1.m2l().y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new MultiRotatedAPLValueMetadata(this$0.n2v_1, this$0.o2v_1);
      }
      return tmp;
    };
  }
  function MultiRotationRotatedAPLValue(source, axis, selectionMultipliers, selection) {
    APLArray.call(this);
    this.n2v_1 = source;
    this.o2v_1 = axis;
    this.p2v_1 = selectionMultipliers;
    this.q2v_1 = selection;
    this.r2v_1 = this.n2v_1.o2i();
    this.s2v_1 = new AxisActionFactors(this.n2v_1.o2i(), this.o2v_1);
    this.t2v_1 = Dimensions__multipliers_impl_u1suko(this.r2v_1);
    var tmp = this;
    tmp.u2v_1 = lazy(MultiRotationRotatedAPLValue$metadata$delegate$lambda(this));
  }
  protoOf(MultiRotationRotatedAPLValue).o2i = function () {
    return this.r2v_1;
  };
  protoOf(MultiRotationRotatedAPLValue).m2l = function () {
    var tmp0 = this.u2v_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_5();
    return tmp0.x1();
  };
  protoOf(MultiRotationRotatedAPLValue).h2k = function (p) {
    var coords = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.t2v_1, p);
    var curr = 0;
    // Inline function 'kotlin.repeat' call
    var times = _DimensionMultipliers___get_size__impl__pshf43(this.p2v_1);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var dimensionIndex = coords[index < this.o2v_1 ? index : index + 1 | 0];
        curr = curr + imul(DimensionMultipliers__get_impl_90rsg3(this.p2v_1, index), dimensionIndex) | 0;
      }
       while (inductionVariable < times);
    var numShifts = this.q2v_1[curr];
    // Inline function 'com.dhsdevelopments.kap.builtins.AxisActionFactors.withFactors' call
    var this_0 = this.s2v_1;
    var f = this_0.z2u_1;
    var m = this_0.y2u_1;
    var lowVal = p % m | 0;
    var highVal = p / f | 0;
    var r = p % f | 0;
    var axisCoord = r / m | 0;
    var coord = plusMod(numberToLong(axisCoord).w2(toLong_0(numShifts)), toLong_0(Dimensions__get_impl_4npepw(this.r2v_1, this.o2v_1))).c1();
    return this.n2v_1.h2k((imul(highVal, this.s2v_1.z2u_1) + imul(coord, DimensionMultipliers__get_impl_90rsg3(this.s2v_1.x2u_1, this.o2v_1)) | 0) + lowVal | 0);
  };
  function resolveLabels_6($this) {
    var tmp0_elvis_lhs = $this.v2v_1.p2r();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var origLabels = tmp;
    var res = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = origLabels.q2r_1.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var axisIndex = checkIndexOverflow(_unary__edvuaz);
      var tmp_0;
      if (item == null) {
        tmp_0 = null;
      } else {
        var inner = ArrayList_init_$Create$();
        if (!(axisIndex === $this.x2v_1)) {
          inner.q(item);
        } else {
          // Inline function 'kotlin.collections.forEachIndexed' call
          var index_0 = 0;
          var indexedObject = $this.w2v_1;
          var inductionVariable = 0;
          var last = indexedObject.length;
          while (inductionVariable < last) {
            var item_0 = indexedObject[inductionVariable];
            inductionVariable = inductionVariable + 1 | 0;
            var _unary__edvuaz_0 = index_0;
            index_0 = _unary__edvuaz_0 + 1 | 0;
            if (item_0 === 1) {
              inner.h(item.p(_unary__edvuaz_0));
            } else if (item_0 > 1) {
              // Inline function 'kotlin.repeat' call
              var inductionVariable_0 = 0;
              if (inductionVariable_0 < item_0)
                do {
                  var index_1 = inductionVariable_0;
                  inductionVariable_0 = inductionVariable_0 + 1 | 0;
                  inner.h(null);
                }
                 while (inductionVariable_0 < item_0);
            }
          }
        }
        tmp_0 = inner;
      }
      var a = tmp_0;
      res.h(a);
    }
    return new DimensionLabels(res);
  }
  function SelectElementsValue$SelectElementsValueMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return resolveLabels_6(this$0);
    };
  }
  function SelectElementsValueMetadata(sourceMetadata, selectIndexes, axis) {
    this.v2v_1 = sourceMetadata;
    this.w2v_1 = selectIndexes;
    this.x2v_1 = axis;
    var tmp = this;
    tmp.y2v_1 = lazy(SelectElementsValue$SelectElementsValueMetadata$labels$delegate$lambda(this));
  }
  protoOf(SelectElementsValueMetadata).p2r = function () {
    var tmp0 = this.y2v_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_6();
    return tmp0.x1();
  };
  protoOf(SelectElementsValueMetadata).hv = function () {
    return this.v2v_1.hv();
  };
  function SelectElementsValue$metadata$delegate$lambda(this$0, $selectIndexes) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var sourceMetadata = this$0.z2v_1.m2l();
      var tmp;
      if (sourceMetadata.y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new SelectElementsValueMetadata(sourceMetadata, $selectIndexes, this$0.a2w_1);
      }
      return tmp;
    };
  }
  function SelectElementsValue(selectIndexes, b, axis) {
    APLArray.call(this);
    this.z2v_1 = b;
    this.a2w_1 = axis;
    this.b2w_1 = this.z2v_1.o2i();
    // Inline function 'com.dhsdevelopments.kap.reduceWithInitial' call
    var curr = 0;
    var inductionVariable = 0;
    var last = selectIndexes.length;
    while (inductionVariable < last) {
      var element = selectIndexes[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      curr = curr + element | 0;
    }
    var sizeAlongAxis = curr;
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = _Dimensions___get_size__impl__uu37ek(this.b2w_1);
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp_4;
      if (tmp_3 === this.a2w_1) {
        tmp_4 = sizeAlongAxis;
      } else {
        tmp_4 = Dimensions__get_impl_4npepw(this.b2w_1, tmp_3);
      }
      tmp_2[tmp_3] = tmp_4;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.c2w_1 = _Dimensions___init__impl__sxkzw4(tmp_2);
    var m = Dimensions__multipliers_impl_u1suko(this.b2w_1);
    this.e2w_1 = this.a2w_1 === 0 ? _Dimensions___get_size__impl__uu37ek(this.b2w_1) : DimensionMultipliers__get_impl_90rsg3(m, this.a2w_1 - 1 | 0);
    this.f2w_1 = DimensionMultipliers__get_impl_90rsg3(m, this.a2w_1);
    this.g2w_1 = new Int32Array(sizeAlongAxis);
    var aIndexPos = 0;
    var bIndexPos = 0;
    var inductionVariable_0 = 0;
    var last_0 = selectIndexes.length;
    while (inductionVariable_0 < last_0) {
      var dimensionsIndex = selectIndexes[inductionVariable_0];
      inductionVariable_0 = inductionVariable_0 + 1 | 0;
      var inductionVariable_1 = 0;
      if (inductionVariable_1 < dimensionsIndex)
        do {
          var i2 = inductionVariable_1;
          inductionVariable_1 = inductionVariable_1 + 1 | 0;
          var _unary__edvuaz = aIndexPos;
          aIndexPos = _unary__edvuaz + 1 | 0;
          this.g2w_1[_unary__edvuaz] = bIndexPos;
        }
         while (inductionVariable_1 < dimensionsIndex);
      bIndexPos = bIndexPos + 1 | 0;
    }
    this.d2w_1 = new AxisActionFactors(this.c2w_1, this.a2w_1);
    var tmp_5 = this;
    tmp_5.h2w_1 = lazy(SelectElementsValue$metadata$delegate$lambda(this, selectIndexes));
  }
  protoOf(SelectElementsValue).o2i = function () {
    return this.c2w_1;
  };
  protoOf(SelectElementsValue).f2n = function () {
    return this.z2v_1.f2n();
  };
  protoOf(SelectElementsValue).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.SelectElementsValue.valueAtImpl' call
    // Inline function 'com.dhsdevelopments.kap.builtins.AxisActionFactors.withFactors' call
    var this_0 = this.d2w_1;
    var f = this_0.z2u_1;
    var m = this_0.y2u_1;
    var lowVal = p % m | 0;
    var highVal = p / f | 0;
    var r = p % f | 0;
    var axisCoord = r / m | 0;
    var bIndexPos = this.g2w_1[axisCoord];
    var resultPos = (imul(highVal, this.e2w_1) + imul(bIndexPos, this.f2w_1) | 0) + lowVal | 0;
    return this.z2v_1.h2k(resultPos);
  };
  protoOf(SelectElementsValue).i2n = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.SelectElementsValue.valueAtImpl' call
    // Inline function 'com.dhsdevelopments.kap.builtins.AxisActionFactors.withFactors' call
    var this_0 = this.d2w_1;
    var f = this_0.z2u_1;
    var m = this_0.y2u_1;
    var lowVal = p % m | 0;
    var highVal = p / f | 0;
    var r = p % f | 0;
    var axisCoord = r / m | 0;
    var bIndexPos = this.g2w_1[axisCoord];
    var resultPos = (imul(highVal, this.e2w_1) + imul(bIndexPos, this.f2w_1) | 0) + lowVal | 0;
    return this.z2v_1.i2n(resultPos);
  };
  protoOf(SelectElementsValue).y2p = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.SelectElementsValue.valueAtImpl' call
    // Inline function 'com.dhsdevelopments.kap.builtins.AxisActionFactors.withFactors' call
    var this_0 = this.d2w_1;
    var f = this_0.z2u_1;
    var m = this_0.y2u_1;
    var lowVal = p % m | 0;
    var highVal = p / f | 0;
    var r = p % f | 0;
    var axisCoord = r / m | 0;
    var bIndexPos = this.g2w_1[axisCoord];
    var resultPos = (imul(highVal, this.e2w_1) + imul(bIndexPos, this.f2w_1) | 0) + lowVal | 0;
    return this.z2v_1.y2p(resultPos);
  };
  protoOf(SelectElementsValue).m2l = function () {
    var tmp0 = this.h2w_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_6();
    return tmp0.x1();
  };
  function PickOverlayReplacementValue(dimensions, updated, b, positionList) {
    APLArray.call(this);
    this.i2w_1 = dimensions;
    this.j2w_1 = updated;
    this.k2w_1 = b;
    this.l2w_1 = positionList;
  }
  protoOf(PickOverlayReplacementValue).o2i = function () {
    return this.i2w_1;
  };
  protoOf(PickOverlayReplacementValue).f2n = function () {
    var uType = this.j2w_1.f2n();
    var bType = this.k2w_1.f2n();
    return ArrayMemberType__intersection_impl_osmuy1(bType, uType);
  };
  protoOf(PickOverlayReplacementValue).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.PickOverlayReplacementValue.valueAtInternal' call
    var position = this.l2w_1[p];
    if (position === -1) {
      return this.k2w_1.h2k(p);
    } else {
      return this.j2w_1.h2k(position);
    }
  };
  protoOf(PickOverlayReplacementValue).i2n = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.PickOverlayReplacementValue.valueAtInternal' call
    var position = this.l2w_1[p];
    if (position === -1) {
      return this.k2w_1.i2n(p);
    } else {
      return this.j2w_1.i2n(position);
    }
  };
  protoOf(PickOverlayReplacementValue).y2p = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.PickOverlayReplacementValue.valueAtInternal' call
    var position = this.l2w_1[p];
    if (position === -1) {
      return this.k2w_1.y2p(p);
    } else {
      return this.j2w_1.y2p(position);
    }
  };
  function AxisActionFactors(dimensions, axis) {
    this.w2u_1 = dimensions;
    this.x2u_1 = Dimensions__multipliers_impl_u1suko(this.w2u_1);
    this.y2u_1 = DimensionMultipliers__get_impl_90rsg3(this.x2u_1, axis);
    this.z2u_1 = imul(this.y2u_1, Dimensions__get_impl_4npepw(this.w2u_1, axis));
  }
  protoOf(AxisActionFactors).m2w = function (high, low, axisPosition) {
    return (imul(this.z2u_1, high) + imul(axisPosition, this.y2u_1) | 0) + low | 0;
  };
  function fromListFunction$factory() {
    return getPropertyCallableRef('fromListFunction', 1, KProperty1, function (receiver) {
      return _get_fromListFunction__u53e5n(receiver);
    }, null);
  }
  function toListFunction$factory() {
    return getPropertyCallableRef('toListFunction', 1, KProperty1, function (receiver) {
      return _get_toListFunction__tpl8je(receiver);
    }, null);
  }
  function metadata$factory() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function metadata$factory_0() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_0() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function metadata$factory_1() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function needsFill$factory() {
    return getPropertyCallableRef('needsFill', 1, KProperty1, function (receiver) {
      return _get_needsFill__t85qwf(receiver);
    }, null);
  }
  function specialisedType$factory() {
    return getPropertyCallableRef('specialisedType', 1, KProperty1, function (receiver) {
      return new ArrayMemberType(receiver.f2n());
    }, null);
  }
  function labels$factory_1() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function metadata$factory_2() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_2() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function metadata$factory_3() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_3() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function metadata$factory_4() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_4() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function metadata$factory_5() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_5() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function metadata$factory_6() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_6() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function BitwiseOp() {
  }
  protoOf(BitwiseOp).n2w = function (fn, pos) {
    var tmp0_elvis_lhs = fn.k2h();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw new BitwiseNotSupported(fn.t2g_1);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  function BitwiseXorFunctionImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseXorFunctionImpl).u2w = function (a, b) {
    return a.k3(b);
  };
  protoOf(BitwiseXorFunctionImpl).v2w = function (a, b) {
    return xor(a, b);
  };
  protoOf(BitwiseXorFunctionImpl).a2i = function () {
    return 'bitwise xor';
  };
  function BitwiseXorFunction() {
  }
  protoOf(BitwiseXorFunction).i2i = function (instantiation) {
    return new BitwiseXorFunctionImpl(instantiation);
  };
  function BitwiseAndFunctionImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseAndFunctionImpl).u2w = function (a, b) {
    return a.i3(b);
  };
  protoOf(BitwiseAndFunctionImpl).v2w = function (a, b) {
    return and(a, b);
  };
  protoOf(BitwiseAndFunctionImpl).a2i = function () {
    return 'bitwise and';
  };
  function BitwiseAndFunction() {
  }
  protoOf(BitwiseAndFunction).i2i = function (instantiation) {
    return new BitwiseAndFunctionImpl(instantiation);
  };
  function BitwiseOrFunctionImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseOrFunctionImpl).u2w = function (a, b) {
    return a.j3(b);
  };
  protoOf(BitwiseOrFunctionImpl).v2w = function (a, b) {
    return or(a, b);
  };
  protoOf(BitwiseOrFunctionImpl).a2i = function () {
    return 'bitwise or';
  };
  function BitwiseOrFunction() {
  }
  protoOf(BitwiseOrFunction).i2i = function (instantiation) {
    return new BitwiseOrFunctionImpl(instantiation);
  };
  function BitwiseNotFunctionImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseNotFunctionImpl).g2x = function (a) {
    return a.e3();
  };
  protoOf(BitwiseNotFunctionImpl).h2x = function (a) {
    return inv(a);
  };
  protoOf(BitwiseNotFunctionImpl).a2i = function () {
    return 'bitwise not';
  };
  function BitwiseNotFunction() {
  }
  protoOf(BitwiseNotFunction).i2i = function (instantiation) {
    return new BitwiseNotFunctionImpl(instantiation);
  };
  function BitwiseNandFunctionImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseNandFunctionImpl).u2w = function (a, b) {
    return a.i3(b).e3();
  };
  protoOf(BitwiseNandFunctionImpl).v2w = function (a, b) {
    return inv(and(a, b));
  };
  protoOf(BitwiseNandFunctionImpl).a2i = function () {
    return 'bitwise nand';
  };
  function BitwiseNandFunction() {
  }
  protoOf(BitwiseNandFunction).i2i = function (instantiation) {
    return new BitwiseNandFunctionImpl(instantiation);
  };
  function BitwiseNorFunctionImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseNorFunctionImpl).u2w = function (a, b) {
    return a.j3(b).e3();
  };
  protoOf(BitwiseNorFunctionImpl).v2w = function (a, b) {
    return inv(or(a, b));
  };
  protoOf(BitwiseNorFunctionImpl).a2i = function () {
    return 'bitwise nor';
  };
  function BitwiseNorFunction() {
  }
  protoOf(BitwiseNorFunction).i2i = function (instantiation) {
    return new BitwiseNorFunctionImpl(instantiation);
  };
  function unsignedBitLength($this, x) {
    return 64 - countLeadingZeroBits(x) | 0;
  }
  function BitwiseBitLengthFunctionImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseBitLengthFunctionImpl).g2x = function (a) {
    var tmp;
    if (a.a1(new Long(0, 0)) < 0) {
      tmp = toLong_0(unsignedBitLength(this, a.e3()));
    } else {
      tmp = toLong_0(unsignedBitLength(this, a));
    }
    return tmp;
  };
  protoOf(BitwiseBitLengthFunctionImpl).h2x = function (a) {
    return toBigInt(bitLength(a));
  };
  function BitwiseBitLengthFunction() {
  }
  protoOf(BitwiseBitLengthFunction).i2i = function (instantiation) {
    return new BitwiseBitLengthFunctionImpl(instantiation);
  };
  function opLong_1($this, a, b) {
    if (a.a1(new Long(-2147483648, -1)) < 0 || a.a1(new Long(2147483647, 0)) > 0) {
      throwAPLException(new IncompatibleTypeException('Shift count out of range: ' + a.toString(), $this.t2g_1));
    }
    var result = shl(of_0(Companion_instance, b), a.c1());
    if (rangeInLong(result)) {
      return toLong(result);
    } else {
      throw new LongExpressionOverflow(result);
    }
  }
  function opBigInt($this, a, b) {
    if (!rangeInInt(a)) {
      throwAPLException(new IncompatibleTypeException('Shift count out of range: ' + BigInt__toString_impl_xmp9e6(a), $this.t2g_1));
    }
    return shl_0(b, toLong(a));
  }
  function BitwiseShiftFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseShiftFunctionImpl).f2x = function (a, b) {
    return opLong_1(this, a, b);
  };
  protoOf(BitwiseShiftFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = makeAPLNumber_0(opLong_1(this, tmp3, y));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_1;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            a.s2z();
            b.s2z();
            throwAPLException(new IncompatibleTypeException('Complex numbers not supported', this.t2g_1));
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_0 = b.r2z();
              tmp$ret$1 = makeAPLNumber_2(opBigInt(this, of_1(Companion_instance, tmp7), of_1(Companion_instance, y_0)));
              break $l$block_1;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                a.p2z(tmp0);
                b.p2z(tmp0);
                NumericRelationErrors_instance.q2z(tmp0);
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_1 = b.o2z(tmp0);
                  tmp$ret$1 = makeAPLNumberWithReduction(opBigInt(this, tmp11, y_1));
                  break $l$block_1;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(BitwiseShiftFunctionImpl).a2i = function () {
    return 'bitwise shift';
  };
  function BitwiseShiftFunction() {
  }
  protoOf(BitwiseShiftFunction).i2i = function (instantiation) {
    return new BitwiseShiftFunctionImpl(instantiation);
  };
  function unsignedPopcnt($this, x) {
    var y = x;
    var tmp4 = y;
    // Inline function 'kotlin.ULong.shr' call
    var this_0 = y;
    var tmp2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(1));
    // Inline function 'kotlin.ULong.and' call
    var other = _ULong___init__impl__c78o9k(new Long(1431655765, 1431655765));
    // Inline function 'kotlin.ULong.minus' call
    var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).i3(_ULong___get_data__impl__fggpzb(other)));
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4).x2(_ULong___get_data__impl__fggpzb(other_0)));
    var tmp6 = y;
    // Inline function 'kotlin.ULong.and' call
    var other_1 = _ULong___init__impl__c78o9k(new Long(858993459, 858993459));
    var tmp12 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).i3(_ULong___get_data__impl__fggpzb(other_1)));
    // Inline function 'kotlin.ULong.shr' call
    var this_1 = y;
    var tmp10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(2));
    // Inline function 'kotlin.ULong.and' call
    var other_2 = _ULong___init__impl__c78o9k(new Long(858993459, 858993459));
    // Inline function 'kotlin.ULong.plus' call
    var other_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10).i3(_ULong___get_data__impl__fggpzb(other_2)));
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp12).w2(_ULong___get_data__impl__fggpzb(other_3)));
    var tmp16 = y;
    // Inline function 'kotlin.ULong.shr' call
    var this_2 = y;
    // Inline function 'kotlin.ULong.plus' call
    var other_4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).h3(4));
    var tmp18 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp16).w2(_ULong___get_data__impl__fggpzb(other_4)));
    // Inline function 'kotlin.ULong.and' call
    var other_5 = _ULong___init__impl__c78o9k(new Long(252645135, 252645135));
    var tmp20 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp18).i3(_ULong___get_data__impl__fggpzb(other_5)));
    // Inline function 'kotlin.ULong.times' call
    var other_6 = _ULong___init__impl__c78o9k(new Long(16843009, 16843009));
    // Inline function 'kotlin.ULong.shr' call
    var this_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp20).y2(_ULong___get_data__impl__fggpzb(other_6)));
    return _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).h3(56));
  }
  function BitwiseCountBitsFunctionImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseCountBitsFunctionImpl).g2x = function (a) {
    var tmp;
    if (a.a1(new Long(0, 0)) >= 0) {
      // Inline function 'kotlin.toULong' call
      var tmp$ret$0 = _ULong___init__impl__c78o9k(a);
      // Inline function 'kotlin.ULong.toLong' call
      var this_0 = unsignedPopcnt(this, tmp$ret$0);
      tmp = _ULong___get_data__impl__fggpzb(this_0);
    } else {
      // Inline function 'kotlin.toULong' call
      var this_1 = numberToLong(-1).x2(a);
      var tmp$ret$2 = _ULong___init__impl__c78o9k(this_1);
      // Inline function 'kotlin.ULong.toLong' call
      var this_2 = unsignedPopcnt(this, tmp$ret$2);
      tmp = _ULong___get_data__impl__fggpzb(this_2);
    }
    return tmp;
  };
  protoOf(BitwiseCountBitsFunctionImpl).h2x = function (a) {
    return toBigInt(popcnt(a));
  };
  protoOf(BitwiseCountBitsFunctionImpl).z2h = function () {
    return 'bitwise count bits';
  };
  function BitwiseCountBitsFunction() {
  }
  protoOf(BitwiseCountBitsFunction).i2i = function (instantiation) {
    return new BitwiseCountBitsFunctionImpl(instantiation);
  };
  function BitwiseNorFunctionImpl_0(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseNorFunctionImpl_0).u2w = function (a, b) {
    return a.k3(b).e3();
  };
  protoOf(BitwiseNorFunctionImpl_0).v2w = function (a, b) {
    return inv(xor(a, b));
  };
  protoOf(BitwiseNorFunctionImpl_0).a2i = function () {
    return 'bitwise xnor';
  };
  function BitwiseXnorFunction() {
  }
  protoOf(BitwiseXnorFunction).i2i = function (instantiation) {
    return new BitwiseNorFunctionImpl_0(instantiation);
  };
  function BitwiseLessThanImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseLessThanImpl).u2w = function (a, b) {
    return a.e3().i3(b);
  };
  protoOf(BitwiseLessThanImpl).v2w = function (a, b) {
    return and(inv(a), b);
  };
  protoOf(BitwiseLessThanImpl).a2i = function () {
    return 'bitwise less than';
  };
  function BitwiseLessThan() {
  }
  protoOf(BitwiseLessThan).i2i = function (instantiation) {
    return new BitwiseLessThanImpl(instantiation);
  };
  function BitwiseGreaterThanImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseGreaterThanImpl).u2w = function (a, b) {
    return a.i3(b.e3());
  };
  protoOf(BitwiseGreaterThanImpl).v2w = function (a, b) {
    return and(a, inv(b));
  };
  protoOf(BitwiseGreaterThanImpl).a2i = function () {
    return 'bitwise greater than';
  };
  function BitwiseGreaterThan() {
  }
  protoOf(BitwiseGreaterThan).i2i = function (instantiation) {
    return new BitwiseGreaterThanImpl(instantiation);
  };
  function BitwiseLessThanOrEqualImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseLessThanOrEqualImpl).u2w = function (a, b) {
    return a.e3().j3(b);
  };
  protoOf(BitwiseLessThanOrEqualImpl).v2w = function (a, b) {
    return or(inv(a), b);
  };
  protoOf(BitwiseLessThanOrEqualImpl).a2i = function () {
    return 'bitwise less than or equal';
  };
  function BitwiseLessThanOrEqual() {
  }
  protoOf(BitwiseLessThanOrEqual).i2i = function (instantiation) {
    return new BitwiseLessThanOrEqualImpl(instantiation);
  };
  function BitwiseGreaterThanOrEqualImpl(pos) {
    BitwiseCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseGreaterThanOrEqualImpl).u2w = function (a, b) {
    return a.j3(b.e3());
  };
  protoOf(BitwiseGreaterThanOrEqualImpl).v2w = function (a, b) {
    return or(a, inv(b));
  };
  protoOf(BitwiseGreaterThanOrEqualImpl).a2i = function () {
    return 'bitwise greater than or equal';
  };
  function BitwiseGreaterThanOrEqual() {
  }
  protoOf(BitwiseGreaterThanOrEqual).i2i = function (instantiation) {
    return new BitwiseGreaterThanOrEqualImpl(instantiation);
  };
  function throwTypeError($this) {
    throwAPLException(new IncompatibleTypeException('Bitwise calls can only be performed on integers', $this.t2g_1));
  }
  function tryConvertToBigInt($this, v) {
    var tmp;
    if (v instanceof APLLong) {
      tmp = toBigInt(v.g2n_1);
    } else {
      if (v instanceof APLBigInt) {
        tmp = v.z2q_1;
      } else {
        if (v instanceof APLRational) {
          // Inline function 'kotlin.let' call
          var rat = v.d31_1;
          var tmp_0;
          if (equals(rat.pj(), BigIntConstants_getInstance().ij_1)) {
            tmp_0 = rat.oj();
          } else {
            throwTypeError($this);
          }
          tmp = tmp_0;
        } else {
          throwTypeError($this);
        }
      }
    }
    return tmp;
  }
  function BitwiseCombineAPLFunction(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(BitwiseCombineAPLFunction).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(5);
  };
  protoOf(BitwiseCombineAPLFunction).c2x = function (a) {
    var tmp;
    if (a instanceof APLLong) {
      tmp = makeAPLNumber_0(this.g2x(a.g2n_1));
    } else {
      if (a instanceof APLBigInt) {
        tmp = makeAPLNumber_2(this.h2x(a.z2q_1));
      } else {
        if (a instanceof APLRational) {
          // Inline function 'kotlin.let' call
          var v = a.d31_1;
          var tmp_0;
          if (equals(v.pj(), BigIntConstants_getInstance().ij_1)) {
            tmp_0 = makeAPLNumber_2(this.h2x(v.oj()));
          } else {
            throwTypeError(this);
          }
          tmp = tmp_0;
        } else {
          throwTypeError(this);
        }
      }
    }
    return tmp;
  };
  protoOf(BitwiseCombineAPLFunction).d2x = function (a, b) {
    var tmp;
    var tmp_0;
    if (a instanceof APLLong) {
      tmp_0 = b instanceof APLLong;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = makeAPLNumber_0(this.u2w(a.g2n_1, b.g2n_1));
    } else {
      tmp = makeAPLNumberWithReduction(this.v2w(tryConvertToBigInt(this, a), tryConvertToBigInt(this, b)));
    }
    return tmp;
  };
  protoOf(BitwiseCombineAPLFunction).e2x = function (a) {
    return this.g2x(a);
  };
  protoOf(BitwiseCombineAPLFunction).f2x = function (a, b) {
    return this.u2w(a, b);
  };
  protoOf(BitwiseCombineAPLFunction).g2x = function (a) {
    throwAPLException(new Unimplemented1ArgException(this.t2g_1));
  };
  protoOf(BitwiseCombineAPLFunction).h2x = function (a) {
    throwAPLException(new Unimplemented1ArgException(this.t2g_1));
  };
  protoOf(BitwiseCombineAPLFunction).u2w = function (a, b) {
    throwAPLException(new Unimplemented2ArgException(this.t2g_1));
  };
  protoOf(BitwiseCombineAPLFunction).v2w = function (a, b) {
    throwAPLException(new Unimplemented2ArgException(this.t2g_1));
  };
  function BooleanAndFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(BooleanAndFunctionImpl).g2h = function (context, leftArgs, rightArgs) {
    var a = leftArgs.j31(context);
    var tmp;
    if (a.r2q(this.t2g_1)) {
      tmp = rightArgs.j31(context);
    } else {
      tmp = a;
    }
    return tmp;
  };
  protoOf(BooleanAndFunctionImpl).h2h = function (context, leftArgs, rightArgs) {
    var a = leftArgs.j31(context);
    if (a.r2q(this.t2g_1)) {
      rightArgs.k31(context);
    }
  };
  function BooleanAndFunction() {
  }
  protoOf(BooleanAndFunction).i2i = function (instantiation) {
    return new BooleanAndFunctionImpl(instantiation);
  };
  function BooleanOrFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(BooleanOrFunctionImpl).g2h = function (context, leftArgs, rightArgs) {
    var a = leftArgs.j31(context);
    var tmp;
    if (a.r2q(this.t2g_1)) {
      tmp = a;
    } else {
      tmp = rightArgs.j31(context);
    }
    return tmp;
  };
  protoOf(BooleanOrFunctionImpl).h2h = function (context, leftArgs, rightArgs) {
    var a = leftArgs.j31(context);
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!a.r2q(this.t2g_1)) {
      rightArgs.j31(context);
    }
  };
  function BooleanOrFunction() {
  }
  protoOf(BooleanOrFunction).i2i = function (instantiation) {
    return new BooleanOrFunctionImpl(instantiation);
  };
  function CommuteFunctionImpl(pos, fns) {
    NoAxisAPLFunction.call(this, pos, fns);
    var tmp = this;
    // Inline function 'kotlin.run' call
    var a2 = _OptimisationFlags___get_masked2Arg__impl__awzzpg(this.u31().l2h());
    tmp.t31_1 = OptimisationFlags__orWith_impl_sum7ht(OptimisationFlags__orWith_impl_sum7ht(a2, _OptimisationFlags___init__impl__uhe3e(_OptimisationFlags___get_is2ALongLong__impl__oapfj6(a2) ? 1 : 0)), _OptimisationFlags___init__impl__uhe3e(_OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(a2) ? 2 : 0));
  }
  protoOf(CommuteFunctionImpl).u31 = function () {
    return this.s2g_1.p(0);
  };
  protoOf(CommuteFunctionImpl).n2i = function (context, a) {
    var a0 = a.x2g();
    return this.u31().a2h(context, a0, a0, null);
  };
  protoOf(CommuteFunctionImpl).t2i = function (context, a, b) {
    return this.u31().a2h(context, b, a, null);
  };
  protoOf(CommuteFunctionImpl).b2j = function (context, a, b) {
    return this.u31().s2h(context, b, a, null);
  };
  protoOf(CommuteFunctionImpl).c2j = function (context, a, b) {
    return this.u31().r2h(context, b, a, null);
  };
  protoOf(CommuteFunctionImpl).e2j = function (baseFn, context, a, b) {
    return this.l2m(this, baseFn, context, a, b, null);
  };
  protoOf(CommuteFunctionImpl).l2h = function () {
    return this.t31_1;
  };
  protoOf(CommuteFunctionImpl).m2h = function (context, a, axis) {
    ensureAxisNull(this, axis);
    return this.u31().o2h(context, a, a, null);
  };
  protoOf(CommuteFunctionImpl).n2h = function (context, a, axis) {
    ensureAxisNull(this, axis);
    return this.u31().p2h(context, a, a, null);
  };
  protoOf(CommuteFunctionImpl).o2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    return this.u31().o2h(context, b, a, null);
  };
  protoOf(CommuteFunctionImpl).p2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    return this.u31().p2h(context, b, a, null);
  };
  function CommuteFunctionDescriptor(fn) {
    this.w31_1 = fn;
  }
  protoOf(CommuteFunctionDescriptor).i2i = function (instantiation) {
    return new CommuteFunctionImpl(instantiation, listOf_0(this.w31_1));
  };
  function CommuteOp() {
  }
  protoOf(CommuteOp).n2w = function (fn, pos) {
    return new CommuteFunctionDescriptor(fn);
  };
  function EqualsAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(EqualsAPLFunctionImpl).d2x = function (a, b) {
    var tmp;
    // Inline function 'com.dhsdevelopments.kap.builtins.EqualsAPLFunctionImpl.opLong' call
    if (a.d32(b, this.t2g_1)) {
      tmp = get_APLLONG_1();
    } else {
      tmp = get_APLLONG_0();
    }
    return tmp;
  };
  protoOf(EqualsAPLFunctionImpl).j2h = function () {
    return get_APLLONG_1();
  };
  protoOf(EqualsAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  protoOf(EqualsAPLFunctionImpl).f2x = function (a, b) {
    return a.equals(b) ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(EqualsAPLFunctionImpl).t2x = function (a, b) {
    var tmp;
    // Inline function 'com.dhsdevelopments.kap.builtins.EqualsAPLFunctionImpl.opLong' call
    if (a.d32(b, this.t2g_1)) {
      tmp = new Long(1, 0);
    } else {
      tmp = new Long(0, 0);
    }
    return tmp;
  };
  protoOf(EqualsAPLFunctionImpl).k2h = function () {
    return new BitwiseXnorFunction();
  };
  protoOf(EqualsAPLFunctionImpl).a2i = function () {
    return 'equals';
  };
  function EqualsAPLFunction() {
  }
  protoOf(EqualsAPLFunction).i2i = function (instantiation) {
    return new EqualsAPLFunctionImpl(instantiation);
  };
  function NotEqualsAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(NotEqualsAPLFunctionImpl).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    var a1 = a.u2i().x2g();
    var rank = a1.v2i();
    var tmp;
    if (rank === 1) {
      tmp = a1;
    } else {
      tmp = new AxisMultiDimensionEnclosedValue(a1, rank - 1 | 0);
    }
    var value0 = tmp;
    var map = HashSet_init_$Create$();
    var tmp_0 = 0;
    var tmp_1 = value0.n();
    var tmp_2 = booleanArray(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var v = value0.h2k(tmp_3);
      var added = map.h(v.s2o());
      tmp_2[tmp_3] = added;
      tmp_0 = tmp_0 + 1 | 0;
    }
    var result = tmp_2;
    return new APLArrayBoolean(dimensionsOfSize(new Int32Array([result.length])), result);
  };
  protoOf(NotEqualsAPLFunctionImpl).d2x = function (a, b) {
    var tmp;
    // Inline function 'com.dhsdevelopments.kap.builtins.NotEqualsAPLFunctionImpl.opLong' call
    if (!a.d32(b, this.t2g_1)) {
      tmp = get_APLLONG_1();
    } else {
      tmp = get_APLLONG_0();
    }
    return tmp;
  };
  protoOf(NotEqualsAPLFunctionImpl).j2h = function () {
    return get_APLLONG_0();
  };
  protoOf(NotEqualsAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  protoOf(NotEqualsAPLFunctionImpl).f2x = function (a, b) {
    return !a.equals(b) ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(NotEqualsAPLFunctionImpl).t2x = function (a, b) {
    var tmp;
    // Inline function 'com.dhsdevelopments.kap.builtins.NotEqualsAPLFunctionImpl.opLong' call
    if (!a.d32(b, this.t2g_1)) {
      tmp = new Long(1, 0);
    } else {
      tmp = new Long(0, 0);
    }
    return tmp;
  };
  protoOf(NotEqualsAPLFunctionImpl).k2h = function () {
    return new BitwiseXorFunction();
  };
  protoOf(NotEqualsAPLFunctionImpl).a2i = function () {
    return 'not equals';
  };
  function NotEqualsAPLFunction() {
  }
  protoOf(NotEqualsAPLFunction).i2i = function (instantiation) {
    return new NotEqualsAPLFunctionImpl(instantiation);
  };
  function computeLabels($this) {
    var tmp0_safe_receiver = $this.k32_1.p2r();
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.m32(0);
  }
  function LessThanAPLFunction$LessThanAPLFunctionImpl$LessThanResultMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return computeLabels(this$0);
    };
  }
  function opLong_2($this, a, b) {
    return a.n32(b) < 0;
  }
  function LessThanResultMetadata(sourceMetadata) {
    this.k32_1 = sourceMetadata;
    var tmp = this;
    tmp.l32_1 = lazy(LessThanAPLFunction$LessThanAPLFunctionImpl$LessThanResultMetadata$labels$delegate$lambda(this));
  }
  protoOf(LessThanResultMetadata).p2r = function () {
    var tmp0 = this.l32_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_7();
    return tmp0.x1();
  };
  protoOf(LessThanResultMetadata).hv = function () {
    return DefaultMetadata_instance.hv();
  };
  function LessThanAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(LessThanAPLFunctionImpl).d2x = function (a, b) {
    return makeAPLNumberAsBoolean(opLong_2(this, a, b));
  };
  protoOf(LessThanAPLFunctionImpl).w2g = function (context, a, axis) {
    if (!(axis == null)) {
      throwAPLException(new AxisNotSupported(this.t2g_1));
    }
    var aDimensions = a.o2i();
    var tmp = 0;
    var tmp_0 = _Dimensions___get_size__impl__uu37ek(aDimensions) + 1 | 0;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp_3;
      if (tmp_2 === 0) {
        tmp_3 = 1;
      } else {
        tmp_3 = Dimensions__get_impl_4npepw(aDimensions, tmp_2 - 1 | 0);
      }
      tmp_1[tmp_2] = tmp_3;
      tmp = tmp + 1 | 0;
    }
    var dimensionsArray = tmp_1;
    var oldMetadata = a.m2l();
    var resized = ResizedArrayImpls_instance.n2j(_Dimensions___init__impl__sxkzw4(dimensionsArray), a);
    var tmp_4;
    if (oldMetadata.y2r()) {
      tmp_4 = resized;
    } else {
      tmp_4 = new MetadataOverrideArray(resized, new LessThanResultMetadata(oldMetadata));
    }
    return tmp_4;
  };
  protoOf(LessThanAPLFunctionImpl).j2h = function () {
    return get_APLLONG_0();
  };
  protoOf(LessThanAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  protoOf(LessThanAPLFunctionImpl).f2x = function (a, b) {
    return a.a1(b) < 0 ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(LessThanAPLFunctionImpl).t2x = function (a, b) {
    return opLong_2(this, a, b) ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(LessThanAPLFunctionImpl).k2h = function () {
    return new BitwiseLessThan();
  };
  protoOf(LessThanAPLFunctionImpl).z2h = function () {
    return 'promote';
  };
  protoOf(LessThanAPLFunctionImpl).a2i = function () {
    return 'less than';
  };
  function LessThanAPLFunction() {
  }
  protoOf(LessThanAPLFunction).i2i = function (instantiation) {
    return new LessThanAPLFunctionImpl(instantiation);
  };
  function computeLabels_0($this) {
    var oldLabels = $this.u32_1.p2r();
    var tmp;
    if (oldLabels == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.require' call
      if (!(oldLabels.q2r_1.n() >= 2)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      var newLabelList = ArrayList_init_$Create$();
      newLabelList.h(null);
      // Inline function 'kotlin.repeat' call
      var times = oldLabels.q2r_1.n() - 2 | 0;
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          newLabelList.h(oldLabels.q2r_1.p(index + 2 | 0));
        }
         while (inductionVariable < times);
      tmp = new DimensionLabels(newLabelList);
    }
    return tmp;
  }
  function GreaterThanAPLFunction$GreaterThanAPLFunctionImpl$GreaterThanResultMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return computeLabels_0(this$0);
    };
  }
  function opLong_3($this, a, b) {
    return a.n32(b) > 0;
  }
  function GreaterThanResultMetadata(oldMetdata) {
    this.u32_1 = oldMetdata;
    var tmp = this;
    tmp.v32_1 = lazy(GreaterThanAPLFunction$GreaterThanAPLFunctionImpl$GreaterThanResultMetadata$labels$delegate$lambda(this));
  }
  protoOf(GreaterThanResultMetadata).p2r = function () {
    var tmp0 = this.v32_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_8();
    return tmp0.x1();
  };
  protoOf(GreaterThanResultMetadata).hv = function () {
    return DefaultMetadata_instance.hv();
  };
  function GreaterThanAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(GreaterThanAPLFunctionImpl).d2x = function (a, b) {
    return makeAPLNumberAsBoolean(opLong_3(this, a, b));
  };
  protoOf(GreaterThanAPLFunctionImpl).w2g = function (context, a, axis) {
    if (!(axis == null)) {
      throwAPLException(new AxisNotSupported(this.t2g_1));
    }
    var aDimensions = a.o2i();
    var tmp;
    if (_Dimensions___get_size__impl__uu37ek(aDimensions) <= 1) {
      tmp = a;
    } else {
      var tmp_0 = 0;
      var tmp_1 = _Dimensions___get_size__impl__uu37ek(aDimensions) - 1 | 0;
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var tmp_4;
        if (tmp_3 === 0) {
          tmp_4 = imul(Dimensions__get_impl_4npepw(aDimensions, 0), Dimensions__get_impl_4npepw(aDimensions, 1));
        } else {
          tmp_4 = Dimensions__get_impl_4npepw(aDimensions, tmp_3 + 1 | 0);
        }
        tmp_2[tmp_3] = tmp_4;
        tmp_0 = tmp_0 + 1 | 0;
      }
      var dimensionsArray = tmp_2;
      var oldMetadata = a.m2l();
      var resized = ResizedArrayImpls_instance.n2j(_Dimensions___init__impl__sxkzw4(dimensionsArray), a);
      var tmp_5;
      if (oldMetadata.y2r()) {
        tmp_5 = resized;
      } else {
        tmp_5 = new MetadataOverrideArray(resized, new GreaterThanResultMetadata(oldMetadata));
      }
      tmp = tmp_5;
    }
    return tmp;
  };
  protoOf(GreaterThanAPLFunctionImpl).j2h = function () {
    return get_APLLONG_0();
  };
  protoOf(GreaterThanAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  protoOf(GreaterThanAPLFunctionImpl).f2x = function (a, b) {
    return a.a1(b) > 0 ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(GreaterThanAPLFunctionImpl).t2x = function (a, b) {
    return opLong_3(this, a, b) ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(GreaterThanAPLFunctionImpl).k2h = function () {
    return new BitwiseGreaterThan();
  };
  protoOf(GreaterThanAPLFunctionImpl).z2h = function () {
    return 'demote';
  };
  protoOf(GreaterThanAPLFunctionImpl).a2i = function () {
    return 'greater than';
  };
  function GreaterThanAPLFunction() {
  }
  protoOf(GreaterThanAPLFunction).i2i = function (instantiation) {
    return new GreaterThanAPLFunctionImpl(instantiation);
  };
  function opLong_4($this, a, b) {
    return a.n32(b) <= 0;
  }
  function LessThanEqualAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(LessThanEqualAPLFunctionImpl).d2x = function (a, b) {
    return makeAPLNumberAsBoolean(opLong_4(this, a, b));
  };
  protoOf(LessThanEqualAPLFunctionImpl).j2h = function () {
    return get_APLLONG_1();
  };
  protoOf(LessThanEqualAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  protoOf(LessThanEqualAPLFunctionImpl).f2x = function (a, b) {
    return a.a1(b) <= 0 ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(LessThanEqualAPLFunctionImpl).t2x = function (a, b) {
    return opLong_4(this, a, b) ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(LessThanEqualAPLFunctionImpl).k2h = function () {
    return new BitwiseLessThanOrEqual();
  };
  protoOf(LessThanEqualAPLFunctionImpl).a2i = function () {
    return 'less than or equals';
  };
  function LessThanEqualAPLFunction() {
  }
  protoOf(LessThanEqualAPLFunction).i2i = function (instantiation) {
    return new LessThanEqualAPLFunctionImpl(instantiation);
  };
  function opLong_5($this, a, b) {
    return a.n32(b) >= 0;
  }
  function GreaterThanEqualAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(GreaterThanEqualAPLFunctionImpl).d2x = function (a, b) {
    return makeAPLNumberAsBoolean(opLong_5(this, a, b));
  };
  protoOf(GreaterThanEqualAPLFunctionImpl).j2h = function () {
    return get_APLLONG_1();
  };
  protoOf(GreaterThanEqualAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  protoOf(GreaterThanEqualAPLFunctionImpl).f2x = function (a, b) {
    return a.a1(b) >= 0 ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(GreaterThanEqualAPLFunctionImpl).t2x = function (a, b) {
    return opLong_5(this, a, b) ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(GreaterThanEqualAPLFunctionImpl).k2h = function () {
    return new BitwiseGreaterThanOrEqual();
  };
  protoOf(GreaterThanEqualAPLFunctionImpl).a2i = function () {
    return 'greater than or equals';
  };
  function GreaterThanEqualAPLFunction() {
  }
  protoOf(GreaterThanEqualAPLFunction).i2i = function (instantiation) {
    return new GreaterThanEqualAPLFunctionImpl(instantiation);
  };
  function eval1Arg$recurse(v) {
    var v0 = v.g2k();
    var d = v0.o2i();
    var tmp;
    if (v0 instanceof APLSingleValue) {
      tmp = 0;
    } else {
      if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
        tmp = eval1Arg$recurse(v0.o2l()) + 1 | 0;
      } else {
        if (Dimensions__contentSize_impl_4eihds(d) === 0) {
          tmp = 1;
        } else {
          var first = true;
          var currentSize = 0;
          // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
          if (v0.b2l()) {
            var size = eval1Arg$recurse(v0);
            if (first) {
              currentSize = size;
              first = false;
            } else {
              // Inline function 'kotlin.math.max' call
              var a = currentSize;
              currentSize = Math.max(a, size);
            }
          } else {
            var inductionVariable = 0;
            var last = v0.n();
            if (inductionVariable < last)
              do {
                var i = inductionVariable;
                inductionVariable = inductionVariable + 1 | 0;
                var inner = v0.h2k(i);
                var size_0 = eval1Arg$recurse(inner);
                if (first) {
                  currentSize = size_0;
                  first = false;
                } else {
                  // Inline function 'kotlin.math.max' call
                  var a_0 = currentSize;
                  currentSize = Math.max(a_0, size_0);
                }
              }
               while (inductionVariable < last);
          }
          tmp = currentSize + 1 | 0;
        }
      }
    }
    return tmp;
  }
  function CompareFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(CompareFunctionImpl).n2i = function (context, a) {
    return makeAPLNumber_4(eval1Arg$recurse(a));
  };
  protoOf(CompareFunctionImpl).t2i = function (context, a, b) {
    return makeAPLNumberAsBoolean(a.h2n(b, this.t2g_1, false));
  };
  protoOf(CompareFunctionImpl).z2h = function () {
    return 'depth';
  };
  protoOf(CompareFunctionImpl).a2i = function () {
    return 'compare';
  };
  function CompareFunction() {
  }
  protoOf(CompareFunction).i2i = function (instantiation) {
    return new CompareFunctionImpl(instantiation);
  };
  function CompareNotEqualFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(CompareNotEqualFunctionImpl).n2i = function (context, a) {
    var dimensions = a.o2i();
    var ret = _Dimensions___get_size__impl__uu37ek(dimensions) === 0 ? 1 : Dimensions__get_impl_4npepw(dimensions, 0);
    return makeAPLNumber_4(ret);
  };
  protoOf(CompareNotEqualFunctionImpl).t2i = function (context, a, b) {
    return makeAPLNumberAsBoolean(!a.h2n(b, this.t2g_1, false));
  };
  protoOf(CompareNotEqualFunctionImpl).z2h = function () {
    return 'size';
  };
  protoOf(CompareNotEqualFunctionImpl).a2i = function () {
    return 'compare not equals';
  };
  function CompareNotEqualFunction() {
  }
  protoOf(CompareNotEqualFunction).i2i = function (instantiation) {
    return new CompareNotEqualFunctionImpl(instantiation);
  };
  function CompareObjectsFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(CompareObjectsFunctionImpl).t2i = function (context, a, b) {
    return makeAPLNumber_4(a.f2q(b, this.t2g_1, true));
  };
  function CompareObjectsFunction() {
  }
  protoOf(CompareObjectsFunction).i2i = function (instantiation) {
    return new CompareObjectsFunctionImpl(instantiation);
  };
  function NumericRelationErrors() {
  }
  protoOf(NumericRelationErrors).a34 = function (a, pos) {
    throwAPLException(new IncompatibleTypeException('Function does not support arguments of type: ' + a.z2p().p2(), pos));
  };
  protoOf(NumericRelationErrors).l2z = function (a, b, pos) {
    throwAPLException(new IncompatibleTypeException('Incompatible argument types. Left arg: ' + a.z2p().p2() + ', Right arg: ' + b.z2p().p2(), pos));
  };
  protoOf(NumericRelationErrors).b34 = function (pos) {
    throwAPLException(new IncompatibleTypeException('Function does not support bigint arguments', pos));
  };
  protoOf(NumericRelationErrors).n2z = function (pos) {
    throwAPLException(new IncompatibleTypeException('Function does not support char arguments', pos));
  };
  protoOf(NumericRelationErrors).q2z = function (pos) {
    throwAPLException(new IncompatibleTypeException('Function does not support rational arguments', pos));
  };
  var NumericRelationErrors_instance;
  function NumericRelationErrors_getInstance() {
    return NumericRelationErrors_instance;
  }
  function makeAPLNumberAsBoolean(_this__u8e3s4) {
    return _this__u8e3s4 ? get_APLLONG_1() : get_APLLONG_0();
  }
  function labels$factory_7() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function labels$factory_8() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function ConcatenateAPLFunctionLastAxisImpl(pos) {
    ConcatenateAPLFunctionImpl.call(this, pos);
  }
  protoOf(ConcatenateAPLFunctionLastAxisImpl).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    var tmp;
    if (a instanceof APLSingleValue) {
      tmp = ResizedArrayImpls_instance.n2j(size1Dimensions(), a);
    } else {
      if (a.v2i() === 0) {
        tmp = ResizedArrayImpls_instance.p2l(size1Dimensions(), a.h2k(0));
      } else {
        tmp = ResizedArrayImpls_instance.n2j(dimensionsOfSize(new Int32Array([a.n()])), a);
      }
    }
    return tmp;
  };
  protoOf(ConcatenateAPLFunctionLastAxisImpl).v2h = function (baseFn, context, a, axis) {
    var underValue = this.w2g(context, a, axis);
    var updated = baseFn.w2g(context, underValue, null);
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!Dimensions__compareEquals_impl_5g4nme(updated.o2i(), underValue.o2i())) {
      throwAPLException(new InvalidDimensionsException('Result does not have the same dimensions as input. Expected: ' + Dimensions__toString_impl_fhouq4(underValue.o2i()) + ', got: ' + Dimensions__toString_impl_fhouq4(updated.o2i()), this.t2g_1));
    }
    return ResizedArrayImpls_instance.n2j(a.o2i(), updated);
  };
  protoOf(ConcatenateAPLFunctionLastAxisImpl).g34 = function (aDimensions, bDimensions) {
    var tmp0 = _Dimensions___get_size__impl__uu37ek(aDimensions);
    // Inline function 'kotlin.math.max' call
    var b = _Dimensions___get_size__impl__uu37ek(bDimensions);
    return Math.max(tmp0, b) - 1 | 0;
  };
  protoOf(ConcatenateAPLFunctionLastAxisImpl).z2h = function () {
    return 'ravel';
  };
  protoOf(ConcatenateAPLFunctionLastAxisImpl).a2i = function () {
    return 'concatenate last axis';
  };
  function ConcatenateAPLFunctionLastAxis() {
  }
  protoOf(ConcatenateAPLFunctionLastAxis).i2i = function (instantiation) {
    return new ConcatenateAPLFunctionLastAxisImpl(instantiation);
  };
  function ConcatenateAPLFunctionFirstAxisImpl(pos) {
    ConcatenateAPLFunctionImpl.call(this, pos);
  }
  protoOf(ConcatenateAPLFunctionFirstAxisImpl).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    var aDimensions = a.o2i();
    var tmp;
    if (_Dimensions___get_size__impl__uu37ek(aDimensions) === 0) {
      tmp = dimensionsOfSize(new Int32Array([1, 1]));
    } else {
      var tmp_0 = Dimensions__get_impl_4npepw(aDimensions, 0);
      // Inline function 'com.dhsdevelopments.kap.reduceWithInitial' call
      var curr = 1;
      var _iterator__ex2g4s = drop(Dimensions__asList_impl_2n2llc(aDimensions), 1).k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        var v1 = curr;
        curr = imul(v1, element);
      }
      var tmp$ret$1 = curr;
      tmp = dimensionsOfSize(new Int32Array([tmp_0, tmp$ret$1]));
    }
    var c = tmp;
    return ResizedArrayImpls_instance.n2j(c, a);
  };
  protoOf(ConcatenateAPLFunctionFirstAxisImpl).g34 = function (aDimensions, bDimensions) {
    return 0;
  };
  protoOf(ConcatenateAPLFunctionFirstAxisImpl).z2h = function () {
    return 'table';
  };
  protoOf(ConcatenateAPLFunctionFirstAxisImpl).a2i = function () {
    return 'concatenate first axis';
  };
  function ConcatenateAPLFunctionFirstAxis() {
  }
  protoOf(ConcatenateAPLFunctionFirstAxis).i2i = function (instantiation) {
    return new ConcatenateAPLFunctionFirstAxisImpl(instantiation);
  };
  function resolveLabels_7($this) {
    var aLabels = $this.p34_1.p2r();
    var bLabels = $this.r34_1.p2r();
    if (aLabels == null && bLabels == null) {
      return null;
    }
    var newLabels = ArrayList_init_$Create$();
    resolveLabels$processArg(newLabels, $this.q34_1, aLabels);
    resolveLabels$processArg(newLabels, $this.s34_1, bLabels);
    var allLabels = ArrayList_init_$Create$();
    allLabels.h(newLabels);
    return new DimensionLabels(allLabels);
  }
  function resolveLabels$addNulls(newLabels, n) {
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < n)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        newLabels.h(null);
      }
       while (inductionVariable < n);
  }
  function resolveLabels$processArg$add(receiver, p0) {
    receiver.h(p0);
  }
  function resolveLabels$processArg(newLabels, n, labels) {
    if (labels == null) {
      resolveLabels$addNulls(newLabels, n);
    } else {
      var labelsList = labels.q2r_1.p(0);
      if (labelsList == null) {
        resolveLabels$addNulls(newLabels, n);
      } else {
        // Inline function 'kotlin.collections.forEach' call
        var _iterator__ex2g4s = labelsList.k();
        while (_iterator__ex2g4s.l()) {
          var element = _iterator__ex2g4s.m();
          resolveLabels$processArg$add(newLabels, element);
        }
      }
    }
  }
  function Concatenated1DArrays$Concatenated1DArraysMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return resolveLabels_7(this$0);
    };
  }
  function Concatenated1DArraysMetadata(aMetdadata, aSize, bMetadata, bSize) {
    this.p34_1 = aMetdadata;
    this.q34_1 = aSize;
    this.r34_1 = bMetadata;
    this.s34_1 = bSize;
    var tmp = this;
    tmp.t34_1 = lazy(Concatenated1DArrays$Concatenated1DArraysMetadata$labels$delegate$lambda(this));
  }
  protoOf(Concatenated1DArraysMetadata).p2r = function () {
    var tmp0 = this.t34_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_9();
    return tmp0.x1();
  };
  function Concatenated1DArrays$specialisedType$delegate$lambda(this$0) {
    return function () {
      var aType = this$0.u34_1.f2n();
      var bType = this$0.v34_1.f2n();
      return new ArrayMemberType(ArrayMemberType__intersection_impl_osmuy1(aType, bType));
    };
  }
  function Concatenated1DArrays$metadata$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.u34_1.m2l().y2r() && this$0.v34_1.m2l().y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new Concatenated1DArraysMetadata(this$0.u34_1.m2l(), this$0.w34_1, this$0.v34_1.m2l(), this$0.x34_1);
      }
      return tmp;
    };
  }
  function Concatenated1DArrays(a, b) {
    APLArray.call(this);
    this.u34_1 = a;
    this.v34_1 = b;
    // Inline function 'kotlin.require' call
    if (!(this.u34_1.v2i() === 1 && this.v34_1.v2i() === 1)) {
      var message = 'Both arguments must have rank 1. Left argument: ' + Dimensions__toString_impl_fhouq4(this.u34_1.o2i()) + ', Right argument: ' + Dimensions__toString_impl_fhouq4(this.v34_1.o2i());
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    this.w34_1 = Dimensions__get_impl_4npepw(this.u34_1.o2i(), 0);
    this.x34_1 = Dimensions__get_impl_4npepw(this.v34_1.o2i(), 0);
    this.y34_1 = dimensionsOfSize(new Int32Array([this.w34_1 + this.x34_1 | 0]));
    var tmp = this;
    tmp.z34_1 = lazy(Concatenated1DArrays$specialisedType$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.a35_1 = lazy(Concatenated1DArrays$metadata$delegate$lambda(this));
  }
  protoOf(Concatenated1DArrays).o2i = function () {
    return this.y34_1;
  };
  protoOf(Concatenated1DArrays).f2k = function () {
    return ArrayMemberType__intersection_impl_osmuy1(this.u34_1.f2n(), this.v34_1.f2n());
  };
  protoOf(Concatenated1DArrays).f2n = function () {
    var tmp0 = this.z34_1;
    // Inline function 'kotlin.getValue' call
    specialisedType$factory_0();
    return tmp0.x1().e2k_1;
  };
  protoOf(Concatenated1DArrays).m2l = function () {
    var tmp0 = this.a35_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_7();
    return tmp0.x1();
  };
  protoOf(Concatenated1DArrays).h2k = function (p) {
    return p >= this.w34_1 ? this.v34_1.h2k(p - this.w34_1 | 0) : this.u34_1.h2k(p);
  };
  protoOf(Concatenated1DArrays).i2n = function (p) {
    return p >= this.w34_1 ? this.v34_1.i2n(p - this.w34_1 | 0) : this.u34_1.i2n(p);
  };
  protoOf(Concatenated1DArrays).y2p = function (p) {
    return p >= this.w34_1 ? this.v34_1.y2p(p - this.w34_1 | 0) : this.u34_1.y2p(p);
  };
  protoOf(Concatenated1DArrays).b2q = function (withDiscard) {
    var tmp;
    var tmp_0;
    var tmp_1 = this.u34_1;
    if (tmp_1 instanceof APLString) {
      var tmp_2 = this.v34_1;
      tmp_0 = tmp_2 instanceof APLString;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      var tmp_3 = 0;
      var tmp_4 = Dimensions__get_impl_4npepw(this.y34_1, 0);
      var tmp_5 = new Int32Array(tmp_4);
      while (tmp_3 < tmp_4) {
        var tmp_6 = tmp_3;
        var tmp_7;
        if (tmp_6 < this.w34_1) {
          tmp_7 = this.u34_1.b35_1[tmp_6];
        } else {
          tmp_7 = this.v34_1.b35_1[tmp_6 - this.w34_1 | 0];
        }
        tmp_5[tmp_6] = tmp_7;
        tmp_3 = tmp_3 + 1 | 0;
      }
      tmp = new APLString(tmp_5);
    } else {
      tmp = protoOf(APLArray).b2q.call(this, false);
    }
    return tmp;
  };
  function resolveLabels_8($this) {
    var aLabels = $this.d35_1.p2r();
    var bLabels = $this.f35_1.p2r();
    if (aLabels == null && bLabels == null) {
      return null;
    }
    var allAxisAreNull = true;
    var resultLabels = ArrayList_init_$Create$();
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek($this.e35_1);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp;
        if (aLabels == null) {
          tmp = null;
        } else {
          // Inline function 'kotlin.run' call
          tmp = aLabels.q2r_1.p(index);
        }
        var axisLabelsA = tmp;
        var tmp_0;
        if (bLabels == null) {
          tmp_0 = null;
        } else {
          // Inline function 'kotlin.run' call
          tmp_0 = bLabels.q2r_1.p(index);
        }
        var axisLabelsB = tmp_0;
        var resultAxisLabels = index === $this.h35_1 ? computeConcatAxisLabels($this, axisLabelsA, axisLabelsB) : axisLabelsA == null || axisLabelsB == null ? null : computeNonPrimaryLabels($this, index, axisLabelsA, axisLabelsB);
        if (!(resultAxisLabels == null)) {
          allAxisAreNull = false;
        }
        resultLabels.h(resultAxisLabels);
      }
       while (inductionVariable < times);
    return allAxisAreNull ? null : new DimensionLabels(resultLabels);
  }
  function computeNonPrimaryLabels($this, a, axisLabelsA, axisLabelsB) {
    var isSame = true;
    var inductionVariable = 0;
    var last = Dimensions__get_impl_4npepw($this.e35_1, a);
    if (inductionVariable < last)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var l0 = axisLabelsA.p(i);
        var l1 = axisLabelsB.p(i);
        if (!(l0 == null && l1 == null || (!(l0 == null) && !(l1 == null) && l0.j35_1 === l1.j35_1))) {
          isSame = false;
          break $l$loop;
        }
      }
       while (inductionVariable < last);
    var tmp;
    if (isSame) {
      tmp = axisLabelsA;
    } else {
      tmp = null;
    }
    return tmp;
  }
  function computeConcatAxisLabels($this, axisLabelsA, axisLabelsB) {
    var axisLabels = ArrayList_init_$Create$();
    var aSize = Dimensions__get_impl_4npepw($this.e35_1, $this.h35_1);
    var bSize = Dimensions__get_impl_4npepw($this.g35_1, $this.h35_1);
    var hasLabels = false;
    if (axisLabelsA == null) {
      // Inline function 'kotlin.repeat' call
      var inductionVariable = 0;
      if (inductionVariable < aSize)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          axisLabels.h(null);
        }
         while (inductionVariable < aSize);
    } else {
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = axisLabelsA.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        axisLabels.h(element);
        hasLabels = true;
      }
    }
    if (axisLabelsB == null) {
      // Inline function 'kotlin.repeat' call
      var inductionVariable_0 = 0;
      if (inductionVariable_0 < bSize)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          axisLabels.h(null);
        }
         while (inductionVariable_0 < bSize);
    } else {
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s_0 = axisLabelsB.k();
      while (_iterator__ex2g4s_0.l()) {
        var element_0 = _iterator__ex2g4s_0.m();
        axisLabels.h(element_0);
        hasLabels = true;
      }
    }
    if (!hasLabels) {
      return null;
    }
    return axisLabels;
  }
  function ConcatenateAPLFunctionImpl$ConcatenatedMultiDimensionalArrays$ConcatenatedMultiDimensionalArraysMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return resolveLabels_8(this$0);
    };
  }
  function ConcatenatedMultiDimensionalArraysMetadata(aMetadata, aDimensions, bMetadata, bDimensions, axis) {
    this.d35_1 = aMetadata;
    this.e35_1 = aDimensions;
    this.f35_1 = bMetadata;
    this.g35_1 = bDimensions;
    this.h35_1 = axis;
    var tmp = this;
    tmp.i35_1 = lazy(ConcatenateAPLFunctionImpl$ConcatenatedMultiDimensionalArrays$ConcatenatedMultiDimensionalArraysMetadata$labels$delegate$lambda(this));
  }
  protoOf(ConcatenatedMultiDimensionalArraysMetadata).p2r = function () {
    var tmp0 = this.i35_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_10();
    return tmp0.x1();
  };
  function ConcatenateAPLFunctionImpl$ConcatenatedMultiDimensionalArrays$metadata$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.k35_1.m2l().y2r() && this$0.l35_1.m2l().y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new ConcatenatedMultiDimensionalArraysMetadata(this$0.k35_1.m2l(), this$0.k35_1.o2i(), this$0.l35_1.m2l(), this$0.l35_1.o2i(), this$0.m35_1);
      }
      return tmp;
    };
  }
  function computeLaminateAxis($this, axis) {
    if (axis instanceof APLLong) {
      return new Pair(false, axis.i2k());
    }
    var d = axis.r2z();
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = d % 1;
    if (Math.abs(this_0) < 0.01) {
      return new Pair(false, numberToInt(d));
    }
    // Inline function 'kotlin.math.ceil' call
    var tmp$ret$1 = Math.ceil(d);
    return new Pair(true, numberToInt(tmp$ret$1));
  }
  function joinByLaminate($this, a, b, axis) {
    var aIsScalar = a.n2l();
    var bIsScalar = b.n2l();
    if (aIsScalar && bIsScalar) {
      throwAPLException(new IllegalAxisException('Both arguments are scalar', $this.t2g_1));
    }
    var tmp;
    if (aIsScalar) {
      tmp = ResizedArrayImpls_instance.n2j(b.o2i(), a);
    } else {
      tmp = a;
    }
    var a1 = tmp;
    var tmp_0;
    if (bIsScalar) {
      tmp_0 = ResizedArrayImpls_instance.n2j(a.o2i(), b);
    } else {
      tmp_0 = b;
    }
    var b1 = tmp_0;
    if (!(a1.v2i() === b1.v2i())) {
      throwAPLException(new InvalidDimensionsException('Ranks of A and B are different', $this.t2g_1));
    }
    var aDimensions = a1.o2i();
    if (axis < 0 || axis > _Dimensions___get_size__impl__uu37ek(aDimensions)) {
      throwAPLException(new IllegalAxisException('Axis must be between 0 and ' + _Dimensions___get_size__impl__uu37ek(aDimensions) + ' inclusive. Found: ' + axis, $this.t2g_1));
    }
    var bDimensions = b1.o2i();
    if (!Dimensions__compareEquals_impl_5g4nme(aDimensions, bDimensions)) {
      throwAPLException(InvalidDimensionsException_init_$Create$(aDimensions, bDimensions, $this.t2g_1));
    }
    var rd = Dimensions__insert_impl_s8tvqx(aDimensions, axis, 1);
    var a2 = ResizedArrayImpls_instance.n2j(rd, a1);
    var b2 = ResizedArrayImpls_instance.n2j(rd, b1);
    return joinByAxis($this, a2, b2, axis);
  }
  function joinNoAxis($this, a, b) {
    var aDimensions = a.o2i();
    var bDimensions = b.o2i();
    var tmp;
    if (Dimensions__isEmpty_impl_2yd13(aDimensions) && Dimensions__isEmpty_impl_2yd13(bDimensions)) {
      var tmp_0;
      var tmp_1;
      if (a instanceof APLLong) {
        tmp_1 = b instanceof APLLong;
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        var tmp_2 = dimensionsOfSize(new Int32Array([2]));
        // Inline function 'kotlin.longArrayOf' call
        var tmp$ret$0 = longArrayOf([a.g2n_1, b.g2n_1]);
        tmp_0 = new APLArrayLong(tmp_2, tmp$ret$0);
      } else {
        var tmp_3;
        if (a instanceof APLDouble) {
          tmp_3 = b instanceof APLDouble;
        } else {
          tmp_3 = false;
        }
        if (tmp_3) {
          var tmp_4 = dimensionsOfSize(new Int32Array([2]));
          // Inline function 'kotlin.doubleArrayOf' call
          var tmp$ret$1 = new Float64Array([a.a2r_1, b.a2r_1]);
          tmp_0 = new APLArrayDouble(tmp_4, tmp$ret$1);
        } else {
          // Inline function 'com.dhsdevelopments.kap.Companion.make' call
          var dimensions = dimensionsOfSize(new Int32Array([2]));
          var st = {_v: new ArrayMemberType(Companion_getInstance_45().d2k_1)};
          var tmp_5 = 0;
          var tmp_6 = Dimensions__contentSize_impl_4eihds(dimensions);
          // Inline function 'kotlin.arrayOfNulls' call
          var tmp_7 = Array(tmp_6);
          while (tmp_5 < tmp_6) {
            var tmp_8 = tmp_5;
            // Inline function 'kotlin.also' call
            var this_0 = tmp_8 === 0 ? a.o2l() : b.o2l();
            st._v = new ArrayMemberType(ArrayMemberType__intersection_impl_osmuy1(st._v.e2k_1, this_0.f2k()));
            tmp_7[tmp_8] = this_0;
            tmp_5 = tmp_5 + 1 | 0;
          }
          var content = tmp_7;
          tmp_0 = new APLArrayImpl(dimensions, content, st._v.e2k_1);
        }
      }
      tmp = tmp_0;
    } else if (_Dimensions___get_size__impl__uu37ek(aDimensions) <= 1 && _Dimensions___get_size__impl__uu37ek(bDimensions) <= 1) {
      tmp = new Concatenated1DArrays(a.u2i(), b.u2i());
    } else {
      tmp = joinByAxis($this, a, b, $this.g34(aDimensions, bDimensions));
    }
    return tmp;
  }
  function joinByAxis($this, a, b, axis) {
    if (axis < 0) {
      throwAPLException(new IllegalAxisException('Axis is negative', $this.t2g_1));
    }
    if (a.v2i() === 0 && b.v2i() === 0) {
      throwAPLException(new InvalidDimensionsException('Both a and b are scalar', $this.t2g_1));
    }
    var tmp;
    if (a.v2i() === 0) {
      var bDimensions = b.o2i();
      var tmp_0 = 0;
      var tmp_1 = _Dimensions___get_size__impl__uu37ek(bDimensions);
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        tmp_2[tmp_3] = tmp_3 === axis ? 1 : Dimensions__get_impl_4npepw(bDimensions, tmp_3);
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = new ConstantArray(_Dimensions___init__impl__sxkzw4(tmp_2), a.o2l());
    } else {
      tmp = a;
    }
    var a1 = tmp;
    var tmp_4;
    if (b.v2i() === 0) {
      var aDimensions = a.o2i();
      var tmp_5 = 0;
      var tmp_6 = _Dimensions___get_size__impl__uu37ek(aDimensions);
      var tmp_7 = new Int32Array(tmp_6);
      while (tmp_5 < tmp_6) {
        var tmp_8 = tmp_5;
        tmp_7[tmp_8] = tmp_8 === axis ? 1 : Dimensions__get_impl_4npepw(aDimensions, tmp_8);
        tmp_5 = tmp_5 + 1 | 0;
      }
      tmp_4 = new ConstantArray(_Dimensions___init__impl__sxkzw4(tmp_7), b.o2l());
    } else {
      tmp_4 = b;
    }
    var b1 = tmp_4;
    var tmp_9;
    if ((b1.v2i() - a1.v2i() | 0) === 1) {
      tmp_9 = ResizedArrayImpls_instance.n2j(Dimensions__insert_impl_s8tvqx(a1.o2i(), axis, 1), a1);
    } else {
      tmp_9 = a1;
    }
    var a2 = tmp_9;
    var tmp_10;
    if ((a1.v2i() - b1.v2i() | 0) === 1) {
      tmp_10 = ResizedArrayImpls_instance.n2j(Dimensions__insert_impl_s8tvqx(b1.o2i(), axis, 1), b1);
    } else {
      tmp_10 = b1;
    }
    var b2 = tmp_10;
    var da = a2.o2i();
    var db = b2.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(da) === _Dimensions___get_size__impl__uu37ek(db))) {
      throwAPLException(new InvalidDimensionsException('Different ranks: ' + _Dimensions___get_size__impl__uu37ek(da) + ' compared to ' + _Dimensions___get_size__impl__uu37ek(db), $this.t2g_1));
    }
    var progression = _Dimensions___get_indices__impl__n5lmcy(da);
    var inductionVariable = progression.u_1;
    var last = progression.v_1;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!(i === axis) && !(Dimensions__get_impl_4npepw(da, i) === Dimensions__get_impl_4npepw(db, i))) {
          throwAPLException(new InvalidDimensionsException('Dimensions at axis ' + axis + ' does not match: ' + Dimensions__toString_impl_fhouq4(da) + ' compared to ' + Dimensions__toString_impl_fhouq4(db), $this.t2g_1));
        }
      }
       while (!(i === last));
    if (a2.n() === 0) {
      return b2;
    }
    if (b2.n() === 0) {
      return a2;
    }
    if (axis < 0 || axis >= _Dimensions___get_size__impl__uu37ek(da)) {
      throwAPLException(IllegalAxisException_init_$Create$(axis, da, $this.t2g_1));
    }
    if (_Dimensions___get_size__impl__uu37ek(da) === 1 && _Dimensions___get_size__impl__uu37ek(db) === 1) {
      if (!(axis === 0)) {
        throwAPLException(IllegalAxisException_init_$Create$(axis, emptyDimensions(), $this.t2g_1));
      }
      return new Concatenated1DArrays(a2, b2);
    }
    return new ConcatenatedMultiDimensionalArrays(a2, b2, axis);
  }
  function loopedReduce($this, context, arg, sizeAlongAxis, stepLength, offset, functionAxis) {
    var a = arg.h2k(offset);
    var b = arg.h2k(offset + stepLength | 0);
    var aDimensions = a.o2i();
    var bDimensions = b.o2i();
    var axis = !(functionAxis == null) ? functionAxis.p2i($this.t2g_1).q2i($this.t2g_1) : Dimensions__isEmpty_impl_2yd13(aDimensions) && Dimensions__isEmpty_impl_2yd13(bDimensions) ? 0 : $this.g34(aDimensions, bDimensions);
    var tmp0_subject = _Dimensions___get_size__impl__uu37ek(aDimensions);
    var a0 = tmp0_subject === 0 ? ResizedArrayImpls_instance.n2j(_Dimensions___get_size__impl__uu37ek(bDimensions) === 0 ? size1Dimensions() : Dimensions__replace_impl_aoneje(bDimensions, axis, 1), a) : tmp0_subject === (_Dimensions___get_size__impl__uu37ek(bDimensions) - 1 | 0) ? ResizedArrayImpls_instance.n2j(Dimensions__insert_impl_s8tvqx(aDimensions, axis, 1), a) : a;
    var a0Dimensions = a0.o2i();
    var tmp;
    if (axis === 0) {
      tmp = null;
    } else {
      var tmp_0 = 0;
      var tmp_1 = _Dimensions___get_size__impl__uu37ek(a0Dimensions);
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var tmp_4;
        if (tmp_3 === 0) {
          tmp_4 = axis;
        } else if (tmp_3 <= axis) {
          tmp_4 = tmp_3 - 1 | 0;
        } else if (tmp_3 > axis) {
          tmp_4 = tmp_3;
        } else {
          throw IllegalStateException_init_$Create$('Unexpected value from intarray initialiser');
        }
        tmp_2[tmp_3] = tmp_4;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = tmp_2;
    }
    var transposeAxis = tmp;
    var tmp_5 = 0;
    var tmp_6 = _Dimensions___get_size__impl__uu37ek(a0Dimensions);
    var tmp_7 = new Int32Array(tmp_6);
    while (tmp_5 < tmp_6) {
      var tmp_8 = tmp_5;
      tmp_7[tmp_8] = tmp_8 === 0 ? 1 : transposeAxis == null ? Dimensions__get_impl_4npepw(a0Dimensions, tmp_8) : Dimensions__get_impl_4npepw(a0Dimensions, transposeAxis[tmp_8]);
      tmp_5 = tmp_5 + 1 | 0;
    }
    var resultDimensions = _Dimensions___init__impl__sxkzw4(tmp_7);
    var result = ArrayList_init_$Create$();
    var p = offset;
    var i = 0;
    var activeElement = null;
    $l$loop: while (i < sizeAlongAxis) {
      var tmp_9;
      switch (i) {
        case 0:
          tmp_9 = a0;
          break;
        case 1:
          tmp_9 = b;
          break;
        default:
          // Inline function 'kotlin.also' call

          var this_0 = arg.h2k(p);
          activeElement = this_0;
          tmp_9 = this_0;
          break;
      }
      var v = tmp_9;
      var vDimensions = v.o2i();
      if (_Dimensions___get_size__impl__uu37ek(vDimensions) === 0) {
        var disclosed = v.o2l();
        // Inline function 'kotlin.repeat' call
        var times = Dimensions__contentSize_impl_4eihds(resultDimensions);
        var inductionVariable = 0;
        if (inductionVariable < times)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            result.h(disclosed);
          }
           while (inductionVariable < times);
      } else {
        var tmp2_subject = _Dimensions___get_size__impl__uu37ek(vDimensions);
        var tmp_10;
        if (tmp2_subject === _Dimensions___get_size__impl__uu37ek(resultDimensions)) {
          tmp_10 = v;
        } else if (tmp2_subject === (_Dimensions___get_size__impl__uu37ek(aDimensions) - 1 | 0)) {
          tmp_10 = ResizedArrayImpls_instance.n2j(resultDimensions, v);
        } else {
          break $l$loop;
        }
        var v0 = tmp_10;
        var v1 = transposeAxis == null ? v0 : new TransposedAPLValue(transposeAxis, v0, $this.t2g_1, false);
        var v1Dimensions = v1.o2i();
        var inductionVariable_0 = 1;
        var last = _Dimensions___get_size__impl__uu37ek(v1Dimensions);
        if (inductionVariable_0 < last)
          $l$loop_0: do {
            var i1 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
          }
           while (Dimensions__get_impl_4npepw(v1Dimensions, i1) === Dimensions__get_impl_4npepw(resultDimensions, i1) && inductionVariable_0 < last);
        // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
        if (v1.b2l()) {
          result.h(v1);
        } else {
          var inductionVariable_1 = 0;
          var last_0 = v1.n();
          if (inductionVariable_1 < last_0)
            do {
              var i_0 = inductionVariable_1;
              inductionVariable_1 = inductionVariable_1 + 1 | 0;
              var innerElement = v1.h2k(i_0);
              result.h(innerElement);
            }
             while (inductionVariable_1 < last_0);
        }
      }
      i = i + 1 | 0;
      p = p + stepLength | 0;
    }
    var resultVal = new APLArrayList(Dimensions__replace_impl_aoneje(resultDimensions, 0, result.n() / Dimensions__contentSize_impl_4eihds(resultDimensions) | 0), result);
    var tmp_11;
    if (transposeAxis == null) {
      tmp_11 = resultVal;
    } else {
      tmp_11 = new TransposedAPLValue(transposeAxis, resultVal, $this.t2g_1, true);
    }
    var fixedRes = tmp_11;
    var tmp_12;
    if (i < sizeAlongAxis) {
      var firstElement = activeElement;
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.require' call
      if (!!(firstElement == null)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      var curr = $this.a2h(context, fixedRes, firstElement, functionAxis).x2g();
      i = i + 1 | 0;
      p = p + stepLength | 0;
      while (i < sizeAlongAxis) {
        curr = $this.a2h(context, curr, arg.h2k(p), functionAxis).x2g();
        i = i + 1 | 0;
        p = p + stepLength | 0;
      }
      tmp_12 = curr;
    } else {
      tmp_12 = fixedRes;
    }
    return tmp_12;
  }
  function ConcatenatedMultiDimensionalArrays(a, b, axis) {
    APLArray.call(this);
    this.k35_1 = a;
    this.l35_1 = b;
    this.m35_1 = axis;
    var ad = this.k35_1.o2i();
    var bd = this.l35_1.o2i();
    this.o35_1 = Dimensions__get_impl_4npepw(ad, this.m35_1);
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = _Dimensions___get_size__impl__uu37ek(ad);
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = tmp_3 === this.m35_1 ? Dimensions__get_impl_4npepw(ad, tmp_3) + Dimensions__get_impl_4npepw(bd, tmp_3) | 0 : Dimensions__get_impl_4npepw(ad, tmp_3);
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.n35_1 = _Dimensions___init__impl__sxkzw4(tmp_2);
    var multipliers = Dimensions__multipliers_impl_u1suko(this.n35_1);
    var aMultipliers = Dimensions__multipliers_impl_u1suko(ad);
    var bMultipliers = Dimensions__multipliers_impl_u1suko(bd);
    this.p35_1 = DimensionMultipliers__get_impl_90rsg3(multipliers, this.m35_1);
    this.q35_1 = imul(this.p35_1, Dimensions__get_impl_4npepw(this.n35_1, this.m35_1));
    this.r35_1 = DimensionMultipliers__get_impl_90rsg3(aMultipliers, this.m35_1);
    this.s35_1 = DimensionMultipliers__get_impl_90rsg3(bMultipliers, this.m35_1);
    this.t35_1 = Dimensions__get_impl_4npepw(this.k35_1.o2i(), this.m35_1);
    this.u35_1 = Dimensions__get_impl_4npepw(this.l35_1.o2i(), this.m35_1);
    var tmp_4 = this;
    tmp_4.v35_1 = lazy(ConcatenateAPLFunctionImpl$ConcatenatedMultiDimensionalArrays$metadata$delegate$lambda(this));
  }
  protoOf(ConcatenatedMultiDimensionalArrays).o2i = function () {
    return this.n35_1;
  };
  protoOf(ConcatenatedMultiDimensionalArrays).m2l = function () {
    var tmp0 = this.v35_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_8();
    return tmp0.x1();
  };
  protoOf(ConcatenatedMultiDimensionalArrays).h2k = function (p) {
    var highVal = p / this.q35_1 | 0;
    var lowVal = p % this.p35_1 | 0;
    var axisCoord = (p % this.q35_1 | 0) / this.p35_1 | 0;
    var tmp;
    if (axisCoord < this.o35_1) {
      tmp = this.k35_1.h2k((imul(imul(highVal, this.r35_1), this.t35_1) + imul(axisCoord, this.r35_1) | 0) + lowVal | 0);
    } else {
      tmp = this.l35_1.h2k((imul(imul(highVal, this.s35_1), this.u35_1) + imul(axisCoord - this.o35_1 | 0, this.s35_1) | 0) + lowVal | 0);
    }
    return tmp;
  };
  function ConcatenateAPLFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(ConcatenateAPLFunctionImpl).a2h = function (context, a, b, axis) {
    var tmp;
    if (axis == null) {
      tmp = joinNoAxis(this, a, b);
    } else {
      var _destruct__k2r9zo = computeLaminateAxis(this, axis.p2i(this.t2g_1));
      var isLaminate = _destruct__k2r9zo.de();
      var newAxis = _destruct__k2r9zo.ee();
      var tmp_0;
      if (isLaminate) {
        tmp_0 = joinByLaminate(this, a, b, newAxis);
      } else {
        tmp_0 = joinByAxis(this, a, b, newAxis);
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(ConcatenateAPLFunctionImpl).j2h = function () {
    return APLNullValue_getInstance();
  };
  protoOf(ConcatenateAPLFunctionImpl).f2i = function (context, arg, sizeAlongAxis, stepLength, offset, savedStack, functionAxis) {
    switch (sizeAlongAxis) {
      case 0:
        return APLNullValue_getInstance();
      case 1:
        return arg.h2k(offset);
      default:
        return loopedReduce(this, context, arg, sizeAlongAxis, stepLength, offset, functionAxis);
    }
  };
  function specialisedType$factory_0() {
    return getPropertyCallableRef('specialisedType', 1, KProperty1, function (receiver) {
      return new ArrayMemberType(receiver.f2n());
    }, null);
  }
  function metadata$factory_7() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_9() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function metadata$factory_8() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_10() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function computePartitionIndexes($this, partitionArgs) {
    var result = ArrayList_init_$Create$();
    var prevIndex = -1;
    var inductionVariable = 0;
    var last = partitionArgs.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var curr = partitionArgs[i];
        if (prevIndex >= 0 && curr === 0) {
          result.h(prevIndex);
          result.h(i);
          prevIndex = -1;
        } else if (i === 0 || (partitionArgs[i - 1 | 0] < curr && !(curr === 0))) {
          if (prevIndex >= 0) {
            result.h(prevIndex);
            result.h(i);
          }
          prevIndex = curr === 0 ? -1 : i;
        }
      }
       while (inductionVariable <= last);
    if (prevIndex >= 0) {
      result.h(prevIndex);
      result.h(partitionArgs.length);
    }
    return result;
  }
  function isAxisOrdered($this, a, axis) {
    var axisDiff = a.v2i() - axis.length | 0;
    var inductionVariable = 0;
    var last = axis.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!(axis[i] === (i + axisDiff | 0))) {
          return false;
        }
      }
       while (inductionVariable <= last);
    return true;
  }
  function EncloseAPLFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(EncloseAPLFunctionImpl).w2g = function (context, a, axis) {
    var v = a.g2k();
    var tmp;
    if (axis == null) {
      tmp = Companion_instance_51.s2i(v);
    } else {
      var axis0 = axis.u2i();
      var tmp_0;
      if (!(_Dimensions___get_size__impl__uu37ek(axis0.o2i()) === 1)) {
        throwAPLException(new APLIllegalArgumentException('Illegal dimensions of axis argument', this.t2g_1));
      } else if (Dimensions__get_impl_4npepw(axis0.o2i(), 0) === 1) {
        var axisInt = axis0.r2i(0, this.t2g_1);
        ensureValidAxis(axisInt, v.o2i(), this.t2g_1);
        tmp_0 = new AxisEnclosedValue(v, axisInt);
      } else if (Dimensions__get_impl_4npepw(axis0.o2i(), 0) > 1) {
        var axisIntArray = axis0.y2k(this.t2g_1);
        var tmp_1;
        if (isAxisOrdered(this, a, axisIntArray)) {
          tmp_1 = new AxisMultiDimensionEnclosedValue(a, axisIntArray.length);
        } else {
          var tmp_2 = 0;
          var tmp_3 = a.v2i();
          var tmp_4 = new Int32Array(tmp_3);
          while (tmp_2 < tmp_3) {
            var tmp_5 = tmp_2;
            tmp_4[tmp_5] = tmp_5;
            tmp_2 = tmp_2 + 1 | 0;
          }
          var orig = toMutableList(tmp_4);
          // Inline function 'kotlin.collections.forEach' call
          var inductionVariable = 0;
          var last = axisIntArray.length;
          while (inductionVariable < last) {
            var element = axisIntArray[inductionVariable];
            inductionVariable = inductionVariable + 1 | 0;
            var index = orig.t1(element);
            if (index === -1) {
              throwAPLException(new APLIllegalArgumentException('Invalid axis argument', this.t2g_1));
            } else {
              orig.i2(index);
            }
          }
          var tmp_6 = 0;
          var tmp_7 = orig.n() + axisIntArray.length | 0;
          var tmp_8 = new Int32Array(tmp_7);
          while (tmp_6 < tmp_7) {
            var tmp_9 = tmp_6;
            var indexFromOrig = orig.t1(tmp_9);
            var tmp_10;
            if (indexFromOrig === -1) {
              var indexFromAxisInt = indexOf(axisIntArray, tmp_9);
              var tmp_11;
              if (indexFromAxisInt === -1) {
                throw IllegalStateException_init_$Create$('Error when creating lookup array: index: ' + tmp_9 + ', orig = ' + joinToString_0(orig) + ', axisIntArray = ' + joinToString(axisIntArray) + '}');
              } else {
                tmp_11 = indexFromAxisInt + orig.n() | 0;
              }
              tmp_10 = tmp_11;
            } else {
              tmp_10 = indexFromOrig;
            }
            tmp_8[tmp_9] = tmp_10;
            tmp_6 = tmp_6 + 1 | 0;
          }
          var transposeAxis = tmp_8;
          var transposedArgument = new TransposedAPLValue(transposeAxis, a, this.t2g_1, false);
          tmp_1 = new AxisMultiDimensionEnclosedValue(transposedArgument, axisIntArray.length);
        }
        tmp_0 = tmp_1;
      } else {
        throwAPLException(new APLIllegalArgumentException('Empty array in axis argument', this.t2g_1));
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(EncloseAPLFunctionImpl).a2h = function (context, a, b, axis) {
    var b_0 = b.u2i();
    var axisInt = computeAxis_0(b_0, axis, this.t2g_1);
    var aDimensions = a.o2i();
    var tmp;
    switch (_Dimensions___get_size__impl__uu37ek(aDimensions)) {
      case 0:
        // Inline function 'kotlin.intArrayOf' call

        tmp = new Int32Array([a.p2i(this.t2g_1).q2i(this.t2g_1)]);
        break;
      case 1:
        tmp = a.y2k(this.t2g_1);
        break;
      default:
        throwAPLException(new APLIllegalArgumentException('Left argument to partition must be a scalar or a one-dimensional array', this.t2g_1));
        break;
    }
    var partitionArgs = tmp;
    if (!(partitionArgs.length === Dimensions__get_impl_4npepw(b_0.o2i(), axisInt))) {
      throwAPLException(new InvalidDimensionsException('Size of A must be the same size as the dimension of B along the selected axis (size of A: ' + partitionArgs.length + ', size of axis in B: ' + Dimensions__get_impl_4npepw(b_0.o2i(), axisInt) + ')', this.t2g_1));
    }
    var partitionIndexes = computePartitionIndexes(this, partitionArgs);
    return new PartitionedValue(b_0, axisInt, partitionIndexes);
  };
  protoOf(EncloseAPLFunctionImpl).z2h = function () {
    return 'enclose';
  };
  protoOf(EncloseAPLFunctionImpl).a2i = function () {
    return 'partitioned enclose';
  };
  function EncloseAPLFunction() {
  }
  protoOf(EncloseAPLFunction).i2i = function (instantiation) {
    return new EncloseAPLFunctionImpl(instantiation);
  };
  function processScalarValue($this, a, axis) {
    if (!(axis == null)) {
      var axisInt = makeAxisIntArray($this, axis, 1);
      if (!(axisInt[0] === 0)) {
        throwAPLException(new IllegalAxisException('Only axis 0 is allowed for scalars', $this.t2g_1));
      }
    }
    var tmp;
    if (a instanceof APLSingleValue) {
      tmp = a;
    } else {
      tmp = a.h2k(0);
    }
    return tmp;
  }
  function processAxis($this, a, axis, defaultValue) {
    var z1 = new DisclosedArrayValue(a, defaultValue);
    var z1Dimensions = z1.c36_1;
    var maxAxis = _Dimensions___get_size__impl__uu37ek(z1Dimensions) - _Dimensions___get_size__impl__uu37ek(a.o2i()) | 0;
    var axisInt = makeAxisIntArray($this, axis, maxAxis);
    // Inline function 'kotlin.collections.forEach' call
    var inductionVariable = 0;
    var last = axisInt.length;
    while (inductionVariable < last) {
      var element = axisInt[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      ensureValidAxis(element, z1Dimensions, $this.t2g_1);
    }
    // Inline function 'kotlin.collections.count' call
    if (!(distinct(axisInt).n() === axisInt.length)) {
      throwAPLException(new APLIllegalArgumentException('Duplicated values in axis', $this.t2g_1));
    }
    var newAxisList = ArrayList_init_$Create$();
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek(z1Dimensions);
    var inductionVariable_0 = 0;
    if (inductionVariable_0 < times)
      do {
        var index = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        if (indexOf(axisInt, index) === -1) {
          newAxisList.h(index);
        }
      }
       while (inductionVariable_0 < times);
    // Inline function 'kotlin.collections.forEach' call
    var inductionVariable_1 = 0;
    var last_0 = axisInt.length;
    while (inductionVariable_1 < last_0) {
      var element_0 = axisInt[inductionVariable_1];
      inductionVariable_1 = inductionVariable_1 + 1 | 0;
      newAxisList.h(element_0);
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(newAxisList.n() === _Dimensions___get_size__impl__uu37ek(z1Dimensions))) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new TransposedAPLValue(toIntArray(newAxisList), z1, $this.t2g_1, false);
  }
  function makeAxisIntArray($this, axis, maxAxis) {
    var axisArray = axis.u2i();
    if (!(_Dimensions___get_size__impl__uu37ek(axisArray.o2i()) === 1)) {
      throwAPLException(new APLIllegalArgumentException('Axis specifier must be a scalar or a rank-1 array', $this.t2g_1));
    }
    var v0 = axisArray.y2k($this.t2g_1);
    var tmp;
    if (v0.length === maxAxis) {
      tmp = v0;
    } else if (v0.length < maxAxis) {
      var tmp_0 = 0;
      var tmp_1 = new Int32Array(maxAxis);
      while (tmp_0 < maxAxis) {
        var tmp_2 = tmp_0;
        tmp_1[tmp_2] = tmp_2 < v0.length ? v0[tmp_2] : ((v0[v0.length - 1 | 0] + tmp_2 | 0) - v0.length | 0) + 1 | 0;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = tmp_1;
    } else {
      throwAPLException(new IllegalAxisException('Too many axis specifiers. Max allowed: ' + maxAxis + '. Got ' + v0.length + '.', $this.t2g_1));
    }
    return tmp;
  }
  function DiscloseAPLFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(DiscloseAPLFunctionImpl).w2g = function (context, a, axis) {
    var v = a.g2k();
    return v.n2l() ? processScalarValue(this, v, axis) : axis == null ? new DisclosedArrayValue(v, a.m2l().hv()) : processAxis(this, v, axis, a.m2l().hv());
  };
  protoOf(DiscloseAPLFunctionImpl).a2h = function (context, a, b, axis) {
    if (!(axis == null)) {
      throwAPLException(new AxisNotSupported(this.t2g_1));
    }
    var containsArg = _Dimensions___get_size__impl__uu37ek(a.o2i());
    if (!(0 <= containsArg ? containsArg <= 1 : false)) {
      throwAPLException(new InvalidDimensionsException('Left argument to pick should be rank 0 or 1', this.t2g_1));
    }
    var curr = b;
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    var this_0 = a.u2i();
    if (this_0.b2l()) {
      var d = this_0.o2i();
      var tmp;
      switch (_Dimensions___get_size__impl__uu37ek(d)) {
        case 0:
          if (!(_Dimensions___get_size__impl__uu37ek(curr.o2i()) === 1)) {
            throwAPLException(new InvalidDimensionsException('Mismatched dimensions for selection', this.t2g_1));
          }

          tmp = this_0.p2i(this.t2g_1).q2i(this.t2g_1);
          break;
        case 1:
          tmp = Dimensions__indexFromPosition_impl_e6hvbp(curr.o2i(), this_0.y2k(this.t2g_1), this.t2g_1);
          break;
        default:
          throwAPLException(new InvalidDimensionsException('Selection should be rank 0 or 1', this.t2g_1));
          break;
      }
      var index = tmp;
      if (!(0 <= index ? index < curr.n() : false)) {
        throwAPLException(new APLIndexOutOfBoundsException('Selection index out of bounds', this.t2g_1));
      }
      curr = curr.h2k(index);
    } else {
      var inductionVariable = 0;
      var last = this_0.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = this_0.h2k(i);
          var d_0 = v.o2i();
          var tmp_0;
          switch (_Dimensions___get_size__impl__uu37ek(d_0)) {
            case 0:
              if (!(_Dimensions___get_size__impl__uu37ek(curr.o2i()) === 1)) {
                throwAPLException(new InvalidDimensionsException('Mismatched dimensions for selection', this.t2g_1));
              }

              tmp_0 = v.p2i(this.t2g_1).q2i(this.t2g_1);
              break;
            case 1:
              tmp_0 = Dimensions__indexFromPosition_impl_e6hvbp(curr.o2i(), v.y2k(this.t2g_1), this.t2g_1);
              break;
            default:
              throwAPLException(new InvalidDimensionsException('Selection should be rank 0 or 1', this.t2g_1));
              break;
          }
          var index_0 = tmp_0;
          if (!(0 <= index_0 ? index_0 < curr.n() : false)) {
            throwAPLException(new APLIndexOutOfBoundsException('Selection index out of bounds', this.t2g_1));
          }
          curr = curr.h2k(index_0);
        }
         while (inductionVariable < last);
    }
    return curr;
  };
  protoOf(DiscloseAPLFunctionImpl).z2h = function () {
    return 'disclose';
  };
  protoOf(DiscloseAPLFunctionImpl).a2i = function () {
    return 'pick';
  };
  function Companion_3() {
  }
  protoOf(Companion_3).l36 = function (value) {
    var v = value.g2k();
    var tmp;
    if (v instanceof APLSingleValue) {
      tmp = v;
    } else {
      if (v.n2l()) {
        tmp = v.h2k(0);
      } else {
        tmp = new DisclosedArrayValue(v, value.m2l().hv());
      }
    }
    return tmp;
  };
  var Companion_instance_5;
  function Companion_getInstance_5() {
    return Companion_instance_5;
  }
  function DiscloseAPLFunction() {
  }
  protoOf(DiscloseAPLFunction).i2i = function (instantiation) {
    return new DiscloseAPLFunctionImpl(instantiation);
  };
  function computePartitionIndexes_0($this, partitionArgs) {
    var result = ArrayList_init_$Create$();
    var currStart = {_v: 0};
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var inductionVariable = 0;
    var last = partitionArgs.length;
    while (inductionVariable < last) {
      var item = partitionArgs[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      if (item > 0 && _unary__edvuaz > 0) {
        computePartitionIndexes$collectPartition(result, currStart, _unary__edvuaz);
      }
      if (item > 1) {
        // Inline function 'kotlin.repeat' call
        var times = item - 1 | 0;
        var inductionVariable_0 = 0;
        if (inductionVariable_0 < times)
          do {
            var index_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            result.h(_unary__edvuaz);
            result.h(_unary__edvuaz);
          }
           while (inductionVariable_0 < times);
      }
    }
    computePartitionIndexes$collectPartition(result, currStart, partitionArgs.length);
    return result;
  }
  function computePartitionIndexes$collectPartition(result, currStart, i) {
    result.h(currStart._v);
    result.h(i);
    currStart._v = i;
  }
  function PartitionedEncloseFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(PartitionedEncloseFunctionImpl).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    var tmp;
    if (Dimensions__isEmpty_impl_2yd13(a.o2i())) {
      tmp = a;
    } else {
      tmp = Companion_instance_51.s2i(a);
    }
    return tmp;
  };
  protoOf(PartitionedEncloseFunctionImpl).a2h = function (context, a, b, axis) {
    var b_0 = b.u2i();
    var axisInt = computeAxis_0(b_0, axis, this.t2g_1);
    var aDimensions = a.o2i();
    var tmp;
    switch (_Dimensions___get_size__impl__uu37ek(aDimensions)) {
      case 0:
        // Inline function 'kotlin.intArrayOf' call

        tmp = new Int32Array([a.p2i(this.t2g_1).q2i(this.t2g_1)]);
        break;
      case 1:
        tmp = a.y2k(this.t2g_1);
        break;
      default:
        throwAPLException(new APLIllegalArgumentException('Left argument to partition must be a scalar or a one-dimensional array', this.t2g_1));
        break;
    }
    var partitionArgs = tmp;
    if (!(partitionArgs.length === Dimensions__get_impl_4npepw(b_0.o2i(), axisInt))) {
      throwAPLException(new InvalidDimensionsException('Size of A must be the same size as the dimension of B along the selected axis (size of A: ' + partitionArgs.length + ', size of axis in B: ' + Dimensions__get_impl_4npepw(b_0.o2i(), axisInt) + ')', this.t2g_1));
    }
    var partitionIndexes = computePartitionIndexes_0(this, partitionArgs);
    return new PartitionedValue(b_0, axisInt, partitionIndexes);
  };
  protoOf(PartitionedEncloseFunctionImpl).z2h = function () {
    return 'nest';
  };
  protoOf(PartitionedEncloseFunctionImpl).a2i = function () {
    return 'partitioned enclose';
  };
  function PartitionedEncloseFunction() {
  }
  protoOf(PartitionedEncloseFunction).i2i = function (instantiation) {
    return new PartitionedEncloseFunctionImpl(instantiation);
  };
  function AxisMultiDimensionEnclosedValue(value, numDimensions) {
    APLArray.call(this);
    this.q36_1 = value;
    this.s36_1 = this.q36_1.o2i();
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = _Dimensions___get_size__impl__uu37ek(this.s36_1) - numDimensions | 0;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = Dimensions__get_impl_4npepw(this.s36_1, tmp_3);
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.r36_1 = _Dimensions___init__impl__sxkzw4(tmp_2);
    this.t36_1 = Dimensions__multipliers_impl_u1suko(this.s36_1);
    var tmp_4 = this;
    var tmp_5;
    if (numDimensions === _Dimensions___get_size__impl__uu37ek(this.s36_1)) {
      tmp_5 = Dimensions__contentSize_impl_4eihds(this.s36_1);
    } else {
      tmp_5 = DimensionMultipliers__get_impl_90rsg3(this.t36_1, (_Dimensions___get_size__impl__uu37ek(this.s36_1) - numDimensions | 0) - 1 | 0);
    }
    tmp_4.u36_1 = tmp_5;
    var tmp_6 = this;
    var tmp_7 = 0;
    var tmp_8 = new Int32Array(numDimensions);
    while (tmp_7 < numDimensions) {
      var tmp_9 = tmp_7;
      tmp_8[tmp_9] = Dimensions__get_impl_4npepw(this.s36_1, (_Dimensions___get_size__impl__uu37ek(this.s36_1) - numDimensions | 0) + tmp_9 | 0);
      tmp_7 = tmp_7 + 1 | 0;
    }
    tmp_6.v36_1 = _Dimensions___init__impl__sxkzw4(tmp_8);
  }
  protoOf(AxisMultiDimensionEnclosedValue).o2i = function () {
    return this.r36_1;
  };
  protoOf(AxisMultiDimensionEnclosedValue).h2k = function (p) {
    var tmp;
    if (this.u36_1 === 1) {
      var v = this.q36_1.h2k(p).g2k();
      tmp = Companion_instance_51.s2i(v);
    } else {
      var high = imul(p, this.u36_1);
      var tmp_0 = 0;
      var tmp_1 = Dimensions__contentSize_impl_4eihds(this.v36_1);
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_2 = Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        tmp_2[tmp_3] = this.q36_1.h2k(high + tmp_3 | 0);
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = new APLArrayImpl(this.v36_1, tmp_2);
    }
    return tmp;
  };
  function maxShapeOf($this, v) {
    if (v.n() === 0) {
      return new Pair(new Dimensions(emptyDimensions()), false);
    }
    var arrayRagged = false;
    var elements = {_v: null};
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (v.b2l()) {
      var dimensions = v.o2i();
      if (elements._v == null) {
        var tmp = 0;
        var tmp_0 = _Dimensions___get_size__impl__uu37ek(dimensions);
        var tmp_1 = new Int32Array(tmp_0);
        while (tmp < tmp_0) {
          var tmp_2 = tmp;
          tmp_1[tmp_2] = Dimensions__get_impl_4npepw(dimensions, tmp_2);
          tmp = tmp + 1 | 0;
        }
        elements._v = tmp_1;
      } else if (elements._v.length < _Dimensions___get_size__impl__uu37ek(dimensions)) {
        arrayRagged = true;
        var tmp_3 = 0;
        var tmp_4 = _Dimensions___get_size__impl__uu37ek(dimensions);
        var tmp_5 = new Int32Array(tmp_4);
        while (tmp_3 < tmp_4) {
          var tmp_6 = tmp_3;
          var n = _Dimensions___get_size__impl__uu37ek(dimensions) - ensureNotNull(elements._v).length | 0;
          var tmp_7;
          if (tmp_6 < n) {
            tmp_7 = Dimensions__get_impl_4npepw(dimensions, tmp_6);
          } else {
            var tmp0 = ensureNotNull(elements._v)[tmp_6 - n | 0];
            // Inline function 'kotlin.math.max' call
            var b = Dimensions__get_impl_4npepw(dimensions, tmp_6);
            tmp_7 = Math.max(tmp0, b);
          }
          tmp_5[tmp_6] = tmp_7;
          tmp_3 = tmp_3 + 1 | 0;
        }
        elements._v = tmp_5;
      } else {
        var n_0 = elements._v.length - _Dimensions___get_size__impl__uu37ek(dimensions) | 0;
        var inductionVariable = n_0;
        var last = elements._v.length;
        if (inductionVariable < last)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var size = Dimensions__get_impl_4npepw(dimensions, i - n_0 | 0);
            if (!(elements._v[i] === size)) {
              arrayRagged = true;
              if (elements._v[i] < size) {
                elements._v[i] = size;
              }
            }
          }
           while (inductionVariable < last);
      }
    } else {
      var inductionVariable_0 = 0;
      var last_0 = v.n();
      if (inductionVariable_0 < last_0)
        do {
          var i_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          var dimensions_0 = v.h2k(i_0).o2i();
          if (elements._v == null) {
            var tmp_8 = 0;
            var tmp_9 = _Dimensions___get_size__impl__uu37ek(dimensions_0);
            var tmp_10 = new Int32Array(tmp_9);
            while (tmp_8 < tmp_9) {
              var tmp_11 = tmp_8;
              tmp_10[tmp_11] = Dimensions__get_impl_4npepw(dimensions_0, tmp_11);
              tmp_8 = tmp_8 + 1 | 0;
            }
            elements._v = tmp_10;
          } else if (elements._v.length < _Dimensions___get_size__impl__uu37ek(dimensions_0)) {
            arrayRagged = true;
            var tmp_12 = 0;
            var tmp_13 = _Dimensions___get_size__impl__uu37ek(dimensions_0);
            var tmp_14 = new Int32Array(tmp_13);
            while (tmp_12 < tmp_13) {
              var tmp_15 = tmp_12;
              var n_1 = _Dimensions___get_size__impl__uu37ek(dimensions_0) - ensureNotNull(elements._v).length | 0;
              var tmp_16;
              if (tmp_15 < n_1) {
                tmp_16 = Dimensions__get_impl_4npepw(dimensions_0, tmp_15);
              } else {
                var tmp0_0 = ensureNotNull(elements._v)[tmp_15 - n_1 | 0];
                // Inline function 'kotlin.math.max' call
                var b_0 = Dimensions__get_impl_4npepw(dimensions_0, tmp_15);
                tmp_16 = Math.max(tmp0_0, b_0);
              }
              tmp_14[tmp_15] = tmp_16;
              tmp_12 = tmp_12 + 1 | 0;
            }
            elements._v = tmp_14;
          } else {
            var n_2 = elements._v.length - _Dimensions___get_size__impl__uu37ek(dimensions_0) | 0;
            var inductionVariable_1 = n_2;
            var last_1 = elements._v.length;
            if (inductionVariable_1 < last_1)
              do {
                var i_1 = inductionVariable_1;
                inductionVariable_1 = inductionVariable_1 + 1 | 0;
                var size_0 = Dimensions__get_impl_4npepw(dimensions_0, i_1 - n_2 | 0);
                if (!(elements._v[i_1] === size_0)) {
                  arrayRagged = true;
                  if (elements._v[i_1] < size_0) {
                    elements._v[i_1] = size_0;
                  }
                }
              }
               while (inductionVariable_1 < last_1);
          }
        }
         while (inductionVariable_0 < last_0);
    }
    return !(elements._v == null) ? new Pair(new Dimensions(_Dimensions___init__impl__sxkzw4(elements._v)), arrayRagged) : new Pair(new Dimensions(emptyDimensions()), false);
  }
  function computeSpecialisedType($this) {
    var curr = Companion_getInstance_45().d2k_1;
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    var this_0 = $this.b36_1;
    if (this_0.b2l()) {
      curr = ArrayMemberType__intersection_impl_osmuy1(curr, this_0.f2n());
      if (_ArrayMemberType___get_isGeneric__impl__mdbj0(curr)) {
        return curr;
      }
    } else {
      var inductionVariable = 0;
      var last = this_0.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = this_0.h2k(i);
          curr = ArrayMemberType__intersection_impl_osmuy1(curr, v.f2n());
          if (_ArrayMemberType___get_isGeneric__impl__mdbj0(curr)) {
            return curr;
          }
        }
         while (inductionVariable < last);
    }
    var tmp;
    if ($this.f36_1) {
      tmp = ArrayMemberType__intersection_impl_osmuy1(curr, $this.a36_1.f2k());
    } else {
      tmp = curr;
    }
    return tmp;
  }
  function DisclosedArrayValue$specialisedType$delegate$lambda(this$0) {
    return function () {
      return new ArrayMemberType(computeSpecialisedType(this$0));
    };
  }
  function DisclosedArrayValue$valueAtLong$lambda($v) {
    return function () {
      return 'Enclosed value was not an integer: ' + getKClassFromExpression($v).b9();
    };
  }
  function DisclosedArrayValue$valueAtLong$lambda_0(this$0) {
    return function () {
      return 'Unexpected default type in specialised array: ' + this$0.a36_1.z2p().p2();
    };
  }
  function DisclosedArrayValue$valueAtLong$lambda_1(this$0) {
    return function () {
      return 'Unexpected default type in specialised array: ' + this$0.a36_1.z2p().p2();
    };
  }
  function DisclosedArrayValue$valueAtLong$lambda_2(this$0) {
    return function () {
      return 'Unexpected default type in specialised array: ' + this$0.a36_1.z2p().p2();
    };
  }
  function DisclosedArrayValue$valueAtDouble$lambda($v) {
    return function () {
      return 'Enclosed value was not a double: ' + getKClassFromExpression($v).b9();
    };
  }
  function DisclosedArrayValue(value, innerDefault) {
    APLArray.call(this);
    this.a36_1 = innerDefault;
    this.b36_1 = value.d2q();
    var tmp = this;
    tmp.g36_1 = lazy(DisclosedArrayValue$specialisedType$delegate$lambda(this));
    var d = this.b36_1.o2i();
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(_Dimensions___get_size__impl__uu37ek(d) > 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var _destruct__k2r9zo = maxShapeOf(this, this.b36_1);
    var m = _destruct__k2r9zo.de().w36_1;
    var arrayRagged = _destruct__k2r9zo.ee();
    this.f36_1 = arrayRagged;
    var tmp_0 = 0;
    var tmp_1 = _Dimensions___get_size__impl__uu37ek(d) + _Dimensions___get_size__impl__uu37ek(m) | 0;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp_4;
      if (tmp_3 < _Dimensions___get_size__impl__uu37ek(d)) {
        tmp_4 = Dimensions__get_impl_4npepw(d, tmp_3);
      } else {
        tmp_4 = Dimensions__get_impl_4npepw(m, tmp_3 - _Dimensions___get_size__impl__uu37ek(d) | 0);
      }
      tmp_2[tmp_3] = tmp_4;
      tmp_0 = tmp_0 + 1 | 0;
    }
    var resultDimension = _Dimensions___init__impl__sxkzw4(tmp_2);
    var multipliers = Dimensions__multipliers_impl_u1suko(resultDimension);
    this.c36_1 = resultDimension;
    this.d36_1 = DimensionMultipliers__get_impl_90rsg3(multipliers, _Dimensions___get_size__impl__uu37ek(d) - 1 | 0);
    this.e36_1 = Dimensions__multipliers_impl_u1suko(m);
  }
  protoOf(DisclosedArrayValue).o2i = function () {
    return this.c36_1;
  };
  protoOf(DisclosedArrayValue).f2n = function () {
    var tmp0 = this.g36_1;
    // Inline function 'kotlin.getValue' call
    specialisedType$factory_1();
    return tmp0.x1().e2k_1;
  };
  protoOf(DisclosedArrayValue).i2n = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.DisclosedArrayValue.computePos' call
    var index = p / this.d36_1 | 0;
    var v = this.b36_1.h2k(index).g2k();
    var innerIndex = p % this.d36_1 | 0;
    var d = v.o2i();
    if (innerIndex === 0) {
      if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
        if (v instanceof APLLong)
          return v.g2n_1;
        else {
          if (v instanceof APLBigInt)
            throw new LongExpressionOverflow(v.z2q_1);
          else {
            // Inline function 'kotlin.error' call
            var message = DisclosedArrayValue$valueAtLong$lambda(v);
            throw IllegalStateException_init_$Create$(toString(message));
          }
        }
      } else if (v.n() === 0) {
        var def = this.a36_1.w2q();
        var tmp;
        if (def instanceof APLLong) {
          tmp = def.g2n_1;
        } else {
          if (def instanceof APLBigInt) {
            // Inline function 'kotlin.let' call
            var b = def.z2q_1;
            var tmp_0;
            if (rangeInLong(b)) {
              tmp_0 = toLong(b);
            } else {
              throw new LongExpressionOverflow(b);
            }
            tmp = tmp_0;
          } else {
            var message_0 = DisclosedArrayValue$valueAtLong$lambda_0(this);
            throw IllegalStateException_init_$Create$(toString(message_0));
          }
        }
        return tmp;
      } else {
        try {
          return v.i2n(0);
        } catch ($p) {
          if ($p instanceof LongExpressionOverflow) {
            var e = $p;
            throw e;
          } else {
            throw $p;
          }
        }
      }
    } else if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
      var def_0 = this.a36_1.w2q();
      var tmp_1;
      if (def_0 instanceof APLLong) {
        tmp_1 = def_0.g2n_1;
      } else {
        if (def_0 instanceof APLBigInt) {
          // Inline function 'kotlin.let' call
          var b_0 = def_0.z2q_1;
          var tmp_2;
          if (rangeInLong(b_0)) {
            tmp_2 = toLong(b_0);
          } else {
            throw new LongExpressionOverflow(b_0);
          }
          tmp_1 = tmp_2;
        } else {
          var message_1 = DisclosedArrayValue$valueAtLong$lambda_1(this);
          throw IllegalStateException_init_$Create$(toString(message_1));
        }
      }
      return tmp_1;
    } else {
      var position = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.e36_1, innerIndex);
      var n = position.length - _Dimensions___get_size__impl__uu37ek(d) | 0;
      var inductionVariable = 0;
      var last = position.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var size = i < n ? 1 : Dimensions__get_impl_4npepw(d, i - n | 0);
          if (position[i] >= size) {
            var def_1 = this.a36_1.w2q();
            var tmp_3;
            if (def_1 instanceof APLLong) {
              tmp_3 = def_1.g2n_1;
            } else {
              if (def_1 instanceof APLBigInt) {
                // Inline function 'kotlin.let' call
                var b_1 = def_1.z2q_1;
                var tmp_4;
                if (rangeInLong(b_1)) {
                  tmp_4 = toLong(b_1);
                } else {
                  throw new LongExpressionOverflow(b_1);
                }
                tmp_3 = tmp_4;
              } else {
                var message_2 = DisclosedArrayValue$valueAtLong$lambda_2(this);
                throw IllegalStateException_init_$Create$(toString(message_2));
              }
            }
            return tmp_3;
          }
        }
         while (inductionVariable <= last);
      var tmp_5;
      if (position.length === _Dimensions___get_size__impl__uu37ek(d)) {
        tmp_5 = position;
      } else {
        var tmp_6 = 0;
        var tmp_7 = _Dimensions___get_size__impl__uu37ek(d);
        var tmp_8 = new Int32Array(tmp_7);
        while (tmp_6 < tmp_7) {
          var tmp_9 = tmp_6;
          tmp_8[tmp_9] = position[tmp_9 + n | 0];
          tmp_6 = tmp_6 + 1 | 0;
        }
        tmp_5 = tmp_8;
      }
      var updatedPosition = tmp_5;
      var newPos = Dimensions__indexFromPosition$default_impl_khimhk(d, updatedPosition);
      try {
        return v.i2n(newPos);
      } catch ($p) {
        if ($p instanceof LongExpressionOverflow) {
          var e_0 = $p;
          throw e_0;
        } else {
          throw $p;
        }
      }
    }
  };
  protoOf(DisclosedArrayValue).y2p = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.DisclosedArrayValue.computePos' call
    var index = p / this.d36_1 | 0;
    var v = this.b36_1.h2k(index).g2k();
    var innerIndex = p % this.d36_1 | 0;
    var d = v.o2i();
    if (innerIndex === 0) {
      if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
        if (v instanceof APLDouble) {
          return v.a2r_1;
        } else {
          // Inline function 'kotlin.error' call
          var message = DisclosedArrayValue$valueAtDouble$lambda(v);
          throw IllegalStateException_init_$Create$(toString(message));
        }
      } else if (v.n() === 0) {
        return this.a36_1.w2q().r2z();
      } else {
        return v.y2p(0);
      }
    } else if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
      return this.a36_1.w2q().r2z();
    } else {
      var position = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.e36_1, innerIndex);
      var n = position.length - _Dimensions___get_size__impl__uu37ek(d) | 0;
      var inductionVariable = 0;
      var last = position.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var size = i < n ? 1 : Dimensions__get_impl_4npepw(d, i - n | 0);
          if (position[i] >= size) {
            return this.a36_1.w2q().r2z();
          }
        }
         while (inductionVariable <= last);
      var tmp;
      if (position.length === _Dimensions___get_size__impl__uu37ek(d)) {
        tmp = position;
      } else {
        var tmp_0 = 0;
        var tmp_1 = _Dimensions___get_size__impl__uu37ek(d);
        var tmp_2 = new Int32Array(tmp_1);
        while (tmp_0 < tmp_1) {
          var tmp_3 = tmp_0;
          tmp_2[tmp_3] = position[tmp_3 + n | 0];
          tmp_0 = tmp_0 + 1 | 0;
        }
        tmp = tmp_2;
      }
      var updatedPosition = tmp;
      var newPos = Dimensions__indexFromPosition$default_impl_khimhk(d, updatedPosition);
      return v.y2p(newPos);
    }
  };
  protoOf(DisclosedArrayValue).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.DisclosedArrayValue.computePos' call
    var index = p / this.d36_1 | 0;
    var v = this.b36_1.h2k(index).g2k();
    var innerIndex = p % this.d36_1 | 0;
    var d = v.o2i();
    if (innerIndex === 0) {
      if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
        return v.o2l();
      } else if (v.n() === 0) {
        return this.a36_1;
      } else {
        return v.h2k(0);
      }
    } else if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
      return this.a36_1;
    } else {
      var position = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.e36_1, innerIndex);
      var n = position.length - _Dimensions___get_size__impl__uu37ek(d) | 0;
      var inductionVariable = 0;
      var last = position.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var size = i < n ? 1 : Dimensions__get_impl_4npepw(d, i - n | 0);
          if (position[i] >= size) {
            return this.a36_1;
          }
        }
         while (inductionVariable <= last);
      var tmp;
      if (position.length === _Dimensions___get_size__impl__uu37ek(d)) {
        tmp = position;
      } else {
        var tmp_0 = 0;
        var tmp_1 = _Dimensions___get_size__impl__uu37ek(d);
        var tmp_2 = new Int32Array(tmp_1);
        while (tmp_0 < tmp_1) {
          var tmp_3 = tmp_0;
          tmp_2[tmp_3] = position[tmp_3 + n | 0];
          tmp_0 = tmp_0 + 1 | 0;
        }
        tmp = tmp_2;
      }
      var updatedPosition = tmp;
      var newPos = Dimensions__indexFromPosition$default_impl_khimhk(d, updatedPosition);
      return v.h2k(newPos);
    }
  };
  function AxisEnclosedValue(value, axis) {
    APLArray.call(this);
    this.x36_1 = value;
    var aDimensions = this.x36_1.o2i();
    var argMultipliers = Dimensions__multipliers_impl_u1suko(aDimensions);
    this.z36_1 = DimensionMultipliers__get_impl_90rsg3(argMultipliers, axis);
    this.a37_1 = Dimensions__get_impl_4npepw(aDimensions, axis);
    this.y36_1 = Dimensions__remove_impl_ve6v38(aDimensions, axis);
    var multipliers = Dimensions__multipliers_impl_u1suko(this.y36_1);
    this.b37_1 = axis === 0 ? this.n() : DimensionMultipliers__get_impl_90rsg3(multipliers, axis - 1 | 0);
    this.c37_1 = imul(this.b37_1, Dimensions__get_impl_4npepw(aDimensions, axis));
  }
  protoOf(AxisEnclosedValue).o2i = function () {
    return this.y36_1;
  };
  protoOf(AxisEnclosedValue).h2k = function (p) {
    var tmp;
    if (this.a37_1 === 0) {
      tmp = get_APLLONG_0();
    } else {
      var highPosition = p / this.b37_1 | 0;
      var lowPosition = p % this.b37_1 | 0;
      var posInSrc = imul(highPosition, this.c37_1) + lowPosition | 0;
      var tmp_0 = dimensionsOfSize(new Int32Array([this.a37_1]));
      var tmp_1 = 0;
      var tmp_2 = this.a37_1;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_3 = Array(tmp_2);
      while (tmp_1 < tmp_2) {
        var tmp_4 = tmp_1;
        tmp_3[tmp_4] = this.x36_1.h2k(imul(tmp_4, this.z36_1) + posInSrc | 0);
        tmp_1 = tmp_1 + 1 | 0;
      }
      tmp = new APLArrayImpl(tmp_0, tmp_3);
    }
    return tmp;
  };
  function computeAxis_0(b, axis, pos) {
    pos = pos === VOID ? null : pos;
    var bDimensions = b.o2i();
    var tmp;
    if (axis == null) {
      tmp = Dimensions__lastAxis$default_impl_rqeluc(bDimensions);
    } else {
      tmp = axis.p2i(pos).q2i(pos);
    }
    var axisInt = tmp;
    if (axisInt < 0 || axisInt >= _Dimensions___get_size__impl__uu37ek(bDimensions)) {
      throwAPLException(IllegalAxisException_init_$Create$(axisInt, bDimensions, pos));
    }
    return axisInt;
  }
  function PartitionedValue(b, axis, partitionIndexes) {
    APLArray.call(this);
    this.d37_1 = b;
    this.e37_1 = axis;
    this.f37_1 = partitionIndexes;
    this.i37_1 = this.d37_1.o2i();
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = _Dimensions___get_size__impl__uu37ek(this.i37_1);
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp_4;
      if (tmp_3 === this.e37_1) {
        tmp_4 = this.f37_1.n() / 2 | 0;
      } else {
        tmp_4 = Dimensions__get_impl_4npepw(this.i37_1, tmp_3);
      }
      tmp_2[tmp_3] = tmp_4;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.g37_1 = _Dimensions___init__impl__sxkzw4(tmp_2);
    this.h37_1 = Dimensions__multipliers_impl_u1suko(this.g37_1);
    this.j37_1 = Dimensions__multipliers_impl_u1suko(this.i37_1);
  }
  protoOf(PartitionedValue).o2i = function () {
    return this.g37_1;
  };
  protoOf(PartitionedValue).h2k = function (p) {
    var indexes = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.h37_1, p);
    var start = this.f37_1.p(imul(indexes[this.e37_1], 2));
    var end = this.f37_1.p(imul(indexes[this.e37_1], 2) + 1 | 0);
    var tmp = dimensionsOfSize(new Int32Array([end - start | 0]));
    var tmp_0 = 0;
    var tmp_1 = end - start | 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_2 = Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp_4 = 0;
      var tmp_5 = _Dimensions___get_size__impl__uu37ek(this.i37_1);
      var tmp_6 = new Int32Array(tmp_5);
      while (tmp_4 < tmp_5) {
        var tmp_7 = tmp_4;
        var tmp_8;
        if (tmp_7 === this.e37_1) {
          tmp_8 = start + tmp_3 | 0;
        } else {
          tmp_8 = indexes[tmp_7];
        }
        tmp_6[tmp_7] = tmp_8;
        tmp_4 = tmp_4 + 1 | 0;
      }
      var newPosition = tmp_6;
      tmp_2[tmp_3] = this.d37_1.h2k(Dimensions__indexFromPosition$default_impl_khimhk(this.i37_1, newPosition));
      tmp_0 = tmp_0 + 1 | 0;
    }
    return new APLArrayImpl(tmp, tmp_2);
  };
  function specialisedType$factory_1() {
    return getPropertyCallableRef('specialisedType', 1, KProperty1, function (receiver) {
      return new ArrayMemberType(receiver.f2n());
    }, null);
  }
  function ReturnFunctionImpl(pos, returnEnvironment) {
    NoAxisAPLFunction.call(this, pos);
    this.o37_1 = returnEnvironment;
  }
  protoOf(ReturnFunctionImpl).n2i = function (context, a) {
    throw new ReturnValue(a, this.o37_1, this.t2g_1);
  };
  protoOf(ReturnFunctionImpl).t2i = function (context, a, b) {
    if (a.r2q(this.t2g_1)) {
      throw new ReturnValue(b, this.o37_1, this.t2g_1);
    } else {
      return b;
    }
  };
  function findReturnEnvironment($this, env) {
    var curr = env;
    while (!(curr == null)) {
      if (curr.s37_1) {
        return curr;
      }
      curr = curr.q37_1;
    }
    return null;
  }
  function ReturnFunction() {
  }
  protoOf(ReturnFunction).i2i = function (instantiation) {
    var tmp0_elvis_lhs = findReturnEnvironment(this, instantiation.e38_1);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw new ParseException('Call to return without a function call', instantiation.d38_1);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var returnEnvironment = tmp;
    instantiation.e38_1.y37_1.h(instantiation);
    return new ReturnFunctionImpl(instantiation, returnEnvironment);
  };
  function ThrowFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ThrowFunctionImpl).n2i = function (context, a) {
    var engine = context.j38_1;
    throwAPLException(new TagCatch(new ThrowableTag(new APLSymbol(engine.s39('error', engine.r39())), a), null, this.t2g_1));
  };
  protoOf(ThrowFunctionImpl).t2i = function (context, a, b) {
    throwAPLException(new TagCatch(new ThrowableTag(a, b), null, this.t2g_1));
  };
  function ThrowFunction() {
  }
  protoOf(ThrowFunction).i2i = function (instantiation) {
    return new ThrowFunctionImpl(instantiation);
  };
  function CatchOperator$CatchFunctionDescriptor$make$1($instantiation, $fn) {
    this.x39_1 = $fn;
    NoAxisAPLFunction.call(this, $instantiation);
  }
  protoOf(CatchOperator$CatchFunctionDescriptor$make$1).n2i = function (context, a) {
    var dimensions = a.o2i();
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!(_Dimensions___get_size__impl__uu37ek(dimensions) === 1 && (Dimensions__get_impl_4npepw(dimensions, 0) % 2 | 0) === 0 || (_Dimensions___get_size__impl__uu37ek(dimensions) === 2 && Dimensions__get_impl_4npepw(dimensions, 1) === 2))) {
      throwAPLException(new APLIllegalArgumentException('Invalid dimensions of catch argument', this.t2g_1));
    }
    try {
      return this.x39_1.w2g(context, APLNullValue_getInstance(), null);
    } catch ($p) {
      if ($p instanceof APLEvalException) {
        var e = $p;
        var throwableTag = e.c3a();
        if (!(throwableTag == null)) {
          var inductionVariable = 0;
          var last = Dimensions__contentSize_impl_4eihds(dimensions) / 2 | 0;
          if (inductionVariable < last)
            do {
              var rowIndex = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              var checked = a.h2k(imul(rowIndex, 2));
              if (throwableTag.g3a_1.r2n(checked, this.t2g_1)) {
                var handlerFunction = a.h2k(imul(rowIndex, 2) + 1 | 0).g2k();
                if (!(handlerFunction instanceof LambdaValue)) {
                  throwAPLException(new APLIllegalArgumentException('The handler is not callable, this is currently an error.', this.t2g_1));
                }
                return handlerFunction.f3a().a2h(context, throwableTag.h3a_1, throwableTag.g3a_1, null);
              }
            }
             while (inductionVariable < last);
        }
        throw e;
      } else {
        throw $p;
      }
    }
  };
  function CatchFunctionDescriptor(fn1Descriptor) {
    this.i3a_1 = fn1Descriptor;
  }
  protoOf(CatchFunctionDescriptor).i2i = function (instantiation) {
    var fn = this.i3a_1;
    return new CatchOperator$CatchFunctionDescriptor$make$1(instantiation, fn);
  };
  function CatchOperator() {
  }
  protoOf(CatchOperator).n2w = function (fn, pos) {
    return new CatchFunctionDescriptor(fn);
  };
  function LabelsFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(LabelsFunctionImpl).w2g = function (context, a, axis) {
    var d = a.o2i();
    var axisInt = axis == null ? Dimensions__lastAxis_impl_jffa09(d, this.t2g_1) : axis.p2i(this.t2g_1).q2i(this.t2g_1);
    ensureValidAxis(axisInt, d, this.t2g_1);
    var tmp0_safe_receiver = a.m2l().p2r();
    var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.q2r_1;
    var tmp2_safe_receiver = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.p(axisInt);
    var tmp;
    if (tmp2_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(tmp2_safe_receiver, 10));
      var _iterator__ex2g4s = tmp2_safe_receiver.k();
      while (_iterator__ex2g4s.l()) {
        var item = _iterator__ex2g4s.m();
        var tmp_0 = Companion_getInstance_46();
        var tmp1_elvis_lhs = item == null ? null : item.j35_1;
        var tmp$ret$0 = tmp_0.k2o(tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs);
        destination.h(tmp$ret$0);
      }
      tmp = destination;
    }
    var newLabels = tmp;
    var resDimensions = dimensionsOfSize(new Int32Array([Dimensions__get_impl_4npepw(d, axisInt)]));
    var tmp_1;
    if (newLabels == null) {
      var tmp_2 = 0;
      var tmp_3 = Dimensions__get_impl_4npepw(d, axisInt);
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_4 = Array(tmp_3);
      while (tmp_2 < tmp_3) {
        tmp_4[tmp_2] = Companion_getInstance_46().j2o_1;
        tmp_2 = tmp_2 + 1 | 0;
      }
      tmp_1 = new APLArrayImpl(resDimensions, tmp_4);
    } else {
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp$ret$5 = copyToArray(newLabels);
      tmp_1 = new APLArrayImpl(resDimensions, tmp$ret$5);
    }
    return tmp_1;
  };
  protoOf(LabelsFunctionImpl).a2h = function (context, a, b, axis) {
    if (!b.n2l()) {
      var bDimensions = b.o2i();
      var axisInt = axis == null ? Dimensions__lastAxis_impl_jffa09(bDimensions, this.t2g_1) : axis.p2i(this.t2g_1).q2i(this.t2g_1);
      ensureValidAxis(axisInt, bDimensions, this.t2g_1);
      var aDimensions = a.o2i();
      if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === 1)) {
        throwAPLException(new InvalidDimensionsException('Left argument must be an array of labels', this.t2g_1));
      }
      if (!(Dimensions__get_impl_4npepw(aDimensions, 0) === Dimensions__get_impl_4npepw(bDimensions, axisInt))) {
        throwAPLException(new InvalidDimensionsException('Label list has incorrect length', this.t2g_1));
      }
      var extraLabels = ArrayList_init_$Create$_0(_Dimensions___get_size__impl__uu37ek(bDimensions));
      // Inline function 'kotlin.repeat' call
      var times = _Dimensions___get_size__impl__uu37ek(bDimensions);
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp;
          if (index === axisInt) {
            var labelsList = ArrayList_init_$Create$_0(Dimensions__get_impl_4npepw(bDimensions, axisInt));
            // Inline function 'kotlin.repeat' call
            var times_0 = Dimensions__get_impl_4npepw(bDimensions, axisInt);
            var inductionVariable_0 = 0;
            if (inductionVariable_0 < times_0)
              do {
                var index_0 = inductionVariable_0;
                inductionVariable_0 = inductionVariable_0 + 1 | 0;
                var value = a.h2k(index_0).g2k();
                var tmp_0;
                if (value instanceof APLNilValue) {
                  tmp_0 = null;
                } else {
                  if (!(_Dimensions___get_size__impl__uu37ek(value.o2i()) === 1)) {
                    throwAPLException(new InvalidDimensionsException('Label should be a single-dimensional array', this.t2g_1));
                  } else {
                    if (Dimensions__get_impl_4npepw(value.o2i(), 0) === 0) {
                      tmp_0 = null;
                    } else {
                      // Inline function 'com.dhsdevelopments.kap.toStringValue' call
                      var result = toStringValueOrNull(value);
                      if (result == null) {
                        var m = null;
                        var messagePrefix = m == null ? '' : '' + m + ': ';
                        throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', null));
                      }
                      tmp_0 = new AxisLabel(result);
                    }
                  }
                }
                var e = tmp_0;
                labelsList.h(e);
              }
               while (inductionVariable_0 < times_0);
            tmp = labelsList;
          } else {
            tmp = null;
          }
          var v = tmp;
          extraLabels.h(v);
        }
         while (inductionVariable < times);
      return Companion_instance_56.n3a(b, extraLabels);
    } else {
      throwAPLException(new IncompatibleTypeException('Unable to set labels on non-array instances', this.t2g_1));
    }
  };
  protoOf(LabelsFunctionImpl).a2i = function () {
    return 'labels';
  };
  function LabelsFunction() {
  }
  protoOf(LabelsFunction).i2i = function (instantiation) {
    return new LabelsFunctionImpl(instantiation);
  };
  function UnwindProtectAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(UnwindProtectAPLFunctionImpl).n2i = function (context, a) {
    var aDimensions = a.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === 1) || !(Dimensions__get_impl_4npepw(aDimensions, 0) === 2)) {
      throwAPLException(new APLEvalException('Invalid dimensions in unwindProtect call', this.t2g_1));
    }
    var fn = a.h2k(0).d2q();
    if (!(fn instanceof LambdaValue)) {
      throwAPLException(new APLEvalException('Handler function is not a lambda', this.t2g_1));
    }
    var finallyHandler = a.h2k(1).d2q();
    if (!(finallyHandler instanceof LambdaValue)) {
      throwAPLException(new APLEvalException('Unwind handler is not a lambda', this.t2g_1));
    }
    var thrownException = null;
    var result = null;
    try {
      result = fn.f3a().w2g(context, APLNullValue_getInstance(), null);
    } catch ($p) {
      if ($p instanceof APLEvalException) {
        var e = $p;
        thrownException = e;
      } else {
        throw $p;
      }
    }
    finallyHandler.f3a().w2g(context, APLNullValue_getInstance(), null);
    if (!(thrownException == null)) {
      throw thrownException;
    }
    return ensureNotNull(result);
  };
  function UnwindProtectAPLFunction() {
  }
  protoOf(UnwindProtectAPLFunction).i2i = function (instantiation) {
    return new UnwindProtectAPLFunctionImpl(instantiation);
  };
  function DeferAPLOperator$DeferAPLFunction$make$1($instantiation, this$0) {
    this.w3a_1 = this$0;
    NoAxisAPLFunction.call(this, $instantiation);
  }
  protoOf(DeferAPLOperator$DeferAPLFunction$make$1).n2i = function (context, a) {
    return new DeferredAPLValue1Arg(this.w3a_1.x3a_1, context, a);
  };
  protoOf(DeferAPLOperator$DeferAPLFunction$make$1).t2i = function (context, a, b) {
    return new DeferredAPLValue2Arg(this.w3a_1.x3a_1, context, a, b);
  };
  function DeferAPLFunction(fn) {
    this.x3a_1 = fn;
  }
  protoOf(DeferAPLFunction).i2i = function (instantiation) {
    return new DeferAPLOperator$DeferAPLFunction$make$1(instantiation, this);
  };
  function DeferAPLOperator() {
  }
  protoOf(DeferAPLOperator).n2w = function (fn, pos) {
    return new DeferAPLFunction(fn);
  };
  function EnsureTypeFunctionImpl($outer, pos) {
    this.c3b_1 = $outer;
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(EnsureTypeFunctionImpl).n2i = function (context, a) {
    return new ForcedElementTypeArray(a, this.c3b_1.d3b_1);
  };
  function EnsureTypeFunction(overrideType) {
    this.d3b_1 = overrideType;
  }
  protoOf(EnsureTypeFunction).i2i = function (instantiation) {
    return new EnsureTypeFunctionImpl(this, instantiation);
  };
  function AsBigintFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(AsBigintFunctionImpl).n2i = function (context, a) {
    var a0 = a.g2k();
    var tmp;
    if (a0 instanceof APLBigInt) {
      tmp = a0;
    } else {
      if (a0 instanceof APLLong) {
        tmp = new APLBigInt(a0.o2z(this.t2g_1));
      } else {
        throwAPLException(new IncompatibleTypeException('Argument is not an integer: ' + a0.i2o(FormatStyle_PLAIN_getInstance()), this.t2g_1));
      }
    }
    return tmp;
  };
  function AsBigintFunction() {
  }
  protoOf(AsBigintFunction).i2i = function (instantiation) {
    return new AsBigintFunctionImpl(instantiation);
  };
  function AsRationalFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(AsRationalFunctionImpl).n2i = function (context, a) {
    var a0 = a.g2k();
    var tmp;
    if (a0 instanceof APLBigInt) {
      tmp = new APLRational(make(Companion_getInstance(), a0.z2q_1, BigIntConstants_getInstance().ij_1));
    } else {
      if (a0 instanceof APLLong) {
        tmp = new APLRational(make(Companion_getInstance(), a0.o2z(this.t2g_1), BigIntConstants_getInstance().ij_1));
      } else {
        if (a0 instanceof APLRational) {
          tmp = a0;
        } else {
          throwAPLException(new IncompatibleTypeException('Argument is not a rational number: ' + a0.i2o(FormatStyle_PLAIN_getInstance()), this.t2g_1));
        }
      }
    }
    return tmp;
  };
  function AsRationalFunction() {
  }
  protoOf(AsRationalFunction).i2i = function (instantiation) {
    return new AsRationalFunctionImpl(instantiation);
  };
  function AtLeaveScopeOperator$AtLeaveScopeFunctionDescriptor$make$o$eval1Arg$lambda(this$0, $context, $a) {
    return function () {
      this$0.u31().w2g($context, $a, null);
      return Unit_instance;
    };
  }
  function AtLeaveScopeOperator$AtLeaveScopeFunctionDescriptor$make$1($instantiation, this$0) {
    APLFunction.call(this, $instantiation, listOf_0(this$0.q3b_1));
  }
  protoOf(AtLeaveScopeOperator$AtLeaveScopeFunctionDescriptor$make$1).u31 = function () {
    return this.s2g_1.p(0);
  };
  protoOf(AtLeaveScopeOperator$AtLeaveScopeFunctionDescriptor$make$1).w2g = function (context, a, axis) {
    var tmp = currentStorageStack().s3b();
    tmp.y3b(AtLeaveScopeOperator$AtLeaveScopeFunctionDescriptor$make$o$eval1Arg$lambda(this, context, a));
    return a;
  };
  function AtLeaveScopeFunctionDescriptor(fn) {
    this.q3b_1 = fn;
  }
  protoOf(AtLeaveScopeFunctionDescriptor).i2i = function (instantiation) {
    return new AtLeaveScopeOperator$AtLeaveScopeFunctionDescriptor$make$1(instantiation, this);
  };
  function AtLeaveScopeOperator() {
  }
  protoOf(AtLeaveScopeOperator).n2w = function (fn, pos) {
    return new AtLeaveScopeFunctionDescriptor(fn);
  };
  function _get_fromListFunction__u53e5n_0($this) {
    var tmp0 = $this.d3c_1;
    // Inline function 'kotlin.getValue' call
    fromListFunction$factory_0();
    return tmp0.x1();
  }
  function ToListFunction$ToListFunctionImpl$fromListFunction$delegate$lambda($pos) {
    return function () {
      return (new FromListFunction()).i2i($pos);
    };
  }
  function ToListFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
    var tmp = this;
    tmp.d3c_1 = lazy(ToListFunction$ToListFunctionImpl$fromListFunction$delegate$lambda(pos));
  }
  protoOf(ToListFunctionImpl).n2i = function (context, a) {
    var a0 = a.u2i();
    if (!(_Dimensions___get_size__impl__uu37ek(a0.o2i()) === 1)) {
      throwAPLException(new InvalidDimensionsException('Argument must be a scalar or 1-dimensional array', this.t2g_1));
    }
    var result = toList(a0.l2p());
    return new APLList(result);
  };
  protoOf(ToListFunctionImpl).d2j = function (baseFn, context, a) {
    var underValue = this.w2g(context, a, null);
    var updated = baseFn.w2g(context, underValue, null);
    return _get_fromListFunction__u53e5n_0(this).n2i(context, updated);
  };
  protoOf(ToListFunctionImpl).a2j = function (context, a) {
    return _get_fromListFunction__u53e5n_0(this).n2i(context, a);
  };
  protoOf(ToListFunctionImpl).z2h = function () {
    return 'list from array';
  };
  function ToListFunction() {
  }
  protoOf(ToListFunction).i2i = function (instantiation) {
    return new ToListFunctionImpl(instantiation);
  };
  function _get_toListFunction__tpl8je_0($this) {
    var tmp0 = $this.h2l_1;
    // Inline function 'kotlin.getValue' call
    toListFunction$factory_0();
    return tmp0.x1();
  }
  function FromListFunction$FromListFunctionImpl$toListFunction$delegate$lambda($pos) {
    return function () {
      return (new ToListFunction()).i2i($pos);
    };
  }
  function FromListFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
    var tmp = this;
    tmp.h2l_1 = lazy(FromListFunction$FromListFunctionImpl$toListFunction$delegate$lambda(pos));
  }
  protoOf(FromListFunctionImpl).n2i = function (context, a) {
    var a0 = a.x2g();
    if (!(a0 instanceof APLList)) {
      throwAPLException(new APLIllegalArgumentException('Argument is not a list', this.t2g_1));
    }
    var content = a0.e3c_1;
    var tmp = 0;
    var tmp_0 = content.n();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = content.p(tmp_2);
      tmp = tmp + 1 | 0;
    }
    var result = tmp_1;
    return new APLArrayImpl(dimensionsOfSize(new Int32Array([content.n()])), result);
  };
  protoOf(FromListFunctionImpl).d2j = function (baseFn, context, a) {
    var underValue = this.w2g(context, a, null);
    var updated = baseFn.w2g(context, underValue, null);
    return _get_toListFunction__tpl8je_0(this).n2i(context, updated);
  };
  protoOf(FromListFunctionImpl).a2j = function (context, a) {
    return _get_toListFunction__tpl8je_0(this).n2i(context, a);
  };
  protoOf(FromListFunctionImpl).z2h = function () {
    return 'list to array';
  };
  function FromListFunction() {
  }
  protoOf(FromListFunction).i2i = function (instantiation) {
    return new FromListFunctionImpl(instantiation);
  };
  function ToBooleanFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ToBooleanFunctionImpl).n2i = function (context, a) {
    return a.r2q(this.t2g_1) ? get_APLLONG_1() : get_APLLONG_0();
  };
  function ToBooleanFunction() {
  }
  protoOf(ToBooleanFunction).i2i = function (instantiation) {
    return new ToBooleanFunctionImpl(instantiation);
  };
  function HashCodeAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(HashCodeAPLFunctionImpl).n2i = function (context, a) {
    return makeAPLNumber_4(a.g2k().i2q());
  };
  function HashCodeAPLFunction() {
  }
  protoOf(HashCodeAPLFunction).i2i = function (instantiation) {
    return new HashCodeAPLFunctionImpl(instantiation);
  };
  function IsStringFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(IsStringFunctionImpl).n2i = function (context, a) {
    return makeAPLNumberAsBoolean(isStringValue(a));
  };
  function IsStringFunction() {
  }
  protoOf(IsStringFunction).i2i = function (instantiation) {
    return new IsStringFunctionImpl(instantiation);
  };
  function TypeofFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(TypeofFunctionImpl).n2i = function (context, a) {
    var v = a.g2k();
    return new APLSymbol(context.j38_1.y38_1.y3c(v.z2p()));
  };
  protoOf(TypeofFunctionImpl).z2h = function () {
    return 'typeof';
  };
  function TypeofFunction() {
  }
  protoOf(TypeofFunction).i2i = function (instantiation) {
    return new TypeofFunctionImpl(instantiation);
  };
  function IsLocallyBoundFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(IsLocallyBoundFunctionImpl).n2i = function (context, a) {
    var v = a.g2k();
    return makeAPLNumberAsBoolean(context.d3d(v.m2q(this.t2g_1).g2j_1));
  };
  protoOf(IsLocallyBoundFunctionImpl).z2h = function () {
    return 'isLocallyBound';
  };
  function IsLocallyBoundFunction() {
  }
  protoOf(IsLocallyBoundFunction).i2i = function (instantiation) {
    return new IsLocallyBoundFunctionImpl(instantiation);
  };
  function CompFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(CompFunctionImpl).n2i = function (context, a) {
    return a.x2g();
  };
  protoOf(CompFunctionImpl).z2h = function () {
    return 'comp';
  };
  function CompFunction() {
  }
  protoOf(CompFunction).i2i = function (instantiation) {
    return new CompFunctionImpl(instantiation);
  };
  function findSystemParameter($this, context, a) {
    var name = a.m2q($this.t2g_1).g2j_1;
    var tmp0_elvis_lhs = context.j38_1.k39_1.a2(name);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new SystemParameterNotFound(name, $this.t2g_1));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var param = tmp;
    return param;
  }
  function SystemParameterFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(SystemParameterFunctionImpl).n2i = function (context, a) {
    return findSystemParameter(this, context, a).m3d();
  };
  protoOf(SystemParameterFunctionImpl).t2i = function (context, a, b) {
    var param = findSystemParameter(this, context, a);
    var b0 = b.x2g();
    param.n3d(b0, this.t2g_1);
    return b0;
  };
  function SystemParameterFunction() {
  }
  protoOf(SystemParameterFunction).i2i = function (instantiation) {
    return new SystemParameterFunctionImpl(instantiation);
  };
  function InternalValueInfoFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(InternalValueInfoFunctionImpl).n2i = function (context, a) {
    var v = a.g2k();
    var tmp = Companion_getInstance_46();
    var tmp0_elvis_lhs = getKClassFromExpression(v).b9();
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var info = [tmp.k2o(tmp0_elvis_lhs == null ? 'unknown' : tmp0_elvis_lhs), Companion_getInstance_46().k2o(ArrayMemberType__toString_impl_4sk40k(v.f2n())), v.t2q() ? get_APLLONG_1() : get_APLLONG_0(), !(v.m2l().p2r() == null) ? get_APLLONG_1() : get_APLLONG_0()];
    return new APLArrayImpl(dimensionsOfSize(new Int32Array([info.length])), info);
  };
  function InternalValueInfoFunction() {
  }
  protoOf(InternalValueInfoFunction).i2i = function (instantiation) {
    return new InternalValueInfoFunctionImpl(instantiation);
  };
  function ListModulesFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ListModulesFunctionImpl).n2i = function (context, a) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = context.j38_1.v38_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = item.p2();
      destination.h(tmp$ret$0);
    }
    var moduleNameList = sorted(destination);
    var tmp = dimensionsOfSize(new Int32Array([moduleNameList.n()]));
    var tmp3_map_$receiver = Companion_getInstance_46();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(moduleNameList, 10));
    var _iterator__ex2g4s_0 = moduleNameList.k();
    while (_iterator__ex2g4s_0.l()) {
      var item_0 = _iterator__ex2g4s_0.m();
      var tmp$ret$3 = tmp3_map_$receiver.k2o(item_0);
      destination_0.h(tmp$ret$3);
    }
    return new APLArrayList(tmp, destination_0);
  };
  function ListModulesFunction() {
  }
  protoOf(ListModulesFunction).i2i = function (instantiation) {
    return new ListModulesFunctionImpl(instantiation);
  };
  function HasLabelsFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(HasLabelsFunctionImpl).t2i = function (context, a, b) {
    var aInt = a.p2i(this.t2g_1).q2i(this.t2g_1);
    var d = b.o2i();
    if (aInt < 0 || aInt >= _Dimensions___get_size__impl__uu37ek(d)) {
      throwAPLException(new IllegalAxisException('A must be a valid axis in B', this.t2g_1));
    }
    var tmp0_safe_receiver = b.m2l().p2r();
    var labels = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.q2r_1;
    var tmp;
    if (!(labels == null) && !(labels.p(aInt) == null)) {
      tmp = get_APLLONG_1();
    } else {
      tmp = get_APLLONG_0();
    }
    return tmp;
  };
  function HasLabelsFunction() {
  }
  protoOf(HasLabelsFunction).i2i = function (instantiation) {
    return new HasLabelsFunctionImpl(instantiation);
  };
  function ThrowableTag(key, data) {
    this.g3a_1 = key;
    this.h3a_1 = data;
  }
  function TagCatch(tag, description, pos, relatedException) {
    description = description === VOID ? null : description;
    pos = pos === VOID ? null : pos;
    relatedException = relatedException === VOID ? null : relatedException;
    APLEvalException.call(this, description == null ? tag.h3a_1.i2o(FormatStyle_PLAIN_getInstance()) : description, pos, relatedException);
    captureStack(this, TagCatch);
    this.e3e_1 = tag;
  }
  protoOf(TagCatch).c3a = function () {
    return this.e3e_1;
  };
  function DeferredAPLValue1Arg(fn, context, a) {
    APLArray.call(this);
    this.i3e_1 = fn;
    this.j3e_1 = context;
    this.k3e_1 = a;
  }
  protoOf(DeferredAPLValue1Arg).o2i = function () {
    return this.k3e_1.o2i();
  };
  protoOf(DeferredAPLValue1Arg).h2k = function (p) {
    return this.i3e_1.w2g(this.j3e_1, this.k3e_1, null).h2k(p);
  };
  protoOf(DeferredAPLValue1Arg).g2k = function () {
    return this.i3e_1.w2g(this.j3e_1, this.k3e_1, null).g2k();
  };
  function DeferredAPLValue2Arg(fn, context, a, b) {
    APLArray.call(this);
    this.l3e_1 = fn;
    this.m3e_1 = context;
    this.n3e_1 = a;
    this.o3e_1 = b;
  }
  protoOf(DeferredAPLValue2Arg).o2i = function () {
    return this.n3e_1.o2i();
  };
  protoOf(DeferredAPLValue2Arg).h2k = function (p) {
    return this.l3e_1.a2h(this.m3e_1, this.n3e_1, this.o3e_1, null).h2k(p);
  };
  protoOf(DeferredAPLValue2Arg).g2k = function () {
    return this.l3e_1.a2h(this.m3e_1, this.n3e_1, this.o3e_1, null).g2k();
  };
  function maybeWrapValue($this, value) {
    var tmp;
    if (value.f2n() === $this.r3e_1) {
      tmp = value;
    } else {
      tmp = new ForcedElementTypeArray(value, $this.r3e_1);
    }
    return tmp;
  }
  function ForcedElementTypeArray(inner, overrideType) {
    DelegatedValue.call(this, inner);
    this.q3e_1 = inner;
    this.r3e_1 = overrideType;
  }
  protoOf(ForcedElementTypeArray).f2n = function () {
    return this.r3e_1;
  };
  protoOf(ForcedElementTypeArray).i2n = function (p) {
    return this.h2k(p).w2q().f2j();
  };
  protoOf(ForcedElementTypeArray).y2p = function (p) {
    return this.h2k(p).w2q().r2z();
  };
  protoOf(ForcedElementTypeArray).b2q = function (withDiscard) {
    return maybeWrapValue(this, this.q3e_1.c2q());
  };
  protoOf(ForcedElementTypeArray).g2k = function () {
    return maybeWrapValue(this, this.q3e_1.g2k());
  };
  function SystemParameterNotFound(name, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'System parameter not found: ' + name.t3e(), pos);
    captureStack(this, SystemParameterNotFound);
    this.y3e_1 = name;
  }
  function fromListFunction$factory_0() {
    return getPropertyCallableRef('fromListFunction', 1, KProperty1, function (receiver) {
      return _get_fromListFunction__u53e5n_0(receiver);
    }, null);
  }
  function toListFunction$factory_0() {
    return getPropertyCallableRef('toListFunction', 1, KProperty1, function (receiver) {
      return _get_toListFunction__tpl8je_0(receiver);
    }, null);
  }
  function ExpandLastAxisFunctionImpl(pos) {
    ExpandFunctionImpl.call(this, pos);
  }
  protoOf(ExpandLastAxisFunctionImpl).d3f = function (dimensions) {
    return Dimensions__lastAxis_impl_jffa09(dimensions, this.t2g_1);
  };
  protoOf(ExpandLastAxisFunctionImpl).a2i = function () {
    return 'expand last axis';
  };
  function ExpandLastAxisFunction() {
  }
  protoOf(ExpandLastAxisFunction).i2i = function (instantiation) {
    return new ExpandLastAxisFunctionImpl(instantiation);
  };
  function ExpandFirstAxisFunctionImpl(pos) {
    ExpandFunctionImpl.call(this, pos);
  }
  protoOf(ExpandFirstAxisFunctionImpl).d3f = function (dimensions) {
    return 0;
  };
  protoOf(ExpandFirstAxisFunctionImpl).a2i = function () {
    return 'expand first axis';
  };
  function ExpandFirstAxisFunction() {
  }
  protoOf(ExpandFirstAxisFunction).i2i = function (instantiation) {
    return new ExpandFirstAxisFunctionImpl(instantiation);
  };
  function ExpandFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(ExpandFunctionImpl).a2h = function (context, a, b, axis) {
    var a0 = a.u2i();
    var aDimensions = a0.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === 1)) {
      throwAPLException(new InvalidDimensionsException('A must be a scalar or 1-dimensional array', this.t2g_1));
    }
    var b0 = b.u2i();
    var bDimensions = b0.o2i();
    var axisInt = axis == null ? this.d3f(bDimensions) : axis.p2i(this.t2g_1).q2i(this.t2g_1);
    ensureValidAxis(axisInt, bDimensions, this.t2g_1);
    var dimensionAlongAxis = Dimensions__get_impl_4npepw(bDimensions, axisInt);
    var index = 0;
    var indexes = ArrayList_init_$Create$();
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (a0.b2l()) {
      var vInt = a0.p2i(this.t2g_1).q2i(this.t2g_1);
      if (vInt > 0) {
        // Inline function 'kotlin.repeat' call
        var inductionVariable = 0;
        if (inductionVariable < vInt)
          do {
            var index_0 = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            indexes.h(index);
          }
           while (inductionVariable < vInt);
        if (dimensionAlongAxis > 1) {
          index = index + 1 | 0;
        }
      } else {
        var n = vInt === 0 ? 1 : -vInt | 0;
        // Inline function 'kotlin.repeat' call
        var inductionVariable_0 = 0;
        if (inductionVariable_0 < n)
          do {
            var index_1 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            indexes.h(-1);
          }
           while (inductionVariable_0 < n);
      }
    } else {
      var inductionVariable_1 = 0;
      var last = a0.n();
      if (inductionVariable_1 < last)
        do {
          var i = inductionVariable_1;
          inductionVariable_1 = inductionVariable_1 + 1 | 0;
          var vInt_0 = a0.h2k(i).p2i(this.t2g_1).q2i(this.t2g_1);
          if (vInt_0 > 0) {
            // Inline function 'kotlin.repeat' call
            var inductionVariable_2 = 0;
            if (inductionVariable_2 < vInt_0)
              do {
                var index_2 = inductionVariable_2;
                inductionVariable_2 = inductionVariable_2 + 1 | 0;
                indexes.h(index);
              }
               while (inductionVariable_2 < vInt_0);
            if (dimensionAlongAxis > 1) {
              index = index + 1 | 0;
            }
          } else {
            var n_0 = vInt_0 === 0 ? 1 : -vInt_0 | 0;
            // Inline function 'kotlin.repeat' call
            var inductionVariable_3 = 0;
            if (inductionVariable_3 < n_0)
              do {
                var index_3 = inductionVariable_3;
                inductionVariable_3 = inductionVariable_3 + 1 | 0;
                indexes.h(-1);
              }
               while (inductionVariable_3 < n_0);
          }
        }
         while (inductionVariable_1 < last);
    }
    if (!(dimensionAlongAxis === index) && !(dimensionAlongAxis === 1)) {
      throwAPLException(new InvalidDimensionsException('Size of selection dimension in B must match the number of selected values in A', this.t2g_1));
    }
    var resultDimensions = Dimensions__replace_impl_aoneje(bDimensions, axisInt, indexes.n());
    return new ExpandValue(resultDimensions, axisInt, b0, toIntArray(indexes));
  };
  function ExpandValue(dimensions, axis, value, indexes) {
    APLArray.call(this);
    this.m3f_1 = dimensions;
    this.n3f_1 = axis;
    this.o3f_1 = value;
    this.p3f_1 = indexes;
    this.q3f_1 = Dimensions__multipliers_impl_u1suko(this.m3f_1);
  }
  protoOf(ExpandValue).o2i = function () {
    return this.m3f_1;
  };
  protoOf(ExpandValue).h2k = function (p) {
    var position = DimensionMultipliers__positionFromIndex_impl_en9oiu(this.q3f_1, p);
    var index = this.p3f_1[position[this.n3f_1]];
    var tmp;
    if (index === -1) {
      tmp = get_APLLONG_0();
    } else {
      position[this.n3f_1] = index;
      tmp = this.o3f_1.h2k(Dimensions__indexFromPosition$default_impl_khimhk(this.o3f_1.o2i(), position));
    }
    return tmp;
  };
  function ForEachOp() {
  }
  protoOf(ForEachOp).n2w = function (fn, pos) {
    return new ForEachFunctionDescriptor(fn);
  };
  function ForEachResult2Arg(context, fn, a, b, axis, pos, savedStack) {
    APLArray.call(this);
    this.r3f_1 = context;
    this.s3f_1 = fn;
    this.t3f_1 = a;
    this.u3f_1 = b;
    this.v3f_1 = axis;
    this.w3f_1 = pos;
    this.x3f_1 = savedStack;
    var tmp = this;
    // Inline function 'kotlin.run' call
    var aType = this.t3f_1.f2n();
    var bType = this.u3f_1.f2n();
    var optflags = this.s3f_1.l2h();
    tmp.y3f_1 = _ArrayMemberType___get_isLong__impl__xzhfcp(aType) && _ArrayMemberType___get_isLong__impl__xzhfcp(bType) && _OptimisationFlags___get_is2ALongLong__impl__oapfj6(optflags) ? Companion_getInstance_45().x2j_1 : _ArrayMemberType___get_isDouble__impl__6s2782(aType) && _ArrayMemberType___get_isDouble__impl__6s2782(bType) && _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(optflags) ? Companion_getInstance_45().y2j_1 : Companion_getInstance_45().z2j_1;
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!Dimensions__compareEquals_impl_5g4nme(this.t3f_1.o2i(), this.u3f_1.o2i())) {
      throwAPLException(new InvalidDimensionsException('Arguments to foreach does not have the same dimensions. a=' + Dimensions__toString_impl_fhouq4(this.t3f_1.o2i()) + ', b=' + Dimensions__toString_impl_fhouq4(this.u3f_1.o2i()), this.w3f_1));
    }
  }
  protoOf(ForEachResult2Arg).f2n = function () {
    return this.y3f_1;
  };
  protoOf(ForEachResult2Arg).o2i = function () {
    return this.t3f_1.o2i();
  };
  protoOf(ForEachResult2Arg).v2i = function () {
    return this.t3f_1.v2i();
  };
  protoOf(ForEachResult2Arg).n = function () {
    return this.t3f_1.n();
  };
  protoOf(ForEachResult2Arg).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.x3f_1;
    var tmp;
    if (frame == null) {
      tmp = this.s3f_1.a2h(this.r3f_1, this.t3f_1.h2k(p), this.u3f_1.h2k(p), this.v3f_1);
    } else {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(frame);
        try {
          tmp$ret$3 = this.s3f_1.a2h(this.r3f_1, this.t3f_1.h2k(p), this.u3f_1.h2k(p), this.v3f_1);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  protoOf(ForEachResult2Arg).i2n = function (p) {
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.x3f_1;
    var tmp;
    if (frame == null) {
      // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
      var frame_0 = this.x3f_1;
      var tmp_0;
      if (frame_0 == null) {
        var tmp0 = this.t3f_1;
        var tmp2 = this.u3f_1;
        var tmp$ret$1;
        $l$block_0: {
          // Inline function 'com.dhsdevelopments.kap.eval2ArgLongFnOnIndexes' call
          var tmp_1;
          try {
            tmp_1 = tmp0.i2n(p);
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              var a1 = makeAPLNumber_2(e.ek_1);
              var b1 = tmp2.h2k(p);
              var res = this.s3f_1.a2h(this.r3f_1, a1, b1, null).g2k();
              var tmp_3;
              if (res instanceof APLLong) {
                tmp$ret$1 = res.g2n_1;
                break $l$block_0;
              } else {
                if (res instanceof APLBigInt) {
                  throw new LongExpressionOverflow(res.z2q_1);
                } else {
                  var message = 'Unexpected return value from fallback function';
                  throw IllegalStateException_init_$Create$(toString(message));
                }
              }
            } else {
              throw $p;
            }
          }
          var a0 = tmp_1;
          var tmp_4;
          try {
            tmp_4 = tmp2.i2n(p);
          } catch ($p) {
            var tmp_5;
            if ($p instanceof LongExpressionOverflow) {
              var e_0 = $p;
              var a1_0 = makeAPLNumber_0(a0);
              var b1_0 = tmp2.h2k(p);
              var res_0 = this.s3f_1.a2h(this.r3f_1, a1_0, b1_0, null).g2k();
              var tmp_6;
              if (res_0 instanceof APLLong) {
                tmp$ret$1 = res_0.g2n_1;
                break $l$block_0;
              } else {
                if (res_0 instanceof APLBigInt) {
                  throw new LongExpressionOverflow(res_0.z2q_1);
                } else {
                  var message_0 = 'Unexpected return value from fallback function';
                  throw IllegalStateException_init_$Create$(toString(message_0));
                }
              }
            } else {
              throw $p;
            }
          }
          var b0 = tmp_4;
          tmp$ret$1 = this.s3f_1.o2h(this.r3f_1, a0, b0, null);
        }
        tmp_0 = tmp$ret$1;
      } else {
        var tmp$ret$11;
        $l$block_3: {
          // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
          var stack = currentStorageStack().r3b_1;
          stack.h(frame_0);
          try {
            var tmp0_0 = this.t3f_1;
            var tmp2_0 = this.u3f_1;
            var tmp$ret$6;
            $l$block_2: {
              // Inline function 'com.dhsdevelopments.kap.eval2ArgLongFnOnIndexes' call
              var tmp_7;
              try {
                tmp_7 = tmp0_0.i2n(p);
              } catch ($p) {
                var tmp_8;
                if ($p instanceof LongExpressionOverflow) {
                  var e_1 = $p;
                  var a1_1 = makeAPLNumber_2(e_1.ek_1);
                  var b1_1 = tmp2_0.h2k(p);
                  var res_1 = this.s3f_1.a2h(this.r3f_1, a1_1, b1_1, null).g2k();
                  var tmp_9;
                  if (res_1 instanceof APLLong) {
                    tmp$ret$6 = res_1.g2n_1;
                    break $l$block_2;
                  } else {
                    if (res_1 instanceof APLBigInt) {
                      throw new LongExpressionOverflow(res_1.z2q_1);
                    } else {
                      var message_1 = 'Unexpected return value from fallback function';
                      throw IllegalStateException_init_$Create$(toString(message_1));
                    }
                  }
                } else {
                  throw $p;
                }
              }
              var a0_0 = tmp_7;
              var tmp_10;
              try {
                tmp_10 = tmp2_0.i2n(p);
              } catch ($p) {
                var tmp_11;
                if ($p instanceof LongExpressionOverflow) {
                  var e_2 = $p;
                  var a1_2 = makeAPLNumber_0(a0_0);
                  var b1_2 = tmp2_0.h2k(p);
                  var res_2 = this.s3f_1.a2h(this.r3f_1, a1_2, b1_2, null).g2k();
                  var tmp_12;
                  if (res_2 instanceof APLLong) {
                    tmp$ret$6 = res_2.g2n_1;
                    break $l$block_2;
                  } else {
                    if (res_2 instanceof APLBigInt) {
                      throw new LongExpressionOverflow(res_2.z2q_1);
                    } else {
                      var message_2 = 'Unexpected return value from fallback function';
                      throw IllegalStateException_init_$Create$(toString(message_2));
                    }
                  }
                } else {
                  throw $p;
                }
              }
              var b0_0 = tmp_10;
              tmp$ret$6 = this.s3f_1.o2h(this.r3f_1, a0_0, b0_0, null);
            }
            tmp$ret$11 = tmp$ret$6;
            break $l$block_3;
          }finally {
            var removed = removeLast(stack);
            // Inline function 'kotlin.require' call
            if (!(removed === frame_0)) {
              var message_3 = 'Removed frame does not match inserted frame';
              throw IllegalArgumentException_init_$Create$(toString(message_3));
            }
          }
        }
        tmp_0 = tmp$ret$11;
      }
      tmp = tmp_0;
    } else {
      var tmp$ret$33;
      $l$block_9: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack_0 = currentStorageStack().r3b_1;
        stack_0.h(frame);
        try {
          // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
          var frame_1 = this.x3f_1;
          var tmp_13;
          if (frame_1 == null) {
            var tmp0_1 = this.t3f_1;
            var tmp2_1 = this.u3f_1;
            var tmp$ret$17;
            $l$block_5: {
              // Inline function 'com.dhsdevelopments.kap.eval2ArgLongFnOnIndexes' call
              var tmp_14;
              try {
                tmp_14 = tmp0_1.i2n(p);
              } catch ($p) {
                var tmp_15;
                if ($p instanceof LongExpressionOverflow) {
                  var e_3 = $p;
                  var a1_3 = makeAPLNumber_2(e_3.ek_1);
                  var b1_3 = tmp2_1.h2k(p);
                  var res_3 = this.s3f_1.a2h(this.r3f_1, a1_3, b1_3, null).g2k();
                  var tmp_16;
                  if (res_3 instanceof APLLong) {
                    tmp$ret$17 = res_3.g2n_1;
                    break $l$block_5;
                  } else {
                    if (res_3 instanceof APLBigInt) {
                      throw new LongExpressionOverflow(res_3.z2q_1);
                    } else {
                      var message_4 = 'Unexpected return value from fallback function';
                      throw IllegalStateException_init_$Create$(toString(message_4));
                    }
                  }
                } else {
                  throw $p;
                }
              }
              var a0_1 = tmp_14;
              var tmp_17;
              try {
                tmp_17 = tmp2_1.i2n(p);
              } catch ($p) {
                var tmp_18;
                if ($p instanceof LongExpressionOverflow) {
                  var e_4 = $p;
                  var a1_4 = makeAPLNumber_0(a0_1);
                  var b1_4 = tmp2_1.h2k(p);
                  var res_4 = this.s3f_1.a2h(this.r3f_1, a1_4, b1_4, null).g2k();
                  var tmp_19;
                  if (res_4 instanceof APLLong) {
                    tmp$ret$17 = res_4.g2n_1;
                    break $l$block_5;
                  } else {
                    if (res_4 instanceof APLBigInt) {
                      throw new LongExpressionOverflow(res_4.z2q_1);
                    } else {
                      var message_5 = 'Unexpected return value from fallback function';
                      throw IllegalStateException_init_$Create$(toString(message_5));
                    }
                  }
                } else {
                  throw $p;
                }
              }
              var b0_1 = tmp_17;
              tmp$ret$17 = this.s3f_1.o2h(this.r3f_1, a0_1, b0_1, null);
            }
            tmp_13 = tmp$ret$17;
          } else {
            var tmp$ret$27;
            $l$block_8: {
              // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
              var stack_1 = currentStorageStack().r3b_1;
              stack_1.h(frame_1);
              try {
                var tmp0_2 = this.t3f_1;
                var tmp2_2 = this.u3f_1;
                var tmp$ret$22;
                $l$block_7: {
                  // Inline function 'com.dhsdevelopments.kap.eval2ArgLongFnOnIndexes' call
                  var tmp_20;
                  try {
                    tmp_20 = tmp0_2.i2n(p);
                  } catch ($p) {
                    var tmp_21;
                    if ($p instanceof LongExpressionOverflow) {
                      var e_5 = $p;
                      var a1_5 = makeAPLNumber_2(e_5.ek_1);
                      var b1_5 = tmp2_2.h2k(p);
                      var res_5 = this.s3f_1.a2h(this.r3f_1, a1_5, b1_5, null).g2k();
                      var tmp_22;
                      if (res_5 instanceof APLLong) {
                        tmp$ret$22 = res_5.g2n_1;
                        break $l$block_7;
                      } else {
                        if (res_5 instanceof APLBigInt) {
                          throw new LongExpressionOverflow(res_5.z2q_1);
                        } else {
                          var message_6 = 'Unexpected return value from fallback function';
                          throw IllegalStateException_init_$Create$(toString(message_6));
                        }
                      }
                    } else {
                      throw $p;
                    }
                  }
                  var a0_2 = tmp_20;
                  var tmp_23;
                  try {
                    tmp_23 = tmp2_2.i2n(p);
                  } catch ($p) {
                    var tmp_24;
                    if ($p instanceof LongExpressionOverflow) {
                      var e_6 = $p;
                      var a1_6 = makeAPLNumber_0(a0_2);
                      var b1_6 = tmp2_2.h2k(p);
                      var res_6 = this.s3f_1.a2h(this.r3f_1, a1_6, b1_6, null).g2k();
                      var tmp_25;
                      if (res_6 instanceof APLLong) {
                        tmp$ret$22 = res_6.g2n_1;
                        break $l$block_7;
                      } else {
                        if (res_6 instanceof APLBigInt) {
                          throw new LongExpressionOverflow(res_6.z2q_1);
                        } else {
                          var message_7 = 'Unexpected return value from fallback function';
                          throw IllegalStateException_init_$Create$(toString(message_7));
                        }
                      }
                    } else {
                      throw $p;
                    }
                  }
                  var b0_2 = tmp_23;
                  tmp$ret$22 = this.s3f_1.o2h(this.r3f_1, a0_2, b0_2, null);
                }
                tmp$ret$27 = tmp$ret$22;
                break $l$block_8;
              }finally {
                var removed_0 = removeLast(stack_1);
                // Inline function 'kotlin.require' call
                if (!(removed_0 === frame_1)) {
                  var message_8 = 'Removed frame does not match inserted frame';
                  throw IllegalArgumentException_init_$Create$(toString(message_8));
                }
              }
            }
            tmp_13 = tmp$ret$27;
          }
          tmp$ret$33 = tmp_13;
          break $l$block_9;
        }finally {
          var removed_1 = removeLast(stack_0);
          // Inline function 'kotlin.require' call
          if (!(removed_1 === frame)) {
            var message_9 = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message_9));
          }
        }
      }
      tmp = tmp$ret$33;
    }
    return tmp;
  };
  protoOf(ForEachResult2Arg).y2p = function (p) {
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.x3f_1;
    var tmp;
    if (frame == null) {
      tmp = this.s3f_1.p2h(this.r3f_1, this.t3f_1.y2p(p), this.u3f_1.y2p(p), this.v3f_1);
    } else {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(frame);
        try {
          tmp$ret$3 = this.s3f_1.p2h(this.r3f_1, this.t3f_1.y2p(p), this.u3f_1.y2p(p), this.v3f_1);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  protoOf(ForEachResult2Arg).b2q = function (withDiscard) {
    var tmp;
    if (withDiscard) {
      // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
      if (this.b2l()) {
        this.r2k(true);
      } else {
        var inductionVariable = 0;
        var last = this.n();
        if (inductionVariable < last)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            this.h2k(i).r2k(true);
          }
           while (inductionVariable < last);
      }
      tmp = UnusedResultAPLValue_getInstance();
    } else {
      tmp = protoOf(APLArray).b2q.call(this, false);
    }
    return tmp;
  };
  function ForEachFunctionImpl(pos, fn) {
    APLFunction.call(this, pos, listOf_0(fn));
    this.d3g_1 = new SaveStackSupport(this);
    this.e3g_1 = this.s2g_1.p(0);
  }
  protoOf(ForEachFunctionImpl).w2g = function (context, a, axis) {
    var tmp;
    if (a.n2l()) {
      return Companion_instance_51.s2i(this.e3g_1.w2g(context, a.o2l(), null));
    } else {
      tmp = new ForEachResult1Arg(context, this.e3g_1, a, axis, this.t2g_1, this.d3g_1.g3g());
    }
    return tmp;
  };
  protoOf(ForEachFunctionImpl).a2h = function (context, a, b, axis) {
    return Companion_instance_6.h3g(context, this.e3g_1, a, b, axis, this.t2g_1, this.d3g_1.g3g());
  };
  protoOf(ForEachFunctionImpl).i3g = function (context, numTasks, a, axis) {
    var res = this.w2g(context, a, axis);
    return Companion_instance_15.j3g(res, numTasks, this.t2g_1);
  };
  protoOf(ForEachFunctionImpl).k3g = function (context, numTasks, a, b, axis) {
    var res = this.a2h(context, a, b, axis);
    return Companion_instance_15.j3g(res, numTasks, this.t2g_1);
  };
  protoOf(ForEachFunctionImpl).l3g = function () {
    return this;
  };
  protoOf(ForEachFunctionImpl).u2h = function (fns) {
    return new ForEachFunctionImpl(this.c2h(), fns.p(0));
  };
  function Companion_4() {
  }
  protoOf(Companion_4).h3g = function (context, fn, a, b, axis, pos, savedStack) {
    if (a.n2l() && b.n2l()) {
      return Companion_instance_51.s2i(fn.a2h(context, a.o2l(), b.o2l(), axis).g2k());
    }
    var tmp;
    if (a.n2l()) {
      tmp = new ConstantArray(b.o2i(), a.o2l());
    } else {
      tmp = a;
    }
    var a1 = tmp;
    var tmp_0;
    if (b.n2l()) {
      tmp_0 = new ConstantArray(a.o2i(), b.o2l());
    } else {
      tmp_0 = b;
    }
    var b1 = tmp_0;
    return new ForEachResult2Arg(context, fn, a1, b1, axis, pos, savedStack);
  };
  var Companion_instance_6;
  function Companion_getInstance_6() {
    return Companion_instance_6;
  }
  function ForEachFunctionDescriptor(fnInner) {
    this.m3g_1 = fnInner;
  }
  protoOf(ForEachFunctionDescriptor).i2i = function (instantiation) {
    return new ForEachFunctionImpl(instantiation, this.m3g_1);
  };
  function ForEachResult1Arg$ForEachResult1ArgMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return this$0.n3g_1.p2r();
    };
  }
  function ForEachResult1ArgMetadata(sourceMetadata) {
    this.n3g_1 = sourceMetadata;
    var tmp = this;
    tmp.o3g_1 = lazy(ForEachResult1Arg$ForEachResult1ArgMetadata$labels$delegate$lambda(this));
  }
  protoOf(ForEachResult1ArgMetadata).p2r = function () {
    var tmp0 = this.o3g_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_11();
    return tmp0.x1();
  };
  function ForEachResult1Arg$metadata$delegate$lambda(this$0) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var sourceMetadata = this$0.r3g_1.m2l();
      var tmp;
      if (sourceMetadata.y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new ForEachResult1ArgMetadata(sourceMetadata);
      }
      return tmp;
    };
  }
  function ForEachResult1Arg(context, fn, a, axis, pos, savedStack) {
    APLArray.call(this);
    this.p3g_1 = context;
    this.q3g_1 = fn;
    this.r3g_1 = a;
    this.s3g_1 = axis;
    this.t3g_1 = pos;
    this.u3g_1 = savedStack;
    this.v3g_1 = this.r3g_1.o2i();
    var tmp = this;
    tmp.w3g_1 = lazy(ForEachResult1Arg$metadata$delegate$lambda(this));
    var tmp_0 = this;
    // Inline function 'kotlin.run' call
    var aType = this.r3g_1.f2n();
    var optflags = this.q3g_1.l2h();
    tmp_0.x3g_1 = _ArrayMemberType___get_isLong__impl__xzhfcp(aType) && _OptimisationFlags___get_is1ALong__impl__5sl2il(optflags) ? Companion_getInstance_45().x2j_1 : _ArrayMemberType___get_isDouble__impl__6s2782(aType) && _OptimisationFlags___get_is1ADouble__impl__kg3og8(optflags) ? Companion_getInstance_45().y2j_1 : Companion_getInstance_45().z2j_1;
  }
  protoOf(ForEachResult1Arg).o2i = function () {
    return this.v3g_1;
  };
  protoOf(ForEachResult1Arg).m2l = function () {
    var tmp0 = this.w3g_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_9();
    return tmp0.x1();
  };
  protoOf(ForEachResult1Arg).f2n = function () {
    return this.x3g_1;
  };
  protoOf(ForEachResult1Arg).v2i = function () {
    return this.r3g_1.v2i();
  };
  protoOf(ForEachResult1Arg).n = function () {
    return this.r3g_1.n();
  };
  protoOf(ForEachResult1Arg).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.u3g_1;
    var tmp;
    if (frame == null) {
      tmp = this.q3g_1.w2g(this.p3g_1, this.r3g_1.h2k(p), this.s3g_1);
    } else {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(frame);
        try {
          tmp$ret$3 = this.q3g_1.w2g(this.p3g_1, this.r3g_1.h2k(p), this.s3g_1);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  protoOf(ForEachResult1Arg).i2n = function (p) {
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.u3g_1;
    var tmp;
    if (frame == null) {
      var tmp_0;
      try {
        tmp_0 = this.r3g_1.i2n(p);
      } catch ($p) {
        var tmp_1;
        if ($p instanceof LongExpressionOverflow) {
          var e = $p;
          var res = this.q3g_1.w2g(this.p3g_1, makeAPLNumber_2(e.ek_1), this.s3g_1).p2i(this.t3g_1).o2z(this.t3g_1);
          throw new LongExpressionOverflow(res);
        } else {
          throw $p;
        }
      }
      var a0 = tmp_0;
      return this.q3g_1.m2h(this.p3g_1, a0, this.s3g_1);
    } else {
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(frame);
        try {
          var tmp_2;
          try {
            tmp_2 = this.r3g_1.i2n(p);
          } catch ($p) {
            var tmp_3;
            if ($p instanceof LongExpressionOverflow) {
              var e_0 = $p;
              var res_0 = this.q3g_1.w2g(this.p3g_1, makeAPLNumber_2(e_0.ek_1), this.s3g_1).p2i(this.t3g_1).o2z(this.t3g_1);
              throw new LongExpressionOverflow(res_0);
            } else {
              throw $p;
            }
          }
          var a0_0 = tmp_2;
          return this.q3g_1.m2h(this.p3g_1, a0_0, this.s3g_1);
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
    }
  };
  protoOf(ForEachResult1Arg).y2p = function (p) {
    return this.q3g_1.n2h(this.p3g_1, this.r3g_1.y2p(p), this.s3g_1);
  };
  protoOf(ForEachResult1Arg).b2q = function (withDiscard) {
    var tmp;
    if (withDiscard) {
      // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
      if (this.b2l()) {
        this.r2k(true);
      } else {
        var inductionVariable = 0;
        var last = this.n();
        if (inductionVariable < last)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            this.h2k(i).r2k(true);
          }
           while (inductionVariable < last);
      }
      tmp = UnusedResultAPLValue_getInstance();
    } else {
      tmp = protoOf(APLArray).b2q.call(this, false);
    }
    return tmp;
  };
  function metadata$factory_9() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_11() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function ConcatenatedArraysValue(dimensions, content) {
    APLArray.call(this);
    this.y3g_1 = dimensions;
    this.z3g_1 = content;
    this.a3h_1 = Dimensions__remove_impl_ve6v38(this.y3g_1, 0);
    this.b3h_1 = Dimensions__contentSize_impl_4eihds(this.a3h_1);
  }
  protoOf(ConcatenatedArraysValue).o2i = function () {
    return this.y3g_1;
  };
  protoOf(ConcatenatedArraysValue).h2k = function (p) {
    var contentIndex = p / this.b3h_1 | 0;
    var innerIndex = p % this.b3h_1 | 0;
    var v = this.z3g_1.p(contentIndex);
    return v.h2k(innerIndex);
  };
  function GroupFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(GroupFunctionImpl).t2i = function (context, a, b) {
    var a_0 = a.u2i();
    var b_0 = b.u2i();
    var aDimensions = a_0.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(aDimensions) === 1)) {
      throwAPLException(new InvalidDimensionsException('Left argument should be rank 1', this.t2g_1));
    }
    var bDimensions = b_0.o2i();
    if (!(Dimensions__get_impl_4npepw(aDimensions, 0) === Dimensions__get_impl_4npepw(bDimensions, 0))) {
      throwAPLException(new InvalidDimensionsException('Size of left argument must match the size of the major axis in the left argument', this.t2g_1));
    }
    var tmp;
    if (_Dimensions___get_size__impl__uu37ek(bDimensions) > 1) {
      tmp = new AxisMultiDimensionEnclosedValue(b_0, _Dimensions___get_size__impl__uu37ek(bDimensions) - 1 | 0);
    } else {
      tmp = b_0;
    }
    var b0 = tmp;
    var res = ArrayList_init_$Create$();
    // Inline function 'kotlin.repeat' call
    var times = Dimensions__get_impl_4npepw(aDimensions, 0);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var index_0 = a_0.r2i(index, this.t2g_1);
        if (index_0 >= 0) {
          if (index_0 >= res.n()) {
            // Inline function 'kotlin.repeat' call
            var times_0 = (index_0 - res.n() | 0) + 1 | 0;
            var inductionVariable_0 = 0;
            if (inductionVariable_0 < times_0)
              do {
                var index_1 = inductionVariable_0;
                inductionVariable_0 = inductionVariable_0 + 1 | 0;
                res.h(null);
              }
               while (inductionVariable_0 < times_0);
          }
          var tmp0_elvis_lhs = res.p(index_0);
          var tmp_0;
          if (tmp0_elvis_lhs == null) {
            // Inline function 'kotlin.also' call
            var this_0 = ArrayList_init_$Create$();
            res.g2(index_0, this_0);
            tmp_0 = this_0;
          } else {
            tmp_0 = tmp0_elvis_lhs;
          }
          var l = tmp_0;
          l.h(b0.h2k(index));
        }
      }
       while (inductionVariable < times);
    var tmp_1;
    if (_Dimensions___get_size__impl__uu37ek(bDimensions) === 1) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(res, 10));
      var _iterator__ex2g4s = res.k();
      while (_iterator__ex2g4s.l()) {
        var item = _iterator__ex2g4s.m();
        var tmp$ret$6 = item == null ? APLNullValue_getInstance() : new APLArrayList(dimensionsOfSize(new Int32Array([item.n()])), item);
        destination.h(tmp$ret$6);
      }
      tmp_1 = destination;
    } else {
      var emptyElement = null;
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(res, 10));
      var _iterator__ex2g4s_0 = res.k();
      while (_iterator__ex2g4s_0.l()) {
        var item_0 = _iterator__ex2g4s_0.m();
        var tmp_2;
        if (item_0 == null) {
          var tmp0_elvis_lhs_0 = emptyElement;
          var tmp_3;
          if (tmp0_elvis_lhs_0 == null) {
            var tmp_4 = Dimensions__insert_impl_s8tvqx(Dimensions__remove_impl_ve6v38(bDimensions, 0), 0, 0);
            // Inline function 'kotlin.emptyArray' call
            var tmp$ret$9 = [];
            // Inline function 'kotlin.also' call
            var this_1 = new APLArrayImpl(tmp_4, tmp$ret$9);
            emptyElement = this_1;
            tmp_3 = this_1;
          } else {
            tmp_3 = tmp0_elvis_lhs_0;
          }
          tmp_2 = tmp_3;
        } else {
          tmp_2 = new ConcatenatedArraysValue(Dimensions__insert_impl_s8tvqx(Dimensions__remove_impl_ve6v38(bDimensions, 0), 0, item_0.n()), item_0);
        }
        var tmp$ret$12 = tmp_2;
        destination_0.h(tmp$ret$12);
      }
      tmp_1 = destination_0;
    }
    var content = tmp_1;
    return new APLArrayList(dimensionsOfSize(new Int32Array([content.n()])), content);
  };
  function GroupFunction() {
  }
  protoOf(GroupFunction).i2i = function (instantiation) {
    return new GroupFunctionImpl(instantiation);
  };
  function HttpRequestFunction$HttpRequestFunctionImpl$callAsync1Arg$lambda($callback, $context) {
    return function (result) {
      return $callback($context, makeAPLListFromHttpResult(result));
    };
  }
  function HttpRequestFunctionImpl($outer, pos) {
    this.k3h_1 = $outer;
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(HttpRequestFunctionImpl).n2i = function (context, a) {
    return parseArgsAndCallHttp(context, a, this.k3h_1.l3h_1, this.k3h_1.m3h_1, this.t2g_1);
  };
  protoOf(HttpRequestFunctionImpl).z2g = function (context, a, axis, callback) {
    var httpRequestData = parseHttpArgs(a, this.k3h_1.l3h_1, this.k3h_1.m3h_1, this.t2g_1);
    httpRequestCallback(context.j38_1, httpRequestData, this.t2g_1, HttpRequestFunction$HttpRequestFunctionImpl$callAsync1Arg$lambda(callback, context));
  };
  function HttpRequestFunction(method, acceptsData) {
    this.l3h_1 = method;
    this.m3h_1 = acceptsData;
  }
  protoOf(HttpRequestFunction).i2i = function (instantiation) {
    return new HttpRequestFunctionImpl(this, instantiation);
  };
  function parseArgsAndCallHttp(context, a, method, acceptsData, pos) {
    var httpRequestData = parseHttpArgs(a, method, acceptsData, pos);
    var result = httpRequest(context.j38_1, httpRequestData, pos);
    return makeAPLListFromHttpResult(result);
  }
  function parseHttpArgs(a, method, acceptsData, pos) {
    var elements = listify(a);
    var size = elements.n3h();
    var _destruct__k2r9zo = acceptsData ? new Pair(2, 3) : new Pair(1, 2);
    var min = _destruct__k2r9zo.de();
    var max = _destruct__k2r9zo.ee();
    if (size < min || size > max) {
      throwAPLException(new APLIllegalArgumentException('Function requires ' + min + '-' + max + ' arguments, got ' + size, pos));
    }
    var i = 0;
    var _unary__edvuaz = i;
    i = _unary__edvuaz + 1 | 0;
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var this_0 = elements.o3h(_unary__edvuaz, pos);
    var result = toStringValueOrNull(this_0);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var url = result;
    var tmp;
    if (i < size) {
      var _unary__edvuaz_0 = i;
      i = _unary__edvuaz_0 + 1 | 0;
      tmp = ensureHeaderArray(elements.o3h(_unary__edvuaz_0, pos), pos);
    } else {
      tmp = emptyMap();
    }
    var headers = tmp;
    var tmp_0;
    if (i < size && acceptsData) {
      var _unary__edvuaz_1 = i;
      i = _unary__edvuaz_1 + 1 | 0;
      tmp_0 = asByteArray(elements.o3h(_unary__edvuaz_1, pos), pos);
    } else {
      tmp_0 = null;
    }
    var data = tmp_0;
    return new HttpRequestData(url, method, data, headers);
  }
  function makeAPLListFromHttpResult(result) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = result.p3h();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(this_0.n());
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = this_0.c2().k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      // Inline function 'kotlin.collections.component1' call
      var key = item.w1();
      // Inline function 'kotlin.collections.component2' call
      var values = item.x1();
      var tmp = Companion_getInstance_46().k2o(key).s2o();
      var tmp_0 = dimensionsOfSize(new Int32Array([values.n()]));
      var tmp3_map_$receiver = Companion_getInstance_46();
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(values, 10));
      var _iterator__ex2g4s_0 = values.k();
      while (_iterator__ex2g4s_0.l()) {
        var item_0 = _iterator__ex2g4s_0.m();
        var tmp$ret$3 = tmp3_map_$receiver.k2o(item_0);
        destination_0.h(tmp$ret$3);
      }
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp$ret$6 = copyToArray(destination_0);
      var tmp$ret$7 = to(tmp, new APLArrayImpl(tmp_0, tmp$ret$6));
      destination.h(tmp$ret$7);
    }
    var headers = destination;
    return new APLList(listOf([makeAPLNumber_0(result.q3h()), Companion_getInstance_46().k2o(result.r3h()), new APLMap(Companion_instance_31.s3h(headers))]));
  }
  function ensureHeaderArray(headerArg, pos) {
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!(headerArg.v2i() === 2 && Dimensions__get_impl_4npepw(headerArg.o2i(), 1) === 2 || (headerArg.v2i() === 1 && (Dimensions__get_impl_4npepw(headerArg.o2i(), 0) % 2 | 0) === 0))) {
      throwAPLException(new APLIllegalArgumentException('Headers list should be a rank-2 array with 2 columns', pos));
    }
    var result = HashMap_init_$Create$();
    var inductionVariable = 0;
    var last = headerArg.n() / 2 | 0;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'com.dhsdevelopments.kap.toStringValue' call
        var this_0 = headerArg.h2k(imul(i, 2));
        var result_0 = toStringValueOrNull(this_0);
        if (result_0 == null) {
          var m = null;
          var messagePrefix = m == null ? '' : '' + m + ': ';
          throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
        }
        var key = result_0;
        // Inline function 'com.dhsdevelopments.kap.toStringValue' call
        var this_1 = headerArg.h2k(imul(i, 2) + 1 | 0);
        var result_1 = toStringValueOrNull(this_1);
        if (result_1 == null) {
          var m_0 = null;
          var messagePrefix_0 = m_0 == null ? '' : '' + m_0 + ': ';
          throwAPLException(new IncompatibleTypeException(messagePrefix_0 + 'Argument is not a string', pos));
        }
        var value = result_1;
        // Inline function 'kotlin.collections.set' call
        result.j2(key, value);
      }
       while (inductionVariable < last);
    return result;
  }
  function ReadFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReadFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var file = result;
    var result_0 = ArrayList_init_$Create$();
    // Inline function 'com.dhsdevelopments.kap.builtins.withIOExceptionConversions' call
    var pos_0 = this.t2g_1;
    try {
      var tmp0 = openInputCharFile(context.j38_1.x3h(file));
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.use' call
        try {
          // Inline function 'kotlin.sequences.forEach' call
          var _iterator__ex2g4s = tmp0.y3h().k();
          while (_iterator__ex2g4s.l()) {
            var element = _iterator__ex2g4s.m();
            result_0.h(Companion_getInstance_46().k2o(element));
          }
          break $l$block;
        }finally {
          tmp0.h1l();
        }
      }
      return new APLArrayList(dimensionsOfSize(new Int32Array([result_0.n()])), result_0);
    } catch ($p) {
      if ($p instanceof MPFileNotFoundException) {
        var _unused_var__etf5q3 = $p;
        throwTagCatch(context.j38_1, 'fileNotFound', Companion_getInstance_46().k2o(file), 'File not found: ' + file, pos_0);
      } else {
        throw $p;
      }
    }
  };
  function ReadFunction() {
  }
  protoOf(ReadFunction).i2i = function (instantiation) {
    return new ReadFunctionImpl(instantiation);
  };
  function WriteFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(WriteFunctionImpl).t2i = function (context, a, b) {
    var b0 = b.x2g();
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var file = result;
    var tmp2 = openOutputCharFile(file);
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.use' call
      try {
        tmp2.d3i(b0.i2o(FormatStyle_PLAIN_getInstance()));
        break $l$block;
      }finally {
        tmp2.h1l();
      }
    }
    return b0;
  };
  function WriteFunction() {
  }
  protoOf(WriteFunction).i2i = function (instantiation) {
    return new WriteFunctionImpl(instantiation);
  };
  function PrintAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(PrintAPLFunctionImpl).n2i = function (context, a) {
    var a0 = a.x2g();
    printValue(context, a0, FormatStyle_PLAIN_getInstance());
    return a0;
  };
  protoOf(PrintAPLFunctionImpl).f2h = function (context, a, axis) {
    printValue(context, a, FormatStyle_PLAIN_getInstance());
  };
  protoOf(PrintAPLFunctionImpl).t2i = function (context, a, b) {
    var b0 = b.x2g();
    var engine = context.j38_1;
    var plainSym = engine.s39('plain', engine.i3i());
    var prettySym = engine.s39('pretty', engine.i3i());
    var readSym = engine.s39('read', engine.i3i());
    var styleName = a.n2q().g2j_1;
    var tmp;
    if (equals(styleName, plainSym)) {
      tmp = FormatStyle_PLAIN_getInstance();
    } else if (equals(styleName, prettySym)) {
      tmp = FormatStyle_PRETTY_getInstance();
    } else if (equals(styleName, readSym)) {
      tmp = FormatStyle_READABLE_getInstance();
    } else {
      throwAPLException(new APLIllegalArgumentException('Invalid print style: ' + styleName.h2j_1, this.t2g_1));
    }
    var style = tmp;
    printValue(context, b0, style);
    return b0;
  };
  function PrintAPLFunction() {
  }
  protoOf(PrintAPLFunction).i2i = function (instantiation) {
    return new PrintAPLFunctionImpl(instantiation);
  };
  function PrintLnAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(PrintLnAPLFunctionImpl).n2i = function (context, a) {
    var a0 = a.x2g();
    printValue(context, a0, FormatStyle_PLAIN_getInstance());
    context.j38_1.d39_1.d3i('\n');
    return a0;
  };
  protoOf(PrintLnAPLFunctionImpl).f2h = function (context, a, axis) {
    printValue(context, a, FormatStyle_PLAIN_getInstance());
    context.j38_1.d39_1.d3i('\n');
  };
  function PrintLnAPLFunction() {
  }
  protoOf(PrintLnAPLFunction).i2i = function (instantiation) {
    return new PrintLnAPLFunctionImpl(instantiation);
  };
  function ReadLineFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReadLineFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var prompt = result;
    var tmp0_elvis_lhs = makeKeyboardInput(context.j38_1);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new APLEvalException('Backend does not support input', this.t2g_1));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var keyboardInput = tmp;
    var result_0 = keyboardInput.r3i(prompt);
    var tmp_0;
    if (result_0 == null) {
      tmp_0 = APLNullValue_getInstance();
    } else {
      tmp_0 = new APLString(toIntArray(asCodepointList(result_0)));
    }
    return tmp_0;
  };
  function ReadLineFunction() {
  }
  protoOf(ReadLineFunction).i2i = function (instantiation) {
    return new ReadLineFunctionImpl(instantiation);
  };
  function WriteCsvFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(WriteCsvFunctionImpl).t2i = function (context, a, b) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var fileName = result;
    var tmp2 = openOutputCharFile(fileName);
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.use' call
      try {
        writeAPLArrayAsCsv(tmp2, b, this.t2g_1);
        break $l$block;
      }finally {
        tmp2.h1l();
      }
    }
    return b;
  };
  function WriteCsvFunction() {
  }
  protoOf(WriteCsvFunction).i2i = function (instantiation) {
    return new WriteCsvFunctionImpl(instantiation);
  };
  function ReadCsvFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReadCsvFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var tmp2 = openInputCharFile(result);
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.use' call
      try {
        var tmp;
        try {
          return readCsv(tmp2);
        } catch ($p) {
          var tmp_0;
          if ($p instanceof CsvParseException) {
            var e = $p;
            throwAPLException(new APLEvalException('Error while parsing CSV: ' + e.message, this.t2g_1));
          } else {
            throw $p;
          }
          tmp = tmp_0;
        }
        break $l$block;
      }finally {
        tmp2.h1l();
      }
    }
  };
  function ReadCsvFunction() {
  }
  protoOf(ReadCsvFunction).i2i = function (instantiation) {
    return new ReadCsvFunctionImpl(instantiation);
  };
  function ReadFileFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReadFileFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    // Inline function 'com.dhsdevelopments.kap.use' call
    var this_0 = openInputCharFile(result);
    try {
      var buf = StringBuilder_init_$Create$();
      $l$loop: while (true) {
        var tmp0_elvis_lhs = this_0.e3j();
        var tmp;
        if (tmp0_elvis_lhs == null) {
          break $l$loop;
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var ch = tmp;
        addCodepoint(buf, ch);
      }
      return Companion_getInstance_46().k2o(buf.toString());
    }finally {
      this_0.h1l();
    }
  };
  function ReadFileFunction() {
  }
  protoOf(ReadFileFunction).i2i = function (instantiation) {
    return new ReadFileFunctionImpl(instantiation);
  };
  function LoadFunction$LoadFunctionImpl$eval1Arg$lambda($context, $file, this$0, $engine) {
    return function () {
      var tmp0 = $context;
      var tmp1 = $file;
      var tmp2 = this$0.t2g_1;
      var tmp$ret$1;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.builtins.withIOExceptionConversions' call
        try {
          tmp$ret$1 = $engine.f3j(new FileSourceLocation($file));
          break $l$block;
        } catch ($p) {
          if ($p instanceof MPFileNotFoundException) {
            var _unused_var__etf5q3 = $p;
            throwTagCatch(tmp0.j38_1, 'fileNotFound', Companion_getInstance_46().k2o(tmp1), 'File not found: ' + tmp1, tmp2);
          } else {
            throw $p;
          }
        }
      }
      return tmp$ret$1;
    };
  }
  function LoadFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(LoadFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var requestedFile = result;
    var engine = context.j38_1;
    var file = engine.x3h(requestedFile);
    var tmp$ret$7;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.Engine.withSavedNamespace' call
      var oldNamespace = engine.g39_1;
      try {
        // Inline function 'com.dhsdevelopments.kap.withThreadLocalsUnassigned' call
        // Inline function 'kotlin.require' call
        // Inline function 'kotlin.require' call
        if (!!(currentStorageStackOrNull() == null)) {
          var message = 'Failed requirement.';
          throw IllegalArgumentException_init_$Create$(toString(message));
        }
        tmp$ret$7 = withThreadLocalStorageStackAssigned(null, LoadFunction$LoadFunctionImpl$eval1Arg$lambda(context, file, this, engine));
        break $l$block;
      }finally {
        engine.g39_1 = oldNamespace;
      }
    }
    return tmp$ret$7;
  };
  function LoadFunction() {
  }
  protoOf(LoadFunction).i2i = function (instantiation) {
    return new LoadFunctionImpl(instantiation);
  };
  function loadContent($this, context, file, selectors) {
    var tmp0 = $this.t2g_1;
    var tmp$ret$3;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.transformMPFileException' call
      try {
        // Inline function 'com.dhsdevelopments.kap.toStringValue' call
        var pos = $this.t2g_1;
        var result = toStringValueOrNull(file);
        if (result == null) {
          var m = null;
          var messagePrefix = m == null ? '' : '' + m + ': ';
          throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
        }
        tmp$ret$3 = readDirectoryContent(context.j38_1.x3h(result));
        break $l$block;
      } catch ($p) {
        if ($p instanceof MPFileException) {
          var e = $p;
          throwAPLException(new APLEvalException('File exception: ' + e.message, tmp0));
        } else {
          throw $p;
        }
      }
    }
    var content = tmp$ret$3;
    var numCols = 1 + selectors.n() | 0;
    var d = dimensionsOfSize(new Int32Array([content.n(), numCols]));
    var tmp = 0;
    var tmp_0 = Dimensions__contentSize_impl_4eihds(d);
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var row = tmp_2 / numCols | 0;
      var col = tmp_2 % numCols | 0;
      var pathEntry = content.p(row);
      var tmp_3;
      if (col === 0) {
        tmp_3 = Companion_getInstance_46().k2o(pathEntry.k3j_1);
      } else {
        var tmp_4;
        switch (selectors.p(col - 1 | 0).o2_1) {
          case 0:
            tmp_4 = makeAPLNumber_0(pathEntry.l3j_1);
            break;
          case 1:
            tmp_4 = pathEntryTypeToAPL($this, context, pathEntry.m3j_1);
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }
        tmp_3 = tmp_4;
      }
      tmp_1[tmp_2] = tmp_3;
      tmp = tmp + 1 | 0;
    }
    var valueList = tmp_1;
    return new APLArrayImpl(d, valueList);
  }
  function pathEntryTypeToAPL($this, context, type) {
    var tmp;
    switch (type.o2_1) {
      case 0:
        tmp = context.j38_1.s39('file', context.j38_1.i3i());
        break;
      case 1:
        tmp = context.j38_1.s39('directory', context.j38_1.i3i());
        break;
      case 2:
        tmp = context.j38_1.s39('undefined', context.j38_1.i3i());
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    var sym = tmp;
    return new APLSymbol(sym);
  }
  function parseOutputTypes($this, context, value) {
    // Inline function 'kotlin.collections.associateBy' call
    var this_0 = get_entries();
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16);
    // Inline function 'kotlin.collections.associateByTo' call
    var destination = LinkedHashMap_init_$Create$(capacity);
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var tmp$ret$0 = context.j38_1.s39(element.p3j_1, context.j38_1.i3i());
      destination.j2(tmp$ret$0, element);
    }
    var keywordToType = destination;
    var result = ArrayList_init_$Create$();
    var asArray = value.u2i();
    if (!(_Dimensions___get_size__impl__uu37ek(asArray.o2i()) === 1)) {
      throwAPLException(new InvalidDimensionsException('Selector must be a scalar or a rank-1 array', $this.t2g_1));
    }
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (asArray.b2l()) {
      var collapsed = asArray.x2g();
      if (!(collapsed instanceof APLSymbol)) {
        throwAPLException(new APLIllegalArgumentException('Selector must be a symbol', $this.t2g_1));
      }
      var tmp0_elvis_lhs = keywordToType.a2(collapsed.g2j_1);
      var tmp;
      if (tmp0_elvis_lhs == null) {
        throwAPLException(new APLIllegalArgumentException('Illegal selector: ' + collapsed.g2j_1.t3e(), $this.t2g_1));
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var found = tmp;
      result.h(found);
    } else {
      var inductionVariable = 0;
      var last = asArray.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var collapsed_0 = asArray.h2k(i).x2g();
          if (!(collapsed_0 instanceof APLSymbol)) {
            throwAPLException(new APLIllegalArgumentException('Selector must be a symbol', $this.t2g_1));
          }
          var tmp0_elvis_lhs_0 = keywordToType.a2(collapsed_0.g2j_1);
          var tmp_0;
          if (tmp0_elvis_lhs_0 == null) {
            throwAPLException(new APLIllegalArgumentException('Illegal selector: ' + collapsed_0.g2j_1.t3e(), $this.t2g_1));
          } else {
            tmp_0 = tmp0_elvis_lhs_0;
          }
          var found_0 = tmp_0;
          result.h(found_0);
        }
         while (inductionVariable < last);
    }
    return result;
  }
  var OutputType_SIZE_instance;
  var OutputType_TYPE_instance;
  function values() {
    return [OutputType_SIZE_getInstance(), OutputType_TYPE_getInstance()];
  }
  function get_entries() {
    if ($ENTRIES == null)
      $ENTRIES = enumEntries(values());
    return $ENTRIES;
  }
  var OutputType_entriesInitialized;
  function OutputType_initEntries() {
    if (OutputType_entriesInitialized)
      return Unit_instance;
    OutputType_entriesInitialized = true;
    OutputType_SIZE_instance = new OutputType('SIZE', 0, 'size');
    OutputType_TYPE_instance = new OutputType('TYPE', 1, 'type');
  }
  var $ENTRIES;
  function ReaddirFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReaddirFunctionImpl).n2i = function (context, a) {
    return loadContent(this, context, a, emptyList());
  };
  protoOf(ReaddirFunctionImpl).t2i = function (context, a, b) {
    return loadContent(this, context, b, parseOutputTypes(this, context, a));
  };
  function OutputType(name, ordinal, selector) {
    Enum.call(this, name, ordinal);
    this.p3j_1 = selector;
  }
  function OutputType_SIZE_getInstance() {
    OutputType_initEntries();
    return OutputType_SIZE_instance;
  }
  function OutputType_TYPE_getInstance() {
    OutputType_initEntries();
    return OutputType_TYPE_instance;
  }
  function ReaddirFunction() {
  }
  protoOf(ReaddirFunction).i2i = function (instantiation) {
    return new ReaddirFunctionImpl(instantiation);
  };
  function ToHtmlFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ToHtmlFunctionImpl).n2i = function (context, a) {
    var buf = StringBuilder_init_$Create$();
    a.j2q(buf);
    return Companion_getInstance_46().k2o(buf.toString());
  };
  function ToHtmlFunction() {
  }
  protoOf(ToHtmlFunction).i2i = function (instantiation) {
    return new ToHtmlFunctionImpl(instantiation);
  };
  function openStream($this, engine, file, options) {
    try {
      var file_0 = engine.x3h(file);
      var tmp;
      switch (options.y3j_1.o2_1) {
        case 0:
          var tmp_0;
          switch (options.z3j_1.o2_1) {
            case 0:
              tmp_0 = new APLCharInputStream(openInputCharFile(file_0));
              break;
            case 1:
              tmp_0 = new APLBinaryInputStream(openInputFile(file_0));
              break;
            default:
              noWhenBranchMatchedException();
              break;
          }

          tmp = tmp_0;
          break;
        case 1:
          var tmp_1;
          switch (options.z3j_1.o2_1) {
            case 0:
              tmp_1 = new APLCharOutputStream(openOutputCharFile(file_0));
              break;
            case 1:
              tmp_1 = new APLBinaryOutputStream(openOutputFile(file_0));
              break;
            default:
              noWhenBranchMatchedException();
              break;
          }

          tmp = tmp_1;
          break;
        default:
          noWhenBranchMatchedException();
          break;
      }
      return tmp;
    } catch ($p) {
      if ($p instanceof MPFileException) {
        var e = $p;
        throwAPLException(new APLEvalException('Error opening file: ' + e.message, $this.t2g_1, e));
      } else {
        throw $p;
      }
    }
  }
  function parseOptions($this, context, a, pos) {
    var a0 = a.u2i();
    if (!(_Dimensions___get_size__impl__uu37ek(a0.o2i()) === 1)) {
      throwAPLException(new InvalidDimensionsException('Options should be a scalar or a 1-dimensional array', pos));
    }
    var mode = null;
    var type = null;
    var inputKeyword = context.j38_1.i3i().e3k('input');
    var outputKeyword = context.j38_1.i3i().e3k('output');
    var utf8Keyword = context.j38_1.i3i().e3k('text');
    var binaryKeyword = context.j38_1.i3i().e3k('binary');
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (a0.b2l()) {
      if (a0 instanceof APLSymbol) {
        var tmp0_subject = a0.g2j_1;
        if (equals(tmp0_subject, inputKeyword))
          if (!(mode == null)) {
            parseOptions$throwDuplicateMode(pos);
          } else
            mode = StreamMode_INPUT_getInstance();
        else if (equals(tmp0_subject, outputKeyword))
          if (!(mode == null)) {
            parseOptions$throwDuplicateMode(pos);
          } else
            mode = StreamMode_OUTPUT_getInstance();
        else if (equals(tmp0_subject, utf8Keyword))
          if (!(type == null)) {
            parseOptions$throwDuplicateMode(pos);
          } else
            type = StreamType_UTF8_getInstance();
        else if (equals(tmp0_subject, binaryKeyword))
          if (!(type == null)) {
            parseOptions$throwDuplicateMode(pos);
          } else
            type = StreamType_BINARY_getInstance();
      }
    } else {
      var inductionVariable = 0;
      var last = a0.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = a0.h2k(i);
          if (v instanceof APLSymbol) {
            var tmp0_subject_0 = v.g2j_1;
            if (equals(tmp0_subject_0, inputKeyword))
              if (!(mode == null)) {
                parseOptions$throwDuplicateMode(pos);
              } else
                mode = StreamMode_INPUT_getInstance();
            else if (equals(tmp0_subject_0, outputKeyword))
              if (!(mode == null)) {
                parseOptions$throwDuplicateMode(pos);
              } else
                mode = StreamMode_OUTPUT_getInstance();
            else if (equals(tmp0_subject_0, utf8Keyword))
              if (!(type == null)) {
                parseOptions$throwDuplicateMode(pos);
              } else
                type = StreamType_UTF8_getInstance();
            else if (equals(tmp0_subject_0, binaryKeyword))
              if (!(type == null)) {
                parseOptions$throwDuplicateMode(pos);
              } else
                type = StreamType_BINARY_getInstance();
          }
        }
         while (inductionVariable < last);
    }
    var tmp0_elvis_lhs = mode;
    var tmp = tmp0_elvis_lhs == null ? StreamMode_INPUT_getInstance() : tmp0_elvis_lhs;
    var tmp1_elvis_lhs = type;
    return new OpenOptions(tmp, tmp1_elvis_lhs == null ? StreamType_UTF8_getInstance() : tmp1_elvis_lhs);
  }
  function parseOptions$throwDuplicateMode($pos) {
    throwAPLException(new APLIllegalArgumentException('Duplicate mode argument', $pos));
  }
  var StreamMode_INPUT_instance;
  var StreamMode_OUTPUT_instance;
  var StreamMode_entriesInitialized;
  function StreamMode_initEntries() {
    if (StreamMode_entriesInitialized)
      return Unit_instance;
    StreamMode_entriesInitialized = true;
    StreamMode_INPUT_instance = new StreamMode('INPUT', 0);
    StreamMode_OUTPUT_instance = new StreamMode('OUTPUT', 1);
  }
  var StreamType_UTF8_instance;
  var StreamType_BINARY_instance;
  var StreamType_entriesInitialized;
  function StreamType_initEntries() {
    if (StreamType_entriesInitialized)
      return Unit_instance;
    StreamType_entriesInitialized = true;
    StreamType_UTF8_instance = new StreamType('UTF8', 0);
    StreamType_BINARY_instance = new StreamType('BINARY', 1);
  }
  function OpenFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(OpenFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var file = result;
    return openStream(this, context.j38_1, file, new OpenOptions(StreamMode_INPUT_getInstance(), StreamType_UTF8_getInstance()));
  };
  protoOf(OpenFunctionImpl).t2i = function (context, a, b) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var file = result;
    var options = parseOptions(this, context, a, this.t2g_1);
    return openStream(this, context.j38_1, file, options);
  };
  function OpenOptions(mode, contentType) {
    this.y3j_1 = mode;
    this.z3j_1 = contentType;
  }
  function StreamMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function StreamType(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function StreamMode_INPUT_getInstance() {
    StreamMode_initEntries();
    return StreamMode_INPUT_instance;
  }
  function StreamMode_OUTPUT_getInstance() {
    StreamMode_initEntries();
    return StreamMode_OUTPUT_instance;
  }
  function StreamType_UTF8_getInstance() {
    StreamType_initEntries();
    return StreamType_UTF8_instance;
  }
  function StreamType_BINARY_getInstance() {
    StreamType_initEntries();
    return StreamType_BINARY_instance;
  }
  function OpenFunction() {
  }
  protoOf(OpenFunction).i2i = function (instantiation) {
    return new OpenFunctionImpl(instantiation);
  };
  function readText($this, f) {
    var result = ArrayList_init_$Create$();
    // Inline function 'kotlin.sequences.forEach' call
    var _iterator__ex2g4s = f.y3h().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      result.h(Companion_getInstance_46().k2o(element));
    }
    return new APLArrayList(dimensionsOfSize(new Int32Array([result.n()])), result);
  }
  function readBinary($this, f) {
    var result = new ByteArrayByteConsumer();
    var buf = new Int8Array(16384);
    $l$loop: while (true) {
      var n = f.j3k(buf, 0, buf.length);
      if (n === 0)
        break $l$loop;
      result.k3k(buf, 0, n);
    }
    var content = result.n3k();
    return new APLArrayByte(dimensionsOfSize(new Int32Array([content.length])), content);
  }
  function ReadFromStreamFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReadFromStreamFunctionImpl).n2i = function (context, a) {
    var a0 = a.g2k();
    var tmp;
    if (a0 instanceof APLCharInputStream) {
      tmp = readText(this, a0.s3k_1);
    } else {
      if (a0 instanceof APLBinaryInputStream) {
        tmp = readBinary(this, a0.s3k_1);
      } else {
        throwAPLException(new APLIllegalArgumentException('Expected input stream, got: ' + getKClassFromExpression(a0).b9()));
      }
    }
    return tmp;
  };
  function ReadFromStreamFunction() {
  }
  protoOf(ReadFromStreamFunction).i2i = function (instantiation) {
    return new ReadFromStreamFunctionImpl(instantiation);
  };
  function ReadLineFromStreamFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReadLineFromStreamFunctionImpl).n2i = function (context, a) {
    var f = Companion_instance_7.y3k(a, this.t2g_1);
    var line = f.s3k_1.z3k();
    var tmp;
    if (line == null) {
      tmp = APLNilValue_getInstance();
    } else {
      tmp = Companion_getInstance_46().k2o(line);
    }
    return tmp;
  };
  function ReadLineFromStreamFunction() {
  }
  protoOf(ReadLineFromStreamFunction).i2i = function (instantiation) {
    return new ReadLineFromStreamFunctionImpl(instantiation);
  };
  function ensureValidDimensions($this, d) {
    if (!(_Dimensions___get_size__impl__uu37ek(d) === 1)) {
      throwAPLException(new InvalidDimensionsException('Argument must be a scalar or a 1-dimensional array, got: ' + Dimensions__toString_impl_fhouq4(d)));
    }
  }
  function writeText($this, f, b) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = $this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    f.d3i(result);
  }
  function writeBinary($this, f, b) {
    // Inline function 'kotlin.collections.forEach' call
    var indexedObject = asByteArray(b, $this.t2g_1);
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      f.a3l(element);
    }
  }
  function WriteToStreamFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(WriteToStreamFunctionImpl).t2i = function (context, a, b) {
    var b0 = b.u2i();
    ensureValidDimensions(this, b0.o2i());
    var a0 = a.g2k();
    if (a0 instanceof APLCharOutputStream) {
      writeText(this, a0.s3k_1, b0);
    } else {
      if (a0 instanceof APLBinaryOutputStream) {
        writeBinary(this, a0.s3k_1, b0);
      } else {
        throwAPLException(new APLIllegalArgumentException('Expected output stream, got: ' + getKClassFromExpression(a0).b9()));
      }
    }
    return b0;
  };
  protoOf(WriteToStreamFunctionImpl).i2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    ensureValidDimensions(this, b.o2i());
    var a0 = a.g2k();
    if (a0 instanceof APLCharOutputStream) {
      writeText(this, a0.s3k_1, b);
    } else {
      if (a0 instanceof APLBinaryOutputStream) {
        writeBinary(this, a0.s3k_1, b);
      } else {
        throwAPLException(new APLIllegalArgumentException('Expected output stream, got: ' + getKClassFromExpression(a0).b9()));
      }
    }
  };
  function WriteToStreamFunction() {
  }
  protoOf(WriteToStreamFunction).i2i = function (instantiation) {
    return new WriteToStreamFunctionImpl(instantiation);
  };
  function registerIoClosableHandlers(engine) {
    var tmp = registerIoClosableHandlers$lambda;
    // Inline function 'com.dhsdevelopments.kap.Engine.registerClosableHandler' call
    var handler = new sam$com_dhsdevelopments_kap_ClosableHandler$0(tmp);
    if (engine.h39_1.y1(getKClass(APLCharInputStream))) {
      throw IllegalStateException_init_$Create$('Closable handler for class ' + getKClass(APLCharInputStream).b9() + ' already added');
    }
    var tmp0 = engine.h39_1;
    // Inline function 'kotlin.collections.set' call
    var key = getKClass(APLCharInputStream);
    tmp0.j2(key, handler);
    var tmp_0 = registerIoClosableHandlers$lambda_0;
    // Inline function 'com.dhsdevelopments.kap.Engine.registerClosableHandler' call
    var handler_0 = new sam$com_dhsdevelopments_kap_ClosableHandler$0(tmp_0);
    if (engine.h39_1.y1(getKClass(APLCharOutputStream))) {
      throw IllegalStateException_init_$Create$('Closable handler for class ' + getKClass(APLCharOutputStream).b9() + ' already added');
    }
    var tmp0_0 = engine.h39_1;
    // Inline function 'kotlin.collections.set' call
    var key_0 = getKClass(APLCharOutputStream);
    tmp0_0.j2(key_0, handler_0);
    var tmp_1 = registerIoClosableHandlers$lambda_1;
    // Inline function 'com.dhsdevelopments.kap.Engine.registerClosableHandler' call
    var handler_1 = new sam$com_dhsdevelopments_kap_ClosableHandler$0(tmp_1);
    if (engine.h39_1.y1(getKClass(APLBinaryInputStream))) {
      throw IllegalStateException_init_$Create$('Closable handler for class ' + getKClass(APLBinaryInputStream).b9() + ' already added');
    }
    var tmp0_1 = engine.h39_1;
    // Inline function 'kotlin.collections.set' call
    var key_1 = getKClass(APLBinaryInputStream);
    tmp0_1.j2(key_1, handler_1);
    var tmp_2 = registerIoClosableHandlers$lambda_2;
    // Inline function 'com.dhsdevelopments.kap.Engine.registerClosableHandler' call
    var handler_2 = new sam$com_dhsdevelopments_kap_ClosableHandler$0(tmp_2);
    if (engine.h39_1.y1(getKClass(APLBinaryOutputStream))) {
      throw IllegalStateException_init_$Create$('Closable handler for class ' + getKClass(APLBinaryOutputStream).b9() + ' already added');
    }
    var tmp0_2 = engine.h39_1;
    // Inline function 'kotlin.collections.set' call
    var key_2 = getKClass(APLBinaryOutputStream);
    tmp0_2.j2(key_2, handler_2);
  }
  function KotlinObjectWrappedValue(value) {
    APLSingleValue.call(this);
    this.s3k_1 = value;
  }
  protoOf(KotlinObjectWrappedValue).z2p = function () {
    return Companion_getInstance_35().s3l_1;
  };
  protoOf(KotlinObjectWrappedValue).h2n = function (reference, pos, typeDiscrimination) {
    var tmp;
    if (reference instanceof KotlinObjectWrappedValue) {
      tmp = equals(reference.s3k_1, this.s3k_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(KotlinObjectWrappedValue).h2q = function () {
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.s3k_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  function printValue(context, a, style) {
    context.j38_1.d39_1.d3i(a.i2o(style));
  }
  function Companion_5() {
    this.x3k_1 = 'char input stream';
  }
  protoOf(Companion_5).y3k = function (a, pos) {
    // Inline function 'com.dhsdevelopments.kap.builtins.ensureType' call
    var typename = this.x3k_1;
    var a0 = a.g2k();
    if (!(a0 instanceof APLCharInputStream)) {
      throwAPLException(new APLIllegalArgumentException('Argument is not of type: ' + typename + ', got: ' + getKClassFromExpression(a0).b9(), pos));
    }
    return a0;
  };
  var Companion_instance_7;
  function Companion_getInstance_7() {
    return Companion_instance_7;
  }
  function APLCharInputStream(prov) {
    KotlinObjectWrappedValue.call(this, prov);
  }
  protoOf(APLCharInputStream).z2p = function () {
    return Companion_getInstance_35().s3l_1;
  };
  protoOf(APLCharInputStream).i2o = function (style) {
    return Companion_instance_7.x3k_1;
  };
  protoOf(APLCharInputStream).h1l = function () {
    this.s3k_1.h1l();
  };
  function Companion_6() {
    this.y3l_1 = 'binary input stream';
  }
  var Companion_instance_8;
  function Companion_getInstance_8() {
    return Companion_instance_8;
  }
  function APLBinaryInputStream(prov) {
    KotlinObjectWrappedValue.call(this, prov);
  }
  protoOf(APLBinaryInputStream).z2p = function () {
    return Companion_getInstance_35().s3l_1;
  };
  protoOf(APLBinaryInputStream).i2o = function (style) {
    return Companion_instance_8.y3l_1;
  };
  protoOf(APLBinaryInputStream).h1l = function () {
    this.s3k_1.h1l();
  };
  function Companion_7() {
    this.a3m_1 = 'char output stream';
  }
  var Companion_instance_9;
  function Companion_getInstance_9() {
    return Companion_instance_9;
  }
  function APLCharOutputStream(prov) {
    KotlinObjectWrappedValue.call(this, prov);
  }
  protoOf(APLCharOutputStream).z2p = function () {
    return Companion_getInstance_35().s3l_1;
  };
  protoOf(APLCharOutputStream).i2o = function (style) {
    return Companion_instance_9.a3m_1;
  };
  protoOf(APLCharOutputStream).h1l = function () {
    this.s3k_1.h1l();
  };
  function Companion_8() {
    this.c3m_1 = 'binary output stream';
  }
  var Companion_instance_10;
  function Companion_getInstance_10() {
    return Companion_instance_10;
  }
  function APLBinaryOutputStream(prov) {
    KotlinObjectWrappedValue.call(this, prov);
  }
  protoOf(APLBinaryOutputStream).z2p = function () {
    return Companion_getInstance_35().s3l_1;
  };
  protoOf(APLBinaryOutputStream).i2o = function (style) {
    return Companion_instance_10.c3m_1;
  };
  protoOf(APLBinaryOutputStream).h1l = function () {
    this.s3k_1.h1l();
  };
  function sam$com_dhsdevelopments_kap_ClosableHandler$0(function_0) {
    this.e3m_1 = function_0;
  }
  protoOf(sam$com_dhsdevelopments_kap_ClosableHandler$0).f3m = function (value) {
    return this.e3m_1(value);
  };
  protoOf(sam$com_dhsdevelopments_kap_ClosableHandler$0).m3 = function () {
    return this.e3m_1;
  };
  protoOf(sam$com_dhsdevelopments_kap_ClosableHandler$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, ClosableHandler) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.m3(), other.m3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$com_dhsdevelopments_kap_ClosableHandler$0).hashCode = function () {
    return hashCode(this.m3());
  };
  function registerIoClosableHandlers$lambda(value) {
    value.h1l();
    return Unit_instance;
  }
  function registerIoClosableHandlers$lambda_0(value) {
    value.h1l();
    return Unit_instance;
  }
  function registerIoClosableHandlers$lambda_1(value) {
    value.h1l();
    return Unit_instance;
  }
  function registerIoClosableHandlers$lambda_2(value) {
    value.h1l();
    return Unit_instance;
  }
  function MapAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MapAPLFunctionImpl).n2i = function (context, a) {
    ensureKeyValuesArray(a, this.t2g_1);
    var content = ArrayList_init_$Create$();
    // Inline function 'kotlin.repeat' call
    var times = a.n() / 2 | 0;
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var key = a.h2k(imul(index, 2)).x2g();
        var value = a.h2k(imul(index, 2) + 1 | 0).x2g();
        content.h(new Pair(key.s2o(), value));
      }
       while (inductionVariable < times);
    return new APLMap(Companion_instance_31.s3h(content));
  };
  function MapAPLFunction() {
  }
  protoOf(MapAPLFunction).i2i = function (instantiation) {
    return new MapAPLFunctionImpl(instantiation);
  };
  function MapGetAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MapGetAPLFunctionImpl).t2i = function (context, a, b) {
    return mapLookupFromAPLValue(a, b, this.t2g_1);
  };
  function MapGetAPLFunction() {
  }
  protoOf(MapGetAPLFunction).i2i = function (instantiation) {
    return new MapGetAPLFunctionImpl(instantiation);
  };
  function MapPutAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MapPutAPLFunctionImpl).t2i = function (context, a, b) {
    var map = ensureMap(a, this.t2g_1);
    ensureKeyValuesArray(b, this.t2g_1);
    var tmp;
    if (b.n() > 0) {
      var content = ArrayList_init_$Create$();
      // Inline function 'kotlin.repeat' call
      var times = b.n() / 2 | 0;
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var key = b.h2k(imul(index, 2)).x2g();
          var value = b.h2k(imul(index, 2) + 1 | 0).x2g();
          content.h(new Pair(key.s2o(), value));
        }
         while (inductionVariable < times);
      tmp = map.u3m(content);
    } else {
      tmp = a;
    }
    return tmp;
  };
  function MapPutAPLFunction() {
  }
  protoOf(MapPutAPLFunction).i2i = function (instantiation) {
    return new MapPutAPLFunctionImpl(instantiation);
  };
  function MapRemoveAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MapRemoveAPLFunctionImpl).t2i = function (context, a, b) {
    var map = ensureMap(a, this.t2g_1);
    var b1 = b.u2i().x2g();
    if (!(_Dimensions___get_size__impl__uu37ek(b1.o2i()) === 1)) {
      throwAPLException(new InvalidDimensionsException('Right argument should be a scalar or a rank-1 array', this.t2g_1));
    }
    var toRemove = ArrayList_init_$Create$();
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (b1.b2l()) {
      toRemove.h(b1);
    } else {
      var inductionVariable = 0;
      var last = b1.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var value = b1.h2k(i);
          toRemove.h(value);
        }
         while (inductionVariable < last);
    }
    return map.z3m(toRemove);
  };
  function MapRemoveAPLFunction() {
  }
  protoOf(MapRemoveAPLFunction).i2i = function (instantiation) {
    return new MapRemoveAPLFunctionImpl(instantiation);
  };
  function MapKeyValuesFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MapKeyValuesFunctionImpl).n2i = function (context, a) {
    return a.o2q(this.t2g_1).e3n();
  };
  function MapKeyValuesFunction() {
  }
  protoOf(MapKeyValuesFunction).i2i = function (instantiation) {
    return new MapKeyValuesFunctionImpl(instantiation);
  };
  function MapSizeFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MapSizeFunctionImpl).n2i = function (context, a) {
    var map = ensureMap(a, this.t2g_1);
    return makeAPLNumber_4(map.s3m_1.n());
  };
  function MapSizeFunction() {
  }
  protoOf(MapSizeFunction).i2i = function (instantiation) {
    return new MapSizeFunctionImpl(instantiation);
  };
  function MapKeysFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MapKeysFunctionImpl).n2i = function (context, a) {
    var map = ensureMap(a, this.t2g_1);
    // Inline function 'kotlin.collections.map' call
    var this_0 = map.s3m_1.b2();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = item.x1();
      destination.h(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.toTypedArray' call
    var array = copyToArray(destination);
    return new APLArrayImpl(dimensionsOfSize(new Int32Array([array.length])), array);
  };
  function MapKeysFunction() {
  }
  protoOf(MapKeysFunction).i2i = function (instantiation) {
    return new MapKeysFunctionImpl(instantiation);
  };
  function ensureKeyValuesArray(a, pos) {
    if (_Dimensions___get_size__impl__uu37ek(a.o2i()) === 1) {
      // Inline function 'com.dhsdevelopments.kap.unless' call
      if (!((Dimensions__get_impl_4npepw(a.o2i(), 0) % 2 | 0) === 0)) {
        ensureKeyValuesArray$raiseDimensionError(pos);
      }
    } else if (_Dimensions___get_size__impl__uu37ek(a.o2i()) === 2) {
      // Inline function 'com.dhsdevelopments.kap.unless' call
      if (!(Dimensions__get_impl_4npepw(a.o2i(), 1) === 2)) {
        ensureKeyValuesArray$raiseDimensionError(pos);
      }
    } else {
      ensureKeyValuesArray$raiseDimensionError(pos);
    }
  }
  function mapLookupFromAPLValue(mapAsAPLValue, keyAsAPLValue, pos) {
    var map = ensureMap(mapAsAPLValue, pos);
    var bValue = keyAsAPLValue.g2k();
    var tmp;
    if (bValue.n2l()) {
      var tmp0_elvis_lhs = map.o3n(bValue.o2l().s2o());
      var res = tmp0_elvis_lhs == null ? APLNilValue_getInstance() : tmp0_elvis_lhs;
      tmp = Companion_instance_51.s2i(res);
    } else {
      tmp = new MapLookupResult(map, bValue);
    }
    return tmp;
  }
  function ensureMap(a, pos) {
    var map = a.g2k();
    if (!(map instanceof APLMap)) {
      throwAPLException(new IncompatibleTypeException('Left argument must be a map', pos));
    }
    return map;
  }
  function MapLookupResult(map, indexes) {
    APLArray.call(this);
    this.p3n_1 = map;
    this.q3n_1 = indexes;
    this.r3n_1 = this.q3n_1.o2i();
  }
  protoOf(MapLookupResult).o2i = function () {
    return this.r3n_1;
  };
  protoOf(MapLookupResult).h2k = function (p) {
    var key = this.q3n_1.h2k(p).g2k();
    var tmp0_elvis_lhs = this.p3n_1.o3n(key.s2o());
    return tmp0_elvis_lhs == null ? APLNilValue_getInstance() : tmp0_elvis_lhs;
  };
  protoOf(MapLookupResult).g2k = function () {
    return unwrapEnclosedSingleValue(this);
  };
  function ensureKeyValuesArray$raiseDimensionError($pos) {
    throwAPLException(new APLIllegalArgumentException('Right argument to map should be either a rank-1 array with an even element count or a rank-2 array with 2 columns', $pos));
  }
  function _get_subFn__b8fuxj($this) {
    var tmp0 = $this.y3n_1;
    // Inline function 'kotlin.getValue' call
    subFn$factory();
    return tmp0.x1();
  }
  function AddAPLFunction$AddAPLFunctionImpl$subFn$delegate$lambda($pos) {
    return function () {
      return (new SubAPLFunction()).i2i($pos);
    };
  }
  function AddAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
    var tmp = this;
    tmp.y3n_1 = lazy(AddAPLFunction$AddAPLFunctionImpl$subFn$delegate$lambda(pos));
  }
  protoOf(AddAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = makeAPLNumber(x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(new Complex(x_1.a3o_1, -x_1.b3o_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = makeAPLNumber_2(x_2);
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = makeAPLNumber_3(x_3);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(AddAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$2;
    $l$block_4: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            // Inline function 'com.dhsdevelopments.mpbignum.addExactWrapped' call
            var r = tmp3.w2(y);
            if (tmp3.k3(r).i3(y.k3(r)).a1(get_LONG_0()) < 0) {
              throw new LongExpressionOverflow(plus(of_0(Companion_instance, tmp3), of_0(Companion_instance, y)));
            }
            tmp_1 = makeAPLNumber_0(r);
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$2 = tmp_1;
          break $l$block_4;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$2 = makeAPLNumber_1(tmp5.e3o(y_0));
            break $l$block_4;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$2 = makeAPLNumber(tmp7 + y_1);
              break $l$block_4;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$2 = makeAPLNumber_3(tmp9.qj(y_2));
                break $l$block_4;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$2 = makeAPLNumber_2(plus(tmp11, y_3));
                  break $l$block_4;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          var tmp_8;
          var tmp_9;
          if (a instanceof APLChar) {
            tmp_9 = b instanceof APLNumber;
          } else {
            tmp_9 = false;
          }
          if (tmp_9) {
            tmp_8 = Companion_getInstance_47().d3o(numberToLong(a.m2z_1).w2(b.w2s(this.t2g_1)), this.t2g_1);
          } else {
            var tmp_10;
            if (a instanceof APLNumber) {
              tmp_10 = b instanceof APLChar;
            } else {
              tmp_10 = false;
            }
            if (tmp_10) {
              tmp_8 = Companion_getInstance_47().d3o(numberToLong(b.m2z_1).w2(a.w2s(this.t2g_1)), this.t2g_1);
            } else {
              var tmp_11;
              var tmp_12;
              if (a instanceof APLNumber) {
                tmp_12 = true;
              } else {
                tmp_12 = a instanceof APLChar;
              }
              if (tmp_12) {
                tmp_11 = b instanceof APLNilValue;
              } else {
                tmp_11 = false;
              }
              if (tmp_11) {
                tmp_8 = a;
              } else {
                var tmp_13;
                if (a instanceof APLNilValue) {
                  var tmp_14;
                  if (b instanceof APLNumber) {
                    tmp_14 = true;
                  } else {
                    tmp_14 = b instanceof APLChar;
                  }
                  tmp_13 = tmp_14;
                } else {
                  tmp_13 = false;
                }
                if (tmp_13) {
                  tmp_8 = b;
                } else {
                  var tmp_15;
                  if (a instanceof APLNilValue) {
                    tmp_15 = b instanceof APLNilValue;
                  } else {
                    tmp_15 = false;
                  }
                  if (tmp_15) {
                    tmp_8 = get_APLLONG_0();
                  } else {
                    NumericRelationErrors_instance.l2z(a, b, this.t2g_1);
                  }
                }
              }
            }
          }
          tmp$ret$2 = tmp_8;
          break $l$block_4;
        }
      }
    }
    return tmp$ret$2;
  };
  protoOf(AddAPLFunctionImpl).e2x = function (a) {
    return a;
  };
  protoOf(AddAPLFunctionImpl).p2x = function (a) {
    return a;
  };
  protoOf(AddAPLFunctionImpl).f2x = function (a, b) {
    // Inline function 'com.dhsdevelopments.mpbignum.addExactWrapped' call
    var r = a.w2(b);
    if (a.k3(r).i3(b.k3(r)).a1(get_LONG_0()) < 0) {
      throw new LongExpressionOverflow(plus(of_0(Companion_instance, a), of_0(Companion_instance, b)));
    }
    return r;
  };
  protoOf(AddAPLFunctionImpl).s2x = function (a, b) {
    return a + b;
  };
  protoOf(AddAPLFunctionImpl).j2h = function () {
    return get_APLLONG_0();
  };
  protoOf(AddAPLFunctionImpl).k2h = function () {
    return new BitwiseXorFunction();
  };
  protoOf(AddAPLFunctionImpl).q2h = function (context, a, axis) {
    return this.w2g(context, a, axis);
  };
  protoOf(AddAPLFunctionImpl).v2h = function (baseFn, context, a, axis) {
    return this.k2m(this, baseFn, context, a, axis);
  };
  protoOf(AddAPLFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    return this.l2m(this, baseFn, context, a, b, axis);
  };
  protoOf(AddAPLFunctionImpl).r2h = function (context, a, b, axis) {
    return _get_subFn__b8fuxj(this).a2h(context, b, a, axis);
  };
  protoOf(AddAPLFunctionImpl).s2h = function (context, a, b, axis) {
    return _get_subFn__b8fuxj(this).a2h(context, a, b, axis);
  };
  protoOf(AddAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(31);
  };
  protoOf(AddAPLFunctionImpl).z2h = function () {
    return 'conjugate';
  };
  protoOf(AddAPLFunctionImpl).a2i = function () {
    return 'add';
  };
  function AddAPLFunction() {
  }
  protoOf(AddAPLFunction).i2i = function (instantiation) {
    return new AddAPLFunctionImpl(instantiation);
  };
  function _get_addFn__k0ka54($this) {
    var tmp0 = $this.l3o_1;
    // Inline function 'kotlin.getValue' call
    addFn$factory();
    return tmp0.x1();
  }
  function SubAPLFunction$SubAPLFunctionImpl$addFn$delegate$lambda($pos) {
    return function () {
      return (new AddAPLFunction()).i2i($pos);
    };
  }
  function SubAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
    var tmp = this;
    tmp.l3o_1 = lazy(SubAPLFunction$SubAPLFunctionImpl$addFn$delegate$lambda(pos));
  }
  protoOf(SubAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      var tmp_0;
      try {
        // Inline function 'com.dhsdevelopments.mpbignum.subExactWrapped' call
        var a_0 = new Long(0, 0);
        var r = a_0.x2(x);
        if (a_0.k3(x).i3(a_0.k3(r)).a1(new Long(0, 0)) < 0) {
          throw new LongExpressionOverflow(minus(of_0(Companion_instance, a_0), of_0(Companion_instance, x)));
        }
        tmp_0 = makeAPLNumber_0(r);
      } catch ($p) {
        var tmp_1;
        if ($p instanceof LongExpressionOverflow) {
          var e = $p;
          tmp_1 = makeAPLNumber_2(e.ek_1);
        } else {
          throw $p;
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = makeAPLNumber(-x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(x_1.d3());
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = makeAPLNumber_2(unaryMinus(x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = makeAPLNumber_3(x_3.d3());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(SubAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$2;
    $l$block_5: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            var tmp_2;
            try {
              // Inline function 'com.dhsdevelopments.mpbignum.subExactWrapped' call
              var r = tmp3.x2(y);
              if (tmp3.k3(y).i3(tmp3.k3(r)).a1(new Long(0, 0)) < 0) {
                throw new LongExpressionOverflow(minus(of_0(Companion_instance, tmp3), of_0(Companion_instance, y)));
              }
              tmp_2 = makeAPLNumber_0(r);
            } catch ($p) {
              var tmp_3;
              if ($p instanceof LongExpressionOverflow) {
                var e = $p;
                tmp_3 = makeAPLNumber_2(e.ek_1);
              } else {
                throw $p;
              }
              tmp_2 = tmp_3;
            }
            tmp_1 = tmp_2;
          } catch ($p) {
            var tmp_4;
            if ($p instanceof LongExpressionOverflow) {
              var e_0 = $p;
              tmp_4 = makeAPLNumber_2(e_0.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_4;
          }
          tmp$ret$2 = tmp_1;
          break $l$block_5;
        } else {
          var tmp_5;
          if (a instanceof APLComplex) {
            tmp_5 = true;
          } else {
            tmp_5 = b instanceof APLComplex;
          }
          if (tmp_5) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$2 = makeAPLNumber_1(tmp5.m3o(y_0));
            break $l$block_5;
          } else {
            var tmp_6;
            if (a instanceof APLDouble) {
              tmp_6 = true;
            } else {
              tmp_6 = b instanceof APLDouble;
            }
            if (tmp_6) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$2 = makeAPLNumber(tmp7 - y_1);
              break $l$block_5;
            } else {
              var tmp_7;
              if (a instanceof APLRational) {
                tmp_7 = true;
              } else {
                tmp_7 = b instanceof APLRational;
              }
              if (tmp_7) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$2 = makeAPLNumber_3(tmp9.rj(y_2));
                break $l$block_5;
              } else {
                var tmp_8;
                if (a instanceof APLBigInt) {
                  tmp_8 = true;
                } else {
                  tmp_8 = b instanceof APLBigInt;
                }
                if (tmp_8) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$2 = makeAPLNumber_2(minus(tmp11, y_3));
                  break $l$block_5;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_9;
        if (a instanceof APLChar) {
          tmp_9 = b instanceof APLChar;
        } else {
          tmp_9 = false;
        }
        if (tmp_9) {
          var tmp13 = a.m2z_1;
          var y_4 = b.m2z_1;
          tmp$ret$2 = makeAPLNumber_4(tmp13 - y_4 | 0);
          break $l$block_5;
        } else {
          var tmp_10;
          var tmp_11;
          if (a instanceof APLChar) {
            tmp_11 = b instanceof APLNumber;
          } else {
            tmp_11 = false;
          }
          if (tmp_11) {
            tmp_10 = Companion_getInstance_47().d3o(numberToLong(a.m2z_1).x2(b.w2s(this.t2g_1)), this.t2g_1);
          } else {
            var tmp_12;
            if (a instanceof APLNumber) {
              tmp_12 = b instanceof APLNilValue;
            } else {
              tmp_12 = false;
            }
            if (tmp_12) {
              tmp_10 = a;
            } else {
              NumericRelationErrors_instance.l2z(a, b, this.t2g_1);
            }
          }
          tmp$ret$2 = tmp_10;
          break $l$block_5;
        }
      }
    }
    return tmp$ret$2;
  };
  protoOf(SubAPLFunctionImpl).e2x = function (a) {
    // Inline function 'com.dhsdevelopments.mpbignum.subExactWrapped' call
    var a_0 = new Long(0, 0);
    var r = a_0.x2(a);
    if (a_0.k3(a).i3(a_0.k3(r)).a1(new Long(0, 0)) < 0) {
      throw new LongExpressionOverflow(minus(of_0(Companion_instance, a_0), of_0(Companion_instance, a)));
    }
    return r;
  };
  protoOf(SubAPLFunctionImpl).p2x = function (a) {
    return -a;
  };
  protoOf(SubAPLFunctionImpl).f2x = function (a, b) {
    // Inline function 'com.dhsdevelopments.mpbignum.subExactWrapped' call
    var r = a.x2(b);
    if (a.k3(b).i3(a.k3(r)).a1(new Long(0, 0)) < 0) {
      throw new LongExpressionOverflow(minus(of_0(Companion_instance, a), of_0(Companion_instance, b)));
    }
    return r;
  };
  protoOf(SubAPLFunctionImpl).s2x = function (a, b) {
    return a - b;
  };
  protoOf(SubAPLFunctionImpl).q2h = function (context, a, axis) {
    return this.w2g(context, a, axis);
  };
  protoOf(SubAPLFunctionImpl).v2h = function (baseFn, context, a, axis) {
    return this.k2m(this, baseFn, context, a, axis);
  };
  protoOf(SubAPLFunctionImpl).r2h = function (context, a, b, axis) {
    return this.a2h(context, a, b, axis);
  };
  protoOf(SubAPLFunctionImpl).s2h = function (context, a, b, axis) {
    return _get_addFn__k0ka54(this).a2h(context, a, b, axis);
  };
  protoOf(SubAPLFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    return this.l2m(this, baseFn, context, a, b, axis);
  };
  protoOf(SubAPLFunctionImpl).j2h = function () {
    return get_APLLONG_0();
  };
  protoOf(SubAPLFunctionImpl).k2h = function () {
    return new BitwiseXorFunction();
  };
  protoOf(SubAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(31);
  };
  protoOf(SubAPLFunctionImpl).z2h = function () {
    return 'negate';
  };
  protoOf(SubAPLFunctionImpl).a2i = function () {
    return 'subtract';
  };
  function SubAPLFunction() {
  }
  protoOf(SubAPLFunction).i2i = function (instantiation) {
    return new SubAPLFunctionImpl(instantiation);
  };
  function _get_divFn__iicy88($this) {
    var tmp0 = $this.t3o_1;
    // Inline function 'kotlin.getValue' call
    divFn$factory();
    return tmp0.x1();
  }
  function MulAPLFunction$MulAPLFunctionImpl$divFn$delegate$lambda($pos) {
    return function () {
      return (new DivAPLFunction()).i2i($pos);
    };
  }
  function MulAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
    var tmp = this;
    tmp.t3o_1 = lazy(MulAPLFunction$MulAPLFunctionImpl$divFn$delegate$lambda(pos));
  }
  protoOf(MulAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(toLong_0(get_sign(x)));
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.sign' call
        var this_0 = a.x2s(pos);
        var tmp$ret$1 = sign(this_0);
        tmp = makeAPLNumber_0(numberToLong(tmp$ret$1));
      } else {
        if (a instanceof APLComplex) {
          var x_0 = a.s2z();
          tmp = makeAPLNumber_1(x_0.xj());
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_1 = a.z2q_1;
              tmp = makeAPLNumber_4(signum(x_1));
            } else {
              if (a instanceof APLRational) {
                var x_2 = a.d31_1;
                tmp = makeAPLNumber_4(x_2.xj());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(MulAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$2;
    $l$block_4: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            // Inline function 'com.dhsdevelopments.mpbignum.mulExactWrapped' call
            if (!tmp3.j3(y).i3(new Long(-2147483648, -1)).equals(new Long(0, 0))) {
              if (tmp3.a1(new Long(0, 0)) > 0) {
                if (y.a1(new Long(0, 0)) > 0) {
                  if (tmp3.a1((new Long(-1, 2147483647)).z2(y)) > 0) {
                    throw new LongExpressionOverflow(times(of_0(Companion_instance, tmp3), of_0(Companion_instance, y)));
                  }
                } else {
                  if (y.a1((new Long(0, -2147483648)).z2(tmp3)) < 0) {
                    throw new LongExpressionOverflow(times(of_0(Companion_instance, tmp3), of_0(Companion_instance, y)));
                  }
                }
              } else {
                if (y.a1(new Long(0, 0)) > 0) {
                  if (tmp3.a1((new Long(0, -2147483648)).z2(y)) < 0) {
                    throw new LongExpressionOverflow(times(of_0(Companion_instance, tmp3), of_0(Companion_instance, y)));
                  }
                } else {
                  if (!tmp3.equals(new Long(0, 0)) && y.a1((new Long(-1, 2147483647)).z2(tmp3)) < 0) {
                    throw new LongExpressionOverflow(times(of_0(Companion_instance, tmp3), of_0(Companion_instance, y)));
                  }
                }
              }
            }
            var tmp$ret$0 = tmp3.y2(y);
            tmp_1 = makeAPLNumber_0(tmp$ret$0);
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$2 = tmp_1;
          break $l$block_4;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$2 = makeAPLNumber_1(tmp5.u3o(y_0));
            break $l$block_4;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$2 = makeAPLNumber(tmp7 * y_1);
              break $l$block_4;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$2 = makeAPLNumber_3(tmp9.sj(y_2));
                break $l$block_4;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$2 = makeAPLNumber_2(times(tmp11, y_3));
                  break $l$block_4;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          var tmp_8;
          var tmp_9;
          if (a instanceof APLNumber) {
            tmp_9 = b instanceof APLNilValue;
          } else {
            tmp_9 = false;
          }
          if (tmp_9) {
            tmp_8 = a;
          } else {
            var tmp_10;
            if (a instanceof APLNilValue) {
              tmp_10 = b instanceof APLNumber;
            } else {
              tmp_10 = false;
            }
            if (tmp_10) {
              tmp_8 = b;
            } else {
              var tmp_11;
              if (a instanceof APLNilValue) {
                tmp_11 = b instanceof APLNilValue;
              } else {
                tmp_11 = false;
              }
              if (tmp_11) {
                tmp_8 = get_APLLONG_1();
              } else {
                NumericRelationErrors_instance.l2z(a, b, this.t2g_1);
              }
            }
          }
          tmp$ret$2 = tmp_8;
          break $l$block_4;
        }
      }
    }
    return tmp$ret$2;
  };
  protoOf(MulAPLFunctionImpl).j2h = function () {
    return get_APLLONG_1();
  };
  protoOf(MulAPLFunctionImpl).k2h = function () {
    return new BitwiseAndFunction();
  };
  protoOf(MulAPLFunctionImpl).e2x = function (a) {
    return toLong_0(get_sign(a));
  };
  protoOf(MulAPLFunctionImpl).f2x = function (a, b) {
    // Inline function 'com.dhsdevelopments.mpbignum.mulExactWrapped' call
    if (!a.j3(b).i3(new Long(-2147483648, -1)).equals(new Long(0, 0))) {
      if (a.a1(new Long(0, 0)) > 0) {
        if (b.a1(new Long(0, 0)) > 0) {
          if (a.a1((new Long(-1, 2147483647)).z2(b)) > 0) {
            throw new LongExpressionOverflow(times(of_0(Companion_instance, a), of_0(Companion_instance, b)));
          }
        } else {
          if (b.a1((new Long(0, -2147483648)).z2(a)) < 0) {
            throw new LongExpressionOverflow(times(of_0(Companion_instance, a), of_0(Companion_instance, b)));
          }
        }
      } else {
        if (b.a1(new Long(0, 0)) > 0) {
          if (a.a1((new Long(0, -2147483648)).z2(b)) < 0) {
            throw new LongExpressionOverflow(times(of_0(Companion_instance, a), of_0(Companion_instance, b)));
          }
        } else {
          if (!a.equals(new Long(0, 0)) && b.a1((new Long(-1, 2147483647)).z2(a)) < 0) {
            throw new LongExpressionOverflow(times(of_0(Companion_instance, a), of_0(Companion_instance, b)));
          }
        }
      }
    }
    return a.y2(b);
  };
  protoOf(MulAPLFunctionImpl).s2x = function (a, b) {
    return a * b;
  };
  protoOf(MulAPLFunctionImpl).r2h = function (context, a, b, axis) {
    return _get_divFn__iicy88(this).a2h(context, b, a, axis);
  };
  protoOf(MulAPLFunctionImpl).s2h = function (context, a, b, axis) {
    return _get_divFn__iicy88(this).a2h(context, a, b, axis);
  };
  protoOf(MulAPLFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    return this.l2m(this, baseFn, context, a, b, axis);
  };
  protoOf(MulAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(29);
  };
  protoOf(MulAPLFunctionImpl).z2h = function () {
    return 'magnitude';
  };
  protoOf(MulAPLFunctionImpl).a2i = function () {
    return 'multiply';
  };
  function MulAPLFunction() {
  }
  protoOf(MulAPLFunction).i2i = function (instantiation) {
    return new MulAPLFunctionImpl(instantiation);
  };
  function _get_mulFn__e2j7ff($this) {
    var tmp0 = $this.b3p_1;
    // Inline function 'kotlin.getValue' call
    mulFn$factory();
    return tmp0.x1();
  }
  function Companion_9() {
    Companion_instance_11 = this;
    this.c3p_1 = makeAPLNumber_2(of(Companion_instance, '9223372036854775808'));
  }
  var Companion_instance_11;
  function Companion_getInstance_11() {
    if (Companion_instance_11 == null)
      new Companion_9();
    return Companion_instance_11;
  }
  function DivAPLFunction$DivAPLFunctionImpl$mulFn$delegate$lambda($pos) {
    return function () {
      return (new MulAPLFunction()).i2i($pos);
    };
  }
  function DivAPLFunctionImpl(pos) {
    Companion_getInstance_11();
    MathCombineAPLFunction.call(this, pos);
    var tmp = this;
    tmp.b3p_1 = lazy(DivAPLFunction$DivAPLFunctionImpl$mulFn$delegate$lambda(pos));
  }
  protoOf(DivAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = x.equals(new Long(0, 0)) ? get_APLLONG_0() : makeAPLNumber_3(make(Companion_getInstance(), BigIntConstants_getInstance().ij_1, toBigInt(x)));
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = makeAPLNumber(1.0 / x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(x_1.d3p());
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = equals(x_2, BigIntConstants_getInstance().hj_1) ? get_APLLONG_0() : makeAPLNumber_3(make(Companion_getInstance(), BigIntConstants_getInstance().ij_1, x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = equals(x_3, Companion_getInstance().ej_1) ? get_APLLONG_0() : makeAPLNumber_3(make(Companion_getInstance(), x_3.pj(), x_3.oj()));
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(DivAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_4: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = y.equals(new Long(0, 0)) ? get_APLLONG_0() : tmp3.equals(new Long(0, -2147483648)) && y.equals(new Long(-1, -1)) ? Companion_getInstance_11().c3p_1 : tmp3.a3(y).equals(new Long(0, 0)) ? makeAPLNumber_0(tmp3.z2(y)) : makeAPLNumber_3(make(Companion_getInstance(), toBigInt(tmp3), toBigInt(y)));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_4;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = tmp5.equals(Companion_getInstance_30().f3p_1) && y_0.equals(Companion_getInstance_30().f3p_1) ? get_APLDOUBLE_0() : makeAPLNumber_1(tmp5.e3p(y_0));
            break $l$block_4;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = tmp7 === 0.0 && y_1 === 0.0 ? get_APLDOUBLE_0() : makeAPLNumber(tmp7 / y_1);
              break $l$block_4;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = y_2.xj() === 0 ? get_APLLONG_0() : makeAPLNumber_3(tmp9.tj(y_2));
                break $l$block_4;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = signum(y_3) === 0 ? get_APLLONG_0() : signum(rem(tmp11, y_3)) === 0 ? makeAPLNumber_2(div(tmp11, y_3)) : makeAPLNumber_3(make(Companion_getInstance(), tmp11, BigIntConstants_getInstance().ij_1).tj(make(Companion_getInstance(), y_3, BigIntConstants_getInstance().ij_1)));
                  break $l$block_4;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          var tmp_8;
          var tmp_9;
          if (a instanceof APLNumber) {
            tmp_9 = b instanceof APLNilValue;
          } else {
            tmp_9 = false;
          }
          if (tmp_9) {
            tmp_8 = a;
          } else {
            NumericRelationErrors_instance.l2z(a, b, this.t2g_1);
          }
          tmp$ret$1 = tmp_8;
          break $l$block_4;
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(DivAPLFunctionImpl).p2x = function (a) {
    return 1.0 / a;
  };
  protoOf(DivAPLFunctionImpl).s2x = function (a, b) {
    return a === 0.0 && b === 0.0 ? 0.0 : a / b;
  };
  protoOf(DivAPLFunctionImpl).q2h = function (context, a, axis) {
    return this.w2g(context, a, axis);
  };
  protoOf(DivAPLFunctionImpl).v2h = function (baseFn, context, a, axis) {
    return this.k2m(this, baseFn, context, a, axis);
  };
  protoOf(DivAPLFunctionImpl).r2h = function (context, a, b, axis) {
    return this.a2h(context, a, b, axis);
  };
  protoOf(DivAPLFunctionImpl).s2h = function (context, a, b, axis) {
    return _get_mulFn__e2j7ff(this).a2h(context, b, a, axis);
  };
  protoOf(DivAPLFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    return this.l2m(this, baseFn, context, a, b, axis);
  };
  protoOf(DivAPLFunctionImpl).j2h = function () {
    return get_APLLONG_1();
  };
  protoOf(DivAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(26);
  };
  protoOf(DivAPLFunctionImpl).z2h = function () {
    return 'reciprocal';
  };
  protoOf(DivAPLFunctionImpl).a2i = function () {
    return 'divide';
  };
  function DivAPLFunction() {
  }
  protoOf(DivAPLFunction).i2i = function (instantiation) {
    return new DivAPLFunctionImpl(instantiation);
  };
  function opLong_6($this, y, x) {
    return y.a1(new Long(0, 0)) > 0 ? makeAPLNumberWithReduction(pow(toBigInt(x), y)) : y.a1(new Long(0, 0)) < 0 ? makeAPLNumber_3(toRational(x).wj(y)) : get_APLLONG_1();
  }
  function opDouble($this, x, y) {
    var tmp;
    var tmp_0;
    if (x < 0) {
      // Inline function 'kotlin.math.truncate' call
      tmp_0 = !(trunc(y) === y);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = makeAPLNumber_1(toComplex(x).q3p(toComplex(y)));
    } else {
      // Inline function 'kotlin.math.pow' call
      var tmp$ret$1 = Math.pow(x, y);
      tmp = makeAPLNumber(tmp$ret$1);
    }
    return tmp;
  }
  function opBigint($this, y, x) {
    var tmp;
    if (compareTo(y, 0) > 0) {
      checkBigIntInRangeLong(y, $this.t2g_1);
      tmp = makeAPLNumber_2(pow(x, toLong(y)));
    } else if (compareTo(y, 0) < 0) {
      var tmp_0;
      if (compareTo(x, 0) > 0) {
        checkBigIntInRangeLong(y, $this.t2g_1);
        tmp_0 = makeAPLNumber_3(make(Companion_getInstance(), x, BigIntConstants_getInstance().ij_1).wj(toLong(y)));
      } else {
        var tmp0 = toDouble_0(x);
        // Inline function 'kotlin.math.pow' call
        var x_0 = toDouble_0(y);
        var tmp$ret$0 = Math.pow(tmp0, x_0);
        tmp_0 = makeAPLNumber(tmp$ret$0);
      }
      tmp = tmp_0;
    } else {
      tmp = get_APLLONG_1();
    }
    return tmp;
  }
  function opRational($this, y, x) {
    var tmp;
    if (!equals(y.pj(), BigIntConstants_getInstance().ij_1)) {
      var tmp_0;
      if (compareTo_0(x, new Long(0, 0)) < 0) {
        tmp_0 = makeAPLNumber_1(toComplex(x.l3()).q3p(toComplex(y.l3())));
      } else {
        var tmp0 = x.l3();
        // Inline function 'kotlin.math.pow' call
        var x_0 = y.l3();
        var tmp$ret$0 = Math.pow(tmp0, x_0);
        tmp_0 = makeAPLNumber(tmp$ret$0);
      }
      tmp = tmp_0;
    } else {
      var v0 = y.oj();
      checkBigIntInRangeLong(v0, $this.t2g_1);
      var v1 = y.bk();
      tmp = makeAPLNumber_3(x.wj(v1));
    }
    return tmp;
  }
  function opComplex($this, x, y) {
    return makeAPLNumber_1(x.q3p(y));
  }
  function _get_logFn__emysbf($this) {
    var tmp0 = $this.x3p_1;
    // Inline function 'kotlin.getValue' call
    logFn$factory();
    return tmp0.x1();
  }
  function _get_divFn__iicy88_0($this) {
    var tmp0 = $this.y3p_1;
    // Inline function 'kotlin.getValue' call
    divFn$factory_0();
    return tmp0.x1();
  }
  function PowerAPLFunction$PowerAPLFunctionImpl$logFn$delegate$lambda($pos) {
    return function () {
      return (new LogAPLFunction()).i2i($pos);
    };
  }
  function PowerAPLFunction$PowerAPLFunctionImpl$divFn$delegate$lambda($pos) {
    return function () {
      return (new DivAPLFunction()).i2i($pos);
    };
  }
  function PowerAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
    var tmp = this;
    tmp.x3p_1 = lazy(PowerAPLFunction$PowerAPLFunctionImpl$logFn$delegate$lambda(pos));
    var tmp_0 = this;
    tmp_0.y3p_1 = lazy(PowerAPLFunction$PowerAPLFunctionImpl$divFn$delegate$lambda(pos));
  }
  protoOf(PowerAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.exp' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = Math.exp(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.exp' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = Math.exp(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(Companion_getInstance_30().k3p_1.q3p(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              var tmp0 = 2.718281828459045;
              // Inline function 'kotlin.math.pow' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = Math.pow(tmp0, x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                var x_4 = a.d31_1;
                var tmp0_0 = 2.718281828459045;
                // Inline function 'kotlin.math.pow' call
                var x_5 = x_4.l3();
                var tmp$ret$7 = Math.pow(tmp0_0, x_5);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(PowerAPLFunctionImpl).a3q = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_3: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = opLong_6(this, y, tmp3);
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_3;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = opComplex(this, tmp5, y_0);
            break $l$block_3;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = opDouble(this, tmp7, y_1);
              break $l$block_3;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = opRational(this, y_2, tmp9);
                break $l$block_3;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = opBigint(this, y_3, tmp11);
                  break $l$block_3;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(PowerAPLFunctionImpl).q2h = function (context, a, axis) {
    return _get_logFn__emysbf(this).w2g(context, a, axis);
  };
  protoOf(PowerAPLFunctionImpl).v2h = function (baseFn, context, a, axis) {
    return this.k2m(this, baseFn, context, a, axis);
  };
  protoOf(PowerAPLFunctionImpl).s2h = function (context, a, b, axis) {
    return this.a2h(context, a, _get_divFn__iicy88_0(this).w2g(context, b, null), axis);
  };
  protoOf(PowerAPLFunctionImpl).r2h = function (context, a, b, axis) {
    return _get_logFn__emysbf(this).a2h(context, a, b, axis);
  };
  protoOf(PowerAPLFunctionImpl).j2h = function () {
    return get_APLLONG_1();
  };
  protoOf(PowerAPLFunctionImpl).z2h = function () {
    return 'exp';
  };
  protoOf(PowerAPLFunctionImpl).a2i = function () {
    return 'pow';
  };
  function PowerAPLFunction() {
  }
  protoOf(PowerAPLFunction).i2i = function (instantiation) {
    return new PowerAPLFunctionImpl(instantiation);
  };
  function _get_powerFn__lo6w3g($this) {
    var tmp0 = $this.n3q_1;
    // Inline function 'kotlin.getValue' call
    powerFn$factory();
    return tmp0.x1();
  }
  function LogAPLFunction$LogAPLFunctionImpl$powerFn$delegate$lambda($pos) {
    return function () {
      return (new PowerAPLFunction()).i2i($pos);
    };
  }
  function LogAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
    var tmp = this;
    tmp.n3q_1 = lazy(LogAPLFunction$LogAPLFunctionImpl$powerFn$delegate$lambda(pos));
  }
  protoOf(LogAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      var tmp_0;
      if (x.a1(new Long(0, 0)) < 0) {
        tmp_0 = makeAPLNumber_1(toComplex(x.l3()).o3q());
      } else {
        // Inline function 'kotlin.math.ln' call
        var x_0 = x.l3();
        var tmp$ret$0 = Math.log(x_0);
        tmp_0 = makeAPLNumber(tmp$ret$0);
      }
      tmp = tmp_0;
    } else {
      if (a instanceof APLDouble) {
        var x_1 = a.x2s(pos);
        var tmp_1;
        if (x_1 < 0) {
          tmp_1 = makeAPLNumber_1(toComplex(x_1).o3q());
        } else {
          // Inline function 'kotlin.math.ln' call
          var tmp$ret$2 = Math.log(x_1);
          tmp_1 = makeAPLNumber(tmp$ret$2);
        }
        tmp = tmp_1;
      } else {
        if (a instanceof APLComplex) {
          var x_2 = a.s2z();
          tmp = makeAPLNumber_1(x_2.o3q());
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_3 = a.z2q_1;
              var tmp_2;
              if (compareTo(x_3, 0) < 0) {
                tmp_2 = makeAPLNumber_1(toComplex(toDouble_0(x_3)).o3q());
              } else {
                // Inline function 'kotlin.math.ln' call
                var x_4 = toDouble_0(x_3);
                var tmp$ret$5 = Math.log(x_4);
                tmp_2 = makeAPLNumber(tmp$ret$5);
              }
              tmp = tmp_2;
            } else {
              if (a instanceof APLRational) {
                var x_5 = a.d31_1;
                var tmp_3;
                if (compareTo_0(x_5, new Long(0, 0)) < 0) {
                  tmp_3 = makeAPLNumber_1(toComplex(x_5.l3()).o3q());
                } else {
                  // Inline function 'kotlin.math.ln' call
                  var x_6 = x_5.l3();
                  var tmp$ret$7 = Math.log(x_6);
                  tmp_3 = makeAPLNumber(tmp$ret$7);
                }
                tmp = tmp_3;
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(LogAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_3: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            var tmp_2;
            if (tmp3.a1(new Long(0, 0)) < 0 || y.a1(new Long(0, 0)) < 0) {
              tmp_2 = makeAPLNumber_1(toComplex(y.l3()).p3q(tmp3.l3()));
            } else {
              tmp_2 = makeAPLNumber(log(y.l3(), tmp3.l3()));
            }
            tmp_1 = tmp_2;
          } catch ($p) {
            var tmp_3;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_3 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_3;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_3;
        } else {
          var tmp_4;
          if (a instanceof APLComplex) {
            tmp_4 = true;
          } else {
            tmp_4 = b instanceof APLComplex;
          }
          if (tmp_4) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = makeAPLNumber_1(y_0.q3q(tmp5));
            break $l$block_3;
          } else {
            var tmp_5;
            if (a instanceof APLDouble) {
              tmp_5 = true;
            } else {
              tmp_5 = b instanceof APLDouble;
            }
            if (tmp_5) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = tmp7 < 0 || y_1 < 0 ? makeAPLNumber_1(toComplex(y_1).q3q(toComplex(tmp7))) : makeAPLNumber(log(y_1, tmp7));
              break $l$block_3;
            } else {
              var tmp_6;
              if (a instanceof APLRational) {
                tmp_6 = true;
              } else {
                tmp_6 = b instanceof APLRational;
              }
              if (tmp_6) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                var tmp_7;
                if (compareTo_0(tmp9, new Long(0, 0)) < 0 || compareTo_0(y_2, new Long(0, 0)) < 0) {
                  tmp_7 = makeAPLNumber_1(toComplex(y_2.l3()).p3q(tmp9.l3()));
                } else {
                  tmp_7 = makeAPLNumber(log(y_2.l3(), tmp9.l3()));
                }
                tmp$ret$1 = tmp_7;
                break $l$block_3;
              } else {
                var tmp_8;
                if (a instanceof APLBigInt) {
                  tmp_8 = true;
                } else {
                  tmp_8 = b instanceof APLBigInt;
                }
                if (tmp_8) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  var tmp_9;
                  if (compareTo(tmp11, 0) < 0 || compareTo(y_3, 0) < 0) {
                    tmp_9 = makeAPLNumber_1(toComplex(toDouble_0(y_3)).p3q(toDouble_0(tmp11)));
                  } else {
                    tmp_9 = makeAPLNumber(log(toDouble_0(y_3), toDouble_0(tmp11)));
                  }
                  tmp$ret$1 = tmp_9;
                  break $l$block_3;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_10;
        if (a instanceof APLChar) {
          tmp_10 = b instanceof APLChar;
        } else {
          tmp_10 = false;
        }
        if (tmp_10) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(LogAPLFunctionImpl).q2h = function (context, a, axis) {
    return _get_powerFn__lo6w3g(this).w2g(context, a, axis);
  };
  protoOf(LogAPLFunctionImpl).v2h = function (baseFn, context, a, axis) {
    return this.k2m(this, baseFn, context, a, axis);
  };
  protoOf(LogAPLFunctionImpl).r2h = function (context, a, b, axis) {
    return _get_powerFn__lo6w3g(this).a2h(context, a, b, axis);
  };
  protoOf(LogAPLFunctionImpl).z2h = function () {
    return 'natural log';
  };
  protoOf(LogAPLFunctionImpl).a2i = function () {
    return 'log';
  };
  function LogAPLFunction() {
  }
  protoOf(LogAPLFunction).i2i = function (instantiation) {
    return new LogAPLFunctionImpl(instantiation);
  };
  function opLong_7($this, x, y) {
    var tmp;
    if (x.equals(new Long(0, 0)) && (y.equals(new Long(0, 0)) || y.equals(new Long(1, 0)))) {
      tmp = new Long(0, 0);
    } else if ((x.equals(new Long(0, 0)) || x.equals(new Long(1, 0))) && y.equals(new Long(0, 0))) {
      tmp = new Long(0, 0);
    } else if (x.equals(new Long(1, 0)) && y.equals(new Long(1, 0))) {
      tmp = new Long(1, 0);
    } else {
      throwIllegalArgument($this);
    }
    return tmp;
  }
  function opDouble_0($this, x, y) {
    var tmp;
    if (x === 0.0 && (y === 0.0 || y === 1.0)) {
      tmp = 0.0;
    } else if ((x === 0.0 || x === 1.0) && y === 0.0) {
      tmp = 0.0;
    } else if (x === 1.0 && y === 1.0) {
      tmp = 1.0;
    } else {
      throwIllegalArgument($this);
    }
    return tmp;
  }
  function opBigint_0($this, x, y) {
    var tmp;
    if (signum(x) === 0 && (signum(y) === 0 || equals(y, BigIntConstants_getInstance().ij_1))) {
      tmp = get_APLLONG_0();
    } else if ((signum(x) === 0 || equals(x, BigIntConstants_getInstance().ij_1)) && signum(y) === 0) {
      tmp = get_APLLONG_0();
    } else if (equals(x, BigIntConstants_getInstance().ij_1) && equals(x, BigIntConstants_getInstance().ij_1)) {
      tmp = get_APLLONG_1();
    } else {
      throwIllegalArgument($this);
    }
    return tmp;
  }
  function opRational_0($this, x, y) {
    var tmp;
    if (x.xj() === 0 && (y.xj() === 0 || equals(y, Companion_getInstance().fj_1))) {
      tmp = get_APLLONG_0();
    } else if ((x.xj() === 0 || equals(y, Companion_getInstance().fj_1)) && y.xj() === 0) {
      tmp = get_APLLONG_0();
    } else if (equals(x, Companion_getInstance().fj_1) && equals(y, Companion_getInstance().fj_1)) {
      tmp = get_APLLONG_1();
    } else {
      throwIllegalArgument($this);
    }
    return tmp;
  }
  function throwIllegalArgument($this) {
    throwAPLException(new APLIllegalArgumentException('Arguments to and must be 0 or 1', $this.t2g_1));
  }
  function AndAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(AndAPLFunctionImpl).w2g = function (context, a, axis) {
    return sortKapArray(a, axis, false, this.t2g_1);
  };
  protoOf(AndAPLFunctionImpl).a3q = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_3: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = makeAPLNumber_0(opLong_7(this, tmp3, y));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_3;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            var tmp_4;
            if (tmp5.b3o_1 === 0.0 && y_0.b3o_1 === 0.0) {
              tmp_4 = makeAPLNumber(opDouble_0(this, tmp5.a3o_1, y_0.a3o_1));
            } else {
              throwIllegalArgument(this);
            }
            tmp$ret$1 = tmp_4;
            break $l$block_3;
          } else {
            var tmp_5;
            if (a instanceof APLDouble) {
              tmp_5 = true;
            } else {
              tmp_5 = b instanceof APLDouble;
            }
            if (tmp_5) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              var tmp_6;
              if (tmp7 === 0.0 && (y_1 === 0.0 || y_1 === 1.0)) {
                tmp_6 = get_APLDOUBLE_0();
              } else if ((tmp7 === 0.0 || tmp7 === 1.0) && y_1 === 0.0) {
                tmp_6 = get_APLDOUBLE_0();
              } else if (tmp7 === 1.0 && y_1 === 1.0) {
                tmp_6 = get_APLDOUBLE_1();
              } else {
                throwIllegalArgument(this);
              }
              tmp$ret$1 = tmp_6;
              break $l$block_3;
            } else {
              var tmp_7;
              if (a instanceof APLRational) {
                tmp_7 = true;
              } else {
                tmp_7 = b instanceof APLRational;
              }
              if (tmp_7) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = opRational_0(this, tmp9, y_2);
                break $l$block_3;
              } else {
                var tmp_8;
                if (a instanceof APLBigInt) {
                  tmp_8 = true;
                } else {
                  tmp_8 = b instanceof APLBigInt;
                }
                if (tmp_8) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = opBigint_0(this, tmp11, y_3);
                  break $l$block_3;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_9;
        if (a instanceof APLChar) {
          tmp_9 = b instanceof APLChar;
        } else {
          tmp_9 = false;
        }
        if (tmp_9) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(AndAPLFunctionImpl).f2x = function (a, b) {
    return opLong_7(this, a, b);
  };
  protoOf(AndAPLFunctionImpl).s2x = function (a, b) {
    return opDouble_0(this, a, b);
  };
  protoOf(AndAPLFunctionImpl).k2h = function () {
    return new BitwiseAndFunction();
  };
  protoOf(AndAPLFunctionImpl).j2h = function () {
    return get_APLLONG_1();
  };
  protoOf(AndAPLFunctionImpl).d2i = function (context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis) {
    var tmp;
    if (_ArrayMemberType___get_isBoolean__impl__u1snhv(arg.f2n())) {
      var res = get_APLLONG_1();
      var currIndex = offset;
      var inductionVariable = 0;
      if (inductionVariable < sizeAlongAxis)
        $l$loop: do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = arg.i2n(currIndex);
          if (v.equals(new Long(0, 0))) {
            res = get_APLLONG_0();
            break $l$loop;
          } else if (!v.equals(new Long(1, 0))) {
            // Inline function 'kotlin.error' call
            var message = 'Unexpected value in array: ' + v.toString() + ' at position: ' + currIndex;
            throw IllegalStateException_init_$Create$(toString(message));
          }
          currIndex = currIndex + stepLength | 0;
        }
         while (inductionVariable < sizeAlongAxis);
      tmp = res;
    } else {
      tmp = protoOf(MathNumericCombineAPLFunction).d2i.call(this, context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis);
    }
    return tmp;
  };
  protoOf(AndAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(12);
  };
  protoOf(AndAPLFunctionImpl).z2h = function () {
    return 'sort up';
  };
  protoOf(AndAPLFunctionImpl).a2i = function () {
    return 'and';
  };
  function AndAPLFunction() {
  }
  protoOf(AndAPLFunction).i2i = function (instantiation) {
    return new AndAPLFunctionImpl(instantiation);
  };
  function opLong_8($this, x, y) {
    var tmp;
    if (x.equals(new Long(0, 0)) && y.equals(new Long(0, 0))) {
      tmp = new Long(0, 0);
    } else if ((x.equals(new Long(0, 0)) || x.equals(new Long(1, 0))) && y.equals(new Long(1, 0))) {
      tmp = new Long(1, 0);
    } else if (x.equals(new Long(1, 0)) && (y.equals(new Long(0, 0)) || y.equals(new Long(1, 0)))) {
      tmp = new Long(1, 0);
    } else {
      throwIllegalArgument_0($this);
    }
    return tmp;
  }
  function opDouble_1($this, x, y) {
    var tmp;
    if (x === 0.0 && y === 0.0) {
      tmp = 0.0;
    } else if ((x === 0.0 || x === 1.0) && y === 1.0) {
      tmp = 1.0;
    } else if (x === 1.0 && (y === 0.0 || y === 1.0)) {
      tmp = 1.0;
    } else {
      throwIllegalArgument_0($this);
    }
    return tmp;
  }
  function opBigInt_0($this, x, y) {
    var xSign = signum(x);
    var ySign = signum(y);
    var tmp;
    if (xSign === 0 && ySign === 0) {
      tmp = get_APLLONG_0();
    } else if ((xSign === 0 || equals(y, BigIntConstants_getInstance().ij_1)) && equals(y, BigIntConstants_getInstance().ij_1)) {
      tmp = get_APLLONG_1();
    } else if (equals(x, BigIntConstants_getInstance().ij_1) && (ySign === 0 || equals(y, BigIntConstants_getInstance().ij_1))) {
      tmp = get_APLLONG_1();
    } else {
      throwIllegalArgument_0($this);
    }
    return tmp;
  }
  function opRational_1($this, x, y) {
    var xSign = x.xj();
    var ySign = y.xj();
    var tmp;
    if (xSign === 0 && ySign === 0) {
      tmp = get_APLLONG_0();
    } else if ((xSign === 0 || equals(x, Companion_getInstance().fj_1)) && equals(y, Companion_getInstance().fj_1)) {
      tmp = get_APLLONG_1();
    } else if (equals(x, Companion_getInstance().fj_1) && (ySign === 0 || equals(y, Companion_getInstance().fj_1))) {
      tmp = get_APLLONG_1();
    } else {
      throwIllegalArgument_0($this);
    }
    return tmp;
  }
  function throwIllegalArgument_0($this) {
    throwAPLException(new APLIllegalArgumentException('Arguments to or must be 0 or 1', $this.t2g_1));
  }
  function OrAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(OrAPLFunctionImpl).w2g = function (context, a, axis) {
    return sortKapArray(a, axis, true, this.t2g_1);
  };
  protoOf(OrAPLFunctionImpl).a3q = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_3: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = makeAPLNumber_0(opLong_8(this, tmp3, y));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_3;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            var tmp_4;
            if (tmp5.b3o_1 === 0.0 && y_0.b3o_1 === 0.0) {
              tmp_4 = makeAPLNumber(opDouble_1(this, tmp5.a3o_1, y_0.a3o_1));
            } else {
              throwIllegalArgument_0(this);
            }
            tmp$ret$1 = tmp_4;
            break $l$block_3;
          } else {
            var tmp_5;
            if (a instanceof APLDouble) {
              tmp_5 = true;
            } else {
              tmp_5 = b instanceof APLDouble;
            }
            if (tmp_5) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              var tmp_6;
              if (tmp7 === 0.0 && y_1 === 0.0) {
                tmp_6 = get_APLDOUBLE_0();
              } else if ((tmp7 === 0.0 || tmp7 === 1.0) && y_1 === 1.0) {
                tmp_6 = get_APLDOUBLE_1();
              } else if (tmp7 === 1.0 && (y_1 === 0.0 || y_1 === 1.0)) {
                tmp_6 = get_APLDOUBLE_1();
              } else {
                throwIllegalArgument_0(this);
              }
              tmp$ret$1 = tmp_6;
              break $l$block_3;
            } else {
              var tmp_7;
              if (a instanceof APLRational) {
                tmp_7 = true;
              } else {
                tmp_7 = b instanceof APLRational;
              }
              if (tmp_7) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = opRational_1(this, tmp9, y_2);
                break $l$block_3;
              } else {
                var tmp_8;
                if (a instanceof APLBigInt) {
                  tmp_8 = true;
                } else {
                  tmp_8 = b instanceof APLBigInt;
                }
                if (tmp_8) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = opBigInt_0(this, tmp11, y_3);
                  break $l$block_3;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_9;
        if (a instanceof APLChar) {
          tmp_9 = b instanceof APLChar;
        } else {
          tmp_9 = false;
        }
        if (tmp_9) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(OrAPLFunctionImpl).f2x = function (a, b) {
    return opLong_8(this, a, b);
  };
  protoOf(OrAPLFunctionImpl).s2x = function (a, b) {
    return opDouble_1(this, a, b);
  };
  protoOf(OrAPLFunctionImpl).j2h = function () {
    return get_APLLONG_0();
  };
  protoOf(OrAPLFunctionImpl).k2h = function () {
    return new BitwiseOrFunction();
  };
  protoOf(OrAPLFunctionImpl).d2i = function (context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis) {
    var tmp;
    if (_ArrayMemberType___get_isBoolean__impl__u1snhv(arg.f2n())) {
      var res = get_APLLONG_0();
      var currIndex = offset;
      var inductionVariable = 0;
      if (inductionVariable < sizeAlongAxis)
        $l$loop: do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = arg.i2n(currIndex);
          if (v.equals(new Long(1, 0))) {
            res = get_APLLONG_1();
            break $l$loop;
          } else if (!v.equals(new Long(0, 0))) {
            // Inline function 'kotlin.error' call
            var message = 'Unexpected value in array: ' + v.toString() + ' at position: ' + currIndex;
            throw IllegalStateException_init_$Create$(toString(message));
          }
          currIndex = currIndex + stepLength | 0;
        }
         while (inductionVariable < sizeAlongAxis);
      tmp = res;
    } else {
      tmp = protoOf(MathNumericCombineAPLFunction).d2i.call(this, context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis);
    }
    return tmp;
  };
  protoOf(OrAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(12);
  };
  protoOf(OrAPLFunctionImpl).z2h = function () {
    return 'sort down';
  };
  protoOf(OrAPLFunctionImpl).a2i = function () {
    return 'or';
  };
  function OrAPLFunction() {
  }
  protoOf(OrAPLFunction).i2i = function (instantiation) {
    return new OrAPLFunctionImpl(instantiation);
  };
  function MinAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos, VOID, Companion_getInstance_45().x2j_1);
  }
  protoOf(MinAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.MinAPLFunctionImpl.opLong1Arg' call
    var tmp;
    if (a instanceof APLLong) {
      var x = a.g2n_1;
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.let' call
        var x_0 = a.a2r_1;
        var tmp_0;
        if (x_0 <= (new Long(2, -1048576)).l3() || x_0 >= (new Long(-2, 1048575)).l3()) {
          var x_1 = fromDoubleFloor(Companion_instance, x_0);
          tmp_0 = makeAPLNumber_2(x_1);
        } else {
          // Inline function 'kotlin.math.floor' call
          var tmp$ret$2 = Math.floor(x_0);
          var x_2 = numberToLong(tmp$ret$2);
          tmp_0 = makeAPLNumber_0(x_2);
        }
        tmp = tmp_0;
      } else {
        if (a instanceof APLBigInt) {
          var x_3 = a.z2q_1;
          tmp = makeAPLNumber_2(x_3);
        } else {
          if (a instanceof APLRational) {
            // Inline function 'kotlin.let' call
            var res = a.d31_1.zj();
            var tmp_1;
            if (rangeInLong(res)) {
              var x_4 = toLong(res);
              tmp_1 = makeAPLNumber_0(x_4);
            } else {
              tmp_1 = makeAPLNumber_2(res);
            }
            tmp = tmp_1;
          } else {
            NumericRelationErrors_instance.a34(a, this.t2g_1);
          }
        }
      }
    }
    return tmp;
  };
  protoOf(MinAPLFunctionImpl).q2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.MinAPLFunctionImpl.opLong1Arg' call
    var tmp;
    if (a instanceof APLLong) {
      tmp = a.g2n_1;
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.let' call
        var x = a.a2r_1;
        var tmp_0;
        if (x <= (new Long(2, -1048576)).l3() || x >= (new Long(-2, 1048575)).l3()) {
          var x_0 = fromDoubleFloor(Companion_instance, x);
          throw new LongExpressionOverflow(x_0);
        } else {
          // Inline function 'kotlin.math.floor' call
          var tmp$ret$1 = Math.floor(x);
          tmp_0 = numberToLong(tmp$ret$1);
        }
        tmp = tmp_0;
      } else {
        if (a instanceof APLBigInt) {
          var x_1 = a.z2q_1;
          throw new LongExpressionOverflow(x_1);
        } else {
          if (a instanceof APLRational) {
            // Inline function 'kotlin.let' call
            var res = a.d31_1.zj();
            var tmp_1;
            if (rangeInLong(res)) {
              tmp_1 = toLong(res);
            } else {
              throw new LongExpressionOverflow(res);
            }
            tmp = tmp_1;
          } else {
            NumericRelationErrors_instance.a34(a, this.t2g_1);
          }
        }
      }
    }
    return tmp;
  };
  protoOf(MinAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_5: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = tmp3.a1(y) < 0 ? makeAPLNumber_0(tmp3) : makeAPLNumber_0(y);
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_5;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = makeAPLNumber_1(tmp5.a3o_1 < y_0.a3o_1 || (tmp5.a3o_1 === y_0.a3o_1 && tmp5.b3o_1 < y_0.b3o_1) ? tmp5 : y_0);
            break $l$block_5;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = tmp7 < y_1 ? makeAPLNumber(tmp7) : makeAPLNumber(y_1);
              break $l$block_5;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = tmp9.vj(y_2) < 0 ? makeAPLNumber_3(tmp9) : makeAPLNumber_3(y_2);
                break $l$block_5;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = compareTo_1(tmp11, y_3) < 0 ? makeAPLNumberWithReduction(tmp11) : makeAPLNumberWithReduction(y_3);
                  break $l$block_5;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          var tmp13 = a.m2z_1;
          var y_4 = b.m2z_1;
          tmp$ret$1 = tmp13 < y_4 ? new APLChar(tmp13) : new APLChar(y_4);
          break $l$block_5;
        } else {
          var tmp_8;
          var tmp_9;
          if (a instanceof APLNilValue) {
            var tmp_10;
            if (b instanceof APLNumber) {
              tmp_10 = true;
            } else {
              tmp_10 = b instanceof APLChar;
            }
            tmp_9 = tmp_10;
          } else {
            tmp_9 = false;
          }
          if (tmp_9) {
            tmp_8 = b;
          } else {
            var tmp_11;
            var tmp_12;
            if (a instanceof APLNumber) {
              tmp_12 = true;
            } else {
              tmp_12 = a instanceof APLChar;
            }
            if (tmp_12) {
              tmp_11 = b instanceof APLNilValue;
            } else {
              tmp_11 = false;
            }
            if (tmp_11) {
              tmp_8 = a;
            } else {
              NumericRelationErrors_instance.l2z(a, b, this.t2g_1);
            }
          }
          tmp$ret$1 = tmp_8;
          break $l$block_5;
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(MinAPLFunctionImpl).f2x = function (a, b) {
    return a.a1(b) < 0 ? a : b;
  };
  protoOf(MinAPLFunctionImpl).s2x = function (a, b) {
    return a < b ? a : b;
  };
  protoOf(MinAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(12);
  };
  protoOf(MinAPLFunctionImpl).z2h = function () {
    return 'round down';
  };
  protoOf(MinAPLFunctionImpl).a2i = function () {
    return 'min';
  };
  function MinAPLFunction() {
  }
  protoOf(MinAPLFunction).i2i = function (instantiation) {
    return new MinAPLFunctionImpl(instantiation);
  };
  function MaxAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(MaxAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        var tmp_0;
        if (x_0 <= (new Long(2, -1048576)).l3() || x_0 >= (new Long(-2, 1048575)).l3()) {
          tmp_0 = makeAPLNumber_2(fromDoubleFloor(Companion_instance, x_0));
        } else {
          // Inline function 'kotlin.math.ceil' call
          var tmp$ret$1 = Math.ceil(x_0);
          tmp_0 = makeAPLNumber_0(numberToLong(tmp$ret$1));
        }
        tmp = tmp_0;
      } else {
        if (a instanceof APLComplex) {
          a.s2z();
          throwAPLException(new IncompatibleTypeException('Ceiling is not valid for complex values', this.t2g_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_1 = a.z2q_1;
              tmp = makeAPLNumber_2(x_1);
            } else {
              if (a instanceof APLRational) {
                var x_2 = a.d31_1;
                tmp = makeAPLNumberWithReduction(x_2.yj());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(MaxAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_5: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = tmp3.a1(y) > 0 ? makeAPLNumber_0(tmp3) : makeAPLNumber_0(y);
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_5;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = makeAPLNumber_1(tmp5.a3o_1 > y_0.a3o_1 || (tmp5.a3o_1 === y_0.a3o_1 && tmp5.b3o_1 > y_0.b3o_1) ? tmp5 : y_0);
            break $l$block_5;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = tmp7 > y_1 ? makeAPLNumber(tmp7) : makeAPLNumber(y_1);
              break $l$block_5;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = tmp9.vj(y_2) > 0 ? makeAPLNumber_3(tmp9) : makeAPLNumber_3(y_2);
                break $l$block_5;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = compareTo_1(tmp11, y_3) > 0 ? makeAPLNumberWithReduction(tmp11) : makeAPLNumberWithReduction(y_3);
                  break $l$block_5;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          var tmp13 = a.m2z_1;
          var y_4 = b.m2z_1;
          tmp$ret$1 = tmp13 > y_4 ? new APLChar(tmp13) : new APLChar(y_4);
          break $l$block_5;
        } else {
          var tmp_8;
          var tmp_9;
          if (a instanceof APLNilValue) {
            var tmp_10;
            if (b instanceof APLNumber) {
              tmp_10 = true;
            } else {
              tmp_10 = b instanceof APLChar;
            }
            tmp_9 = tmp_10;
          } else {
            tmp_9 = false;
          }
          if (tmp_9) {
            tmp_8 = b;
          } else {
            var tmp_11;
            var tmp_12;
            if (a instanceof APLNumber) {
              tmp_12 = true;
            } else {
              tmp_12 = a instanceof APLChar;
            }
            if (tmp_12) {
              tmp_11 = b instanceof APLNilValue;
            } else {
              tmp_11 = false;
            }
            if (tmp_11) {
              tmp_8 = a;
            } else {
              NumericRelationErrors_instance.l2z(a, b, this.t2g_1);
            }
          }
          tmp$ret$1 = tmp_8;
          break $l$block_5;
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(MaxAPLFunctionImpl).f2x = function (a, b) {
    return a.a1(b) > 0 ? a : b;
  };
  protoOf(MaxAPLFunctionImpl).s2x = function (a, b) {
    return a > b ? a : b;
  };
  protoOf(MaxAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(12);
  };
  protoOf(MaxAPLFunctionImpl).z2h = function () {
    return 'round up';
  };
  protoOf(MaxAPLFunctionImpl).a2i = function () {
    return 'max';
  };
  function MaxAPLFunction() {
  }
  protoOf(MaxAPLFunction).i2i = function (instantiation) {
    return new MaxAPLFunctionImpl(instantiation);
  };
  function opLong_9($this, x, y) {
    var tmp;
    if (x.equals(new Long(0, 0))) {
      tmp = y;
    } else {
      // Inline function 'kotlin.let' call
      var result = y.a3(x);
      tmp = !result.equals(new Long(0, 0)) && (x.a1(new Long(0, 0)) < 0 && y.a1(new Long(0, 0)) > 0 || (x.a1(new Long(0, 0)) > 0 && y.a1(new Long(0, 0)) < 0)) ? x.w2(result) : result;
    }
    return tmp;
  }
  function opDouble_2($this, x, y) {
    var tmp;
    if (x === 0.0) {
      tmp = y;
    } else {
      // Inline function 'kotlin.let' call
      var result = y % x;
      tmp = !(result === 0.0) && (x < 0 && y > 0 || (x > 0 && y < 0)) ? x + result : result;
    }
    return tmp;
  }
  function bigintMod($this, x, y) {
    var xSign = signum(x);
    var tmp;
    if (xSign === 0) {
      tmp = y;
    } else {
      // Inline function 'kotlin.let' call
      var result = rem(y, x);
      var tmp_0;
      if (signum(result) === 0) {
        tmp_0 = result;
      } else {
        var ySign = signum(y);
        var tmp_1;
        if (xSign === -1 && ySign === 1 || (xSign === 1 && ySign === -1)) {
          tmp_1 = plus(x, result);
        } else {
          tmp_1 = result;
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function rationalMod($this, x, y) {
    var xSign = x.xj();
    var tmp;
    if (xSign === 0) {
      tmp = y;
    } else {
      // Inline function 'kotlin.let' call
      var result = y.uj(x);
      var tmp_0;
      if (result.xj() === 0) {
        tmp_0 = result;
      } else {
        var ySign = y.xj();
        var tmp_1;
        if (xSign === -1 && ySign === 1 || (xSign === 1 && ySign === -1)) {
          tmp_1 = x.qj(result);
        } else {
          tmp_1 = result;
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function ModAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(ModAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(abs_0(x));
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.abs' call
        var x_0 = a.x2s(pos);
        var tmp$ret$1 = Math.abs(x_0);
        tmp = makeAPLNumber(tmp$ret$1);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          var tmp0 = x_1.a3o_1;
          // Inline function 'kotlin.math.hypot' call
          var y = x_1.b3o_1;
          var tmp$ret$3 = hypot(tmp0, y);
          tmp = makeAPLNumber(tmp$ret$3);
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = makeAPLNumber_2(get_absoluteValue(x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = makeAPLNumber_3(x_3.ak());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(ModAPLFunctionImpl).a3q = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_3: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = makeAPLNumber_0(opLong_9(this, tmp3, y));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_3;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = makeAPLNumber_1(complexMod(tmp5, y_0));
            break $l$block_3;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = makeAPLNumber(opDouble_2(this, tmp7, y_1));
              break $l$block_3;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = makeAPLNumber_3(rationalMod(this, tmp9, y_2));
                break $l$block_3;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = makeAPLNumberWithReduction(bigintMod(this, tmp11, y_3));
                  break $l$block_3;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(ModAPLFunctionImpl).f2x = function (a, b) {
    return opLong_9(this, a, b);
  };
  protoOf(ModAPLFunctionImpl).s2x = function (a, b) {
    return opDouble_2(this, a, b);
  };
  protoOf(ModAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(12);
  };
  protoOf(ModAPLFunctionImpl).z2h = function () {
    return 'abs';
  };
  protoOf(ModAPLFunctionImpl).a2i = function () {
    return 'mod';
  };
  function ModAPLFunction() {
  }
  protoOf(ModAPLFunction).i2i = function (instantiation) {
    return new ModAPLFunctionImpl(instantiation);
  };
  function throwIncompatibleTypeException($this, pos) {
    throwAPLException(new IncompatibleTypeException('Operation not supported for value', pos));
  }
  function opBigint_1($this, v) {
    var tmp;
    if (equals(v, BigIntConstants_getInstance().hj_1)) {
      tmp = new Long(1, 0);
    } else if (equals(v, BigIntConstants_getInstance().ij_1)) {
      tmp = new Long(0, 0);
    } else {
      throwIncompatibleTypeException($this, $this.t2g_1);
    }
    return tmp;
  }
  function notOp($this, v, pos) {
    var tmp;
    if (v.equals(new Long(0, 0))) {
      tmp = new Long(1, 0);
    } else if (v.equals(new Long(1, 0))) {
      tmp = new Long(0, 0);
    } else {
      throwIncompatibleTypeException($this, pos);
    }
    var result = tmp;
    return result;
  }
  function NotAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(NotAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(notOp(this, x, this.t2g_1));
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = makeAPLNumber_0(notOp(this, numberToLong(x_0), this.t2g_1));
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          var tmp_0;
          if (x_1.b3o_1 === 0.0) {
            tmp_0 = makeAPLNumber_0(notOp(this, numberToLong(x_1.a3o_1), this.t2g_1));
          } else {
            throwAPLException(new IncompatibleTypeException('Operation not supported for complex', this.t2g_1));
          }
          tmp = tmp_0;
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = makeAPLNumber_0(opBigint_1(this, x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                var tmp_1;
                if (equals(x_3.pj(), BigIntConstants_getInstance().ij_1)) {
                  tmp_1 = makeAPLNumber_0(opBigint_1(this, x_3.oj()));
                } else {
                  throwIncompatibleTypeException(this, this.t2g_1);
                }
                tmp = tmp_1;
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(NotAPLFunctionImpl).a2h = function (context, a, b, axis) {
    if (!(axis == null)) {
      throwAPLException(new AxisNotSupported(this.t2g_1));
    }
    var a1 = a.u2i();
    if (!(_Dimensions___get_size__impl__uu37ek(a1.o2i()) === 1)) {
      throwAPLException(new InvalidDimensionsException('Left argument must be a scalar or a 1-dimensional array', this.t2g_1));
    }
    var b1 = b.u2i();
    var map = HashSet_init_$Create$();
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (b1.b2l()) {
      map.h(b1.s2o());
    } else {
      var inductionVariable = 0;
      var last = b1.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = b1.h2k(i);
          map.h(v.s2o());
        }
         while (inductionVariable < last);
    }
    var result = ArrayList_init_$Create$();
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (a1.b2l()) {
      if (!map.s1(a1.s2o())) {
        result.h(a1);
      }
    } else {
      var inductionVariable_0 = 0;
      var last_0 = a1.n();
      if (inductionVariable_0 < last_0)
        do {
          var i_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          var v_0 = a1.h2k(i_0);
          if (!map.s1(v_0.s2o())) {
            result.h(v_0);
          }
        }
         while (inductionVariable_0 < last_0);
    }
    return new APLArrayList(dimensionsOfSize(new Int32Array([result.n()])), result, a1.f2n());
  };
  protoOf(NotAPLFunctionImpl).e2x = function (a) {
    return notOp(this, a, this.t2g_1);
  };
  protoOf(NotAPLFunctionImpl).k2h = function () {
    return new BitwiseNotFunction();
  };
  protoOf(NotAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(1);
  };
  protoOf(NotAPLFunctionImpl).z2h = function () {
    return 'not';
  };
  protoOf(NotAPLFunctionImpl).a2i = function () {
    return 'without';
  };
  function NotAPLFunction() {
  }
  protoOf(NotAPLFunction).i2i = function (instantiation) {
    return new NotAPLFunctionImpl(instantiation);
  };
  function opLong_10($this, a, b) {
    var tmp;
    if (a.equals(new Long(0, 0)) && b.equals(new Long(0, 0))) {
      tmp = new Long(1, 0);
    } else if (a.equals(new Long(0, 0)) && b.equals(new Long(1, 0))) {
      tmp = new Long(1, 0);
    } else if (a.equals(new Long(1, 0)) && b.equals(new Long(0, 0))) {
      tmp = new Long(1, 0);
    } else if (a.equals(new Long(1, 0)) && b.equals(new Long(1, 0))) {
      tmp = new Long(0, 0);
    } else {
      throwIllegalArgument_1($this);
    }
    return tmp;
  }
  function opBigint_2($this, a, b) {
    var aSign = signum(a);
    var bSign = signum(b);
    var tmp;
    if (aSign === 0 && bSign === 0) {
      tmp = new Long(1, 0);
    } else if (aSign === 0 && equals(b, BigIntConstants_getInstance().ij_1)) {
      tmp = new Long(1, 0);
    } else if (equals(a, BigIntConstants_getInstance().ij_1) && bSign === 0) {
      tmp = new Long(1, 0);
    } else if (equals(a, BigIntConstants_getInstance().ij_1) && equals(b, BigIntConstants_getInstance().ij_1)) {
      tmp = new Long(0, 0);
    } else {
      throwIllegalArgument_1($this);
    }
    return tmp;
  }
  function throwIllegalArgument_1($this) {
    throwAPLException(new APLIllegalArgumentException('Arguments to nand must be 0 or 1', $this.t2g_1));
  }
  function NandAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(NandAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = makeAPLNumber_0(opLong_10(this, tmp3, y));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_1;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            a.s2z();
            b.s2z();
            throwIllegalArgument_1(this);
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_0 = b.r2z();
              tmp$ret$1 = makeAPLNumber_0(opLong_10(this, numberToLong(tmp7), numberToLong(y_0)));
              break $l$block_1;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                a.p2z(tmp0);
                b.p2z(tmp0);
                NumericRelationErrors_instance.q2z(tmp0);
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_1 = b.o2z(tmp0);
                  tmp$ret$1 = makeAPLNumber_0(opBigint_2(this, tmp11, y_1));
                  break $l$block_1;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(NandAPLFunctionImpl).f2x = function (a, b) {
    return opLong_10(this, a, b);
  };
  protoOf(NandAPLFunctionImpl).k2h = function () {
    return new BitwiseNandFunction();
  };
  protoOf(NandAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  protoOf(NandAPLFunctionImpl).z2h = function () {
    return 'nand';
  };
  function NandAPLFunction() {
  }
  protoOf(NandAPLFunction).i2i = function (instantiation) {
    return new NandAPLFunctionImpl(instantiation);
  };
  function opLong_11($this, x, y) {
    var tmp;
    if (x.equals(new Long(0, 0)) && y.equals(new Long(0, 0))) {
      tmp = new Long(1, 0);
    } else if (x.equals(new Long(0, 0)) && y.equals(new Long(1, 0))) {
      tmp = new Long(0, 0);
    } else if (x.equals(new Long(1, 0)) && y.equals(new Long(0, 0))) {
      tmp = new Long(0, 0);
    } else if (x.equals(new Long(1, 0)) && y.equals(new Long(1, 0))) {
      tmp = new Long(0, 0);
    } else {
      throwIllegalArgument_2($this);
    }
    return tmp;
  }
  function opBigint_3($this, x, y) {
    var xSign = signum(x);
    var ySign = signum(y);
    var tmp;
    if (xSign === 0 && ySign === 0) {
      tmp = new Long(1, 0);
    } else if (xSign === 0 && equals(y, BigIntConstants_getInstance().ij_1)) {
      tmp = new Long(0, 0);
    } else if (equals(x, BigIntConstants_getInstance().ij_1) && ySign === 0) {
      tmp = new Long(0, 0);
    } else if (equals(x, BigIntConstants_getInstance().ij_1) && equals(y, BigIntConstants_getInstance().ij_1)) {
      tmp = new Long(0, 0);
    } else {
      throwIllegalArgument_2($this);
    }
    return tmp;
  }
  function throwIllegalArgument_2($this) {
    throwAPLException(new APLIllegalArgumentException('Arguments to nor must be 0 or 1', $this.t2g_1));
  }
  function NorAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos, VOID, VOID, Companion_getInstance_45().a2k_1);
  }
  protoOf(NorAPLFunctionImpl).d2x = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = makeAPLNumber_0(opLong_11(this, tmp3, y));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_1;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            a.s2z();
            b.s2z();
            throwIllegalArgument_2(this);
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_0 = b.r2z();
              tmp$ret$1 = makeAPLNumber_0(opLong_11(this, numberToLong(tmp7), numberToLong(y_0)));
              break $l$block_1;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                a.p2z(tmp0);
                b.p2z(tmp0);
                NumericRelationErrors_instance.q2z(tmp0);
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_1 = b.o2z(tmp0);
                  tmp$ret$1 = makeAPLNumber_0(opBigint_3(this, tmp11, y_1));
                  break $l$block_1;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(NorAPLFunctionImpl).f2x = function (a, b) {
    return opLong_11(this, a, b);
  };
  protoOf(NorAPLFunctionImpl).k2h = function () {
    return new BitwiseNorFunction();
  };
  protoOf(NorAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  protoOf(NorAPLFunctionImpl).z2h = function () {
    return 'nor';
  };
  function NorAPLFunction() {
  }
  protoOf(NorAPLFunction).i2i = function (instantiation) {
    return new NorAPLFunctionImpl(instantiation);
  };
  function doubleBinomialWithException($this, a, b, pos) {
    try {
      var row = (a < 0 ? 4 : 0) | (b < 0 ? 2 : 0) | (b < a ? 1 : 0);
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var caseTable = [1, 0, -1, 1, 0, -1, 1, 0];
      var e = caseTable[row];
      var tmp;
      if (e === 0) {
        tmp = 0.0;
      } else if (!(e === 1)) {
        throw IllegalStateException_init_$Create$('caseTable value is -1. ' + a + ', ' + b + ', ' + row + ', ' + e);
      } else if (!doubleBinomialWithException$nearInt(a) || !doubleBinomialWithException$nearInt(b)) {
        tmp = doubleBinomial(a, b);
      } else {
        tmp = doubleBinomial(a, b);
      }
      return tmp;
    } catch ($p) {
      if ($p instanceof IllegalArgumentException) {
        var e_0 = $p;
        throwAPLException(new IncompatibleTypeException('Binomial: invalid arguments: ' + a + ',' + b, pos, e_0));
      } else {
        throw $p;
      }
    }
  }
  function doubleBinomialWithException$nearInt(n) {
    return n % 1 === 0.0;
  }
  function BinomialAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(BinomialAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$0 = a.w2s(pos).w2(toLong_0(1));
      tmp = makeAPLNumber(doubleGamma(tmp$ret$0.l3()));
    } else {
      if (a instanceof APLDouble) {
        var x = a.x2s(pos);
        tmp = makeAPLNumber(doubleGamma(x + 1.0));
      } else {
        if (a instanceof APLComplex) {
          var x_0 = a.s2z();
          tmp = makeAPLNumber_1(complexGamma(x_0.t3s(1.0)));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              a.z2q_1;
              throwAPLException(new IncompatibleTypeException('Function does not support bigint argument', pos));
            } else {
              if (a instanceof APLRational) {
                a.d31_1;
                throwAPLException(new IncompatibleTypeException('Function does not support rational argument', pos));
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(BinomialAPLFunctionImpl).a3q = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            var tmp_2;
            if (tmp3.a1(new Long(0, 0)) >= 0 && tmp3.a1(new Long(2147483647, 0)) <= 0 && y.a1(new Long(0, 0)) >= 0 && y.a1(new Long(2147483647, 0)) <= 0 && y.a1(tmp3) >= 0) {
              tmp_2 = makeAPLNumber_0(longBinomial(y.c1(), tmp3.c1()));
            } else {
              tmp_2 = makeAPLNumber(doubleBinomialWithException(this, tmp3.l3(), y.l3(), this.t2g_1));
            }
            tmp_1 = tmp_2;
          } catch ($p) {
            var tmp_3;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_3 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_3;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_1;
        } else {
          var tmp_4;
          if (a instanceof APLComplex) {
            tmp_4 = true;
          } else {
            tmp_4 = b instanceof APLComplex;
          }
          if (tmp_4) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = makeAPLNumber_1(complexBinomial(tmp5, y_0));
            break $l$block_1;
          } else {
            var tmp_5;
            if (a instanceof APLDouble) {
              tmp_5 = true;
            } else {
              tmp_5 = b instanceof APLDouble;
            }
            if (tmp_5) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = makeAPLNumber(doubleBinomialWithException(this, tmp7, y_1, this.t2g_1));
              break $l$block_1;
            } else {
              var tmp_6;
              if (a instanceof APLRational) {
                tmp_6 = true;
              } else {
                tmp_6 = b instanceof APLRational;
              }
              if (tmp_6) {
                a.p2z(tmp0);
                b.p2z(tmp0);
                NumericRelationErrors_instance.q2z(tmp0);
              } else {
                var tmp_7;
                if (a instanceof APLBigInt) {
                  tmp_7 = true;
                } else {
                  tmp_7 = b instanceof APLBigInt;
                }
                if (tmp_7) {
                  a.o2z(tmp0);
                  b.o2z(tmp0);
                  NumericRelationErrors_instance.b34(tmp0);
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_8;
        if (a instanceof APLChar) {
          tmp_8 = b instanceof APLChar;
        } else {
          tmp_8 = false;
        }
        if (tmp_8) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(BinomialAPLFunctionImpl).z2h = function () {
    return 'gamma';
  };
  protoOf(BinomialAPLFunctionImpl).a2i = function () {
    return 'binomial';
  };
  function BinomialAPLFunction() {
  }
  protoOf(BinomialAPLFunction).i2i = function (instantiation) {
    return new BinomialAPLFunctionImpl(instantiation);
  };
  function RationaliseAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(RationaliseAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = makeAPLNumber_3(rationalise(x_0));
      } else {
        if (a instanceof APLComplex) {
          a.s2z();
          throwAPLException(new APLArithmeticException('Value is complex', this.t2g_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_1 = a.z2q_1;
              tmp = makeAPLNumber_2(x_1);
            } else {
              if (a instanceof APLRational) {
                var x_2 = a.d31_1;
                tmp = makeAPLNumber_3(x_2);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  function RationaliseAPLFunction() {
  }
  protoOf(RationaliseAPLFunction).i2i = function (instantiation) {
    return new RationaliseAPLFunctionImpl(instantiation);
  };
  function RenderRationalFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RenderRationalFunctionImpl).t2i = function (context, a, b) {
    var b0 = b.g2k();
    if (!(b0 instanceof APLRational)) {
      throwAPLException(new IncompatibleTypeException('Expected rational, got: ' + b0.z2p().p2(), this.t2g_1));
    }
    var v = b0.p2z(this.t2g_1);
    var numDecimals = a.p2i(this.t2g_1).w2s(this.t2g_1);
    // Inline function 'kotlin.TODO' call
    var reason = 'not implemented';
    throw new NotImplementedError('An operation is not implemented: ' + reason);
  };
  function RenderRationalFunction() {
  }
  protoOf(RenderRationalFunction).i2i = function (instantiation) {
    return new RenderRationalFunctionImpl(instantiation);
  };
  function SinAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(SinAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.sin' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = Math.sin(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.sin' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = Math.sin(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.k3t(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              // Inline function 'kotlin.math.sin' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = Math.sin(x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                // Inline function 'kotlin.math.sin' call
                var x_4 = a.d31_1.l3();
                var tmp$ret$7 = Math.sin(x_4);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(SinAPLFunctionImpl).p2x = function (a) {
    // Inline function 'kotlin.math.sin' call
    return Math.sin(a);
  };
  protoOf(SinAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(2);
  };
  protoOf(SinAPLFunctionImpl).z2h = function () {
    return 'sin';
  };
  function SinAPLFunction() {
  }
  protoOf(SinAPLFunction).i2i = function (instantiation) {
    return new SinAPLFunctionImpl(instantiation);
  };
  function CosAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(CosAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.cos' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = Math.cos(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.cos' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = Math.cos(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.r3t(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              // Inline function 'kotlin.math.cos' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = Math.cos(x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                // Inline function 'kotlin.math.cos' call
                var x_4 = a.d31_1.l3();
                var tmp$ret$7 = Math.cos(x_4);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(CosAPLFunctionImpl).p2x = function (a) {
    // Inline function 'kotlin.math.cos' call
    return Math.cos(a);
  };
  protoOf(CosAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(2);
  };
  protoOf(CosAPLFunctionImpl).z2h = function () {
    return 'cos';
  };
  function CosAPLFunction() {
  }
  protoOf(CosAPLFunction).i2i = function (instantiation) {
    return new CosAPLFunctionImpl(instantiation);
  };
  function TanAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(TanAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.tan' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = Math.tan(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.tan' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = Math.tan(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.y3t(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              // Inline function 'kotlin.math.tan' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = Math.tan(x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                // Inline function 'kotlin.math.tan' call
                var x_4 = a.d31_1.l3();
                var tmp$ret$7 = Math.tan(x_4);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(TanAPLFunctionImpl).p2x = function (a) {
    // Inline function 'kotlin.math.tan' call
    return Math.tan(a);
  };
  protoOf(TanAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(2);
  };
  protoOf(TanAPLFunctionImpl).z2h = function () {
    return 'tan';
  };
  function TanAPLFunction() {
  }
  protoOf(TanAPLFunction).i2i = function (instantiation) {
    return new TanAPLFunctionImpl(instantiation);
  };
  function opDouble_3($this, value) {
    var tmp;
    if (value >= -1.0 && value <= 1.0) {
      // Inline function 'kotlin.math.asin' call
      var tmp$ret$0 = Math.asin(value);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      tmp = makeAPLNumber_1(ComplexFieldExtension_instance.z3t(toComplex(value)));
    }
    return tmp;
  }
  function AsinAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(AsinAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = opDouble_3(this, x.l3());
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = opDouble_3(this, x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.z3t(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = opDouble_3(this, toDouble_0(x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = opDouble_3(this, x_3.l3());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(AsinAPLFunctionImpl).z2h = function () {
    return 'asin';
  };
  function AsinAPLFunction() {
  }
  protoOf(AsinAPLFunction).i2i = function (instantiation) {
    return new AsinAPLFunctionImpl(instantiation);
  };
  function opDouble_4($this, value) {
    var tmp;
    if (value >= -1.0 && value <= 1.0) {
      // Inline function 'kotlin.math.acos' call
      var tmp$ret$0 = Math.acos(value);
      return makeAPLNumber(tmp$ret$0);
    } else {
      tmp = makeAPLNumber_1(ComplexFieldExtension_instance.g3u(toComplex(value)));
    }
    return tmp;
  }
  function AcosAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(AcosAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = opDouble_4(this, x.l3());
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = opDouble_4(this, x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.g3u(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = opDouble_4(this, toDouble_0(x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = opDouble_4(this, x_3.l3());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(AcosAPLFunctionImpl).z2h = function () {
    return 'acos';
  };
  function AcosAPLFunction() {
  }
  protoOf(AcosAPLFunction).i2i = function (instantiation) {
    return new AcosAPLFunctionImpl(instantiation);
  };
  function AtanAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(AtanAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.atan' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = Math.atan(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.atan' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = Math.atan(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.t3u(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              // Inline function 'kotlin.math.atan' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = Math.atan(x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                // Inline function 'kotlin.math.atan' call
                var x_4 = a.d31_1.l3();
                var tmp$ret$7 = Math.atan(x_4);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(AtanAPLFunctionImpl).p2x = function (a) {
    // Inline function 'kotlin.math.atan' call
    return Math.atan(a);
  };
  protoOf(AtanAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(2);
  };
  protoOf(AtanAPLFunctionImpl).z2h = function () {
    return 'atan';
  };
  function AtanAPLFunction() {
  }
  protoOf(AtanAPLFunction).i2i = function (instantiation) {
    return new AtanAPLFunctionImpl(instantiation);
  };
  function SinhAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(SinhAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.sinh' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = sinh(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.sinh' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = sinh(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.a3v(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              // Inline function 'kotlin.math.sinh' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = sinh(x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                // Inline function 'kotlin.math.sinh' call
                var x_4 = a.d31_1.l3();
                var tmp$ret$7 = sinh(x_4);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(SinhAPLFunctionImpl).p2x = function (a) {
    // Inline function 'kotlin.math.sinh' call
    return sinh(a);
  };
  protoOf(SinhAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(2);
  };
  protoOf(SinhAPLFunctionImpl).z2h = function () {
    return 'sinh';
  };
  function SinhAPLFunction() {
  }
  protoOf(SinhAPLFunction).i2i = function (instantiation) {
    return new SinhAPLFunctionImpl(instantiation);
  };
  function CoshAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(CoshAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.cosh' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = cosh(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.cosh' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = cosh(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.h3v(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              // Inline function 'kotlin.math.cosh' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = cosh(x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                // Inline function 'kotlin.math.cosh' call
                var x_4 = a.d31_1.l3();
                var tmp$ret$7 = cosh(x_4);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(CoshAPLFunctionImpl).p2x = function (a) {
    // Inline function 'kotlin.math.cosh' call
    return cosh(a);
  };
  protoOf(CoshAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(2);
  };
  protoOf(CoshAPLFunctionImpl).z2h = function () {
    return 'cosh';
  };
  function CoshAPLFunction() {
  }
  protoOf(CoshAPLFunction).i2i = function (instantiation) {
    return new CoshAPLFunctionImpl(instantiation);
  };
  function TanhAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(TanhAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.tanh' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = tanh(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.tanh' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = tanh(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.o3v(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              // Inline function 'kotlin.math.tanh' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = tanh(x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                // Inline function 'kotlin.math.tanh' call
                var x_4 = a.d31_1.l3();
                var tmp$ret$7 = tanh(x_4);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(TanhAPLFunctionImpl).p2x = function (a) {
    // Inline function 'kotlin.math.tanh' call
    return tanh(a);
  };
  protoOf(TanhAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(2);
  };
  protoOf(TanhAPLFunctionImpl).z2h = function () {
    return 'tanh';
  };
  function TanhAPLFunction() {
  }
  protoOf(TanhAPLFunction).i2i = function (instantiation) {
    return new TanhAPLFunctionImpl(instantiation);
  };
  function AsinhAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(AsinhAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      // Inline function 'kotlin.math.asinh' call
      var x = a.w2s(pos).l3();
      var tmp$ret$0 = asinh(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.asinh' call
        var x_0 = a.x2s(pos);
        var tmp$ret$2 = asinh(x_0);
        tmp = makeAPLNumber(tmp$ret$2);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.v3v(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              // Inline function 'kotlin.math.asinh' call
              var x_3 = toDouble_0(x_2);
              var tmp$ret$5 = asinh(x_3);
              tmp = makeAPLNumber(tmp$ret$5);
            } else {
              if (a instanceof APLRational) {
                // Inline function 'kotlin.math.asinh' call
                var x_4 = a.d31_1.l3();
                var tmp$ret$7 = asinh(x_4);
                tmp = makeAPLNumber(tmp$ret$7);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(AsinhAPLFunctionImpl).p2x = function (a) {
    // Inline function 'kotlin.math.asinh' call
    return asinh(a);
  };
  protoOf(AsinhAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(2);
  };
  protoOf(AsinhAPLFunctionImpl).z2h = function () {
    return 'asinh';
  };
  function AsinhAPLFunction() {
  }
  protoOf(AsinhAPLFunction).i2i = function (instantiation) {
    return new AsinhAPLFunctionImpl(instantiation);
  };
  function opDouble_5($this, x) {
    var tmp;
    if (x >= 1) {
      // Inline function 'kotlin.math.acosh' call
      var tmp$ret$0 = acosh(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      tmp = makeAPLNumber_1(ComplexFieldExtension_instance.w3v(toComplex(x)));
    }
    return tmp;
  }
  function AcoshAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(AcoshAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = opDouble_5(this, x.l3());
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = opDouble_5(this, x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.w3v(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = opDouble_5(this, toDouble_0(x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = opDouble_5(this, x_3.l3());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(AcoshAPLFunctionImpl).z2h = function () {
    return 'acosh';
  };
  function AcoshAPLFunction() {
  }
  protoOf(AcoshAPLFunction).i2i = function (instantiation) {
    return new AcoshAPLFunctionImpl(instantiation);
  };
  function opDouble_6($this, x) {
    var tmp;
    if (x > -1 && x < 1) {
      // Inline function 'kotlin.math.atanh' call
      var tmp$ret$0 = atanh(x);
      tmp = makeAPLNumber(tmp$ret$0);
    } else {
      tmp = makeAPLNumber_1(ComplexFieldExtension_instance.d3w(toComplex(x)));
    }
    return tmp;
  }
  function AtanhAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(AtanhAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = opDouble_6(this, x.l3());
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = opDouble_6(this, x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(ComplexFieldExtension_instance.d3w(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = opDouble_6(this, toDouble_0(x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = opDouble_6(this, x_3.l3());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(AtanhAPLFunctionImpl).z2h = function () {
    return 'atanh';
  };
  function AtanhAPLFunction() {
  }
  protoOf(AtanhAPLFunction).i2i = function (instantiation) {
    return new AtanhAPLFunctionImpl(instantiation);
  };
  function sqrtDouble($this, x) {
    var tmp;
    if (x < 0) {
      tmp = makeAPLNumber_1(toComplex(x).q3p(Companion_getInstance_30().o3p_1));
    } else {
      // Inline function 'kotlin.math.sqrt' call
      var tmp$ret$0 = Math.sqrt(x);
      tmp = makeAPLNumber(tmp$ret$0);
    }
    return tmp;
  }
  function nthRootDouble($this, x, y) {
    var tmp;
    if (y < 0) {
      tmp = makeAPLNumber_1(toComplex(y).q3p(toComplex(x).d3p()));
    } else {
      // Inline function 'kotlin.math.pow' call
      var x_0 = 1.0 / x;
      var tmp$ret$0 = Math.pow(y, x_0);
      tmp = makeAPLNumber(tmp$ret$0);
    }
    return tmp;
  }
  function _get_exptFn__g5be8c($this) {
    var tmp0 = $this.q3w_1;
    // Inline function 'kotlin.getValue' call
    exptFn$factory();
    return tmp0.x1();
  }
  function _get_logFn__emysbf_0($this) {
    var tmp0 = $this.r3w_1;
    // Inline function 'kotlin.getValue' call
    logFn$factory_0();
    return tmp0.x1();
  }
  function SqrtAPLFunction$SqrtAPLFunctionImpl$exptFn$delegate$lambda($pos) {
    return function () {
      return (new PowerAPLFunction()).i2i($pos);
    };
  }
  function SqrtAPLFunction$SqrtAPLFunctionImpl$logFn$delegate$lambda($pos) {
    return function () {
      return (new LogAPLFunction()).i2i($pos);
    };
  }
  function SqrtAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
    var tmp = this;
    tmp.q3w_1 = lazy(SqrtAPLFunction$SqrtAPLFunctionImpl$exptFn$delegate$lambda(pos));
    var tmp_0 = this;
    tmp_0.r3w_1 = lazy(SqrtAPLFunction$SqrtAPLFunctionImpl$logFn$delegate$lambda(pos));
  }
  protoOf(SqrtAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = sqrtDouble(this, x.l3());
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = sqrtDouble(this, x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(x_1.q3p(Companion_getInstance_30().o3p_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = sqrtDouble(this, toDouble_0(x_2));
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = sqrtDouble(this, x_3.l3());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(SqrtAPLFunctionImpl).a3q = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_3: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = nthRootDouble(this, tmp3.l3(), y.l3());
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_3;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = makeAPLNumber_1(y_0.q3p(tmp5.d3p()));
            break $l$block_3;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = nthRootDouble(this, tmp7, y_1);
              break $l$block_3;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = nthRootDouble(this, tmp9.l3(), y_2.l3());
                break $l$block_3;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = nthRootDouble(this, toDouble_0(tmp11), toDouble_0(y_3));
                  break $l$block_3;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(SqrtAPLFunctionImpl).q2h = function (context, a, axis) {
    return _get_exptFn__g5be8c(this).a2h(context, a, makeAPLNumber_0(new Long(2, 0)), axis);
  };
  protoOf(SqrtAPLFunctionImpl).s2h = function (context, a, b, axis) {
    return _get_logFn__emysbf_0(this).a2h(context, a, b, axis);
  };
  protoOf(SqrtAPLFunctionImpl).r2h = function (context, a, b, axis) {
    return _get_exptFn__g5be8c(this).a2h(context, b, a, axis);
  };
  protoOf(SqrtAPLFunctionImpl).z2h = function () {
    return 'square root';
  };
  protoOf(SqrtAPLFunctionImpl).a2i = function () {
    return 'nth root';
  };
  function SqrtAPLFunction() {
  }
  protoOf(SqrtAPLFunction).i2i = function (instantiation) {
    return new SqrtAPLFunctionImpl(instantiation);
  };
  function opLong_12($this, x, y) {
    return integerGcd(x, y);
  }
  function opDouble_7($this, x, y) {
    return floatGcd(x, y);
  }
  function opRational_2($this, x, y) {
    return makeAPLNumber_3(rationalGcd(x, y));
  }
  function GcdAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(GcdAPLFunctionImpl).a3q = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_3: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = makeAPLNumber_0(opLong_12(this, tmp3, y));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_3;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = makeAPLNumber_1(complexGcd(tmp5, y_0));
            break $l$block_3;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = makeAPLNumber(floatGcd(tmp7, y_1));
              break $l$block_3;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = opRational_2(this, tmp9, y_2);
                break $l$block_3;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = makeAPLNumber_2(gcd(tmp11, y_3));
                  break $l$block_3;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(GcdAPLFunctionImpl).f2x = function (a, b) {
    return opLong_12(this, a, b);
  };
  protoOf(GcdAPLFunctionImpl).s2x = function (a, b) {
    return opDouble_7(this, a, b);
  };
  protoOf(GcdAPLFunctionImpl).j2h = function () {
    return get_APLLONG_0();
  };
  protoOf(GcdAPLFunctionImpl).k2h = function () {
    return new BitwiseOrFunction();
  };
  protoOf(GcdAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(12);
  };
  protoOf(GcdAPLFunctionImpl).z2h = function () {
    return 'gcd';
  };
  function GcdAPLFunction() {
  }
  protoOf(GcdAPLFunction).i2i = function (instantiation) {
    return new GcdAPLFunctionImpl(instantiation);
  };
  function productFitsInLong($this, a, b) {
    if (!a.j3(b).i3(new Long(-2147483648, -1)).equals(new Long(0, 0))) {
      if (a.a1(new Long(0, 0)) > 0) {
        if (b.a1(new Long(0, 0)) > 0) {
          if (a.a1((new Long(-1, 2147483647)).z2(b)) > 0)
            return false;
        } else {
          if (b.a1((new Long(0, -2147483648)).z2(a)) < 0)
            return false;
        }
      } else {
        if (b.a1(new Long(0, 0)) > 0) {
          if (a.a1((new Long(0, -2147483648)).z2(b)) < 0)
            return false;
        } else {
          if (!a.equals(new Long(0, 0)) && b.a1((new Long(-1, 2147483647)).z2(a)) < 0)
            return false;
        }
      }
    }
    return true;
  }
  function opLong_13($this, x, y) {
    if (!productFitsInLong($this, x, y)) {
      var bigIntResult = opBigint_4($this, of_0(Companion_instance, x), of_0(Companion_instance, y));
      if (rangeInLong(bigIntResult)) {
        return toLong(bigIntResult);
      } else {
        throw new LongExpressionOverflow(bigIntResult);
      }
    }
    var gcd = integerGcd(x, y);
    var tmp;
    if (gcd.equals(new Long(0, 0))) {
      tmp = new Long(0, 0);
    } else {
      return x.y2(y.z2(gcd));
    }
    return tmp;
  }
  function opDouble_8($this, x, y) {
    var gcd = floatGcd(x, y);
    var tmp;
    if (gcd === 0.0) {
      tmp = 0.0;
    } else {
      tmp = x * (y / gcd);
    }
    return tmp;
  }
  function opBigint_4($this, x, y) {
    var gcd_0 = gcd(x, y);
    var tmp;
    if (signum(gcd_0) === 0) {
      tmp = BigIntConstants_getInstance().hj_1;
    } else {
      tmp = times(x, div(y, gcd_0));
    }
    return tmp;
  }
  function opRational_3($this, x, y) {
    var gcd = rationalGcd(x, y);
    var tmp;
    if (gcd.xj() === 0) {
      tmp = makeAPLNumber_3(Companion_getInstance().ej_1);
    } else {
      tmp = makeAPLNumber_3(x.sj(y.tj(gcd)));
    }
    return tmp;
  }
  function LcmAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(LcmAPLFunctionImpl).a3q = function (a, b) {
    var tmp0 = this.t2g_1;
    var tmp$ret$1;
    $l$block_3: {
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          try {
            tmp_1 = makeAPLNumber_0(opLong_13(this, tmp3, y));
          } catch ($p) {
            var tmp_2;
            if ($p instanceof LongExpressionOverflow) {
              var e = $p;
              tmp_2 = makeAPLNumber_2(e.ek_1);
            } else {
              throw $p;
            }
            tmp_1 = tmp_2;
          }
          tmp$ret$1 = tmp_1;
          break $l$block_3;
        } else {
          var tmp_3;
          if (a instanceof APLComplex) {
            tmp_3 = true;
          } else {
            tmp_3 = b instanceof APLComplex;
          }
          if (tmp_3) {
            var tmp5 = a.s2z();
            var y_0 = b.s2z();
            tmp$ret$1 = makeAPLNumber_1(y_0.u3o(tmp5.e3p(complexGcd(tmp5, y_0))).e3x());
            break $l$block_3;
          } else {
            var tmp_4;
            if (a instanceof APLDouble) {
              tmp_4 = true;
            } else {
              tmp_4 = b instanceof APLDouble;
            }
            if (tmp_4) {
              var tmp7 = a.r2z();
              var y_1 = b.r2z();
              tmp$ret$1 = makeAPLNumber(tmp7 * (y_1 / floatGcd(tmp7, y_1)));
              break $l$block_3;
            } else {
              var tmp_5;
              if (a instanceof APLRational) {
                tmp_5 = true;
              } else {
                tmp_5 = b instanceof APLRational;
              }
              if (tmp_5) {
                var tmp9 = a.p2z(tmp0);
                var y_2 = b.p2z(tmp0);
                tmp$ret$1 = opRational_3(this, tmp9, y_2);
                break $l$block_3;
              } else {
                var tmp_6;
                if (a instanceof APLBigInt) {
                  tmp_6 = true;
                } else {
                  tmp_6 = b instanceof APLBigInt;
                }
                if (tmp_6) {
                  var tmp11 = a.o2z(tmp0);
                  var y_3 = b.o2z(tmp0);
                  tmp$ret$1 = makeAPLNumber_2(opBigint_4(this, tmp11, y_3));
                  break $l$block_3;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, tmp0);
                }
              }
            }
          }
        }
      } else {
        var tmp_7;
        if (a instanceof APLChar) {
          tmp_7 = b instanceof APLChar;
        } else {
          tmp_7 = false;
        }
        if (tmp_7) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(tmp0);
        } else {
          NumericRelationErrors_instance.l2z(a, b, tmp0);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(LcmAPLFunctionImpl).f2x = function (a, b) {
    return opLong_13(this, a, b);
  };
  protoOf(LcmAPLFunctionImpl).s2x = function (a, b) {
    return opDouble_8(this, a, b);
  };
  protoOf(LcmAPLFunctionImpl).k2h = function () {
    return new BitwiseAndFunction();
  };
  protoOf(LcmAPLFunctionImpl).j2h = function () {
    return get_APLLONG_1();
  };
  protoOf(LcmAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(12);
  };
  protoOf(LcmAPLFunctionImpl).a2i = function () {
    return 'lcm';
  };
  function LcmAPLFunction() {
  }
  protoOf(LcmAPLFunction).i2i = function (instantiation) {
    return new LcmAPLFunctionImpl(instantiation);
  };
  function NumeratorAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(NumeratorAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        a.x2s(pos);
        throwAPLException(new IncompatibleTypeException('Cannot return numerator from a double', this.t2g_1));
      } else {
        if (a instanceof APLComplex) {
          a.s2z();
          throwAPLException(new IncompatibleTypeException('Cannot return numerator from a complex', this.t2g_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_0 = a.z2q_1;
              tmp = makeAPLNumberWithReduction(x_0);
            } else {
              if (a instanceof APLRational) {
                var x_1 = a.d31_1;
                tmp = makeAPLNumberWithReduction(x_1.oj());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  function NumeratorAPLFunction() {
  }
  protoOf(NumeratorAPLFunction).i2i = function (instantiation) {
    return new NumeratorAPLFunctionImpl(instantiation);
  };
  function DenominatorAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(DenominatorAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      a.w2s(pos);
      tmp = get_APLLONG_1();
    } else {
      if (a instanceof APLDouble) {
        a.x2s(pos);
        throwAPLException(new IncompatibleTypeException('Cannot return denominator from a double', this.t2g_1));
      } else {
        if (a instanceof APLComplex) {
          a.s2z();
          throwAPLException(new IncompatibleTypeException('Cannot return denominator from a complex', this.t2g_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              a.z2q_1;
              tmp = get_APLLONG_1();
            } else {
              if (a instanceof APLRational) {
                var x = a.d31_1;
                tmp = makeAPLNumberWithReduction(x.pj());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  function DenominatorAPLFunction() {
  }
  protoOf(DenominatorAPLFunction).i2i = function (instantiation) {
    return new DenominatorAPLFunctionImpl(instantiation);
  };
  function RealpartAPLFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(RealpartAPLFunctionImpl).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = makeAPLNumber(x_0);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber(x_1.a3o_1);
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = makeAPLNumber_2(x_2);
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = makeAPLNumber_3(x_3);
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(RealpartAPLFunctionImpl).p2x = function (a) {
    return a;
  };
  protoOf(RealpartAPLFunctionImpl).e2x = function (a) {
    return a;
  };
  protoOf(RealpartAPLFunctionImpl).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(3);
  };
  protoOf(RealpartAPLFunctionImpl).z2h = function () {
    return 're';
  };
  function RealpartAPLFunction() {
  }
  protoOf(RealpartAPLFunction).i2i = function (instantiation) {
    return new RealpartAPLFunctionImpl(instantiation);
  };
  function ImagpartAPLFunction(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(ImagpartAPLFunction).z3p = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      a.w2s(pos);
      tmp = get_APLLONG_0();
    } else {
      if (a instanceof APLDouble) {
        a.x2s(pos);
        tmp = get_APLDOUBLE_0();
      } else {
        if (a instanceof APLComplex) {
          var x = a.s2z();
          tmp = makeAPLNumber(x.b3o_1);
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              a.z2q_1;
              tmp = get_APLLONG_0();
            } else {
              if (a instanceof APLRational) {
                a.d31_1;
                tmp = get_APLLONG_0();
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(ImagpartAPLFunction).p2x = function (a) {
    return 0.0;
  };
  protoOf(ImagpartAPLFunction).e2x = function (a) {
    return new Long(0, 0);
  };
  protoOf(ImagpartAPLFunction).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(3);
  };
  protoOf(ImagpartAPLFunction).z2h = function () {
    return 'im';
  };
  function ImagpartAPLFunction_0() {
  }
  protoOf(ImagpartAPLFunction_0).i2i = function (instantiation) {
    return new ImagpartAPLFunction(instantiation);
  };
  function ComplexFloorFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(ComplexFloorFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.floor' call
        var x_0 = a.x2s(pos);
        var tmp$ret$1 = Math.floor(x_0);
        tmp = makeAPLNumber(tmp$ret$1);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(complexFloor(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = makeAPLNumber_2(x_2);
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = makeAPLNumber_2(x_3.zj());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(ComplexFloorFunctionImpl).z2h = function () {
    return 'complex floor';
  };
  function ComplexFloorFunction() {
  }
  protoOf(ComplexFloorFunction).i2i = function (instantiation) {
    return new ComplexFloorFunctionImpl(instantiation);
  };
  function ComplexCeilFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(ComplexCeilFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.math.ceil' call
        var x_0 = a.x2s(pos);
        var tmp$ret$1 = Math.ceil(x_0);
        tmp = makeAPLNumber(tmp$ret$1);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          tmp = makeAPLNumber_1(complexCeiling(x_1));
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_2 = a.z2q_1;
              tmp = makeAPLNumber_2(x_2);
            } else {
              if (a instanceof APLRational) {
                var x_3 = a.d31_1;
                tmp = makeAPLNumber_2(x_3.yj());
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(ComplexCeilFunctionImpl).z2h = function () {
    return 'complex ceiling';
  };
  function ComplexCeilFunction() {
  }
  protoOf(ComplexCeilFunction).i2i = function (instantiation) {
    return new ComplexCeilFunctionImpl(instantiation);
  };
  function RoundNumFunctionImpl(pos) {
    MathNumericCombineAPLFunction.call(this, pos);
  }
  protoOf(RoundNumFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.RoundNumFunctionImpl.opLong1Arg' call
    var tmp;
    if (a instanceof APLLong) {
      var x = a.g2n_1;
      tmp = makeAPLNumber_0(x);
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.let' call
        var x_0 = a.a2r_1;
        var tmp_0;
        if (x_0 <= (new Long(2, -1048576)).l3() || x_0 >= (new Long(-2, 1048575)).l3()) {
          var x_1 = fromDoubleFloor(Companion_instance, x_0);
          tmp_0 = makeAPLNumber_2(x_1);
        } else {
          var x_2 = numberToLong(round(x_0));
          tmp_0 = makeAPLNumber_0(x_2);
        }
        tmp = tmp_0;
      } else {
        if (a instanceof APLBigInt) {
          var x_3 = a.z2q_1;
          tmp = makeAPLNumber_2(x_3);
        } else {
          if (a instanceof APLRational) {
            // Inline function 'kotlin.let' call
            var x_4 = a.d31_1;
            var tmp_1;
            if (equals(x_4.pj(), BigIntConstants_getInstance().jj_1)) {
              var n = x_4.oj();
              var d = div_0(n, 2);
              var tmp_2;
              if (signum(rem_0(d, new Long(2, 0))) === 0) {
                tmp_2 = d;
              } else if (compareTo(n, 0) > 0) {
                tmp_2 = plus_0(d, 1);
              } else {
                tmp_2 = minus_0(d, 1);
              }
              tmp_1 = tmp_2;
            } else {
              tmp_1 = x_4.qj(Companion_getInstance().gj_1).zj();
            }
            var res = tmp_1;
            var tmp_3;
            if (rangeInLong(res)) {
              var x_5 = toLong(res);
              tmp_3 = makeAPLNumber_0(x_5);
            } else {
              tmp_3 = makeAPLNumber_2(res);
            }
            tmp = tmp_3;
          } else {
            NumericRelationErrors_instance.a34(a, this.t2g_1);
          }
        }
      }
    }
    return tmp;
  };
  protoOf(RoundNumFunctionImpl).q2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.RoundNumFunctionImpl.opLong1Arg' call
    var tmp;
    if (a instanceof APLLong) {
      tmp = a.g2n_1;
    } else {
      if (a instanceof APLDouble) {
        // Inline function 'kotlin.let' call
        var x = a.a2r_1;
        var tmp_0;
        if (x <= (new Long(2, -1048576)).l3() || x >= (new Long(-2, 1048575)).l3()) {
          var x_0 = fromDoubleFloor(Companion_instance, x);
          throw new LongExpressionOverflow(x_0);
        } else {
          tmp_0 = numberToLong(round(x));
        }
        tmp = tmp_0;
      } else {
        if (a instanceof APLBigInt) {
          var x_1 = a.z2q_1;
          throw new LongExpressionOverflow(x_1);
        } else {
          if (a instanceof APLRational) {
            // Inline function 'kotlin.let' call
            var x_2 = a.d31_1;
            var tmp_1;
            if (equals(x_2.pj(), BigIntConstants_getInstance().jj_1)) {
              var n = x_2.oj();
              var d = div_0(n, 2);
              var tmp_2;
              if (signum(rem_0(d, new Long(2, 0))) === 0) {
                tmp_2 = d;
              } else if (compareTo(n, 0) > 0) {
                tmp_2 = plus_0(d, 1);
              } else {
                tmp_2 = minus_0(d, 1);
              }
              tmp_1 = tmp_2;
            } else {
              tmp_1 = x_2.qj(Companion_getInstance().gj_1).zj();
            }
            var res = tmp_1;
            var tmp_3;
            if (rangeInLong(res)) {
              tmp_3 = toLong(res);
            } else {
              throw new LongExpressionOverflow(res);
            }
            tmp = tmp_3;
          } else {
            NumericRelationErrors_instance.a34(a, this.t2g_1);
          }
        }
      }
    }
    return tmp;
  };
  protoOf(RoundNumFunctionImpl).z2h = function () {
    return 'round';
  };
  function RoundNumFunction() {
  }
  protoOf(RoundNumFunction).i2i = function (instantiation) {
    return new RoundNumFunctionImpl(instantiation);
  };
  function makeGeneric($this, a, b, pos) {
    var rank0 = a.t2q() && b.t2q() && (a.v2i() > 0 || b.v2i() > 0);
    return rank0 && _ArrayMemberType___get_isLong__impl__xzhfcp($this.n2x_1) ? new GenericArraySum2ArgsLong($this, a, b, pos, $this.n2x_1) : rank0 && _ArrayMemberType___get_isDouble__impl__6s2782($this.n2x_1) ? new GenericArraySum2ArgsDouble($this, a, b, pos) : new GenericArraySum2ArgsGeneric($this, a, b, pos);
  }
  function sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgLong$0(function_0) {
    this.v3y_1 = function_0;
  }
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgLong$0).w3y = function (a) {
    return this.v3y_1(a);
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgLong$0).m3 = function () {
    return this.v3y_1;
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgLong$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, CellSumFunction1ArgLong) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.m3(), other.m3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgLong$0).hashCode = function () {
    return hashCode(this.m3());
  };
  function sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgDouble$0(function_0) {
    this.x3y_1 = function_0;
  }
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgDouble$0).w3y = function (a) {
    return this.x3y_1(a);
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgDouble$0).m3 = function () {
    return this.x3y_1;
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgDouble$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, CellSumFunction1ArgDouble) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.m3(), other.m3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgDouble$0).hashCode = function () {
    return hashCode(this.m3());
  };
  function sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgGeneric$0(function_0) {
    this.y3y_1 = function_0;
  }
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgGeneric$0).w3y = function (a) {
    return this.y3y_1(a);
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgGeneric$0).m3 = function () {
    return this.y3y_1;
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgGeneric$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, CellSumFunction1ArgGeneric) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.m3(), other.m3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgGeneric$0).hashCode = function () {
    return hashCode(this.m3());
  };
  function eval2Arg$computeTransformation(axisInt, this$0, baseVal, d1, d2, leftArg) {
    ensureValidAxis(axisInt, d2, this$0.t2g_1);
    if (!(Dimensions__get_impl_4npepw(d1, 0) === Dimensions__get_impl_4npepw(d2, axisInt))) {
      throwAPLException(details(new InvalidDimensionsException('Dimensions of A does not match dimensions of B across axis ' + axisInt, this$0.t2g_1), reformatLines('\n                                    An axis specifier of ' + axisInt + " was used when calling the scalar function '" + this$0.a2i() + "'.\n                                    When using an axis specifier, the following things must be true:\n                                    \n                                    1: One of the arguments has to be 1-dimensional.#\n                                    2: the other argument's rank must be at least the size of the given axis argument.#\n                                    3: The number of elements in the 1-dimensional argument must match the size of the given dimension in the other argument.\n                                    \n                                    In this call, the " + (leftArg ? 'left' : 'right') + ' argument was one-dimensional, and the ' + (leftArg ? 'right' : 'left') + '\n                                    argument had the following dimensions: ' + Dimensions__toString_impl_fhouq4(d2) + '. The dimension specified by the axis argument ' + axisInt + ' is ' + Dimensions__get_impl_4npepw(d2, axisInt) + '\n                                    which is not equal to the size of the one-dimensional argument which is ' + Dimensions__get_impl_4npepw(d1, 0) + '.\n                                ')));
    }
    var d = Dimensions__insert_impl_s8tvqx(Dimensions__remove_impl_ve6v38(d2, axisInt), _Dimensions___get_size__impl__uu37ek(d2) - 1 | 0, Dimensions__get_impl_4npepw(d2, axisInt));
    var tmp = 0;
    var tmp_0 = _Dimensions___get_size__impl__uu37ek(d2);
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = tmp_2 === (_Dimensions___get_size__impl__uu37ek(d2) - 1 | 0) ? axisInt : tmp_2 < axisInt ? tmp_2 : tmp_2 + 1 | 0;
      tmp = tmp + 1 | 0;
    }
    var transposeAxis = tmp_1;
    return new TransposedAPLValue(transposeAxis, ResizedArrayImpls_instance.n2j(d, baseVal), this$0.t2g_1, false);
  }
  function MathCombineAPLFunction$combine1ArgGenericToLong$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.q2x(p0);
    };
    l.callableName = 'combine1ArgGenericToLong';
    return l;
  }
  function MathCombineAPLFunction$combine1ArgGenericToDouble$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.r2x(p0);
    };
    l.callableName = 'combine1ArgGenericToDouble';
    return l;
  }
  function MathCombineAPLFunction$combine1Arg$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.c2x(p0);
    };
    l.callableName = 'combine1Arg';
    return l;
  }
  function MathCombineAPLFunction(pos, fns, resultType1Arg, resultType2Arg) {
    fns = fns === VOID ? emptyList() : fns;
    resultType1Arg = resultType1Arg === VOID ? Companion_getInstance_45().z2j_1 : resultType1Arg;
    resultType2Arg = resultType2Arg === VOID ? Companion_getInstance_45().z2j_1 : resultType2Arg;
    APLFunction.call(this, pos, fns);
    this.m2x_1 = resultType1Arg;
    this.n2x_1 = resultType2Arg;
  }
  protoOf(MathCombineAPLFunction).w2g = function (context, a, axis) {
    var a0 = a.g2k();
    if (a0 instanceof APLSingleValue) {
      return this.c2x(a0);
    }
    var rank0 = a0.t2q();
    var tmp;
    if (_ArrayMemberType___get_isLong__impl__xzhfcp(a0.f2n()) && _OptimisationFlags___get_is1ALong__impl__5sl2il(this.l2h())) {
      tmp = new LongArraySum1Arg(this, a0, this.t2g_1);
    } else if (_ArrayMemberType___get_isDouble__impl__6s2782(a0.f2n()) && _OptimisationFlags___get_is1ADouble__impl__kg3og8(this.l2h())) {
      tmp = new DoubleArraySum1Arg(this, a0, this.t2g_1);
    } else if (rank0 && _ArrayMemberType___get_isLong__impl__xzhfcp(this.m2x_1)) {
      var tmp_0 = MathCombineAPLFunction$combine1ArgGenericToLong$ref(this);
      tmp = new GenericArraySum1ArgLongResult(new sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgLong$0(tmp_0), a0);
    } else if (rank0 && _ArrayMemberType___get_isDouble__impl__6s2782(this.m2x_1)) {
      var tmp_1 = MathCombineAPLFunction$combine1ArgGenericToDouble$ref(this);
      tmp = new GenericArraySumDoubleResult(new sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgDouble$0(tmp_1), a0);
    } else {
      var tmp_2 = MathCombineAPLFunction$combine1Arg$ref(this);
      tmp = new GenericArraySum1Arg(new sam$com_dhsdevelopments_kap_builtins_CellSumFunction1Arg_CellSumFunction1ArgGeneric$0(tmp_2), a0);
    }
    return tmp;
  };
  protoOf(MathCombineAPLFunction).o2x = function (a, b, pos) {
    var tmp;
    var tmp_0;
    if (a instanceof APLSingleValue) {
      tmp_0 = b instanceof APLSingleValue;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      throw AssertionError_init_$Create$('a and b cannot be singlevalue');
    } else {
      if (a instanceof APLSingleValue) {
        var tmp_1;
        var tmp_2;
        var tmp_3;
        if (a instanceof APLLong) {
          tmp_3 = _ArrayMemberType___get_isLong__impl__xzhfcp(b.f2n());
        } else {
          tmp_3 = false;
        }
        if (tmp_3) {
          tmp_2 = _OptimisationFlags___get_is2ALongLong__impl__oapfj6(this.l2h());
        } else {
          tmp_2 = false;
        }
        if (tmp_2) {
          tmp_1 = Companion_instance_12.b3z(this, a.g2n_1, b, pos);
        } else {
          var tmp_4;
          var tmp_5;
          if (a instanceof APLDouble) {
            tmp_5 = _ArrayMemberType___get_isDouble__impl__6s2782(b.f2n());
          } else {
            tmp_5 = false;
          }
          if (tmp_5) {
            tmp_4 = _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(this.l2h());
          } else {
            tmp_4 = false;
          }
          if (tmp_4) {
            tmp_1 = new DoubleArraySum2ArgsLeftScalar(this, a.a2r_1, b, pos);
          } else {
            var tmp_6;
            var tmp_7;
            if (a instanceof APLLong) {
              tmp_7 = _ArrayMemberType___get_isDouble__impl__6s2782(b.f2n());
            } else {
              tmp_7 = false;
            }
            if (tmp_7) {
              tmp_6 = _OptimisationFlags___get_is2ADFloatConversionRules__impl__xlul5x(this.l2h());
            } else {
              tmp_6 = false;
            }
            if (tmp_6) {
              tmp_1 = new DoubleArraySum2ArgsLeftScalar(this, a.g2n_1.l3(), b, pos);
            } else {
              var tmp_8;
              var tmp_9;
              if (a instanceof APLDouble) {
                tmp_9 = _ArrayMemberType___get_isLong__impl__xzhfcp(b.f2n());
              } else {
                tmp_9 = false;
              }
              if (tmp_9) {
                tmp_8 = _OptimisationFlags___get_is2ADFloatConversionRules__impl__xlul5x(this.l2h());
              } else {
                tmp_8 = false;
              }
              if (tmp_8) {
                tmp_1 = new DoubleArraySum2ArgsLeftScalar(this, a.a2r_1, new LongToDoubleArrayProjection(b, pos), pos);
              } else {
                if (b.n2l()) {
                  tmp_1 = Companion_instance_51.s2i(this.o2x(a, b.h2k(0), pos));
                } else {
                  tmp_1 = makeGeneric(this, a, b, pos);
                }
              }
            }
          }
        }
        tmp = tmp_1;
      } else {
        if (b instanceof APLSingleValue) {
          var tmp_10;
          var tmp_11;
          var tmp_12;
          if (b instanceof APLLong) {
            tmp_12 = _ArrayMemberType___get_isLong__impl__xzhfcp(a.f2n());
          } else {
            tmp_12 = false;
          }
          if (tmp_12) {
            tmp_11 = _OptimisationFlags___get_is2ALongLong__impl__oapfj6(this.l2h());
          } else {
            tmp_11 = false;
          }
          if (tmp_11) {
            tmp_10 = Companion_instance_13.a3z(this, a, b.g2n_1, pos);
          } else {
            var tmp_13;
            var tmp_14;
            if (b instanceof APLDouble) {
              tmp_14 = _ArrayMemberType___get_isDouble__impl__6s2782(a.f2n());
            } else {
              tmp_14 = false;
            }
            if (tmp_14) {
              tmp_13 = _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(this.l2h());
            } else {
              tmp_13 = false;
            }
            if (tmp_13) {
              tmp_10 = new DoubleArraySum2ArgsRightScalar(this, a, b.a2r_1, pos);
            } else {
              if (a.n2l()) {
                tmp_10 = Companion_instance_51.s2i(this.o2x(a.h2k(0), b, pos));
              } else {
                var tmp_15;
                var tmp_16;
                if (b instanceof APLLong) {
                  tmp_16 = _ArrayMemberType___get_isDouble__impl__6s2782(a.f2n());
                } else {
                  tmp_16 = false;
                }
                if (tmp_16) {
                  tmp_15 = _OptimisationFlags___get_is2ADFloatConversionRules__impl__xlul5x(this.l2h());
                } else {
                  tmp_15 = false;
                }
                if (tmp_15) {
                  tmp_10 = new DoubleArraySum2ArgsRightScalar(this, a, b.g2n_1.l3(), pos);
                } else {
                  var tmp_17;
                  var tmp_18;
                  if (b instanceof APLDouble) {
                    tmp_18 = _ArrayMemberType___get_isLong__impl__xzhfcp(a.f2n());
                  } else {
                    tmp_18 = false;
                  }
                  if (tmp_18) {
                    tmp_17 = _OptimisationFlags___get_is2ADFloatConversionRules__impl__xlul5x(this.l2h());
                  } else {
                    tmp_17 = false;
                  }
                  if (tmp_17) {
                    tmp_10 = new DoubleArraySum2ArgsRightScalar(this, new LongToDoubleArrayProjection(a, pos), b.a2r_1, pos);
                  } else {
                    tmp_10 = makeGeneric(this, a, b, pos);
                  }
                }
              }
            }
          }
          tmp = tmp_10;
        } else {
          if (a.v2i() === 0 && b.v2i() === 0) {
            tmp = Companion_instance_51.s2i(this.o2x(a.h2k(0), b.h2k(0), pos));
          } else {
            if (_ArrayMemberType___get_isLong__impl__xzhfcp(a.f2n()) && _ArrayMemberType___get_isLong__impl__xzhfcp(b.f2n()) && _OptimisationFlags___get_is2ALongLong__impl__oapfj6(this.l2h())) {
              tmp = Companion_instance_14.z3y(this, a, b, pos);
            } else {
              if (_ArrayMemberType___get_isDouble__impl__6s2782(a.f2n()) && _ArrayMemberType___get_isDouble__impl__6s2782(b.f2n()) && _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(this.l2h())) {
                tmp = new DoubleArraySum2Args(this, a, b, pos);
              } else {
                if (_OptimisationFlags___get_isFloatConversionRules__impl__ydk03g(this.l2h()) && _ArrayMemberType___get_isDouble__impl__6s2782(a.f2n()) && _ArrayMemberType___get_isLong__impl__xzhfcp(b.f2n())) {
                  tmp = new DoubleArraySum2Args(this, a, new LongToDoubleArrayProjection(b, pos), pos);
                } else {
                  if (_OptimisationFlags___get_isFloatConversionRules__impl__ydk03g(this.l2h()) && _ArrayMemberType___get_isLong__impl__xzhfcp(a.f2n()) && _ArrayMemberType___get_isDouble__impl__6s2782(b.f2n())) {
                    tmp = new DoubleArraySum2Args(this, new LongToDoubleArrayProjection(a, pos), b, pos);
                  } else {
                    tmp = makeGeneric(this, a, b, pos);
                  }
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(MathCombineAPLFunction).a2h = function (context, a, b, axis) {
    var a0 = a.g2k();
    var b0 = b.g2k();
    var tmp;
    if (a0 instanceof APLSingleValue) {
      tmp = b0 instanceof APLSingleValue;
    } else {
      tmp = false;
    }
    if (tmp) {
      return this.d2x(a0, b0);
    }
    if (!(axis == null)) {
      var aDimensions = a0.o2i();
      var bDimensions = b0.o2i();
      var axisInt = axis.p2i(this.t2g_1).i2k();
      var tmp_0;
      if (_Dimensions___get_size__impl__uu37ek(aDimensions) === 1 && _Dimensions___get_size__impl__uu37ek(bDimensions) === 1) {
        var tmp_1;
        if (axisInt === 0) {
          tmp_1 = new Pair(a0, b0);
        } else {
          throwAPLException(IllegalAxisException_init_$Create$(axisInt, aDimensions, this.t2g_1));
        }
        tmp_0 = tmp_1;
      } else if (_Dimensions___get_size__impl__uu37ek(aDimensions) === 1) {
        tmp_0 = new Pair(eval2Arg$computeTransformation(axisInt, this, a0, aDimensions, bDimensions, true), b0);
      } else if (_Dimensions___get_size__impl__uu37ek(bDimensions) === 1) {
        tmp_0 = new Pair(a0, eval2Arg$computeTransformation(axisInt, this, b0, bDimensions, aDimensions, false));
      } else {
        throwAPLException(new APLIllegalArgumentException('When specifying an axis, A or B has to be rank 1', this.t2g_1));
      }
      var _destruct__k2r9zo = tmp_0;
      var a1 = _destruct__k2r9zo.de();
      var b1 = _destruct__k2r9zo.ee();
      return this.o2x(a1, b1, this.t2g_1);
    } else {
      return this.o2x(a0, b0, this.t2g_1);
    }
  };
  protoOf(MathCombineAPLFunction).c2x = function (a) {
    throwAPLException(new Unimplemented1ArgException(this.t2g_1));
  };
  protoOf(MathCombineAPLFunction).e2x = function (a) {
    throw IllegalStateException_init_$Create$('Optimisation not implemented for: ' + getKClassFromExpression(this).b9());
  };
  protoOf(MathCombineAPLFunction).p2x = function (a) {
    throw IllegalStateException_init_$Create$('Optimisation not implemented for: ' + getKClassFromExpression(this).b9());
  };
  protoOf(MathCombineAPLFunction).q2x = function (a) {
    throw IllegalStateException_init_$Create$('Optimisation not implemented for: ' + getKClassFromExpression(this).b9());
  };
  protoOf(MathCombineAPLFunction).r2x = function (a) {
    throw IllegalStateException_init_$Create$('Optimisation not implemented for: ' + getKClassFromExpression(this).b9());
  };
  protoOf(MathCombineAPLFunction).d2x = function (a, b) {
    throwAPLException(new Unimplemented2ArgException(this.t2g_1));
  };
  protoOf(MathCombineAPLFunction).f2x = function (a, b) {
    throw IllegalStateException_init_$Create$('Optimisation not implemented for: ' + getKClassFromExpression(this).b9());
  };
  protoOf(MathCombineAPLFunction).s2x = function (a, b) {
    throw IllegalStateException_init_$Create$('Optimisation not implemented for: ' + getKClassFromExpression(this).b9());
  };
  protoOf(MathCombineAPLFunction).t2x = function (a, b) {
    throw IllegalStateException_init_$Create$('Optimisation not implemented for: ' + getKClassFromExpression(this).b9());
  };
  protoOf(MathCombineAPLFunction).u2x = function (a, b) {
    throw IllegalStateException_init_$Create$('Optimisation not implemented for: ' + getKClassFromExpression(this).b9());
  };
  protoOf(MathCombineAPLFunction).m2h = function (context, a, axis) {
    return this.e2x(a);
  };
  protoOf(MathCombineAPLFunction).n2h = function (context, a, axis) {
    return this.p2x(a);
  };
  protoOf(MathCombineAPLFunction).o2h = function (context, a, b, axis) {
    return this.f2x(a, b);
  };
  protoOf(MathCombineAPLFunction).p2h = function (context, a, b, axis) {
    return this.s2x(a, b);
  };
  function MathNumericCombineAPLFunction(pos, fns, resultType1Arg, resultType2Arg) {
    fns = fns === VOID ? emptyList() : fns;
    resultType1Arg = resultType1Arg === VOID ? Companion_getInstance_45().z2j_1 : resultType1Arg;
    resultType2Arg = resultType2Arg === VOID ? Companion_getInstance_45().z2j_1 : resultType2Arg;
    MathCombineAPLFunction.call(this, pos, fns, resultType1Arg, resultType2Arg);
  }
  protoOf(MathNumericCombineAPLFunction).c2x = function (a) {
    return this.z3p(a.p2i(this.t2g_1));
  };
  protoOf(MathNumericCombineAPLFunction).d2x = function (a, b) {
    return this.a3q(a.p2i(this.t2g_1), b.p2i(this.t2g_1));
  };
  protoOf(MathNumericCombineAPLFunction).z3p = function (a) {
    throwAPLException(new Unimplemented1ArgException(this.t2g_1));
  };
  protoOf(MathNumericCombineAPLFunction).a3q = function (a, b) {
    throwAPLException(new Unimplemented2ArgException(this.t2g_1));
  };
  function complexMod(a, b) {
    return b.m3o(a.u3o(complexFloor(b.e3p(a.t3s(a.equals(Companion_getInstance_30().f3p_1) ? 1.0 : 0.0)))));
  }
  function floatGcd(a, b) {
    if (!isFinite(a) || !isFinite(b)) {
      throw ArithmeticException_init_$Create$_0('gcd on non-finite doubles');
    }
    // Inline function 'kotlin.math.absoluteValue' call
    var a1 = Math.abs(a);
    // Inline function 'kotlin.math.absoluteValue' call
    var b1 = Math.abs(b);
    if (b1 < a1) {
      var tmp = b1;
      b1 = a1;
      a1 = tmp;
    }
    while (true) {
      // Inline function 'kotlin.math.absoluteValue' call
      var this_0 = a1;
      if (Math.abs(this_0) < 1.0E-5)
        return b1;
      var r = b1 % a1;
      b1 = a1;
      a1 = r;
    }
  }
  function complexGcd(a, b) {
    var a1 = a.e3x();
    var b1 = b.e3x();
    while (true) {
      if (a1.c3z() > b1.c3z()) {
        var tmp = a1;
        a1 = b1;
        b1 = tmp;
      }
      if (a1.c3z() < 0.2) {
        return b1;
      }
      var quot = b1.e3p(a1);
      var q = quot.e3x();
      var r = b1.m3o(q.u3o(a1));
      b1 = a1;
      a1 = r;
    }
  }
  function integerGcd(m, n) {
    if (m.equals(new Long(0, 0)))
      return n;
    if (n.equals(new Long(0, 0)))
      return m;
    var aa = new Long(1, 0);
    var b = new Long(1, 0);
    var a = new Long(0, 0);
    var bb = new Long(0, 0);
    // Inline function 'kotlin.math.absoluteValue' call
    var c = abs_0(m);
    // Inline function 'kotlin.math.absoluteValue' call
    var d = abs_0(n);
    while (true) {
      var r = c.a3(d);
      if (r.equals(new Long(0, 0)))
        return d;
      var q = c.z2(d);
      var ta = aa;
      var tb = bb;
      c = d;
      d = r;
      aa = a;
      a = ta.x2(q.y2(a));
      bb = b;
      b = tb.x2(q.y2(b));
    }
  }
  function rationalGcd(a, b) {
    var a1 = a.ak();
    var b1 = b.ak();
    if (b1.vj(a1) < 0) {
      var tmp = b1;
      b1 = a1;
      a1 = tmp;
    }
    while (true) {
      if (a1.xj() === 0) {
        return b1;
      }
      var r = b1.uj(a1);
      b1 = a1;
      a1 = r;
    }
  }
  function complexFloor(z) {
    // Inline function 'kotlin.math.floor' call
    var x = z.a3o_1;
    var fr = Math.floor(x);
    var dr = z.a3o_1 - fr;
    // Inline function 'kotlin.math.floor' call
    var x_0 = z.b3o_1;
    var fi = Math.floor(x_0);
    var di = z.b3o_1 - fi;
    if (dr > 1) {
      fr = fr + 1.0;
      dr = 0.0;
    }
    if (di > 1) {
      fi = fi + 1.0;
      di = 0.0;
    }
    return dr + di < 1 ? new Complex(fr, fi) : dr < di ? new Complex(fr, fi + 1.0) : new Complex(fr + 1.0, fi);
  }
  function complexCeiling(value) {
    return complexFloor(value.d3()).d3();
  }
  function LongArraySum1Arg(fn, a, pos) {
    APLArray.call(this);
    this.d3z_1 = fn;
    this.e3z_1 = a;
    this.f3z_1 = pos;
    this.g3z_1 = this.e3z_1.o2i();
  }
  protoOf(LongArraySum1Arg).o2i = function () {
    return this.g3z_1;
  };
  protoOf(LongArraySum1Arg).n = function () {
    return this.e3z_1.n();
  };
  protoOf(LongArraySum1Arg).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(LongArraySum1Arg).h2k = function (p) {
    var tmp;
    try {
      tmp = makeAPLNumber_0(this.i2n(p));
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        tmp_0 = makeAPLNumber_2(e.ek_1);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(LongArraySum1Arg).i2n = function (p) {
    var tmp;
    try {
      tmp = this.e3z_1.i2n(p);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        var res = this.d3z_1.c2x(makeAPLNumber_2(e.ek_1));
        var tmp_1;
        if (res instanceof APLLong) {
          return res.g2n_1;
        } else {
          if (res instanceof APLBigInt) {
            throw new LongExpressionOverflow(res.z2q_1);
          } else {
            var message = 'Invalid result type from combine1Arg: ' + getKClassFromExpression(res).b9();
            throw IllegalStateException_init_$Create$(toString(message));
          }
        }
      } else {
        throw $p;
      }
    }
    var a0 = tmp;
    return this.d3z_1.e2x(a0);
  };
  function DoubleArraySum1Arg(fn, a, pos) {
    APLArray.call(this);
    this.h3z_1 = fn;
    this.i3z_1 = a;
    this.j3z_1 = pos;
    this.k3z_1 = this.i3z_1.o2i();
  }
  protoOf(DoubleArraySum1Arg).o2i = function () {
    return this.k3z_1;
  };
  protoOf(DoubleArraySum1Arg).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(DoubleArraySum1Arg).h2k = function (p) {
    return makeAPLNumber(this.y2p(p));
  };
  protoOf(DoubleArraySum1Arg).y2p = function (p) {
    return this.h3z_1.p2x(this.i3z_1.y2p(p));
  };
  function opLong_14($this, p) {
    var v = $this.m3z_1.h2k(p);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(v instanceof APLSingleValue)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return $this.l3z_1.w3y(v);
  }
  function GenericArraySum1ArgLongResult(fn, a) {
    APLArray.call(this);
    this.l3z_1 = fn;
    this.m3z_1 = a;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(_Dimensions___get_size__impl__uu37ek(this.o2i()) > 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(GenericArraySum1ArgLongResult).o2i = function () {
    return this.m3z_1.o2i();
  };
  protoOf(GenericArraySum1ArgLongResult).n = function () {
    return this.m3z_1.n();
  };
  protoOf(GenericArraySum1ArgLongResult).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(GenericArraySum1ArgLongResult).h2k = function (p) {
    var tmp;
    try {
      tmp = opLong_14(this, p);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        return makeAPLNumber_2(e.ek_1);
      } else {
        throw $p;
      }
    }
    var res = tmp;
    return makeAPLNumber_0(res);
  };
  protoOf(GenericArraySum1ArgLongResult).i2n = function (p) {
    return opLong_14(this, p);
  };
  function CellSumFunction1ArgGeneric() {
  }
  function CellSumFunction1ArgLong() {
  }
  function CellSumFunction1ArgDouble() {
  }
  function opDouble_9($this, p) {
    var v = $this.o3z_1.h2k(p);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(v instanceof APLSingleValue)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return $this.n3z_1.w3y(v);
  }
  function GenericArraySumDoubleResult(fn, a) {
    APLArray.call(this);
    this.n3z_1 = fn;
    this.o3z_1 = a;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(_Dimensions___get_size__impl__uu37ek(this.o2i()) > 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(GenericArraySumDoubleResult).o2i = function () {
    return this.o3z_1.o2i();
  };
  protoOf(GenericArraySumDoubleResult).n = function () {
    return this.o3z_1.n();
  };
  protoOf(GenericArraySumDoubleResult).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(GenericArraySumDoubleResult).h2k = function (p) {
    return makeAPLNumber(opDouble_9(this, p));
  };
  protoOf(GenericArraySumDoubleResult).y2p = function (p) {
    return opDouble_9(this, p);
  };
  function GenericArraySum1Arg(fn, a) {
    APLArray.call(this);
    this.p3z_1 = fn;
    this.q3z_1 = a;
  }
  protoOf(GenericArraySum1Arg).o2i = function () {
    return this.q3z_1.o2i();
  };
  protoOf(GenericArraySum1Arg).n = function () {
    return this.q3z_1.n();
  };
  protoOf(GenericArraySum1Arg).h2k = function (p) {
    var tmp = this.q3z_1;
    if (tmp instanceof APLSingleValue) {
      return this.p3z_1.w3y(this.q3z_1);
    }
    var v = this.q3z_1.h2k(p);
    var tmp_0;
    if (v instanceof APLSingleValue) {
      tmp_0 = this.p3z_1.w3y(v);
    } else {
      tmp_0 = new GenericArraySum1Arg(this.p3z_1, v);
    }
    return tmp_0;
  };
  function Companion_10() {
  }
  protoOf(Companion_10).b3z = function (fn, a, b, pos) {
    return new LongArraySum2ArgsLeftScalar(fn, a, b, pos, ArrayMemberType__union_impl_f3mg97(fn.n2x_1, Companion_getInstance_45().x2j_1));
  };
  var Companion_instance_12;
  function Companion_getInstance_12() {
    return Companion_instance_12;
  }
  function LongArraySum2ArgsLeftScalar(fn, a0, b0, pos, specialisedType) {
    APLArray.call(this);
    this.r3z_1 = fn;
    this.s3z_1 = a0;
    this.t3z_1 = b0;
    this.u3z_1 = pos;
    this.v3z_1 = specialisedType;
    this.w3z_1 = this.t3z_1.o2i();
  }
  protoOf(LongArraySum2ArgsLeftScalar).f2n = function () {
    return this.v3z_1;
  };
  protoOf(LongArraySum2ArgsLeftScalar).o2i = function () {
    return this.w3z_1;
  };
  protoOf(LongArraySum2ArgsLeftScalar).h2k = function (p) {
    var tmp;
    try {
      tmp = makeAPLNumber_0(this.i2n(p));
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        tmp_0 = makeAPLNumber_2(e.ek_1);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(LongArraySum2ArgsLeftScalar).i2n = function (p) {
    var tmp;
    try {
      tmp = this.t3z_1.i2n(p);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        var b2 = new APLBigInt(e.ek_1);
        var res = this.r3z_1.d2x(makeAPLNumber_0(this.s3z_1), b2).w2q();
        throw new LongExpressionOverflow(res.o2z(this.u3z_1));
      } else {
        throw $p;
      }
    }
    var b1 = tmp;
    return this.r3z_1.f2x(this.s3z_1, b1);
  };
  function DoubleArraySum2ArgsLeftScalar(fn, a0, b0, pos) {
    APLArray.call(this);
    this.x3z_1 = fn;
    this.y3z_1 = a0;
    this.z3z_1 = b0;
    this.a40_1 = pos;
    this.b40_1 = this.z3z_1.o2i();
  }
  protoOf(DoubleArraySum2ArgsLeftScalar).o2i = function () {
    return this.b40_1;
  };
  protoOf(DoubleArraySum2ArgsLeftScalar).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(DoubleArraySum2ArgsLeftScalar).h2k = function (p) {
    return makeAPLNumber(this.y2p(p));
  };
  protoOf(DoubleArraySum2ArgsLeftScalar).y2p = function (p) {
    return this.x3z_1.s2x(this.y3z_1, this.z3z_1.k2q(p, this.a40_1));
  };
  function Companion_11() {
  }
  protoOf(Companion_11).a3z = function (fn, a, b, pos) {
    return new LongArraySum2ArgsRightScalar(fn, a, b, pos, ArrayMemberType__union_impl_f3mg97(fn.n2x_1, Companion_getInstance_45().x2j_1));
  };
  var Companion_instance_13;
  function Companion_getInstance_13() {
    return Companion_instance_13;
  }
  function LongArraySum2ArgsRightScalar(fn, a0, b0, pos, specialisedType) {
    APLArray.call(this);
    this.c40_1 = fn;
    this.d40_1 = a0;
    this.e40_1 = b0;
    this.f40_1 = pos;
    this.g40_1 = specialisedType;
    this.h40_1 = this.d40_1.o2i();
  }
  protoOf(LongArraySum2ArgsRightScalar).f2n = function () {
    return this.g40_1;
  };
  protoOf(LongArraySum2ArgsRightScalar).o2i = function () {
    return this.h40_1;
  };
  protoOf(LongArraySum2ArgsRightScalar).h2k = function (p) {
    var tmp;
    try {
      tmp = makeAPLNumber_0(this.i2n(p));
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        tmp_0 = makeAPLNumber_2(e.ek_1);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(LongArraySum2ArgsRightScalar).i2n = function (p) {
    var tmp;
    try {
      tmp = this.d40_1.i2n(p);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        var a2 = new APLBigInt(e.ek_1);
        var res = this.c40_1.d2x(a2, makeAPLNumber_0(this.e40_1)).w2q();
        throw new LongExpressionOverflow(res.o2z(this.f40_1));
      } else {
        throw $p;
      }
    }
    var a1 = tmp;
    return this.c40_1.f2x(a1, this.e40_1);
  };
  function DoubleArraySum2ArgsRightScalar(fn, a0, b0, pos) {
    APLArray.call(this);
    this.i40_1 = fn;
    this.j40_1 = a0;
    this.k40_1 = b0;
    this.l40_1 = pos;
    this.m40_1 = this.j40_1.o2i();
  }
  protoOf(DoubleArraySum2ArgsRightScalar).o2i = function () {
    return this.m40_1;
  };
  protoOf(DoubleArraySum2ArgsRightScalar).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(DoubleArraySum2ArgsRightScalar).h2k = function (p) {
    return makeAPLNumber(this.y2p(p));
  };
  protoOf(DoubleArraySum2ArgsRightScalar).y2p = function (p) {
    return this.i40_1.s2x(this.j40_1.k2q(p, this.l40_1), this.k40_1);
  };
  function Companion_12() {
  }
  protoOf(Companion_12).z3y = function (fn, a, b, pos) {
    return new LongArraySum2Args(fn, a, b, pos, ArrayMemberType__union_impl_f3mg97(fn.n2x_1, Companion_getInstance_45().x2j_1));
  };
  var Companion_instance_14;
  function Companion_getInstance_14() {
    return Companion_instance_14;
  }
  function LongArraySum2Args(fn, a0, b0, pos, specialisedType) {
    APLArray.call(this);
    this.n40_1 = fn;
    this.o40_1 = a0;
    this.p40_1 = b0;
    this.q40_1 = pos;
    this.r40_1 = specialisedType;
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!Dimensions__compareEquals_impl_5g4nme(this.o40_1.o2i(), this.p40_1.o2i())) {
      throwMismatchedScalarFunctionArgs(this.o40_1.o2i(), this.p40_1.o2i(), this.q40_1);
    }
    this.s40_1 = this.o40_1.o2i();
  }
  protoOf(LongArraySum2Args).f2n = function () {
    return this.r40_1;
  };
  protoOf(LongArraySum2Args).o2i = function () {
    return this.s40_1;
  };
  protoOf(LongArraySum2Args).h2k = function (p) {
    var tmp;
    try {
      tmp = makeAPLNumber_0(this.i2n(p));
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        tmp_0 = new APLBigInt(e.ek_1);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(LongArraySum2Args).i2n = function (p) {
    var tmp0 = this.o40_1;
    var tmp2 = this.p40_1;
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.eval2ArgLongFnOnIndexes' call
      var tmp;
      try {
        tmp = tmp0.i2n(p);
      } catch ($p) {
        var tmp_0;
        if ($p instanceof LongExpressionOverflow) {
          var e = $p;
          var a1 = makeAPLNumber_2(e.ek_1);
          var b1 = tmp2.h2k(p);
          var res = this.n40_1.d2x(a1.p2i(this.q40_1), b1.p2i(this.q40_1)).g2k();
          var tmp_1;
          if (res instanceof APLLong) {
            tmp$ret$1 = res.g2n_1;
            break $l$block_0;
          } else {
            if (res instanceof APLBigInt) {
              throw new LongExpressionOverflow(res.z2q_1);
            } else {
              var message = 'Unexpected return value from fallback function';
              throw IllegalStateException_init_$Create$(toString(message));
            }
          }
        } else {
          throw $p;
        }
      }
      var a0 = tmp;
      var tmp_2;
      try {
        tmp_2 = tmp2.i2n(p);
      } catch ($p) {
        var tmp_3;
        if ($p instanceof LongExpressionOverflow) {
          var e_0 = $p;
          var a1_0 = makeAPLNumber_0(a0);
          var b1_0 = tmp2.h2k(p);
          var res_0 = this.n40_1.d2x(a1_0.p2i(this.q40_1), b1_0.p2i(this.q40_1)).g2k();
          var tmp_4;
          if (res_0 instanceof APLLong) {
            tmp$ret$1 = res_0.g2n_1;
            break $l$block_0;
          } else {
            if (res_0 instanceof APLBigInt) {
              throw new LongExpressionOverflow(res_0.z2q_1);
            } else {
              var message_0 = 'Unexpected return value from fallback function';
              throw IllegalStateException_init_$Create$(toString(message_0));
            }
          }
        } else {
          throw $p;
        }
      }
      var b0 = tmp_2;
      tmp$ret$1 = this.n40_1.f2x(a0, b0);
    }
    return tmp$ret$1;
  };
  function DoubleArraySum2Args(fn, a0, b0, pos) {
    APLArray.call(this);
    this.t40_1 = fn;
    this.u40_1 = a0;
    this.v40_1 = b0;
    this.w40_1 = pos;
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!Dimensions__compareEquals_impl_5g4nme(this.u40_1.o2i(), this.v40_1.o2i())) {
      throwMismatchedScalarFunctionArgs(this.u40_1.o2i(), this.v40_1.o2i(), this.w40_1);
    }
    this.x40_1 = this.u40_1.o2i();
  }
  protoOf(DoubleArraySum2Args).o2i = function () {
    return this.x40_1;
  };
  protoOf(DoubleArraySum2Args).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(DoubleArraySum2Args).h2k = function (p) {
    return makeAPLNumber(this.y2p(p));
  };
  protoOf(DoubleArraySum2Args).y2p = function (p) {
    return this.t40_1.s2x(this.u40_1.y2p(p), this.v40_1.y2p(p));
  };
  function opLong_15($this, p) {
    var a1 = $this.z40_1.n2l() ? $this.z40_1.o2l().g2k() : $this.z40_1.h2k(p).g2k();
    var b1 = $this.a41_1.n2l() ? $this.a41_1.o2l().g2k() : $this.a41_1.h2k(p).g2k();
    var tmp;
    if (a1 instanceof APLSingleValue) {
      tmp = b1 instanceof APLSingleValue;
    } else {
      tmp = false;
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!tmp) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return $this.y40_1.t2x(a1, b1);
  }
  function opDouble_10($this, p) {
    var a1 = $this.z40_1.n2l() ? $this.z40_1.o2l().g2k() : $this.z40_1.h2k(p).g2k();
    var b1 = $this.a41_1.n2l() ? $this.a41_1.o2l().g2k() : $this.a41_1.h2k(p).g2k();
    var tmp;
    if (a1 instanceof APLSingleValue) {
      tmp = b1 instanceof APLSingleValue;
    } else {
      tmp = false;
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!tmp) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return $this.y40_1.u2x(a1, b1);
  }
  function GenericArraySum2ArgsGeneric(fn, a0, b0, pos) {
    GenericArraySum2Args.call(this, fn, a0, b0, pos);
  }
  protoOf(GenericArraySum2ArgsGeneric).h2k = function (p) {
    var a1 = this.z40_1.n2l() ? this.z40_1.o2l().g2k() : this.z40_1.h2k(p).g2k();
    var b1 = this.a41_1.n2l() ? this.a41_1.o2l().g2k() : this.a41_1.h2k(p).g2k();
    var tmp;
    var tmp_0;
    if (a1 instanceof APLSingleValue) {
      tmp_0 = b1 instanceof APLSingleValue;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.y40_1.d2x(a1, b1);
    } else {
      tmp = this.y40_1.o2x(a1, b1, this.b41_1);
    }
    return tmp;
  };
  function GenericArraySum2ArgsLong(fn, a0, b0, pos, specialisedType) {
    specialisedType = specialisedType === VOID ? Companion_getInstance_45().x2j_1 : specialisedType;
    GenericArraySum2Args.call(this, fn, a0, b0, pos);
    this.t41_1 = specialisedType;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(this.c41_1 > 0 || this.d41_1 > 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(GenericArraySum2ArgsLong).f2n = function () {
    return this.t41_1;
  };
  protoOf(GenericArraySum2ArgsLong).h2k = function (p) {
    var tmp;
    try {
      tmp = opLong_15(this, p);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        return makeAPLNumber_2(e.ek_1);
      } else {
        throw $p;
      }
    }
    var res = tmp;
    return makeAPLNumber_0(res);
  };
  protoOf(GenericArraySum2ArgsLong).i2n = function (p) {
    return opLong_15(this, p);
  };
  function GenericArraySum2ArgsDouble(fn, a0, b0, pos) {
    GenericArraySum2Args.call(this, fn, a0, b0, pos);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(this.c41_1 > 0 || this.d41_1 > 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(GenericArraySum2ArgsDouble).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(GenericArraySum2ArgsDouble).h2k = function (p) {
    return makeAPLNumber(opDouble_10(this, p));
  };
  protoOf(GenericArraySum2ArgsDouble).y2p = function (p) {
    return opDouble_10(this, p);
  };
  function GenericArraySum2Args(fn, a0, b0, pos) {
    APLArray.call(this);
    this.y40_1 = fn;
    this.z40_1 = a0;
    this.a41_1 = b0;
    this.b41_1 = pos;
    this.c41_1 = this.z40_1.v2i();
    this.d41_1 = this.a41_1.v2i();
    this.e41_1 = this.c41_1 === 0 ? this.a41_1.o2i() : this.z40_1.o2i();
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!(this.c41_1 === 0 || this.d41_1 === 0 || Dimensions__compareEquals_impl_5g4nme(this.z40_1.o2i(), this.a41_1.o2i()))) {
      throwMismatchedScalarFunctionArgs(this.z40_1.o2i(), this.a41_1.o2i(), this.b41_1);
    }
  }
  protoOf(GenericArraySum2Args).o2i = function () {
    return this.e41_1;
  };
  protoOf(GenericArraySum2Args).f2n = function () {
    return ArrayMemberType__intersection_impl_osmuy1(ArrayMemberType__intersection_impl_osmuy1(Companion_getInstance_45().b2k_1, this.z40_1.f2n()), this.a41_1.f2n());
  };
  function throwMismatchedScalarFunctionArgs(aDimensions, bDimensions, pos) {
    throwAPLException(new InvalidDimensionsException('Arguments must be of the same dimension, or one of the arguments must be a scalar. aDimensions=' + Dimensions__toString_impl_fhouq4(aDimensions) + ', bDimensions=' + Dimensions__toString_impl_fhouq4(bDimensions), pos));
  }
  function subFn$factory() {
    return getPropertyCallableRef('subFn', 1, KProperty1, function (receiver) {
      return _get_subFn__b8fuxj(receiver);
    }, null);
  }
  function addFn$factory() {
    return getPropertyCallableRef('addFn', 1, KProperty1, function (receiver) {
      return _get_addFn__k0ka54(receiver);
    }, null);
  }
  function divFn$factory() {
    return getPropertyCallableRef('divFn', 1, KProperty1, function (receiver) {
      return _get_divFn__iicy88(receiver);
    }, null);
  }
  function mulFn$factory() {
    return getPropertyCallableRef('mulFn', 1, KProperty1, function (receiver) {
      return _get_mulFn__e2j7ff(receiver);
    }, null);
  }
  function logFn$factory() {
    return getPropertyCallableRef('logFn', 1, KProperty1, function (receiver) {
      return _get_logFn__emysbf(receiver);
    }, null);
  }
  function divFn$factory_0() {
    return getPropertyCallableRef('divFn', 1, KProperty1, function (receiver) {
      return _get_divFn__iicy88_0(receiver);
    }, null);
  }
  function powerFn$factory() {
    return getPropertyCallableRef('powerFn', 1, KProperty1, function (receiver) {
      return _get_powerFn__lo6w3g(receiver);
    }, null);
  }
  function exptFn$factory() {
    return getPropertyCallableRef('exptFn', 1, KProperty1, function (receiver) {
      return _get_exptFn__g5be8c(receiver);
    }, null);
  }
  function logFn$factory_0() {
    return getPropertyCallableRef('logFn', 1, KProperty1, function (receiver) {
      return _get_logFn__emysbf_0(receiver);
    }, null);
  }
  function PowerAPLOperator$PowerAPLFunctionWithValueDescriptor$make$1($instantiation, this$0) {
    this.f42_1 = this$0;
    APLFunction.call(this, $instantiation);
  }
  protoOf(PowerAPLOperator$PowerAPLFunctionWithValueDescriptor$make$1).w2g = function (context, a, axis) {
    var iterations = this.f42_1.h42_1.j31(context);
    var n = iterations.p2i(this.t2g_1).w2s(this.t2g_1);
    if (n.a1(new Long(0, 0)) < 0) {
      throwAPLException(new APLIllegalArgumentException('Argument to power is negative: ' + n.toString(), this.t2g_1));
    }
    var engine = context.j38_1;
    var curr = a;
    while (n.a1(new Long(0, 0)) > 0) {
      engine.i42();
      curr = this.f42_1.g42_1.w2g(context, curr, null).x2g();
      n = n.c3();
    }
    return curr;
  };
  function PowerAPLOperator$PowerAPLFunctionDescriptor$make$1($instantiation, this$0) {
    this.n42_1 = this$0;
    APLFunction.call(this, $instantiation);
  }
  protoOf(PowerAPLOperator$PowerAPLFunctionDescriptor$make$1).w2g = function (context, a, axis) {
    var engine = context.j38_1;
    var curr = a;
    $l$loop: while (true) {
      engine.i42();
      var next = this.n42_1.o42_1.w2g(context, curr, null).x2g();
      var checkResult = this.n42_1.p42_1.a2h(context, next, curr, null).x2g();
      curr = next;
      if (checkResult.s2q()) {
        break $l$loop;
      }
      context.j38_1.q42(this.t2g_1);
    }
    return curr;
  };
  function PowerAPLFunctionWithValueDescriptor(fn, instr) {
    this.g42_1 = fn;
    this.h42_1 = instr;
  }
  protoOf(PowerAPLFunctionWithValueDescriptor).i2i = function (instantiation) {
    return new PowerAPLOperator$PowerAPLFunctionWithValueDescriptor$make$1(instantiation, this);
  };
  function PowerAPLFunctionDescriptor(fn1, fn2) {
    this.o42_1 = fn1;
    this.p42_1 = fn2;
  }
  protoOf(PowerAPLFunctionDescriptor).i2i = function (instantiation) {
    return new PowerAPLOperator$PowerAPLFunctionDescriptor$make$1(instantiation, this);
  };
  function PowerAPLOperator() {
  }
  protoOf(PowerAPLOperator).r42 = function (fn, instr, opPos) {
    return new PowerAPLFunctionWithValueDescriptor(fn, instr);
  };
  protoOf(PowerAPLOperator).s42 = function (fn1, fn2, opPos) {
    return new PowerAPLFunctionDescriptor(fn1, fn2);
  };
  function raiseArgumentException($this) {
    throwAPLException(new APLIllegalArgumentException('Operator argument must be scalar or an array of 1 to 3 elements', $this.t2g_1));
  }
  function computeRankFromOpArg($this, context) {
    var opArg = $this.z42_1.j31(context);
    var d = opArg.o2i();
    var tmp;
    switch (_Dimensions___get_size__impl__uu37ek(d)) {
      case 0:
        tmp = opArg;
        break;
      case 1:
        var tmp_0;
        switch (Dimensions__get_impl_4npepw(d, 0)) {
          case 1:
            tmp_0 = opArg.h2k(0);
            break;
          case 2:
            tmp_0 = opArg.h2k(1);
            break;
          case 3:
            tmp_0 = opArg.h2k(0);
            break;
          default:
            raiseArgumentException($this);
            break;
        }

        tmp = tmp_0;
        break;
      default:
        raiseArgumentException($this);
        break;
    }
    var res = tmp;
    return res.p2i($this.t2g_1).q2i($this.t2g_1);
  }
  function RankOperator$combineFunction$1($opPos, $fn, $instr) {
    this.y42_1 = $fn;
    this.z42_1 = $instr;
    APLFunction.call(this, $opPos);
    this.x42_1 = new SaveStackSupport(this);
  }
  protoOf(RankOperator$combineFunction$1).w2g = function (context, a, axis) {
    var aReduced = a.d2q();
    var aDimensions = aReduced.o2i();
    var index = computeRankFromOpArg(this, context);
    var tmp2 = _Dimensions___get_size__impl__uu37ek(aDimensions);
    // Inline function 'kotlin.math.max' call
    var b = index < 0 ? _Dimensions___get_size__impl__uu37ek(aDimensions) + index | 0 : index;
    // Inline function 'kotlin.math.min' call
    var b_0 = Math.max(0, b);
    var k = Math.min(tmp2, b_0);
    var enclosedResult = new AxisMultiDimensionEnclosedValue(aReduced, k);
    var applyRes = new ForEachResult1Arg(context, this.y42_1, enclosedResult, null, this.t2g_1, this.x42_1.g3g());
    return Companion_instance_5.l36(applyRes);
  };
  protoOf(RankOperator$combineFunction$1).a2h = function (context, a, b, axis) {
    var aReduced = a.d2q();
    var aDimensions = aReduced.o2i();
    var bReduced = b.d2q();
    var bDimensions = bReduced.o2i();
    var opArg = this.z42_1.j31(context);
    var d = opArg.o2i();
    var index0;
    var index1;
    switch (_Dimensions___get_size__impl__uu37ek(d)) {
      case 0:
        // Inline function 'kotlin.let' call

        var v = opArg.p2i(this.t2g_1).q2i(this.t2g_1);
        index0 = v;
        index1 = v;
        break;
      case 1:
        switch (Dimensions__get_impl_4npepw(d, 0)) {
          case 1:
            // Inline function 'kotlin.let' call

            var v_0 = opArg.r2i(0, this.t2g_1);
            index0 = v_0;
            index1 = v_0;
            break;
          case 2:
            index0 = opArg.r2i(0, this.t2g_1);
            index1 = opArg.r2i(1, this.t2g_1);
            break;
          case 3:
            index0 = opArg.r2i(1, this.t2g_1);
            index1 = opArg.r2i(2, this.t2g_1);
            break;
          default:
            raiseArgumentException(this);
            break;
        }

        break;
      default:
        raiseArgumentException(this);
        break;
    }
    // Inline function 'kotlin.math.max' call
    var b_0 = index0 < 0 ? _Dimensions___get_size__impl__uu37ek(aDimensions) + index0 | 0 : index0;
    var tmp6 = Math.max(0, b_0);
    // Inline function 'kotlin.math.min' call
    var b_1 = _Dimensions___get_size__impl__uu37ek(aDimensions);
    var k0 = Math.min(tmp6, b_1);
    var enclosedResult0 = new AxisMultiDimensionEnclosedValue(aReduced, k0);
    // Inline function 'kotlin.math.max' call
    var b_2 = index1 < 0 ? _Dimensions___get_size__impl__uu37ek(bDimensions) + index1 | 0 : index1;
    var tmp10 = Math.max(0, b_2);
    // Inline function 'kotlin.math.min' call
    var b_3 = _Dimensions___get_size__impl__uu37ek(bDimensions);
    var k1 = Math.min(tmp10, b_3);
    var enclosedResult1 = new AxisMultiDimensionEnclosedValue(bReduced, k1);
    var applyRes = Companion_instance_6.h3g(context, this.y42_1, enclosedResult0, enclosedResult1, null, this.t2g_1, this.x42_1.g3g());
    return Companion_instance_5.l36(applyRes);
  };
  function RankOperator() {
  }
  protoOf(RankOperator).a43 = function (fn, instr, opPos) {
    return new RankOperator$combineFunction$1(opPos, fn, instr);
  };
  function ComposeOp() {
  }
  protoOf(ComposeOp).l2g = function (fn0, fn1, opPos) {
    return new ComposeFunctionDescriptor(fn0, fn1);
  };
  function OverOp() {
  }
  protoOf(OverOp).l2g = function (fn0, fn1, opPos) {
    return new OverDerivedFunctionDescriptor(fn0, fn1);
  };
  function ReverseComposeOp() {
  }
  protoOf(ReverseComposeOp).l2g = function (fn0, fn1, opPos) {
    return new ReverseComposeFunctionDescriptor(fn0, fn1);
  };
  function StructuralUnderOp() {
  }
  protoOf(StructuralUnderOp).l2g = function (fn0, fn1, opPos) {
    return new StructuralUnderDerivedFunction(fn0, fn1);
  };
  function computeOptimisationFlags($this) {
    var fn1Flags = $this.r2g().l2h();
    var fn2Flags = $this.y2g().l2h();
    var flags1Arg = OptimisationFlags__andWith_impl_fnzthf(_OptimisationFlags___get_masked1Arg__impl__ue95q5(fn1Flags), _OptimisationFlags___get_masked1Arg__impl__ue95q5(fn2Flags));
    var resFlags = 0;
    if (_OptimisationFlags___get_is1ALong__impl__5sl2il(fn2Flags) && _OptimisationFlags___get_is2ALongLong__impl__oapfj6(fn1Flags))
      resFlags = resFlags | 4;
    if (_OptimisationFlags___get_is1ADouble__impl__kg3og8(fn2Flags) && _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(fn1Flags))
      resFlags = resFlags | 8;
    return _OptimisationFlags___init__impl__uhe3e(_OptimisationFlags___get_flags__impl__rfsbyc(flags1Arg) | resFlags);
  }
  function ComposeFunctionDescriptor$ComposeFunctionImpl$evalWithStructuralUnder1Arg$nb$1(this$0, $baseFn, $a0) {
    this.m43_1 = this$0;
    this.n43_1 = $baseFn;
    this.o43_1 = $a0;
    APLFunction.call(this, this$0.c2h());
  }
  protoOf(ComposeFunctionDescriptor$ComposeFunctionImpl$evalWithStructuralUnder1Arg$nb$1).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    return this.m43_1.r2g().w2h(this.n43_1, context, this.o43_1, a, null);
  };
  function ComposeFunctionDescriptor$ComposeFunctionImpl$evalWithStructuralUnder2Arg$nb$1(this$0, $baseFn, $a0) {
    this.t43_1 = this$0;
    this.u43_1 = $baseFn;
    this.v43_1 = $a0;
    APLFunction.call(this, this$0.c2h());
  }
  protoOf(ComposeFunctionDescriptor$ComposeFunctionImpl$evalWithStructuralUnder2Arg$nb$1).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    return this.t43_1.r2g().w2h(this.u43_1, context, this.v43_1, a, null);
  };
  function ComposeFunctionImpl(pos, fn0, fn1) {
    NoAxisAPLFunction.call(this, pos, listOf([fn0, fn1]));
    this.f43_1 = computeOptimisationFlags(this);
    this.g43_1 = 'compose [' + fn0.z2h() + ', ' + fn1.z2h() + ']';
    this.h43_1 = 'compose [' + fn0.a2i() + ', ' + fn1.z2h() + ']';
  }
  protoOf(ComposeFunctionImpl).l2h = function () {
    return this.f43_1;
  };
  protoOf(ComposeFunctionImpl).n2i = function (context, a) {
    var res = this.y2g().w2g(context, a, null);
    return this.r2g().a2h(context, a, res, null);
  };
  protoOf(ComposeFunctionImpl).t2i = function (context, a, b) {
    var res = this.y2g().w2g(context, b, null);
    return this.r2g().a2h(context, a, res, null);
  };
  protoOf(ComposeFunctionImpl).m2h = function (context, a, axis) {
    var res = this.y2g().m2h(context, a, null);
    return this.r2g().m2h(context, res, null);
  };
  protoOf(ComposeFunctionImpl).n2h = function (context, a, axis) {
    var res = this.y2g().n2h(context, a, null);
    return this.r2g().n2h(context, res, null);
  };
  protoOf(ComposeFunctionImpl).o2h = function (context, a, b, axis) {
    var res = this.y2g().m2h(context, b, null);
    return this.r2g().o2h(context, a, res, null);
  };
  protoOf(ComposeFunctionImpl).p2h = function (context, a, b, axis) {
    var res = this.y2g().n2h(context, b, null);
    return this.r2g().p2h(context, a, res, null);
  };
  protoOf(ComposeFunctionImpl).r2h = function (context, a, b, axis) {
    var res = this.r2g().r2h(context, a, b, null);
    return this.y2g().q2h(context, res, null);
  };
  protoOf(ComposeFunctionImpl).s2h = function (context, a, b, axis) {
    var res = this.y2g().w2g(context, b, null);
    return this.r2g().s2h(context, a, res, null);
  };
  protoOf(ComposeFunctionImpl).d2j = function (baseFn, context, a) {
    var a0 = a;
    var nb = new ComposeFunctionDescriptor$ComposeFunctionImpl$evalWithStructuralUnder1Arg$nb$1(this, baseFn, a0);
    return this.y2g().v2h(nb, context, a, null);
  };
  protoOf(ComposeFunctionImpl).e2j = function (baseFn, context, a, b) {
    var a0 = a;
    var nb = new ComposeFunctionDescriptor$ComposeFunctionImpl$evalWithStructuralUnder2Arg$nb$1(this, baseFn, a0);
    return this.y2g().v2h(nb, context, b, null);
  };
  protoOf(ComposeFunctionImpl).u2h = function (fns) {
    return new ComposeFunctionImpl(this.c2h(), fns.p(0), fns.p(1));
  };
  protoOf(ComposeFunctionImpl).r2g = function () {
    return this.s2g_1.p(0);
  };
  protoOf(ComposeFunctionImpl).y2g = function () {
    return this.s2g_1.p(1);
  };
  protoOf(ComposeFunctionImpl).z2h = function () {
    return this.g43_1;
  };
  protoOf(ComposeFunctionImpl).a2i = function () {
    return this.h43_1;
  };
  function ComposeFunctionDescriptor(fn0Inner, fn1Inner) {
    this.w43_1 = fn0Inner;
    this.x43_1 = fn1Inner;
  }
  protoOf(ComposeFunctionDescriptor).i2i = function (instantiation) {
    return new ComposeFunctionImpl(instantiation, this.w43_1, this.x43_1);
  };
  function OverDerivedFunctionImpl(pos, fn0, fn1) {
    NoAxisAPLFunction.call(this, pos, listOf([fn0, fn1]));
    this.c44_1 = 'over [' + fn0.z2h() + ', ' + fn1.z2h() + ']';
    this.d44_1 = 'over [' + fn0.a2i() + ', ' + fn1.z2h() + ']';
  }
  protoOf(OverDerivedFunctionImpl).n2i = function (context, a) {
    var result0 = this.y2g().w2g(context, a, null);
    return this.r2g().w2g(context, result0, null);
  };
  protoOf(OverDerivedFunctionImpl).t2i = function (context, a, b) {
    var result0 = this.y2g().w2g(context, b, null);
    var result1 = this.y2g().w2g(context, a, null);
    return this.r2g().a2h(context, result1, result0, null);
  };
  protoOf(OverDerivedFunctionImpl).u2h = function (fns) {
    return new OverDerivedFunctionImpl(this.c2h(), fns.p(0), fns.p(1));
  };
  protoOf(OverDerivedFunctionImpl).r2g = function () {
    return this.s2g_1.p(0);
  };
  protoOf(OverDerivedFunctionImpl).y2g = function () {
    return this.s2g_1.p(1);
  };
  protoOf(OverDerivedFunctionImpl).z2h = function () {
    return this.c44_1;
  };
  protoOf(OverDerivedFunctionImpl).a2i = function () {
    return this.d44_1;
  };
  function OverDerivedFunctionDescriptor(fn0Inner, fn1Inner) {
    this.e44_1 = fn0Inner;
    this.f44_1 = fn1Inner;
  }
  protoOf(OverDerivedFunctionDescriptor).i2i = function (instantiation) {
    return new OverDerivedFunctionImpl(instantiation, this.e44_1, this.f44_1);
  };
  function ReverseComposeFunctionImpl(pos, fn0, fn1) {
    NoAxisAPLFunction.call(this, pos, listOf([fn0, fn1]));
  }
  protoOf(ReverseComposeFunctionImpl).n2i = function (context, a) {
    var res = this.r2g().w2g(context, a, null);
    return this.y2g().a2h(context, res, a, null);
  };
  protoOf(ReverseComposeFunctionImpl).t2i = function (context, a, b) {
    var res = this.r2g().w2g(context, a, null);
    return this.y2g().a2h(context, res, b, null);
  };
  protoOf(ReverseComposeFunctionImpl).b2j = function (context, a, b) {
    var res = this.r2g().w2g(context, a, null);
    return this.y2g().r2h(context, res, b, null);
  };
  protoOf(ReverseComposeFunctionImpl).c2j = function (context, a, b) {
    var res = this.y2g().s2h(context, a, b, null);
    return this.r2g().q2h(context, res, null);
  };
  protoOf(ReverseComposeFunctionImpl).d2j = function (baseFn, context, a) {
    var res = this.r2g().w2g(context, a, null);
    return this.y2g().w2h(baseFn, context, res, a, null);
  };
  protoOf(ReverseComposeFunctionImpl).e2j = function (baseFn, context, a, b) {
    var res = this.r2g().w2g(context, a, null);
    return this.y2g().w2h(baseFn, context, res, b, null);
  };
  protoOf(ReverseComposeFunctionImpl).u2h = function (fns) {
    return new ReverseComposeFunctionImpl(this.c2h(), fns.p(0), fns.p(1));
  };
  protoOf(ReverseComposeFunctionImpl).r2g = function () {
    return this.s2g_1.p(0);
  };
  protoOf(ReverseComposeFunctionImpl).y2g = function () {
    return this.s2g_1.p(1);
  };
  function ReverseComposeFunctionDescriptor(fn0Inner, fn1Inner) {
    this.k44_1 = fn0Inner;
    this.l44_1 = fn1Inner;
  }
  protoOf(ReverseComposeFunctionDescriptor).i2i = function (instantiation) {
    return new ReverseComposeFunctionImpl(instantiation, this.k44_1, this.l44_1);
  };
  function StructuralUnderDerivedFunctionImpl($outer, pos) {
    this.q44_1 = $outer;
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(StructuralUnderDerivedFunctionImpl).n2i = function (context, a) {
    return this.q44_1.s44_1.v2h(this.q44_1.r44_1, context, a, null);
  };
  protoOf(StructuralUnderDerivedFunctionImpl).t2i = function (context, a, b) {
    return this.q44_1.s44_1.w2h(this.q44_1.r44_1, context, a, b, null);
  };
  function StructuralUnderDerivedFunction(baseFn, wrapperFn) {
    this.r44_1 = baseFn;
    this.s44_1 = wrapperFn;
  }
  protoOf(StructuralUnderDerivedFunction).i2i = function (instantiation) {
    return new StructuralUnderDerivedFunctionImpl(this, instantiation);
  };
  function NullFunctionImpl(pos) {
    APLFunction.call(this, pos);
  }
  protoOf(NullFunctionImpl).w2g = function (context, a, axis) {
    throwAPLException(new APLEvalException('null function cannot be called', this.t2g_1));
  };
  protoOf(NullFunctionImpl).a2h = function (context, a, b, axis) {
    throwAPLException(new APLEvalException('null function cannot be called', this.t2g_1));
  };
  function NullFunction() {
  }
  protoOf(NullFunction).i2i = function (instantiation) {
    return new NullFunctionImpl(instantiation);
  };
  function OuterJoinOp() {
  }
  protoOf(OuterJoinOp).n2w = function (fn, pos) {
    return new OuterJoinFunctionDescriptor(fn);
  };
  function OuterJoinFunctionImpl(pos, fn) {
    NoAxisAPLFunction.call(this, pos, listOf_0(fn));
    this.b45_1 = new SaveStackSupport(this);
  }
  protoOf(OuterJoinFunctionImpl).t2i = function (context, a, b) {
    var a0 = a.g2k();
    var b0 = b.g2k();
    var sta = a0.f2n();
    var stb = b0.f2n();
    var tmp;
    if (_ArrayMemberType___get_isLong__impl__xzhfcp(sta) && _ArrayMemberType___get_isLong__impl__xzhfcp(stb) && _OptimisationFlags___get_is2ALongLong__impl__oapfj6(this.u31().l2h())) {
      tmp = new OuterJoinResultLong(context, a0, b0, this.u31(), this.t2g_1, this.b45_1.g3g());
    } else if (_ArrayMemberType___get_isDouble__impl__6s2782(sta) && _ArrayMemberType___get_isDouble__impl__6s2782(stb) && _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(this.u31().l2h())) {
      tmp = new OuterJoinResultDouble(context, a0, b0, this.u31(), this.t2g_1, this.b45_1.g3g());
    } else {
      tmp = new OuterJoinResult(context, a0, b0, this.u31(), this.t2g_1, this.b45_1.g3g());
    }
    return tmp;
  };
  protoOf(OuterJoinFunctionImpl).u2h = function (fns) {
    return new OuterJoinFunctionImpl(this.c2h(), fns.p(0));
  };
  protoOf(OuterJoinFunctionImpl).u31 = function () {
    return this.s2g_1.p(0);
  };
  protoOf(OuterJoinFunctionImpl).a2i = function () {
    return 'outer product';
  };
  function eval2Arg$scalarOrOneElementVector(d) {
    return _Dimensions___get_size__impl__uu37ek(d) === 0 || (_Dimensions___get_size__impl__uu37ek(d) === 1 && Dimensions__get_impl_4npepw(d, 0) === 1);
  }
  function InnerJoinFunctionImpl(pos, fn0, fn1) {
    NoAxisAPLFunction.call(this, pos, listOf([fn0, fn1]));
    this.g45_1 = new SaveStackSupport(this);
    this.h45_1 = this.s2g_1.p(0);
    this.i45_1 = this.s2g_1.p(1);
  }
  protoOf(InnerJoinFunctionImpl).t2i = function (context, a, b) {
    var aDimensions = a.o2i();
    var bDimensions = b.o2i();
    var a1 = eval2Arg$scalarOrOneElementVector(aDimensions) && eval2Arg$scalarOrOneElementVector(bDimensions) ? a.u2i() : eval2Arg$scalarOrOneElementVector(aDimensions) ? new ConstantArray(dimensionsOfSize(new Int32Array([Dimensions__get_impl_4npepw(bDimensions, 0)])), a.v2q()) : a;
    var b1 = eval2Arg$scalarOrOneElementVector(aDimensions) && eval2Arg$scalarOrOneElementVector(bDimensions) ? b.u2i() : eval2Arg$scalarOrOneElementVector(bDimensions) ? new ConstantArray(dimensionsOfSize(new Int32Array([Dimensions__get_impl_4npepw(aDimensions, _Dimensions___get_size__impl__uu37ek(aDimensions) - 1 | 0)])), b.v2q()) : b;
    var a1Dimensions = a1.o2i();
    var b1Dimensions = b1.o2i();
    if (!(Dimensions__get_impl_4npepw(a1Dimensions, _Dimensions___get_size__impl__uu37ek(a1Dimensions) - 1 | 0) === Dimensions__get_impl_4npepw(b1Dimensions, 0))) {
      throwAPLException(new InvalidDimensionsException('a and b dimensions are incompatible', this.t2g_1));
    }
    var tmp;
    if (_Dimensions___get_size__impl__uu37ek(a1Dimensions) === 1 && _Dimensions___get_size__impl__uu37ek(b1Dimensions) === 1) {
      var v = this.i45_1.a2h(context, a1, b1, null);
      tmp = new ReduceResult1Arg(context, this.h45_1, v, 0, this.t2g_1, this.g45_1.g3g());
    } else {
      tmp = new InnerJoinResult(context, a1, b1, this.h45_1, this.i45_1, this.t2g_1, this.g45_1.g3g());
    }
    return tmp;
  };
  protoOf(InnerJoinFunctionImpl).u2h = function (fns) {
    return new InnerJoinFunctionImpl(this.c2h(), fns.p(0), fns.p(1));
  };
  protoOf(InnerJoinFunctionImpl).a2i = function () {
    return 'inner product';
  };
  function OuterJoinFunctionDescriptor(fnInner) {
    this.j45_1 = fnInner;
  }
  protoOf(OuterJoinFunctionDescriptor).i2i = function (instantiation) {
    return new OuterJoinFunctionImpl(instantiation, this.j45_1);
  };
  function InnerJoinFunctionDescriptor(fn0Inner, fn1Inner) {
    this.k45_1 = fn0Inner;
    this.l45_1 = fn1Inner;
  }
  protoOf(InnerJoinFunctionDescriptor).i2i = function (instantiation) {
    return new InnerJoinFunctionImpl(instantiation, this.k45_1, this.l45_1);
  };
  function OuterInnerJoinOp() {
  }
  protoOf(OuterInnerJoinOp).l2g = function (fn0, fn1, opPos) {
    var tmp;
    if (fn0 instanceof NullFunctionImpl) {
      tmp = new OuterJoinFunctionDescriptor(fn1);
    } else {
      tmp = new InnerJoinFunctionDescriptor(fn0, fn1);
    }
    return tmp;
  };
  function OuterJoinResultLong(context, a, b, fn, pos, savedStack) {
    OuterJoinResult.call(this, context, a, b, fn, pos, savedStack);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(!this.s45_1 && !this.t45_1)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(OuterJoinResultLong).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(OuterJoinResultLong).i2n = function (p) {
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.p45_1;
    var tmp;
    if (frame == null) {
      var aPosition = p / this.r45_1 | 0;
      var bPosition = p % this.r45_1 | 0;
      tmp = this.n45_1.o2h(this.m45_1, this.u45_1.i2n(aPosition), this.v45_1.i2n(bPosition), null);
    } else {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(frame);
        try {
          var aPosition_0 = p / this.r45_1 | 0;
          var bPosition_0 = p % this.r45_1 | 0;
          tmp$ret$3 = this.n45_1.o2h(this.m45_1, this.u45_1.i2n(aPosition_0), this.v45_1.i2n(bPosition_0), null);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  function OuterJoinResultDouble(context, a, b, fn, pos, savedStack) {
    OuterJoinResult.call(this, context, a, b, fn, pos, savedStack);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(!this.s45_1 && !this.t45_1)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(OuterJoinResultDouble).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(OuterJoinResultDouble).y2p = function (p) {
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.p45_1;
    var tmp;
    if (frame == null) {
      var aPosition = p / this.r45_1 | 0;
      var bPosition = p % this.r45_1 | 0;
      tmp = this.n45_1.p2h(this.m45_1, this.u45_1.y2p(aPosition), this.v45_1.y2p(bPosition), null);
    } else {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(frame);
        try {
          var aPosition_0 = p / this.r45_1 | 0;
          var bPosition_0 = p % this.r45_1 | 0;
          tmp$ret$3 = this.n45_1.p2h(this.m45_1, this.u45_1.y2p(aPosition_0), this.v45_1.y2p(bPosition_0), null);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  function OuterJoinResult(context, a, b, fn, pos, savedStack) {
    APLArray.call(this);
    this.m45_1 = context;
    this.n45_1 = fn;
    this.o45_1 = pos;
    this.p45_1 = savedStack;
    var aDimensions = a.o2i();
    this.s45_1 = _Dimensions___get_size__impl__uu37ek(aDimensions) === 0;
    this.u45_1 = this.s45_1 ? a.o2l() : a;
    var bDimensions = b.o2i();
    this.t45_1 = _Dimensions___get_size__impl__uu37ek(bDimensions) === 0;
    this.v45_1 = this.t45_1 ? b.o2l() : b;
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = _Dimensions___get_size__impl__uu37ek(aDimensions) + _Dimensions___get_size__impl__uu37ek(bDimensions) | 0;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = tmp_3 < _Dimensions___get_size__impl__uu37ek(aDimensions) ? Dimensions__get_impl_4npepw(aDimensions, tmp_3) : Dimensions__get_impl_4npepw(bDimensions, tmp_3 - _Dimensions___get_size__impl__uu37ek(aDimensions) | 0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.q45_1 = _Dimensions___init__impl__sxkzw4(tmp_2);
    this.r45_1 = b.n();
  }
  protoOf(OuterJoinResult).o2i = function () {
    return this.q45_1;
  };
  protoOf(OuterJoinResult).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.p45_1;
    var tmp;
    if (frame == null) {
      var aPosition = p / this.r45_1 | 0;
      var bPosition = p % this.r45_1 | 0;
      tmp = this.n45_1.a2h(this.m45_1, this.s45_1 ? this.u45_1 : this.u45_1.h2k(aPosition), this.t45_1 ? this.v45_1 : this.v45_1.h2k(bPosition), null);
    } else {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(frame);
        try {
          var aPosition_0 = p / this.r45_1 | 0;
          var bPosition_0 = p % this.r45_1 | 0;
          tmp$ret$3 = this.n45_1.a2h(this.m45_1, this.s45_1 ? this.u45_1 : this.u45_1.h2k(aPosition_0), this.t45_1 ? this.v45_1 : this.v45_1.h2k(bPosition_0), null);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
      tmp = tmp$ret$3;
    }
    return tmp;
  };
  function makeSpecialisedArray($this, d, v, startPos, stepSize) {
    return new StridedSubarray(d, v, startPos, stepSize);
  }
  function InnerJoinResult(context, a, b, fn1, fn2, pos, savedStack) {
    APLArray.call(this);
    this.q46_1 = context;
    this.r46_1 = a;
    this.s46_1 = b;
    this.t46_1 = fn1;
    this.u46_1 = fn2;
    this.v46_1 = pos;
    this.w46_1 = savedStack;
    this.x46_1 = this.r46_1.o2i();
    this.y46_1 = this.s46_1.o2i();
    var leftSize = _Dimensions___get_size__impl__uu37ek(this.x46_1) - 1 | 0;
    var rightSize = _Dimensions___get_size__impl__uu37ek(this.y46_1) - 1 | 0;
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = leftSize + rightSize | 0;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = tmp_3 < leftSize ? Dimensions__get_impl_4npepw(this.x46_1, tmp_3) : Dimensions__get_impl_4npepw(this.y46_1, (tmp_3 - leftSize | 0) + 1 | 0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.z46_1 = _Dimensions___init__impl__sxkzw4(tmp_2);
    this.b47_1 = Dimensions__get_impl_4npepw(this.x46_1, _Dimensions___get_size__impl__uu37ek(this.x46_1) - 1 | 0);
    this.c47_1 = dimensionsOfSize(new Int32Array([this.b47_1]));
    this.d47_1 = DimensionMultipliers__get_impl_90rsg3(Dimensions__multipliers_impl_u1suko(this.y46_1), 0);
    var tmp_4 = this;
    var tmp_5;
    if (leftSize === 0) {
      tmp_5 = this.n();
    } else {
      var m = Dimensions__multipliers_impl_u1suko(this.z46_1);
      tmp_5 = DimensionMultipliers__get_impl_90rsg3(m, leftSize - 1 | 0);
    }
    tmp_4.a47_1 = tmp_5;
  }
  protoOf(InnerJoinResult).o2i = function () {
    return this.z46_1;
  };
  protoOf(InnerJoinResult).h2k = function (p) {
    var posInA = imul(p / this.a47_1 | 0, this.b47_1);
    var posInB = p % this.a47_1 | 0;
    var leftArg = makeSpecialisedArray(this, this.c47_1, this.r46_1, posInA, 1);
    var rightArg = makeSpecialisedArray(this, this.c47_1, this.s46_1, posInB, this.d47_1);
    var v = new ForEachResult2Arg(this.q46_1, this.u46_1, leftArg, rightArg, null, this.v46_1, this.w46_1);
    return new ReduceResult1Arg(this.q46_1, this.t46_1, v, 0, this.v46_1, this.w46_1);
  };
  function computePos_0($this, p) {
    return $this.g47_1 + imul(p, $this.h47_1) | 0;
  }
  function StridedSubarray(dimensions, a, startPos, stepSize) {
    APLArray.call(this);
    this.e47_1 = dimensions;
    this.f47_1 = a;
    this.g47_1 = startPos;
    this.h47_1 = stepSize;
  }
  protoOf(StridedSubarray).o2i = function () {
    return this.e47_1;
  };
  protoOf(StridedSubarray).f2n = function () {
    return this.f47_1.f2n();
  };
  protoOf(StridedSubarray).h2k = function (p) {
    return this.f47_1.h2k(computePos_0(this, p));
  };
  protoOf(StridedSubarray).i2n = function (p) {
    return this.f47_1.i2n(computePos_0(this, p));
  };
  protoOf(StridedSubarray).y2p = function (p) {
    return this.f47_1.y2p(computePos_0(this, p));
  };
  function PairAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(PairAPLFunctionImpl).n2i = function (context, a) {
    return ResizedArrayImpls_instance.p2l(dimensionsOfSize(new Int32Array([1])), a);
  };
  protoOf(PairAPLFunctionImpl).t2i = function (context, a, b) {
    var tmp = dimensionsOfSize(new Int32Array([2]));
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [a, b];
    return new APLArrayImpl(tmp, tmp$ret$2);
  };
  function PairAPLFunction() {
  }
  protoOf(PairAPLFunction).i2i = function (instantiation) {
    return new PairAPLFunctionImpl(instantiation);
  };
  function ParallelOp() {
  }
  protoOf(ParallelOp).n2w = function (fn, pos) {
    if (!isInterface(fn, ParallelSupported)) {
      throw new ParallelNotSupported(pos.d38_1);
    }
    return new ParallelHandler(fn);
  };
  function ParallelSupported() {
  }
  function ParallelTaskList() {
    this.m47_1 = ArrayList_init_$Create$();
  }
  function ParallelCompressTask($outer, start, end) {
    this.q47_1 = $outer;
    this.o47_1 = start;
    this.p47_1 = end;
  }
  protoOf(ParallelCompressTask).r47 = function (context) {
    var tmp;
    try {
      var res = ArrayList_init_$Create$();
      var st = Companion_getInstance_45().d2k_1;
      var inductionVariable = this.o47_1;
      var last = this.p47_1;
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = this.q47_1.t47_1.h2k(i).c2q();
          st = ArrayMemberType__intersection_impl_osmuy1(st, v.f2k());
          res.h(v);
        }
         while (inductionVariable < last);
      tmp = new Left(new ParallelCompressResult(this.q47_1, res, st));
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Exception) {
        var e = $p;
        tmp_0 = new Right(e);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  function ParallelCompressResult($outer, result, specialisedType) {
    this.a48_1 = $outer;
    this.y47_1 = result;
    this.z47_1 = specialisedType;
  }
  function Companion_13() {
  }
  protoOf(Companion_13).j3g = function (value, numTasks, pos) {
    var tmp;
    if (_Dimensions___get_size__impl__uu37ek(value.o2i()) === 0) {
      return new ConstantParallelTaskList(value);
    } else {
      tmp = new ParallelCompressTaskList(value, numTasks, pos);
    }
    return tmp;
  };
  var Companion_instance_15;
  function Companion_getInstance_15() {
    return Companion_instance_15;
  }
  function ParallelCompressTaskList(value, numTasks, pos) {
    ParallelTaskList.call(this);
    this.t47_1 = value;
    this.u47_1 = pos;
    this.v47_1 = this.t47_1.m2l();
    this.w47_1 = this.t47_1.o2i();
    this.x47_1 = Dimensions__contentSize_impl_4eihds(this.w47_1);
    var r = this.x47_1 % numTasks | 0;
    var unitSize = this.x47_1 / numTasks | 0;
    var start = 0;
    // Inline function 'kotlin.math.min' call
    var b = this.x47_1;
    // Inline function 'kotlin.repeat' call
    var times = Math.min(numTasks, b);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var n = index < r ? unitSize + 1 | 0 : unitSize;
        this.m47_1.h(new ParallelCompressTask(this, start, start + n | 0));
        start = start + n | 0;
      }
       while (inductionVariable < times);
  }
  protoOf(ParallelCompressTaskList).n47 = function (results) {
    var list = ArrayList_init_$Create$();
    var exceptions = ArrayList_init_$Create$();
    var st = Companion_getInstance_45().d2k_1;
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = results.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      if (element instanceof Left) {
        var tmp = element.vz_1;
        var computeRes = tmp instanceof ParallelCompressResult ? tmp : THROW_CCE();
        st = ArrayMemberType__intersection_impl_osmuy1(st, computeRes.z47_1);
        list.q(computeRes.y47_1);
      } else {
        if (element instanceof Right)
          exceptions.h(element.wz_1);
        else {
          noWhenBranchMatchedException();
        }
      }
    }
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!exceptions.o()) {
      throwAPLException(new ParallelWrappedException(exceptions, this.u47_1));
    }
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$3 = copyToArray(list);
    var result = new CollapsedArrayImpl(this.w47_1, tmp$ret$3, st);
    var tmp_0;
    if (this.v47_1.y2r()) {
      tmp_0 = result;
    } else {
      tmp_0 = new MetadataOverrideArray(this.t47_1, this.v47_1);
    }
    return tmp_0;
  };
  function computeNumEngines($this, context) {
    // Inline function 'kotlin.math.ceil' call
    var x = context.j38_1.i39_1.b48() * $this.i48_1.d48_1;
    var tmp$ret$0 = Math.ceil(x);
    return numberToInt(tmp$ret$0);
  }
  function evalTaskList($this, context, parallelTaskList) {
    var engine = context.j38_1;
    var dispatcher = context.j38_1.i39_1;
    // Inline function 'kotlin.collections.map' call
    var this_0 = parallelTaskList.m47_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = dispatcher.j48(ParallelHandler$ParallelHandlerImpl$evalTaskList$lambda(engine, item, context));
      destination.h(tmp$ret$0);
    }
    var tasks = destination;
    var results = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s_0 = tasks.k();
    while (_iterator__ex2g4s_0.l()) {
      var element = _iterator__ex2g4s_0.m();
      var res = element.k48();
      results.h(res);
    }
    engine.q42($this.t2g_1);
    return parallelTaskList.n47(results);
  }
  function ParallelHandler$ParallelHandlerImpl$evalTaskList$lambda$lambda($task, $context) {
    return function () {
      return $task.r47($context);
    };
  }
  function ParallelHandler$ParallelHandlerImpl$evalTaskList$lambda($engine, $task, $context) {
    return function () {
      $engine.j39_1.l48(true);
      // Inline function 'com.dhsdevelopments.kap.Engine.withThreadLocalAssigned' call
      var this_0 = $engine;
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.require' call
      if (!(currentStorageStackOrNull() == null)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      var newStack = StorageStack_init_$Create$(this_0.c39_1);
      return withThreadLocalStorageStackAssigned(newStack, ParallelHandler$ParallelHandlerImpl$evalTaskList$lambda$lambda($task, $context));
    };
  }
  function ParallelHandlerImpl($outer, pos) {
    this.i48_1 = $outer;
    APLFunction.call(this, pos);
  }
  protoOf(ParallelHandlerImpl).w2g = function (context, a, axis) {
    var tmp;
    if (context.j38_1.m48()) {
      tmp = this.i48_1.c48_1.l3g().w2g(context, a, axis);
    } else {
      var parallelTaskList = this.i48_1.c48_1.i3g(context, computeNumEngines(this, context), a, axis);
      tmp = evalTaskList(this, context, parallelTaskList);
    }
    return tmp;
  };
  protoOf(ParallelHandlerImpl).a2h = function (context, a, b, axis) {
    var tmp;
    if (context.j38_1.m48()) {
      tmp = this.i48_1.c48_1.l3g().a2h(context, a, b, axis);
    } else {
      var parallelTaskList = this.i48_1.c48_1.k3g(context, computeNumEngines(this, context), a, b, axis);
      tmp = evalTaskList(this, context, parallelTaskList);
    }
    return tmp;
  };
  function ParallelHandler(derived, numTasksWeightFactor) {
    numTasksWeightFactor = numTasksWeightFactor === VOID ? 10.0 : numTasksWeightFactor;
    this.c48_1 = derived;
    this.d48_1 = numTasksWeightFactor;
  }
  protoOf(ParallelHandler).i2i = function (instantiation) {
    return new ParallelHandlerImpl(this, instantiation);
  };
  function ParallelWrappedException(exceptions, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Wrapped exceptions. Primary: ' + exceptions.p(0).message, pos);
    captureStack(this, ParallelWrappedException);
    this.r48_1 = exceptions;
  }
  function ConstantParallelTaskList(value) {
    ParallelTaskList.call(this);
    this.t48_1 = value;
  }
  protoOf(ConstantParallelTaskList).n47 = function (results) {
    return this.t48_1;
  };
  function parseTableInString($this, a, tableIndex) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = $this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var s = result;
    var doc = Ksoup_instance.y16(s);
    var res = htmlTableToArray(doc, tableIndex);
    if (res == null) {
      throwAPLException(new HtmlParserException($this.t2g_1));
    }
    return res;
  }
  function FromHtmlTableFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(FromHtmlTableFunctionImpl).n2i = function (context, a) {
    return parseTableInString(this, a, 0);
  };
  protoOf(FromHtmlTableFunctionImpl).t2i = function (context, a, b) {
    var n = a.p2i(this.t2g_1).q2i(this.t2g_1);
    return parseTableInString(this, b, n);
  };
  function FromHtmlTableFunction() {
  }
  protoOf(FromHtmlTableFunction).i2i = function (instantiation) {
    return new FromHtmlTableFunctionImpl(instantiation);
  };
  function HtmlParserException(pos) {
    APLEvalException.call(this, 'No table found in HTML content', pos);
    captureStack(this, HtmlParserException);
  }
  function opBigInt_1($this, x) {
    var tmp;
    if (compareTo(x, 0) < 0) {
      raiseArgumentMustBePositive($this);
    } else {
      var res = factoriseBigint(x);
      var tmp_0 = dimensionsOfSize(new Int32Array([res.n()]));
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(res, 10));
      var _iterator__ex2g4s = res.k();
      while (_iterator__ex2g4s.l()) {
        var item = _iterator__ex2g4s.m();
        var v = item.jk_1;
        var tmp$ret$0 = makeAPLNumberWithReduction(v);
        destination.h(tmp$ret$0);
      }
      tmp = new APLArrayList(tmp_0, destination, Companion_getInstance_45().x2j_1);
    }
    return tmp;
  }
  function raiseTypeException($this) {
    throwAPLException(new APLIllegalArgumentException('Only integers can be factorised', $this.t2g_1));
  }
  function raiseArgumentMustBePositive($this) {
    throwAPLException(new APLArithmeticException('Argument must be positive', $this.t2g_1));
  }
  function FactorAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(FactorAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      var tmp_0;
      if (x.a1(new Long(0, 0)) < 0) {
        raiseArgumentMustBePositive(this);
      } else {
        var res = factoriseLong(x);
        var tmp_1 = dimensionsOfSize(new Int32Array([res.n()]));
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(res, 10));
        var _iterator__ex2g4s = res.k();
        while (_iterator__ex2g4s.l()) {
          var item = _iterator__ex2g4s.m();
          var tmp$ret$0 = makeAPLNumber_0(item);
          destination.h(tmp$ret$0);
        }
        tmp_0 = new APLArrayList(tmp_1, destination, Companion_getInstance_45().x2j_1);
      }
      tmp = tmp_0;
    } else {
      if (a instanceof APLDouble) {
        a.x2s(pos);
        raiseTypeException(this);
      } else {
        if (a instanceof APLComplex) {
          a.s2z();
          raiseTypeException(this);
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_0 = a.z2q_1;
              tmp = opBigInt_1(this, x_0);
            } else {
              if (a instanceof APLRational) {
                var x_1 = a.d31_1;
                var tmp_2;
                if (equals(x_1.pj(), BigIntConstants_getInstance().ij_1)) {
                  tmp_2 = opBigInt_1(this, x_1.oj());
                } else {
                  raiseTypeException(this);
                }
                tmp = tmp_2;
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  function FactorAPLFunction() {
  }
  protoOf(FactorAPLFunction).i2i = function (instantiation) {
    return new FactorAPLFunctionImpl(instantiation);
  };
  function opBigInt_2($this, x) {
    var tmp;
    if (compareTo(x, 0) < 0) {
      raiseArgumentMustBePositive_0($this);
    } else {
      var res = divisorsBigint(x);
      var tmp_0 = dimensionsOfSize(new Int32Array([res.n()]));
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(res, 10));
      var _iterator__ex2g4s = res.k();
      while (_iterator__ex2g4s.l()) {
        var item = _iterator__ex2g4s.m();
        var tmp$ret$0 = makeAPLNumber_0(item);
        destination.h(tmp$ret$0);
      }
      tmp = new APLArrayList(tmp_0, destination, Companion_getInstance_45().x2j_1);
    }
    return tmp;
  }
  function raiseTypeException_0($this) {
    throwAPLException(new APLIllegalArgumentException('Argument is not an integer', $this.t2g_1));
  }
  function raiseArgumentMustBePositive_0($this) {
    throwAPLException(new APLArithmeticException('Argument must be positive', $this.t2g_1));
  }
  function DivisorsAPLFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(DivisorsAPLFunctionImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      var tmp_0;
      if (x.a1(new Long(0, 0)) < 0) {
        raiseArgumentMustBePositive_0(this);
      } else {
        var res = divisorsLong(x, this.t2g_1);
        var tmp_1 = dimensionsOfSize(new Int32Array([res.n()]));
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(res, 10));
        var _iterator__ex2g4s = res.k();
        while (_iterator__ex2g4s.l()) {
          var item = _iterator__ex2g4s.m();
          var tmp$ret$0 = makeAPLNumber_0(item);
          destination.h(tmp$ret$0);
        }
        tmp_0 = new APLArrayList(tmp_1, destination, Companion_getInstance_45().x2j_1);
      }
      tmp = tmp_0;
    } else {
      if (a instanceof APLDouble) {
        a.x2s(pos);
        raiseTypeException_0(this);
      } else {
        if (a instanceof APLComplex) {
          a.s2z();
          raiseTypeException_0(this);
        } else {
          if (a instanceof APLChar) {
            a.m2z_1;
            throwAPLException(new IncompatibleTypeException('Function does not support character argument', pos));
          } else {
            if (a instanceof APLBigInt) {
              var x_0 = a.z2q_1;
              tmp = opBigInt_2(this, x_0);
            } else {
              if (a instanceof APLRational) {
                var x_1 = a.d31_1;
                var tmp_2;
                if (equals(x_1.pj(), BigIntConstants_getInstance().ij_1)) {
                  tmp_2 = opBigInt_2(this, x_1.oj());
                } else {
                  raiseTypeException_0(this);
                }
                tmp = tmp_2;
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  function DivisorsAPLFunction() {
  }
  protoOf(DivisorsAPLFunction).i2i = function (instantiation) {
    return new DivisorsAPLFunctionImpl(instantiation);
  };
  function factoriseLong(n) {
    if (n.a1(new Long(0, 0)) < 0) {
      throw ArithmeticException_init_$Create$_0('Argument is negative');
    }
    if (n.equals(new Long(0, 0))) {
      return emptyList();
    }
    if (n.a1(new Long(3, 0)) <= 0) {
      return listOf_0(n);
    }
    var curr = n;
    var factors = ArrayList_init_$Create$();
    var i = new Long(2, 0);
    while (i.a1(curr.z2(i)) <= 0) {
      while (curr.a3(i).equals(new Long(0, 0))) {
        factors.h(i);
        curr = curr.z2(i);
      }
      i = i.b3();
    }
    if (curr.a1(new Long(1, 0)) > 0) {
      factors.h(curr);
    }
    return factors;
  }
  function factoriseBigint(n) {
    if (compareTo(n, 0) < 0) {
      throw ArithmeticException_init_$Create$_0('Argument is negative');
    }
    if (rangeInLong(n)) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = factoriseLong(toLong(n));
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.k();
      while (_iterator__ex2g4s.l()) {
        var item = _iterator__ex2g4s.m();
        var tmp$ret$0 = of_0(Companion_instance, item);
        destination.h(new BigInt(tmp$ret$0));
      }
      return destination;
    }
    var curr = n;
    var factors = ArrayList_init_$Create$();
    var i = BigIntConstants_getInstance().jj_1;
    while (compareTo_1(i, div(curr, i)) <= 0) {
      while (signum(rem(curr, i)) === 0) {
        factors.h(new BigInt(i));
        curr = div(curr, i);
      }
      i = plus_0(i, 1);
    }
    if (compareTo(curr, 1) > 0) {
      factors.h(new BigInt(curr));
    }
    return factors;
  }
  function divisorsLong(n, pos) {
    if (n.a1(new Long(0, 0)) < 0) {
      throwAPLException(new APLArithmeticException('Argument is negative', pos));
    }
    if (n.a1(new Long(-2, 1048575)) > 0) {
      return divisorsBigint(toBigInt(n));
    }
    var res0 = ArrayList_init_$Create$();
    var res1 = ArrayList_init_$Create$();
    // Inline function 'kotlin.Long.rem' call
    var nEven = n.a3(toLong_0(2)).equals(new Long(0, 0));
    var stepLength = nEven ? new Long(1, 0) : new Long(2, 0);
    var start = nEven ? new Long(2, 0) : new Long(3, 0);
    // Inline function 'kotlin.math.sqrt' call
    var x = n.l3();
    var tmp$ret$1 = Math.sqrt(x);
    var nestedLast = numberToLong(tmp$ret$1);
    if (stepLength.a1(new Long(0, 0)) <= 0)
      THROW_IAE('Step must be positive, was: ' + stepLength + '.');
    var inductionVariable = start;
    var last_0 = getProgressionLastElement(start, nestedLast, stepLength);
    if (inductionVariable.a1(last_0) <= 0)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable.w2(stepLength);
        if (n.a3(i).equals(new Long(0, 0))) {
          res0.h(i);
          res1.h(n.z2(i));
        }
      }
       while (!i.equals(last_0));
    return res0.o() ? res0 : last(res0).equals(last(res1)) ? plus_1(res0, reversed(dropLast(res1, 1))) : plus_1(res0, reversed(res1));
  }
  function divisorsBigint(n) {
    if (signum(n) < 0) {
      throw ArithmeticException_init_$Create$_0('Argument is negative');
    }
    var s = isqrt(n);
    if (compareTo_2(n, new Long(-1, 2147483647)) >= 0) {
      throw ArithmeticException_init_$Create$_0('Argument too large');
    }
    var res0 = ArrayList_init_$Create$();
    var res1 = ArrayList_init_$Create$();
    var nEven = signum(rem_0(n, new Long(2, 0))) === 0;
    var stepLength = nEven ? new Long(1, 0) : new Long(2, 0);
    var start = nEven ? new Long(2, 0) : new Long(3, 0);
    var nestedLast = toLong(s);
    if (stepLength.a1(new Long(0, 0)) <= 0)
      THROW_IAE('Step must be positive, was: ' + stepLength + '.');
    var inductionVariable = start;
    var last_0 = getProgressionLastElement(start, nestedLast, stepLength);
    if (inductionVariable.a1(last_0) <= 0)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable.w2(stepLength);
        if (signum(rem_0(n, i)) === 0) {
          res0.h(i);
          res1.h(toLong(div_1(n, i)));
        }
      }
       while (!i.equals(last_0));
    return res0.o() ? res0 : last(res0).equals(last(res1)) ? plus_1(res0, reversed(dropLast(res1, 1))) : plus_1(res0, reversed(res1));
  }
  function throwInvalidType($this, v) {
    throwAPLException(new APLIllegalArgumentException('Argument must be an integer greater than or equal to 0. Got: ' + v, $this.t2g_1));
  }
  function recurseMonadic($this, random, a) {
    var a0 = a.g2k();
    var tmp;
    if (a0 instanceof APLSingleValue) {
      var tmp_0;
      if (a0 instanceof APLLong) {
        tmp_0 = randomFromInt($this, random, a0.g2n_1);
      } else {
        if (a0 instanceof APLBigInt) {
          tmp_0 = randomFromBigint($this, random, a0.z2q_1);
        } else {
          if (a0 instanceof APLRational) {
            var tmp_1;
            if (a0.d31_1.ck()) {
              tmp_1 = randomFromBigint($this, random, a0.d31_1.oj());
            } else {
              throwInvalidType($this, a0.i2o(FormatStyle_PLAIN_getInstance()));
            }
            tmp_0 = tmp_1;
          } else {
            throwInvalidType($this, a0.i2o(FormatStyle_PLAIN_getInstance()));
          }
        }
      }
      tmp = tmp_0;
    } else {
      var d = a0.o2i();
      var tmp_2;
      if (_Dimensions___get_size__impl__uu37ek(d) === 0) {
        tmp_2 = Companion_instance_51.s2i(recurseMonadic($this, random, a0.h2k(0)));
      } else if (Dimensions__contentSize_impl_4eihds(d) === 0) {
        var tmp_3 = 0;
        // Inline function 'kotlin.arrayOfNulls' call
        var tmp_4 = Array(0);
        while (tmp_3 < 0) {
          tmp_4[tmp_3] = APLNullValue_getInstance();
          tmp_3 = tmp_3 + 1 | 0;
        }
        tmp_2 = new APLArrayImpl(d, tmp_4);
      } else {
        tmp_2 = computeRandomArray($this, random, a0, d);
      }
      tmp = tmp_2;
    }
    return tmp;
  }
  function randomFromBigint($this, random, value) {
    var tmp;
    if (equals(value, BigIntConstants_getInstance().hj_1)) {
      tmp = makeAPLNumber(random.yf());
    } else if (compareTo(value, 0) < 0) {
      throwInvalidType($this, BigInt__toString_impl_xmp9e6(value));
    } else if (rangeInLong(value)) {
      tmp = makeAPLNumber_0(random.wf(toLong(value)));
    } else {
      throwAPLException(new APLEvalException('Random from bigint is not supported', $this.t2g_1));
    }
    return tmp;
  }
  function computeRandomArray($this, random, a0, d) {
    var firstValue = a0.h2k(0).g2k();
    var tmp;
    if (firstValue instanceof APLLong) {
      var v = firstValue.g2n_1;
      var tmp_0;
      if (v.a1(new Long(0, 0)) > 0) {
        tmp_0 = computeRestRandomArrayLong($this, random, v, a0, d);
      } else if (v.equals(new Long(0, 0))) {
        tmp_0 = computeRestRandomArrayDouble($this, random, a0, d);
      } else {
        throwInvalidType($this, firstValue.i2o(FormatStyle_PLAIN_getInstance()));
      }
      tmp = tmp_0;
    } else {
      tmp = computeRestRandomArrayGeneric($this, random, firstValue, a0, d);
    }
    return tmp;
  }
  function computeRestRandomArrayLong($this, random, firstValue, a0, d) {
    var resLongArray = longArray(Dimensions__contentSize_impl_4eihds(d));
    resLongArray[0] = random.wf(firstValue);
    var i = {_v: 1};
    $l$loop_0: while (i._v < resLongArray.length) {
      var v = a0.h2k(i._v).g2k();
      if (v instanceof APLLong) {
        var vLong = v.g2n_1;
        if (vLong.equals(new Long(0, 0)))
          break $l$loop_0;
        if (vLong.a1(new Long(0, 0)) < 0) {
          throwInvalidType($this, v.i2o(FormatStyle_PLAIN_getInstance()));
        }
        resLongArray[i._v] = random.wf(vLong);
      } else {
        break $l$loop_0;
      }
      i._v = i._v + 1 | 0;
    }
    var tmp;
    if (i._v === resLongArray.length) {
      tmp = new APLArrayLong(d, resLongArray);
    } else {
      var tmp_0 = 0;
      var tmp_1 = resLongArray.length;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_2 = Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var tmp_4;
        if (tmp_3 < i._v) {
          tmp_4 = makeAPLNumber_0(resLongArray[tmp_3]);
        } else {
          tmp_4 = recurseMonadic($this, random, a0.h2k(tmp_3));
        }
        tmp_2[tmp_3] = tmp_4;
        tmp_0 = tmp_0 + 1 | 0;
      }
      var res = tmp_2;
      tmp = new APLArrayImpl(d, res);
    }
    return tmp;
  }
  function isIntegerZero($this, value) {
    var tmp;
    var tmp_0;
    var tmp_1;
    if (value instanceof APLLong) {
      tmp_1 = value.g2n_1.equals(new Long(0, 0));
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = true;
    } else {
      var tmp_2;
      if (value instanceof APLBigInt) {
        tmp_2 = equals(value.z2q_1, BigIntConstants_getInstance().hj_1);
      } else {
        tmp_2 = false;
      }
      tmp_0 = tmp_2;
    }
    if (tmp_0) {
      tmp = true;
    } else {
      var tmp_3;
      if (value instanceof APLRational) {
        tmp_3 = equals(value.d31_1, Companion_getInstance().ej_1);
      } else {
        tmp_3 = false;
      }
      tmp = tmp_3;
    }
    return tmp;
  }
  function computeRestRandomArrayDouble($this, random, a0, d) {
    var resDoubleArray = new Float64Array(Dimensions__contentSize_impl_4eihds(d));
    resDoubleArray[0] = random.yf();
    var i = {_v: 1};
    $l$loop: while (i._v < resDoubleArray.length) {
      var v = a0.h2k(i._v).g2k();
      if (!isIntegerZero($this, v))
        break $l$loop;
      resDoubleArray[i._v] = random.yf();
      i._v = i._v + 1 | 0;
    }
    var tmp;
    if (i._v === resDoubleArray.length) {
      tmp = new APLArrayDouble(d, resDoubleArray);
    } else {
      var tmp_0 = 0;
      var tmp_1 = resDoubleArray.length;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_2 = Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var tmp_4;
        if (tmp_3 < i._v) {
          tmp_4 = makeAPLNumber(resDoubleArray[tmp_3]);
        } else {
          tmp_4 = recurseMonadic($this, random, a0.h2k(tmp_3));
        }
        tmp_2[tmp_3] = tmp_4;
        tmp_0 = tmp_0 + 1 | 0;
      }
      var res = tmp_2;
      tmp = new APLArrayImpl(d, res);
    }
    return tmp;
  }
  function computeRestRandomArrayGeneric($this, random, firstValue, a0, d) {
    var tmp = 0;
    var tmp_0 = Dimensions__contentSize_impl_4eihds(d);
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var v = tmp_2 === 0 ? firstValue : a0.h2k(tmp_2);
      tmp_1[tmp_2] = recurseMonadic($this, random, v);
      tmp = tmp + 1 | 0;
    }
    return new APLArrayImpl(d, tmp_1);
  }
  function randomFromInt($this, random, v) {
    var tmp;
    if (v.a1(new Long(0, 0)) > 0) {
      tmp = makeAPLNumber_0(random.wf(v));
    } else if (v.equals(new Long(0, 0))) {
      tmp = makeAPLNumber(random.yf());
    } else {
      throwAPLException(new APLIllegalArgumentException('Invalid random range: ' + v.toString(), $this.t2g_1));
    }
    return tmp;
  }
  function randSubsetC2($this, random, a, b) {
    var tmp = 0;
    var tmp_0 = longArray(a);
    while (tmp < a) {
      var tmp_1 = tmp;
      tmp_0[tmp_1] = toLong_0(tmp_1);
      tmp = tmp + 1 | 0;
    }
    var rp = tmp_0;
    var map = HashMap_init_$Create$_0(0);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < a)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.Long.minus' call
        var tmp$ret$1 = b.x2(toLong_0(index));
        // Inline function 'kotlin.Long.plus' call
        var j = random.wf(tmp$ret$1).w2(toLong_0(index));
        if (j.a1(toLong_0(a)) < 0) {
          var jInt = j.c1();
          var c = rp[jInt];
          rp[jInt] = rp[index];
          rp[index] = c;
        } else {
          var tmp0_elvis_lhs = map.a2(j);
          // Inline function 'kotlin.also' call
          var this_0 = tmp0_elvis_lhs == null ? j : tmp0_elvis_lhs;
          // Inline function 'kotlin.collections.set' call
          var value = rp[index];
          map.j2(j, value);
          rp[index] = this_0;
        }
      }
       while (inductionVariable < a);
    return rp;
  }
  function RandomAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RandomAPLFunctionImpl).n2i = function (context, a) {
    return recurseMonadic(this, context.j38_1.n39_1, a);
  };
  protoOf(RandomAPLFunctionImpl).t2i = function (context, a, b) {
    var aInt = a.p2i(this.t2g_1).q2i(this.t2g_1);
    var bLong = b.p2i(this.t2g_1).w2s(this.t2g_1);
    if (aInt < 0) {
      throwAPLException(new IncompatibleTypeException('A should not be negative, was: ' + aInt, this.t2g_1));
    }
    if (bLong.a1(new Long(0, 0)) < 0) {
      throwAPLException(new IncompatibleTypeException('B should not be negative, was: ' + bLong.toString(), this.t2g_1));
    }
    if (toLong_0(aInt).a1(bLong) > 0) {
      throwAPLException(new IncompatibleTypeException('A should not be greater than B. A: ' + aInt + ', B: ' + bLong.toString(), this.t2g_1));
    }
    if (aInt === 0) {
      var tmp = dimensionsOfSize(new Int32Array([0]));
      // Inline function 'kotlin.longArrayOf' call
      var tmp$ret$0 = longArrayOf([]);
      return new APLArrayLong(tmp, tmp$ret$0);
    }
    var result = randSubsetC2(this, context.j38_1.n39_1, aInt, bLong);
    return new APLArrayLong(dimensionsOfSize(new Int32Array([result.length])), result);
  };
  protoOf(RandomAPLFunctionImpl).z2h = function () {
    return 'deal';
  };
  protoOf(RandomAPLFunctionImpl).a2i = function () {
    return 'random';
  };
  function RandomAPLFunction() {
  }
  protoOf(RandomAPLFunction).i2i = function (instantiation) {
    return new RandomAPLFunctionImpl(instantiation);
  };
  function RangeFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RangeFunctionImpl).t2i = function (context, a, b) {
    var a_0 = a.u2i();
    var b_0 = b.u2i();
    if (!(_Dimensions___get_size__impl__uu37ek(a_0.o2i()) === 1) || Dimensions__get_impl_4npepw(a_0.o2i(), 0) === 0 || !(_Dimensions___get_size__impl__uu37ek(b_0.o2i()) === 1) || Dimensions__get_impl_4npepw(b_0.o2i(), 0) === 0) {
      throwAPLException(new InvalidDimensionsException('Both arguments to range must be scalars or non-empty 1-dimensional arrays', this.t2g_1));
    }
    return Companion_instance_16.s49(a_0, b_0, this.t2g_1);
  };
  function RangeFunction() {
  }
  protoOf(RangeFunction).i2i = function (instantiation) {
    return new RangeFunctionImpl(instantiation);
  };
  function RangeValueLong(a, b, pos, startVal, endVal) {
    RangeValueGeneric.call(this, a, b, plus_0(get_absoluteValue(minus(of_0(Companion_instance, endVal), of_0(Companion_instance, startVal))), 1), pos);
    this.z49_1 = startVal;
    this.a4a_1 = this.z49_1.a1(endVal) > 0 ? -1 : 1;
  }
  protoOf(RangeValueLong).b4a = function (n) {
    var tmp0 = this.z49_1;
    // Inline function 'kotlin.Long.plus' call
    var other = imul(n, this.a4a_1);
    var tmp$ret$0 = tmp0.w2(toLong_0(other));
    return makeAPLNumber_0(tmp$ret$0);
  };
  function RangeValueChar(a, b, pos, startVal, endVal) {
    var tmp = Companion_instance;
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = endVal - startVal | 0;
    var tmp$ret$0 = abs(this_0);
    RangeValueGeneric.call(this, a, b, of_2(tmp, tmp$ret$0 + 1 | 0), pos);
    this.o4a_1 = startVal;
    this.p4a_1 = this.o4a_1 > endVal ? -1 : 1;
  }
  protoOf(RangeValueChar).b4a = function (n) {
    return new APLChar(this.o4a_1 + imul(n, this.p4a_1) | 0);
  };
  function RangeValueBigInt(a, b, pos, startVal, endVal) {
    RangeValueGeneric.call(this, a, b, plus_0(get_absoluteValue(minus(endVal, startVal)), 1), pos);
    this.w4a_1 = startVal;
    this.x4a_1 = compareTo_1(this.w4a_1, endVal) > 0;
  }
  protoOf(RangeValueBigInt).b4a = function (n) {
    var tmp;
    if (this.x4a_1) {
      tmp = minus_0(this.w4a_1, n);
    } else {
      tmp = plus_0(this.w4a_1, n);
    }
    var res = tmp;
    return makeAPLNumberWithReduction(res);
  };
  function Companion_14() {
  }
  protoOf(Companion_14).s49 = function (a, b, pos) {
    var aSize = Dimensions__get_impl_4npepw(a.o2i(), 0);
    var startElement = a.h2k(aSize - 1 | 0).g2k();
    var endElement = b.h2k(0).g2k();
    var tmp;
    var tmp_0;
    if (isInterface(startElement, APLInteger)) {
      tmp_0 = isInterface(endElement, APLInteger);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      var tmp_1;
      var tmp_2;
      if (startElement instanceof APLLong) {
        tmp_2 = endElement instanceof APLLong;
      } else {
        tmp_2 = false;
      }
      if (tmp_2) {
        tmp_1 = new RangeValueLong(a, b, pos, startElement.g2n_1, endElement.g2n_1);
      } else {
        tmp_1 = new RangeValueBigInt(a, b, pos, startElement.o2z(pos), endElement.o2z(pos));
      }
      tmp = tmp_1;
    } else {
      var tmp_3;
      if (startElement instanceof APLChar) {
        tmp_3 = endElement instanceof APLChar;
      } else {
        tmp_3 = false;
      }
      if (tmp_3) {
        var startPos = startElement.m2z_1;
        var endPos = endElement.m2z_1;
        tmp = new RangeValueChar(a, b, pos, startPos, endPos);
      } else {
        throwAPLException(details(new IncompatibleTypeException('Range types not compatible. A=' + startElement.z2p().p2() + ', B=' + endElement.z2p().p2(), pos), 'The last element of A and the first element of B has to both be integers or both be characters'));
      }
    }
    return tmp;
  };
  var Companion_instance_16;
  function Companion_getInstance_16() {
    return Companion_instance_16;
  }
  function RangeValueGeneric(a, b, width, pos) {
    APLArray.call(this);
    this.c4a_1 = a;
    this.d4a_1 = b;
    this.e4a_1 = Dimensions__get_impl_4npepw(this.c4a_1.o2i(), 0);
    this.f4a_1 = Dimensions__get_impl_4npepw(this.d4a_1.o2i(), 0);
    var size = plus(plus(of_2(Companion_instance, this.e4a_1 - 1 | 0), of_2(Companion_instance, this.f4a_1 - 1 | 0)), width);
    if (compareTo(size, 2147483647) >= 0) {
      throwAPLException(details(new ArrayTooLargeException('Resulting range too large', pos), 'The resulting array would be ' + BigInt__toString_impl_xmp9e6(size) + ' elements, which is larger than the maximum allowed size for an array, which is 2147483647'));
    }
    this.g4a_1 = dimensionsOfSize(new Int32Array([toInt(size)]));
    this.h4a_1 = toInt(width);
  }
  protoOf(RangeValueGeneric).o2i = function () {
    return this.g4a_1;
  };
  protoOf(RangeValueGeneric).h2k = function (p) {
    var tmp;
    if (p < (this.e4a_1 - 1 | 0)) {
      tmp = this.c4a_1.h2k(p);
    } else if (p < ((this.e4a_1 - 1 | 0) + this.h4a_1 | 0)) {
      tmp = this.b4a((p - this.e4a_1 | 0) + 1 | 0);
    } else {
      tmp = this.d4a_1.h2k(((p - (this.e4a_1 - 1 | 0) | 0) - this.h4a_1 | 0) + 1 | 0);
    }
    return tmp;
  };
  function ReduceOpFunctionDescriptor(fn) {
    this.y4a_1 = fn;
  }
  protoOf(ReduceOpFunctionDescriptor).i2i = function (instantiation) {
    return new ReduceFunctionImplLastAxis(this.y4a_1, instantiation);
  };
  function ReduceOpLastAxis() {
  }
  protoOf(ReduceOpLastAxis).n2w = function (fn, pos) {
    return new ReduceOpFunctionDescriptor(fn);
  };
  function ReduceOpFunctionDescriptor_0(fn) {
    this.z4a_1 = fn;
  }
  protoOf(ReduceOpFunctionDescriptor_0).i2i = function (instantiation) {
    return new ReduceFunctionImplFirstAxis(this.z4a_1, instantiation);
  };
  function ReduceOpFirstAxis() {
  }
  protoOf(ReduceOpFirstAxis).n2w = function (fn, pos) {
    return new ReduceOpFunctionDescriptor_0(fn);
  };
  function ScanOpFunctionDescriptor(fn) {
    this.a4b_1 = fn;
  }
  protoOf(ScanOpFunctionDescriptor).i2i = function (instantiation) {
    return new ScanLastAxisFunctionImpl(this.a4b_1, instantiation);
  };
  function ScanLastAxisOp() {
  }
  protoOf(ScanLastAxisOp).n2w = function (fn, pos) {
    return new ScanOpFunctionDescriptor(fn);
  };
  function ScanOpFunctionDescriptor_0(fn) {
    this.b4b_1 = fn;
  }
  protoOf(ScanOpFunctionDescriptor_0).i2i = function (instantiation) {
    return new ScanFirstAxisFunctionImpl(this.b4b_1, instantiation);
  };
  function ScanFirstAxisOp() {
  }
  protoOf(ScanFirstAxisOp).n2w = function (fn, pos) {
    return new ScanOpFunctionDescriptor_0(fn);
  };
  function defaultReduceLongToLong(fn, context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis) {
    var engine = context.j38_1;
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var tmp;
    if (savedStack == null) {
      var i = 1;
      var tmp_0;
      try {
        var curr = arg.i2n(offset);
        while (i < sizeAlongAxis) {
          engine.q42(pos);
          var tmp_1 = curr;
          var _unary__edvuaz = i;
          i = _unary__edvuaz + 1 | 0;
          curr = fn.o2h(context, tmp_1, arg.i2n(imul(_unary__edvuaz, stepLength) + offset | 0), functionAxis);
        }
        tmp_0 = new APLLong(curr);
      } catch ($p) {
        var tmp_2;
        if ($p instanceof LongExpressionOverflow) {
          var e = $p;
          var curr0 = new APLBigInt(e.ek_1);
          while (i < sizeAlongAxis) {
            engine.q42(pos);
            var tmp_3 = curr0;
            var _unary__edvuaz_0 = i;
            i = _unary__edvuaz_0 + 1 | 0;
            curr0 = fn.a2h(context, tmp_3, arg.h2k(imul(_unary__edvuaz_0, stepLength) + offset | 0), functionAxis);
          }
          tmp_2 = curr0;
        } else {
          throw $p;
        }
        tmp_0 = tmp_2;
      }
      tmp = tmp_0;
    } else {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(savedStack);
        try {
          var i_0 = 1;
          var tmp_4;
          try {
            var curr_0 = arg.i2n(offset);
            while (i_0 < sizeAlongAxis) {
              engine.q42(pos);
              var tmp_5 = curr_0;
              var _unary__edvuaz_1 = i_0;
              i_0 = _unary__edvuaz_1 + 1 | 0;
              curr_0 = fn.o2h(context, tmp_5, arg.i2n(imul(_unary__edvuaz_1, stepLength) + offset | 0), functionAxis);
            }
            tmp_4 = new APLLong(curr_0);
          } catch ($p) {
            var tmp_6;
            if ($p instanceof LongExpressionOverflow) {
              var e_0 = $p;
              var curr0_0 = new APLBigInt(e_0.ek_1);
              while (i_0 < sizeAlongAxis) {
                engine.q42(pos);
                var tmp_7 = curr0_0;
                var _unary__edvuaz_2 = i_0;
                i_0 = _unary__edvuaz_2 + 1 | 0;
                curr0_0 = fn.a2h(context, tmp_7, arg.h2k(imul(_unary__edvuaz_2, stepLength) + offset | 0), functionAxis);
              }
              tmp_6 = curr0_0;
            } else {
              throw $p;
            }
            tmp_4 = tmp_6;
          }
          tmp$ret$3 = tmp_4;
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === savedStack)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
      tmp = tmp$ret$3;
    }
    return tmp;
  }
  function defaultReduceDoubleToDouble(fn, context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis) {
    var engine = context.j38_1;
    var curr = arg.y2p(offset);
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    if (savedStack == null) {
      var inductionVariable = 1;
      if (inductionVariable < sizeAlongAxis)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          engine.q42(pos);
          curr = fn.p2h(context, curr, arg.y2p(imul(i, stepLength) + offset | 0), functionAxis);
        }
         while (inductionVariable < sizeAlongAxis);
    } else {
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(savedStack);
        try {
          var inductionVariable_0 = 1;
          if (inductionVariable_0 < sizeAlongAxis)
            do {
              var i_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              engine.q42(pos);
              curr = fn.p2h(context, curr, arg.y2p(imul(i_0, stepLength) + offset | 0), functionAxis);
            }
             while (inductionVariable_0 < sizeAlongAxis);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === savedStack)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
    }
    return makeAPLNumber(curr);
  }
  function defaultReduceGeneric(fn, context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis) {
    var engine = context.j38_1;
    var curr = arg.h2k(offset);
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    if (savedStack == null) {
      var inductionVariable = 1;
      if (inductionVariable < sizeAlongAxis)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          engine.q42(pos);
          curr = fn.a2h(context, curr, arg.h2k(imul(i, stepLength) + offset | 0), functionAxis).x2g();
        }
         while (inductionVariable < sizeAlongAxis);
    } else {
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(savedStack);
        try {
          var inductionVariable_0 = 1;
          if (inductionVariable_0 < sizeAlongAxis)
            do {
              var i_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              engine.q42(pos);
              curr = fn.a2h(context, curr, arg.h2k(imul(i_0, stepLength) + offset | 0), functionAxis).x2g();
            }
             while (inductionVariable_0 < sizeAlongAxis);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === savedStack)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
    }
    return curr;
  }
  function unwrapEnclosedSingleValue(value) {
    var tmp;
    if (Dimensions__isEmpty_impl_2yd13(value.o2i())) {
      tmp = Companion_instance_51.s2i(value.h2k(0).g2k());
    } else {
      tmp = value;
    }
    return tmp;
  }
  function ReduceResult1Arg(context, fn, arg, opAxis, pos, savedStack) {
    APLArray.call(this);
    this.c4b_1 = context;
    this.d4b_1 = fn;
    this.e4b_1 = arg;
    this.f4b_1 = pos;
    this.g4b_1 = savedStack;
    var argDimensions = this.e4b_1.o2i();
    var argMultipliers = Dimensions__multipliers_impl_u1suko(argDimensions);
    ensureValidAxis(opAxis, argDimensions, this.f4b_1);
    this.i4b_1 = DimensionMultipliers__get_impl_90rsg3(argMultipliers, opAxis);
    this.j4b_1 = Dimensions__get_impl_4npepw(argDimensions, opAxis);
    this.h4b_1 = Dimensions__remove_impl_ve6v38(argDimensions, opAxis);
    var multipliers = Dimensions__multipliers_impl_u1suko(this.h4b_1);
    this.k4b_1 = opAxis === 0 ? this.n() : DimensionMultipliers__get_impl_90rsg3(multipliers, opAxis - 1 | 0);
    this.l4b_1 = imul(this.k4b_1, Dimensions__get_impl_4npepw(argDimensions, opAxis));
    this.m4b_1 = _ArrayMemberType___get_isLong__impl__xzhfcp(this.e4b_1.f2n()) && _OptimisationFlags___get_is2ALongLong__impl__oapfj6(this.d4b_1.l2h()) ? Companion_getInstance_45().x2j_1 : _ArrayMemberType___get_isDouble__impl__6s2782(this.e4b_1.f2n()) && _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(this.d4b_1.l2h()) ? Companion_getInstance_45().y2j_1 : Companion_getInstance_45().z2j_1;
  }
  protoOf(ReduceResult1Arg).o2i = function () {
    return this.h4b_1;
  };
  protoOf(ReduceResult1Arg).f2n = function () {
    return this.m4b_1;
  };
  protoOf(ReduceResult1Arg).h2k = function (p) {
    return reduceAtPosition(this.d4b_1, this.c4b_1, this.e4b_1, p, this.j4b_1, this.i4b_1, this.k4b_1, this.l4b_1, this.g4b_1, this.f4b_1);
  };
  protoOf(ReduceResult1Arg).i2n = function (p) {
    var v = this.h2k(p);
    var tmp;
    if (v instanceof APLLong) {
      tmp = v.g2n_1;
    } else {
      if (v instanceof APLBigInt) {
        throw new LongExpressionOverflow(v.z2q_1);
      } else {
        var message = 'Result from reduction should be an integer, got: ' + toString(v);
        throw IllegalStateException_init_$Create$(toString(message));
      }
    }
    return tmp;
  };
  protoOf(ReduceResult1Arg).y2p = function (p) {
    var v = this.h2k(p);
    // Inline function 'kotlin.require' call
    if (!(v instanceof APLDouble)) {
      var message = 'Result from reduction should be a double, got: ' + toString(v);
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return v.a2r_1;
  };
  protoOf(ReduceResult1Arg).g2k = function () {
    return unwrapEnclosedSingleValue(this);
  };
  function ReduceFunctionImplLastAxis(fn, pos) {
    ReduceFunctionImpl.call(this, fn, pos);
    this.s4b_1 = 'reduce last axis [' + fn.a2i() + ']';
  }
  protoOf(ReduceFunctionImplLastAxis).f2m = function (a) {
    return _Dimensions___get_size__impl__uu37ek(a.o2i()) - 1 | 0;
  };
  protoOf(ReduceFunctionImplLastAxis).z2h = function () {
    return this.s4b_1;
  };
  function ReduceFunctionImplFirstAxis(fn, pos) {
    ReduceFunctionImpl.call(this, fn, pos);
    this.d4c_1 = 'reduce first axis [' + fn.a2i() + ']';
  }
  protoOf(ReduceFunctionImplFirstAxis).f2m = function (a) {
    return 0;
  };
  protoOf(ReduceFunctionImplFirstAxis).z2h = function () {
    return this.d4c_1;
  };
  function ScanLastAxisFunctionImpl(fn, pos) {
    ScanFunctionImpl.call(this, fn, pos);
  }
  protoOf(ScanLastAxisFunctionImpl).f2m = function (a) {
    return _Dimensions___get_size__impl__uu37ek(a.o2i()) - 1 | 0;
  };
  function ScanFirstAxisFunctionImpl(fn, pos) {
    ScanFunctionImpl.call(this, fn, pos);
  }
  protoOf(ScanFirstAxisFunctionImpl).f2m = function (a) {
    return 0;
  };
  function reduceAtPosition(fn, context, arg, p, sizeAlongAxis, stepLength, fromSourceMul, toDestMul, savedStack, pos) {
    var tmp;
    if (sizeAlongAxis === 0) {
      tmp = fn.j2h();
    } else {
      var highPosition = p / fromSourceMul | 0;
      var lowPosition = p % fromSourceMul | 0;
      var posInSrc = imul(highPosition, toDestMul) + lowPosition | 0;
      var specialisedType = arg.f2n();
      var tmp_0;
      if (_ArrayMemberType___get_isLong__impl__xzhfcp(specialisedType) && _OptimisationFlags___get_is2ALongLong__impl__oapfj6(fn.l2h())) {
        tmp_0 = fn.d2i(context, arg, posInSrc, sizeAlongAxis, stepLength, pos, savedStack, null);
      } else if (_ArrayMemberType___get_isDouble__impl__6s2782(specialisedType) && _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0(fn.l2h())) {
        tmp_0 = fn.e2i(context, arg, posInSrc, sizeAlongAxis, stepLength, pos, savedStack, null);
      } else {
        tmp_0 = fn.f2i(context, arg, sizeAlongAxis, stepLength, posInSrc, savedStack, null);
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function ReduceFunctionImpl(fn, pos) {
    APLFunction.call(this, pos, listOf_0(fn));
    this.x4b_1 = new SaveStackSupport(this);
  }
  protoOf(ReduceFunctionImpl).u31 = function () {
    return this.s2g_1.p(0);
  };
  protoOf(ReduceFunctionImpl).w2g = function (context, a, axis) {
    var axisParam = axis == null ? null : axis.p2i(this.t2g_1).q2i(this.t2g_1);
    var tmp;
    if (a.v2i() === 0) {
      if (!(axisParam == null) && !(axisParam === 0)) {
        throwAPLException(IllegalAxisException_init_$Create$(axisParam, a.o2i(), this.t2g_1));
      }
      tmp = a;
    } else {
      var axisInt = axisParam == null ? this.f2m(a) : axisParam;
      ensureValidAxis(axisInt, a.o2i(), this.t2g_1);
      tmp = new ReduceResult1Arg(context, this.u31(), a, axisInt, this.t2g_1, this.x4b_1.g3g());
    }
    return tmp;
  };
  protoOf(ReduceFunctionImpl).a2h = function (context, a, b, axis) {
    var bDimensions = b.o2i();
    var axisParam = axis == null ? null : axis.p2i(this.t2g_1).q2i(this.t2g_1);
    var size = a.p2i(this.t2g_1).q2i(this.t2g_1);
    if (_Dimensions___get_size__impl__uu37ek(bDimensions) === 0) {
      if (!(axisParam == null) && !(axisParam === 0)) {
        throwAPLException(IllegalAxisException_init_$Create$(axisParam, bDimensions, this.t2g_1));
      }
      var tmp;
      switch (size) {
        case 1:
          var tmp_0 = size1Dimensions();
          // Inline function 'kotlin.arrayOf' call

          // Inline function 'kotlin.js.unsafeCast' call

          // Inline function 'kotlin.js.asDynamic' call

          var tmp$ret$2 = [b];
          tmp = new APLArrayImpl(tmp_0, tmp$ret$2);
          break;
        case 0:
          tmp = APLNullValue_getInstance();
          break;
        case -1:
          var tmp_1 = size1Dimensions();
          // Inline function 'kotlin.arrayOf' call

          // Inline function 'kotlin.js.unsafeCast' call

          // Inline function 'kotlin.js.asDynamic' call

          var tmp$ret$5 = [get_APLLONG_0()];
          tmp = new APLArrayImpl(tmp_1, tmp$ret$5);
          break;
        default:
          throwAPLException(new InvalidDimensionsException('Invalid left argument for scalar right arg', this.t2g_1));
          break;
      }
      return tmp;
    }
    var axisInt = axisParam == null ? this.f2m(b) : axisParam;
    ensureValidAxis(axisInt, bDimensions, this.t2g_1);
    var tmp_2;
    // Inline function 'kotlin.math.absoluteValue' call
    if (abs(size) > (Dimensions__get_impl_4npepw(bDimensions, axisInt) + 1 | 0)) {
      throwAPLException(new InvalidDimensionsException('Left argument too large. The absolute value of A (' + size + ') must be less than or equal to the size of the reduced axis (' + Dimensions__get_impl_4npepw(bDimensions, axisInt) + ') - 1.', this.t2g_1));
    } else {
      // Inline function 'kotlin.math.absoluteValue' call
      if (abs(size) === (Dimensions__get_impl_4npepw(bDimensions, axisInt) + 1 | 0)) {
        var tmp_3 = 0;
        var tmp_4 = _Dimensions___get_size__impl__uu37ek(bDimensions);
        var tmp_5 = new Int32Array(tmp_4);
        while (tmp_3 < tmp_4) {
          var tmp_6 = tmp_3;
          tmp_5[tmp_6] = tmp_6 === axisInt ? 0 : Dimensions__get_impl_4npepw(bDimensions, tmp_6);
          tmp_3 = tmp_3 + 1 | 0;
        }
        var d = _Dimensions___init__impl__sxkzw4(tmp_5);
        // Inline function 'kotlin.emptyArray' call
        var tmp$ret$9 = [];
        tmp_2 = new APLArrayImpl(d, tmp$ret$9);
      } else {
        tmp_2 = new ReduceNWiseResultValue(context, this.u31(), size, b, axisInt, this.x4b_1.g3g());
      }
    }
    return tmp_2;
  };
  protoOf(ReduceFunctionImpl).z2h = function () {
    return 'reduce by ' + this.u31().a2i();
  };
  protoOf(ReduceFunctionImpl).a2i = function () {
    return 'windowed reduce by ' + this.u31().a2i();
  };
  function ScanFunctionImpl(fn, pos) {
    APLFunction.call(this, pos);
    this.n4c_1 = fn;
  }
  protoOf(ScanFunctionImpl).w2g = function (context, a, axis) {
    var axisParam = !(axis == null) ? axis.p2i(this.t2g_1).q2i(this.t2g_1) : null;
    var tmp;
    if (a.v2i() === 0) {
      if (!(axisParam == null) && !(axisParam === 0)) {
        throwAPLException(IllegalAxisException_init_$Create$(axisParam, a.o2i(), this.t2g_1));
      }
      tmp = a;
    } else {
      var v = axisParam == null ? this.f2m(a) : axisParam;
      ensureValidAxis(v, a.o2i(), this.t2g_1);
      tmp = new ScanResult1Arg(context, this.n4c_1, axis, a, v);
    }
    return tmp;
  };
  function lookupSource($this, p) {
    var tmp0 = $this.e4d_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.mpthread.checkOrUpdate' call
      var old = tmp0.p(p);
      if (!(old == null)) {
        tmp$ret$0 = old;
        break $l$block;
      }
      var update = $this.w4c_1.h2k(p);
      var tmp0_elvis_lhs = tmp0.f4d(p, null, update);
      tmp$ret$0 = tmp0_elvis_lhs == null ? update : tmp0_elvis_lhs;
    }
    return tmp$ret$0;
  }
  function ReduceNWiseResultValue(context, fn, reductionSize, b, operatorAxis, savedStack) {
    APLArray.call(this);
    this.t4c_1 = context;
    this.u4c_1 = fn;
    this.v4c_1 = reductionSize;
    this.w4c_1 = b;
    this.x4c_1 = savedStack;
    this.e4d_1 = makeAtomicRefArray(this.w4c_1.n());
    var bDimensions = this.w4c_1.o2i();
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = _Dimensions___get_size__impl__uu37ek(bDimensions);
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var s = Dimensions__get_impl_4npepw(bDimensions, tmp_3);
      var tmp_4;
      if (tmp_3 === operatorAxis) {
        // Inline function 'kotlin.math.absoluteValue' call
        var this_0 = this.v4c_1;
        tmp_4 = (s - abs(this_0) | 0) + 1 | 0;
      } else {
        tmp_4 = s;
      }
      tmp_2[tmp_3] = tmp_4;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.y4c_1 = _Dimensions___init__impl__sxkzw4(tmp_2);
    var bMultipliers = Dimensions__multipliers_impl_u1suko(bDimensions);
    this.b4d_1 = DimensionMultipliers__get_impl_90rsg3(bMultipliers, operatorAxis);
    this.a4d_1 = imul(this.b4d_1, Dimensions__get_impl_4npepw(bDimensions, operatorAxis));
    this.c4d_1 = this.v4c_1 < 0 ? -1 : 1;
    var tmp_5 = this;
    // Inline function 'kotlin.math.absoluteValue' call
    var this_1 = this.v4c_1;
    tmp_5.d4d_1 = abs(this_1);
    this.z4c_1 = new AxisActionFactors(this.y4c_1, operatorAxis);
  }
  protoOf(ReduceNWiseResultValue).o2i = function () {
    return this.y4c_1;
  };
  protoOf(ReduceNWiseResultValue).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.AxisActionFactors.withFactors' call
    var this_0 = this.z4c_1;
    var f = this_0.z2u_1;
    var m = this_0.y2u_1;
    var lowVal = p % m | 0;
    var highVal = p / f | 0;
    var r = p % f | 0;
    var axisCoord = r / m | 0;
    var pos = this.v4c_1 < 0 ? this.d4d_1 - 1 | 0 : 0;
    var curr = lookupSource(this, (imul(highVal, this.a4d_1) + imul(axisCoord + pos | 0, this.b4d_1) | 0) + lowVal | 0);
    // Inline function 'com.dhsdevelopments.kap.withPossibleSavedStack' call
    var frame = this.x4c_1;
    if (frame == null) {
      // Inline function 'kotlin.repeat' call
      var times = this.d4d_1 - 1 | 0;
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          pos = pos + this.c4d_1 | 0;
          var value = lookupSource(this, (imul(highVal, this.a4d_1) + imul(axisCoord + pos | 0, this.b4d_1) | 0) + lowVal | 0);
          curr = this.u4c_1.a2h(this.t4c_1, curr, value, null);
        }
         while (inductionVariable < times);
    } else {
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
        var stack = currentStorageStack().r3b_1;
        stack.h(frame);
        try {
          // Inline function 'kotlin.repeat' call
          var times_0 = this.d4d_1 - 1 | 0;
          var inductionVariable_0 = 0;
          if (inductionVariable_0 < times_0)
            do {
              var index_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              pos = pos + this.c4d_1 | 0;
              var value_0 = lookupSource(this, (imul(highVal, this.a4d_1) + imul(axisCoord + pos | 0, this.b4d_1) | 0) + lowVal | 0);
              curr = this.u4c_1.a2h(this.t4c_1, curr, value_0, null);
            }
             while (inductionVariable_0 < times_0);
          break $l$block;
        }finally {
          var removed = removeLast(stack);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
        }
      }
    }
    return curr;
  };
  function ScanResult1Arg(context, fn, fnAxis, a, axis) {
    APLArray.call(this);
    this.g4d_1 = context;
    this.h4d_1 = fn;
    this.i4d_1 = fnAxis;
    this.j4d_1 = a;
    this.k4d_1 = this.j4d_1.o2i();
    this.l4d_1 = makeAtomicRefArray(this.n());
    this.m4d_1 = new AxisActionFactors(this.k4d_1, axis);
  }
  protoOf(ScanResult1Arg).o2i = function () {
    return this.k4d_1;
  };
  protoOf(ScanResult1Arg).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.AxisActionFactors.withFactors' call
    var this_0 = this.m4d_1;
    var f = this_0.z2u_1;
    var m = this_0.y2u_1;
    var lowVal = p % m | 0;
    var highVal = p / f | 0;
    var r = p % f | 0;
    var axisCoord = r / m | 0;
    var currIndex = axisCoord;
    var leftValue;
    $l$loop_0: while (true) {
      var index = this.m4d_1.m2w(highVal, lowVal, currIndex);
      if (currIndex === 0) {
        var tmp0 = this.l4d_1;
        var tmp$ret$0;
        $l$block: {
          // Inline function 'com.dhsdevelopments.kap.mpthread.checkOrUpdate' call
          var old = tmp0.p(index);
          if (!(old == null)) {
            tmp$ret$0 = old;
            break $l$block;
          }
          var update = this.j4d_1.h2k(index);
          var tmp0_elvis_lhs = tmp0.f4d(index, null, update);
          tmp$ret$0 = tmp0_elvis_lhs == null ? update : tmp0_elvis_lhs;
        }
        leftValue = tmp$ret$0;
        break $l$loop_0;
      } else {
        var cachedVal = this.l4d_1.p(index);
        if (!(cachedVal == null)) {
          leftValue = cachedVal;
          break $l$loop_0;
        }
      }
      currIndex = currIndex - 1 | 0;
    }
    if (currIndex < axisCoord) {
      var inductionVariable = currIndex + 1 | 0;
      if (inductionVariable <= axisCoord)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var index_0 = this.m4d_1.m2w(highVal, lowVal, i);
          var tmp2 = this.l4d_1;
          var tmp$ret$2;
          $l$block_0: {
            // Inline function 'com.dhsdevelopments.kap.mpthread.checkOrUpdate' call
            var old_0 = tmp2.p(index_0);
            if (!(old_0 == null)) {
              tmp$ret$2 = old_0;
              break $l$block_0;
            }
            var update_0 = this.h4d_1.a2h(this.g4d_1, leftValue, this.j4d_1.h2k(index_0), this.i4d_1).x2g();
            var tmp0_elvis_lhs_0 = tmp2.f4d(index_0, null, update_0);
            tmp$ret$2 = tmp0_elvis_lhs_0 == null ? update_0 : tmp0_elvis_lhs_0;
          }
          leftValue = tmp$ret$2;
        }
         while (!(i === axisCoord));
    }
    return leftValue;
  };
  function GradeUpFunctionImpl(pos) {
    GradeFunction.call(this, pos);
  }
  protoOf(GradeUpFunctionImpl).r4d = function (result) {
    return result;
  };
  protoOf(GradeUpFunctionImpl).z2h = function () {
    return 'grade up';
  };
  function GradeUpFunction() {
  }
  protoOf(GradeUpFunction).i2i = function (instantiation) {
    return new GradeUpFunctionImpl(instantiation);
  };
  function GradeDownFunctionImpl(pos) {
    GradeFunction.call(this, pos);
  }
  protoOf(GradeDownFunctionImpl).r4d = function (result) {
    return -result | 0;
  };
  protoOf(GradeDownFunctionImpl).z2h = function () {
    return 'grade down';
  };
  function GradeDownFunction() {
  }
  protoOf(GradeDownFunction).i2i = function (instantiation) {
    return new GradeDownFunctionImpl(instantiation);
  };
  function compareAPLArrays(a, b, pos, typeDiscrimination) {
    var aDimensions = a.o2i();
    var bDimensions = b.o2i();
    // Inline function 'kotlin.let' call
    var result = compareTo_3(_Dimensions___get_size__impl__uu37ek(aDimensions), _Dimensions___get_size__impl__uu37ek(bDimensions));
    if (!(result === 0)) {
      return result;
    }
    if (_Dimensions___get_size__impl__uu37ek(aDimensions) === 1 && _Dimensions___get_size__impl__uu37ek(bDimensions) === 1) {
      var aLength = Dimensions__get_impl_4npepw(aDimensions, 0);
      var bLength = Dimensions__get_impl_4npepw(bDimensions, 0);
      var i = 0;
      while (i < aLength && i < bLength) {
        var aVal = a.h2k(i);
        var bVal = b.h2k(i);
        var result_0 = aVal.f2q(bVal, pos, typeDiscrimination);
        if (!(result_0 === 0)) {
          return result_0;
        }
        i = i + 1 | 0;
      }
      return i < aLength ? 1 : i < bLength ? -1 : 0;
    }
    // Inline function 'kotlin.let' call
    var result_1 = Dimensions__compareTo_impl_x2rz52(aDimensions, bDimensions);
    if (!(result_1 === 0)) {
      return result_1;
    }
    var inductionVariable = 0;
    var last = a.n();
    if (inductionVariable < last)
      do {
        var i_0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var aVal_0 = a.h2k(i_0);
        var bVal_0 = b.h2k(i_0);
        // Inline function 'kotlin.let' call
        var result_2 = aVal_0.f2q(bVal_0, pos, typeDiscrimination);
        if (!(result_2 === 0)) {
          return result_2;
        }
      }
       while (inductionVariable < last);
    return 0;
  }
  function sortKapArray(a, axis, reverse, pos) {
    var a0 = a.x2g();
    var d = a0.o2i();
    var axisInt = axis == null ? 0 : axis.p2i(pos).q2i(pos);
    ensureValidAxis(axisInt, d, pos);
    var multipliers = Dimensions__multipliers_impl_u1suko(d);
    var valueSize = DimensionMultipliers__get_impl_90rsg3(multipliers, axisInt);
    var tmp = 0;
    var tmp_0 = a0.n() / valueSize | 0;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = tmp_2;
      tmp = tmp + 1 | 0;
    }
    var indexes = tmp_1;
    var reverseMultiplier = reverse ? -1 : 1;
    var comparator = new sortKapArray$comparator$1(valueSize, a0, pos, reverseMultiplier);
    var result = sortedWith(indexes, comparator);
    return new SortedAPLArray(d, a0, result, valueSize, axisInt);
  }
  function opLong_16($this, list, firstAxisMultiplier, source) {
    var tmp = GradeFunction$opLong$lambda(firstAxisMultiplier, $this, source);
    return sortedWith(list, new sam$kotlin_Comparator$0(tmp));
  }
  function opDouble_11($this, list, firstAxisMultiplier, source) {
    var tmp = GradeFunction$opDouble$lambda(firstAxisMultiplier, source, $this);
    return sortedWith(list, new sam$kotlin_Comparator$0_0(tmp));
  }
  function opGeneric($this, list, firstAxisMultiplier, source) {
    var tmp = GradeFunction$opGeneric$lambda(firstAxisMultiplier, source, $this);
    return sortedWith(list, new sam$kotlin_Comparator$0_1(tmp));
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.a4e_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0).ic = function (a, b) {
    return this.a4e_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {
    return this.ic(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).m3 = function () {
    return this.a4e_1;
  };
  protoOf(sam$kotlin_Comparator$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.m3(), other.m3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0).hashCode = function () {
    return hashCode(this.m3());
  };
  function sam$kotlin_Comparator$0_0(function_0) {
    this.b4e_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_0).ic = function (a, b) {
    return this.b4e_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).compare = function (a, b) {
    return this.ic(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).m3 = function () {
    return this.b4e_1;
  };
  protoOf(sam$kotlin_Comparator$0_0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.m3(), other.m3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_0).hashCode = function () {
    return hashCode(this.m3());
  };
  function sam$kotlin_Comparator$0_1(function_0) {
    this.c4e_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_1).ic = function (a, b) {
    return this.c4e_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_1).compare = function (a, b) {
    return this.ic(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_1).m3 = function () {
    return this.c4e_1;
  };
  protoOf(sam$kotlin_Comparator$0_1).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.m3(), other.m3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_1).hashCode = function () {
    return hashCode(this.m3());
  };
  function GradeFunction$opLong$lambda($firstAxisMultiplier, this$0, $source) {
    return function (aIndex, bIndex) {
      var ap = imul(aIndex, $firstAxisMultiplier);
      var bp = imul(bIndex, $firstAxisMultiplier);
      var res = 0;
      var inductionVariable = 0;
      var tmp;
      if (inductionVariable < $firstAxisMultiplier) {
        $l$loop: do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp0 = this$0;
          var tmp1 = $source;
          var tmp2 = ap;
          var tmp3 = bp;
          var tmp$ret$0;
          $l$block_0: {
            // Inline function 'com.dhsdevelopments.kap.builtins.GradeFunction.lookupAndCompareLong' call
            var tmp_0;
            try {
              tmp_0 = tmp1.i2n(tmp2);
            } catch ($p) {
              var tmp_1;
              if ($p instanceof LongExpressionOverflow) {
                var e = $p;
                var objB = tmp1.h2k(tmp3);
                tmp$ret$0 = makeAPLNumber_2(e.ek_1).u3l(objB, tmp0.t2g_1, true);
                break $l$block_0;
              } else {
                throw $p;
              }
            }
            var objA = tmp_0;
            var tmp_2;
            try {
              tmp_2 = tmp1.i2n(tmp3);
            } catch ($p) {
              var tmp_3;
              if ($p instanceof LongExpressionOverflow) {
                var e_0 = $p;
                tmp$ret$0 = compareTo_1(toBigInt(objA), e_0.ek_1);
                break $l$block_0;
              } else {
                throw $p;
              }
            }
            var objB_0 = tmp_2;
            tmp$ret$0 = objA.a1(objB_0);
          }
          var result = tmp$ret$0;
          if (!(result === 0)) {
            res = result;
            break $l$loop;
          }
          ap = ap + 1 | 0;
          bp = bp + 1 | 0;
        }
         while (inductionVariable < $firstAxisMultiplier);
        tmp = Unit_instance;
      }
      return this$0.r4d(res);
    };
  }
  function GradeFunction$opDouble$lambda($firstAxisMultiplier, $source, this$0) {
    return function (aIndex, bIndex) {
      var ap = imul(aIndex, $firstAxisMultiplier);
      var bp = imul(bIndex, $firstAxisMultiplier);
      var res = 0;
      var inductionVariable = 0;
      var tmp;
      if (inductionVariable < $firstAxisMultiplier) {
        $l$loop: do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var objA = $source.y2p(ap);
          var objB = $source.y2p(bp);
          var result = compareTo_3(objA, objB);
          if (!(result === 0)) {
            res = result;
            break $l$loop;
          }
          ap = ap + 1 | 0;
          bp = bp + 1 | 0;
        }
         while (inductionVariable < $firstAxisMultiplier);
        tmp = Unit_instance;
      }
      return this$0.r4d(res);
    };
  }
  function GradeFunction$opGeneric$lambda($firstAxisMultiplier, $source, this$0) {
    return function (aIndex, bIndex) {
      var ap = imul(aIndex, $firstAxisMultiplier);
      var bp = imul(bIndex, $firstAxisMultiplier);
      var res = 0;
      var inductionVariable = 0;
      var tmp;
      if (inductionVariable < $firstAxisMultiplier) {
        $l$loop: do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var objA = $source.h2k(ap);
          var objB = $source.h2k(bp);
          var result = objA.g2q(objB, this$0.t2g_1);
          if (!(result === 0)) {
            res = result;
            break $l$loop;
          }
          ap = ap + 1 | 0;
          bp = bp + 1 | 0;
        }
         while (inductionVariable < $firstAxisMultiplier);
        tmp = Unit_instance;
      }
      return this$0.r4d(res);
    };
  }
  function GradeFunction(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(GradeFunction).n2i = function (context, a) {
    var aDimensions = a.o2i();
    if (_Dimensions___get_size__impl__uu37ek(aDimensions) === 0) {
      throwAPLException(new InvalidDimensionsException('Scalars cannot be sorted', this.t2g_1));
    }
    var containsArg = Dimensions__get_impl_4npepw(aDimensions, 0);
    if (0 <= containsArg ? containsArg <= 1 : false) {
      return new ConstantArray(size1Dimensions(), get_APLLONG_0());
    }
    var multipliers = Dimensions__multipliers_impl_u1suko(aDimensions);
    var firstAxisMultiplier = DimensionMultipliers__get_impl_90rsg3(multipliers, 0);
    var source = a.x2g();
    var tmp = 0;
    var tmp_0 = Dimensions__get_impl_4npepw(aDimensions, 0);
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = tmp_2;
      tmp = tmp + 1 | 0;
    }
    var list = tmp_1;
    var type = source.f2n();
    var sorted = _ArrayMemberType___get_isLong__impl__xzhfcp(type) ? opLong_16(this, list, firstAxisMultiplier, source) : _ArrayMemberType___get_isDouble__impl__6s2782(type) ? opDouble_11(this, list, firstAxisMultiplier, source) : opGeneric(this, list, firstAxisMultiplier, source);
    var tmp_3 = dimensionsOfSize(new Int32Array([sorted.n()]));
    var tmp_4 = 0;
    var tmp_5 = sorted.n();
    var tmp_6 = longArray(tmp_5);
    while (tmp_4 < tmp_5) {
      var tmp_7 = tmp_4;
      tmp_6[tmp_7] = toLong_0(sorted.p(tmp_7));
      tmp_4 = tmp_4 + 1 | 0;
    }
    return new APLArrayLong(tmp_3, tmp_6);
  };
  function SortedAPLArray$SortedAPLArrayMetadata$labels$delegate$lambda($sourceMetadata, $axis, $mapping) {
    return function () {
      var sourceLabels = $sourceMetadata.p2r();
      var tmp;
      if (sourceLabels == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.collections.mapIndexed' call
        var this_0 = sourceLabels.q2r_1;
        // Inline function 'kotlin.collections.mapIndexedTo' call
        var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
        var index = 0;
        var _iterator__ex2g4s = this_0.k();
        while (_iterator__ex2g4s.l()) {
          var item = _iterator__ex2g4s.m();
          var _unary__edvuaz = index;
          index = _unary__edvuaz + 1 | 0;
          var i = checkIndexOverflow(_unary__edvuaz);
          var tmp_0;
          if (item == null) {
            tmp_0 = null;
          } else if (i < $axis) {
            tmp_0 = null;
          } else if (i === $axis) {
            var tmp_1;
            if (!(i === 0)) {
              tmp_1 = null;
            } else {
              // Inline function 'kotlin.collections.map' call
              var this_1 = until(0, item.n());
              // Inline function 'kotlin.collections.mapTo' call
              var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_1, 10));
              var inductionVariable = this_1.u_1;
              var last = this_1.v_1;
              if (inductionVariable <= last)
                do {
                  var item_0 = inductionVariable;
                  inductionVariable = inductionVariable + 1 | 0;
                  var ii = item_0;
                  var tmp$ret$0 = item.p($mapping.p(ii));
                  destination_0.h(tmp$ret$0);
                }
                 while (!(item_0 === last));
              tmp_1 = destination_0;
            }
            tmp_0 = tmp_1;
          } else {
            tmp_0 = item;
          }
          var tmp$ret$3 = tmp_0;
          destination.h(tmp$ret$3);
        }
        var l = destination;
        tmp = Companion_instance_50.d4e(l);
      }
      return tmp;
    };
  }
  function SortedAPLArrayMetadata(sourceMetadata, mapping, axis) {
    DerivedAPLValueMetadata.call(this, sourceMetadata);
    var tmp = this;
    tmp.g4e_1 = lazy(SortedAPLArray$SortedAPLArrayMetadata$labels$delegate$lambda(sourceMetadata, axis, mapping));
  }
  protoOf(SortedAPLArrayMetadata).p2r = function () {
    var tmp0 = this.g4e_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_12();
    return tmp0.x1();
  };
  function SortedAPLArray$metadata$delegate$lambda(this$0, $axis) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var sourceMetadata = this$0.k4e_1.m2l();
      var tmp;
      if (sourceMetadata.y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new SortedAPLArrayMetadata(sourceMetadata, this$0.l4e_1, $axis);
      }
      return tmp;
    };
  }
  function SortedAPLArray(dimensions, a, mapping, valueSize, axis) {
    APLArray.call(this);
    this.j4e_1 = dimensions;
    this.k4e_1 = a;
    this.l4e_1 = mapping;
    this.m4e_1 = valueSize;
    var tmp = this;
    tmp.n4e_1 = lazy(SortedAPLArray$metadata$delegate$lambda(this, axis));
  }
  protoOf(SortedAPLArray).o2i = function () {
    return this.j4e_1;
  };
  protoOf(SortedAPLArray).f2n = function () {
    return this.k4e_1.f2n();
  };
  protoOf(SortedAPLArray).m2l = function () {
    var tmp0 = this.n4e_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_10();
    return tmp0.x1();
  };
  protoOf(SortedAPLArray).h2k = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.SortedAPLArray.valueAtInternal' call
    var high = p / this.m4e_1 | 0;
    var low = p % this.m4e_1 | 0;
    var remapPos = this.l4e_1.p(high);
    var tmp2 = this.k4e_1;
    var position = imul(remapPos, this.m4e_1) + low | 0;
    return tmp2.h2k(position);
  };
  protoOf(SortedAPLArray).i2n = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.SortedAPLArray.valueAtInternal' call
    var high = p / this.m4e_1 | 0;
    var low = p % this.m4e_1 | 0;
    var remapPos = this.l4e_1.p(high);
    var tmp2 = this.k4e_1;
    var position = imul(remapPos, this.m4e_1) + low | 0;
    return tmp2.i2n(position);
  };
  protoOf(SortedAPLArray).y2p = function (p) {
    // Inline function 'com.dhsdevelopments.kap.builtins.SortedAPLArray.valueAtInternal' call
    var high = p / this.m4e_1 | 0;
    var low = p % this.m4e_1 | 0;
    var remapPos = this.l4e_1.p(high);
    var tmp2 = this.k4e_1;
    var position = imul(remapPos, this.m4e_1) + low | 0;
    return tmp2.y2p(position);
  };
  function sortKapArray$comparator$1($valueSize, $a0, $pos, $reverseMultiplier) {
    this.o4e_1 = $valueSize;
    this.p4e_1 = $a0;
    this.q4e_1 = $pos;
    this.r4e_1 = $reverseMultiplier;
  }
  protoOf(sortKapArray$comparator$1).s4e = function (a, b) {
    // Inline function 'kotlin.repeat' call
    var times = this.o4e_1;
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var o0 = this.p4e_1.h2k(imul(a, this.o4e_1) + index | 0);
        var o1 = this.p4e_1.h2k(imul(b, this.o4e_1) + index | 0);
        var res = o0.g2q(o1, this.q4e_1);
        if (!(res === 0)) {
          return imul(res, this.r4e_1);
        }
      }
       while (inductionVariable < times);
    return 0;
  };
  protoOf(sortKapArray$comparator$1).compare = function (a, b) {
    var tmp = (!(a == null) ? typeof a === 'number' : false) ? a : THROW_CCE();
    return this.s4e(tmp, (!(b == null) ? typeof b === 'number' : false) ? b : THROW_CCE());
  };
  function metadata$factory_10() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_12() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function InternFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(InternFunctionImpl).t2i = function (context, a, b) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var nameString = result;
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos_0 = this.t2g_1;
    var result_0 = toStringValueOrNull(a);
    if (result_0 == null) {
      var m_0 = null;
      var messagePrefix_0 = m_0 == null ? '' : '' + m_0 + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix_0 + 'Argument is not a string', pos_0));
    }
    var kwString = result_0;
    var ns = context.j38_1.x4e(kwString);
    var sym = context.j38_1.y4e(nameString, ns, false);
    return new APLSymbol(sym);
  };
  function InternFunction() {
  }
  protoOf(InternFunction).i2i = function (instantiation) {
    return new InternFunctionImpl(instantiation);
  };
  function SymbolNameFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(SymbolNameFunctionImpl).n2i = function (context, a) {
    var sym = a.m2q(this.t2g_1).g2j_1;
    var tmp = dimensionsOfSize(new Int32Array([2]));
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = [Companion_getInstance_46().k2o(sym.h2j_1), Companion_getInstance_46().k2o(sym.i2j_1.d4f_1)];
    return new APLArrayImpl(tmp, tmp$ret$2);
  };
  function SymbolNameFunction() {
  }
  protoOf(SymbolNameFunction).i2i = function (instantiation) {
    return new SymbolNameFunctionImpl(instantiation);
  };
  function ThrowNativeFunctionImpl($outer, pos) {
    this.k4f_1 = $outer;
    NoAxisAPLFunction.call(this, pos);
    var ns = pos.c38_1.r39();
    this.i4f_1 = ns.l4f('InvalidDimensionsException');
    this.j4f_1 = ns.l4f('KapEvalException');
  }
  protoOf(ThrowNativeFunctionImpl).t2i = function (context, a, b) {
    var sym = a.m2q(this.t2g_1).g2j_1;
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var message = result;
    if (equals(sym, this.i4f_1)) {
      throwAPLException(new InvalidDimensionsException(message, this.t2g_1));
    } else if (equals(sym, this.j4f_1)) {
      throwAPLException(new APLEvalException(message, this.t2g_1));
    } else {
      throwAPLException(new APLEvalException('Invalid exception name: ' + sym.t3e(), this.t2g_1));
    }
  };
  function ThrowNativeFunction() {
  }
  protoOf(ThrowNativeFunction).i2i = function (instantiation) {
    return new ThrowNativeFunctionImpl(this, instantiation);
  };
  function SleepFunction$SleepFunctionImpl$callAsync1Arg$lambda($callback, $context, $sleepTimeSeconds) {
    return function () {
      return $callback($context, makeAPLNumber($sleepTimeSeconds));
    };
  }
  function SleepFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(SleepFunctionImpl).n2i = function (context, a) {
    var sleepTimeSeconds = a.p2i(this.t2g_1).r2z();
    if (sleepTimeSeconds > 0) {
      try {
        sleepMillis(context.j38_1, numberToLong(sleepTimeSeconds * 1000));
      } catch ($p) {
        if ($p instanceof SleepNotSupportedException) {
          var e = $p;
          throwAPLException(new APLEvalException('Backend does not support the sleep operation', this.t2g_1));
        } else {
          throw $p;
        }
      }
    }
    context.j38_1.q42(this.t2g_1);
    return makeAPLNumber(sleepTimeSeconds);
  };
  protoOf(SleepFunctionImpl).z2g = function (context, a, axis, callback) {
    var sleepTimeSeconds = a.p2i(this.t2g_1).r2z();
    var tmp = numberToLong(sleepTimeSeconds * 1000);
    sleepMillisCallback(context.j38_1, tmp, this.t2g_1, SleepFunction$SleepFunctionImpl$callAsync1Arg$lambda(callback, context, sleepTimeSeconds));
  };
  function SleepFunction() {
  }
  protoOf(SleepFunction).i2i = function (instantiation) {
    return new SleepFunctionImpl(instantiation);
  };
  function TimeMillisFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(TimeMillisFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!(a.p2i(this.t2g_1).q2i(this.t2g_1) === 0)) {
      throwAPLException(new APLIllegalArgumentException('Argument to timeMillis must be 0', this.t2g_1));
    }
    return makeAPLNumber_0(System_instance.kk().zy());
  };
  protoOf(TimeMillisFunctionImpl).z2h = function () {
    return 'timeMillis';
  };
  function TimeMillisFunction() {
  }
  protoOf(TimeMillisFunction).i2i = function (instantiation) {
    return new TimeMillisFunctionImpl(instantiation);
  };
  function MakeTimerFunction$MakeTimerFunctionImpl$eval2Arg$lambda(this$0) {
    return function (v) {
      var tmp;
      if (v instanceof LambdaValue) {
        tmp = v;
      } else {
        throwAPLException(new APLIllegalArgumentException('Left argument must be a function or a list of functions', this$0.t2g_1));
      }
      return tmp;
    };
  }
  function MakeTimerFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(MakeTimerFunctionImpl).t2i = function (context, a, b) {
    var delays = b.u2i().y2k(this.t2g_1);
    var tmp = a.u2i().l2p();
    var callbacks = toList(map(tmp, MakeTimerFunction$MakeTimerFunctionImpl$eval2Arg$lambda(this)));
    return context.j38_1.y4f(delays, callbacks, this.t2g_1);
  };
  function MakeTimerFunction() {
  }
  protoOf(MakeTimerFunction).i2i = function (instantiation) {
    return new MakeTimerFunctionImpl(instantiation);
  };
  function ToTimestampFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(ToTimestampFunctionImpl).c2x = function (a) {
    var millis = a.p2i(this.t2g_1).w2s(this.t2g_1);
    return new APLTimestamp(Companion_getInstance_0().vy(millis));
  };
  function ToTimestampFunction() {
  }
  protoOf(ToTimestampFunction).i2i = function (instantiation) {
    return new ToTimestampFunctionImpl(instantiation);
  };
  function FromTimestampFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(FromTimestampFunctionImpl).c2x = function (a) {
    return makeAPLNumber_0(ensureTimestamp(a, this.t2g_1).zy());
  };
  function FromTimestampFunction() {
  }
  protoOf(FromTimestampFunction).i2i = function (instantiation) {
    return new FromTimestampFunctionImpl(instantiation);
  };
  function FormatTimestampFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(FormatTimestampFunctionImpl).n2i = function (context, a) {
    return Companion_getInstance_46().k2o(ensureTimestamp(a, this.t2g_1).toString());
  };
  function FormatTimestampFunction() {
  }
  protoOf(FormatTimestampFunction).i2i = function (instantiation) {
    return new FormatTimestampFunctionImpl(instantiation);
  };
  function ParseTimestampFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ParseTimestampFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var s = result;
    return new APLTimestamp(Companion_getInstance_0().yy(s));
  };
  function ParseTimestampFunction() {
  }
  protoOf(ParseTimestampFunction).i2i = function (instantiation) {
    return new ParseTimestampFunctionImpl(instantiation);
  };
  function ensureTimestamp(a, pos) {
    var a0 = a.g2k();
    if (!(a0 instanceof APLTimestamp)) {
      throwAPLException(new IncompatibleTypeException('Argument is not a timestamp', pos));
    }
    return a0.t4g_1;
  }
  function UnicodeModule() {
  }
  protoOf(UnicodeModule).p2 = function () {
    return 'unicode';
  };
  protoOf(UnicodeModule).u4g = function (engine) {
    var namespace = engine.x4e('unicode');
    engine.v4g(namespace.e3k('toCodepoints'), new MakeCodepoints());
    engine.v4g(namespace.e3k('fromCodepoints'), new MakeCharsFromCodepoints());
    engine.v4g(namespace.e3k('toGraphemes'), new GraphemesFunction());
    engine.v4g(namespace.e3k('toLower'), new ToLowerFunction());
    engine.v4g(namespace.e3k('toUpper'), new ToUpperFunction());
    engine.v4g(namespace.e3k('toNames'), new ToNamesFunction());
  };
  function MakeCodepointsImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(MakeCodepointsImpl).c2x = function (a) {
    var tmp;
    if (a instanceof APLChar) {
      tmp = makeAPLNumber_4(a.m2z_1);
    } else {
      tmp = a;
    }
    return tmp;
  };
  function MakeCodepoints() {
  }
  protoOf(MakeCodepoints).i2i = function (instantiation) {
    return new MakeCodepointsImpl(instantiation);
  };
  function MakeCharsFromCodepointsImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(MakeCharsFromCodepointsImpl).c2x = function (a) {
    // Inline function 'com.dhsdevelopments.kap.builtins.singleArgNumericRelationOperation' call
    var pos = this.t2g_1;
    var tmp;
    if (a instanceof APLLong) {
      var x = a.w2s(pos);
      tmp = Companion_getInstance_47().d3o(x, this.t2g_1);
    } else {
      if (a instanceof APLDouble) {
        var x_0 = a.x2s(pos);
        tmp = Companion_getInstance_47().d3o(numberToLong(x_0), this.t2g_1);
      } else {
        if (a instanceof APLComplex) {
          var x_1 = a.s2z();
          var tmp_0;
          if (x_1.b3o_1 === 0.0) {
            tmp_0 = Companion_getInstance_47().d3o(numberToLong(x_1.a3o_1), this.t2g_1);
          } else {
            throwAPLException(new APLIllegalArgumentException("Complex numbers can't be represented as characters: " + x_1.toString(), this.t2g_1));
          }
          tmp = tmp_0;
        } else {
          if (a instanceof APLChar) {
            var x_2 = a.m2z_1;
            tmp = new APLChar(x_2);
          } else {
            if (a instanceof APLBigInt) {
              a.z2q_1;
              throwAPLException(new IncompatibleTypeException('Function does not support bigint argument', pos));
            } else {
              if (a instanceof APLRational) {
                a.d31_1;
                throwAPLException(new IncompatibleTypeException('Function does not support rational argument', pos));
              } else {
                NumericRelationErrors_instance.a34(a, pos);
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  function MakeCharsFromCodepoints() {
  }
  protoOf(MakeCharsFromCodepoints).i2i = function (instantiation) {
    return new MakeCharsFromCodepointsImpl(instantiation);
  };
  function GraphemesFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(GraphemesFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var graphemeList = asGraphemeList(result);
    var tmp = dimensionsOfSize(new Int32Array([graphemeList.n()]));
    var tmp_0 = 0;
    var tmp_1 = graphemeList.n();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_2 = Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = Companion_getInstance_46().k2o(graphemeList.p(tmp_3));
      tmp_0 = tmp_0 + 1 | 0;
    }
    return new APLArrayImpl(tmp, tmp_2);
  };
  function GraphemesFunction() {
  }
  protoOf(GraphemesFunction).i2i = function (instantiation) {
    return new GraphemesFunctionImpl(instantiation);
  };
  function ToLowerFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ToLowerFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var s = result;
    var tmp = Companion_getInstance_46();
    // Inline function 'kotlin.text.lowercase' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$3 = s.toLowerCase();
    return tmp.k2o(tmp$ret$3);
  };
  function ToLowerFunction() {
  }
  protoOf(ToLowerFunction).i2i = function (instantiation) {
    return new ToLowerFunctionImpl(instantiation);
  };
  function ToUpperFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ToUpperFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var s = result;
    var tmp = Companion_getInstance_46();
    // Inline function 'kotlin.text.uppercase' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$3 = s.toUpperCase();
    return tmp.k2o(tmp$ret$3);
  };
  function ToUpperFunction() {
  }
  protoOf(ToUpperFunction).i2i = function (instantiation) {
    return new ToUpperFunctionImpl(instantiation);
  };
  function ToNamesFunctionImpl(pos) {
    MathCombineAPLFunction.call(this, pos);
  }
  protoOf(ToNamesFunctionImpl).c2x = function (a) {
    if (a instanceof APLChar) {
      var name = codepointToName(a.m2z_1);
      var tmp;
      if (name == null) {
        tmp = APLNullValue_getInstance();
      } else {
        tmp = Companion_getInstance_46().k2o(name);
      }
      return tmp;
    } else {
      throwAPLException(new IncompatibleTypeException('Value is not a char: ' + toString(a), this.t2g_1));
    }
  };
  function ToNamesFunction() {
  }
  protoOf(ToNamesFunction).i2i = function (instantiation) {
    return new ToNamesFunctionImpl(instantiation);
  };
  function isAlphanumeric(codepoint) {
    return isLetter(codepoint) || isDigit(codepoint);
  }
  function makeCharFromSurrogatePair(high, low) {
    // Inline function 'kotlin.code' call
    var highInt = Char__toInt_impl_vasixd(high);
    // Inline function 'kotlin.code' call
    var lowInt = Char__toInt_impl_vasixd(low);
    // Inline function 'kotlin.require' call
    if (!(55296 <= highInt ? highInt <= 56319 : false)) {
      var message = 'high character is outside valid range: 0x' + toString_0(highInt, 16);
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    if (!(56320 <= lowInt ? lowInt <= 57343 : false)) {
      var message_0 = 'low character is outside valid range: 0x' + toString_0(lowInt, 16);
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
    var off = -56613888;
    return ((highInt << 10) + lowInt | 0) + off | 0;
  }
  function escapeAnalysis(_this__u8e3s4) {
    escapeAnalysis$recurse(_this__u8e3s4);
  }
  function rewriteForEscape(_this__u8e3s4) {
    var a = crossEscapeBindings(_this__u8e3s4, 0);
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.groupByTo' call
    var destination = LinkedHashMap_init_$Create$_0();
    var _iterator__ex2g4s = a.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var key = element.e4i();
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination.a2(key);
      var tmp;
      if (value == null) {
        var answer = ArrayList_init_$Create$();
        destination.j2(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      var list = tmp;
      list.h(element);
    }
    var b = destination;
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s_0 = b.c2().k();
    while (_iterator__ex2g4s_0.l()) {
      var element_0 = _iterator__ex2g4s_0.m();
      // Inline function 'kotlin.collections.component1' call
      var k = element_0.w1();
      // Inline function 'kotlin.collections.component2' call
      var v = element_0.x1();
      var copiedStorage = new ExternalStorageRef(k.f4i_1.j4i() ? -2 : depthOfEnv(_this__u8e3s4, k.f4i_1), k.g4i_1, k.f4i_1);
      var storageDescriptor = new StackStorageDescriptor(_this__u8e3s4, _this__u8e3s4.u37_1.n() + _this__u8e3s4.v37_1.n() | 0, 'copied from: ' + k.h4i_1);
      _this__u8e3s4.v37_1.h(copiedStorage);
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s_1 = v.k();
      while (_iterator__ex2g4s_1.l()) {
        var element_1 = _iterator__ex2g4s_1.m();
        element_1.k4i(storageDescriptor);
      }
    }
  }
  function crossEscapeBindings(env, level) {
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = env.l4i();
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$();
    var _iterator__ex2g4s = tmp0.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      if (element.d4i_1 > level) {
        destination.h(element);
      }
    }
    var l = toMutableList_0(destination);
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s_0 = env.w37_1.k();
    while (_iterator__ex2g4s_0.l()) {
      var element_0 = _iterator__ex2g4s_0.m();
      var inner = crossEscapeBindings(element_0, level + 1 | 0);
      // Inline function 'kotlin.collections.plusAssign' call
      addAll(l, inner);
    }
    return l;
  }
  function depthOfEnv(baseEnv, env) {
    var curr = baseEnv;
    var i = 0;
    while (!(curr === env)) {
      i = i + 1 | 0;
      var tmp0_elvis_lhs = curr.q37_1;
      var tmp;
      if (tmp0_elvis_lhs == null) {
        throw IllegalStateException_init_$Create$("Can't find env in parent list");
      } else {
        tmp = tmp0_elvis_lhs;
      }
      curr = tmp;
    }
    return i;
  }
  function freeVariableRefs(_this__u8e3s4) {
    var result = ArrayList_init_$Create$();
    freeVariableRefs$recurse(_this__u8e3s4, result, _this__u8e3s4, 0);
    return result;
  }
  function escapeAnalysis$recurse(env) {
    if (env.m4i()) {
      rewriteForEscape(env);
    }
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = env.w37_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      escapeAnalysis$recurse(element);
    }
  }
  function freeVariableRefs$recurse($this_freeVariableRefs, result, env, level) {
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = env.l4i();
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$();
    var _iterator__ex2g4s = tmp0.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      if (!$this_freeVariableRefs.j4i() && element.d4i_1 === -2 || element.d4i_1 > level) {
        destination.h(element);
      }
    }
    var l = toMutableList_0(destination);
    result.q(l);
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s_0 = env.w37_1.k();
    while (_iterator__ex2g4s_0.l()) {
      var element_0 = _iterator__ex2g4s_0.m();
      freeVariableRefs$recurse($this_freeVariableRefs, result, element_0, level + 1 | 0);
    }
  }
  function Companion_15() {
    this.n4i_1 = ']';
  }
  var Companion_instance_17;
  function Companion_getInstance_17() {
    return Companion_instance_17;
  }
  function HelpCommandHandler($outer) {
    this.o4i_1 = $outer;
    NoArgCommandHandler.call(this);
  }
  function CommandManager(engine) {
    this.p4i_1 = engine;
    this.q4i_1 = HashMap_init_$Create$();
    this.r4i('help', new HelpCommandHandler(this));
  }
  protoOf(CommandManager).s4i = function (command, handler, allowReplace) {
    if (!allowReplace && this.q4i_1.y1(command)) {
      throw IllegalStateException_init_$Create$("Command already registered: '" + command + "'");
    }
    // Inline function 'kotlin.collections.set' call
    this.q4i_1.j2(command, handler);
  };
  protoOf(CommandManager).r4i = function (command, handler, allowReplace, $super) {
    allowReplace = allowReplace === VOID ? false : allowReplace;
    var tmp;
    if ($super === VOID) {
      this.s4i(command, handler, allowReplace);
      tmp = Unit_instance;
    } else {
      tmp = $super.s4i.call(this, command, handler, allowReplace);
    }
    return tmp;
  };
  function RegisterCmdFunction$RegisterCmdFunctionImpl$evalMultiArgument$cmdHandler$1($handler, $description) {
    this.t4i_1 = $handler;
    this.u4i_1 = $description;
  }
  function RegisterCmdFunctionImpl(pos) {
    MultiArgumentAPLFunction.call(this, 3, 3, pos);
  }
  protoOf(RegisterCmdFunctionImpl).b4j = function (context, args) {
    var tmp0 = args.p(0);
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(tmp0);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var cmdname = result;
    // Inline function 'kotlin.text.toRegex' call
    var this_0 = '^[a-zA-Z_][a-zA-Z0-9_]*$';
    // Inline function 'kotlin.text.matches' call
    if (!Regex_init_$Create$(this_0).cb(cmdname)) {
      throwAPLException(new APLIllegalArgumentException("Invalid command name: '" + cmdname + "'", this.t2g_1));
    }
    var tmp5 = args.p(1);
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos_0 = this.t2g_1;
    var result_0 = toStringValueOrNull(tmp5);
    if (result_0 == null) {
      var m_0 = null;
      var messagePrefix_0 = m_0 == null ? '' : '' + m_0 + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix_0 + 'Argument is not a string', pos_0));
    }
    var description = result_0;
    var handler = Companion_instance_44.c4j(args.p(2), this.t2g_1).f3a();
    var cmdHandler = new RegisterCmdFunction$RegisterCmdFunctionImpl$evalMultiArgument$cmdHandler$1(handler, description);
    context.j38_1.z38_1.s4i(cmdname, cmdHandler, true);
    return APLNullValue_getInstance();
  };
  function RegisterCmdFunction() {
  }
  protoOf(RegisterCmdFunction).i2i = function (instantiation) {
    return new RegisterCmdFunctionImpl(instantiation);
  };
  function NumArgsCheckedCommandHandler(minArgs, maxArgs) {
    maxArgs = maxArgs === VOID ? null : maxArgs;
    this.j4j_1 = minArgs;
    this.k4j_1 = maxArgs;
  }
  function NoArgCommandHandler() {
  }
  function InvalidDimensionsException_init_$Init$(aDimensions, bDimensions, pos, $this) {
    InvalidDimensionsException.call($this, 'Mismatched dimensions. a: ' + Dimensions__toString_impl_fhouq4(aDimensions) + ', b: ' + Dimensions__toString_impl_fhouq4(bDimensions), pos);
    return $this;
  }
  function InvalidDimensionsException_init_$Create$(aDimensions, bDimensions, pos) {
    var tmp = InvalidDimensionsException_init_$Init$(aDimensions, bDimensions, pos, objectCreate(protoOf(InvalidDimensionsException)));
    captureStack(tmp, InvalidDimensionsException_init_$Create$);
    return tmp;
  }
  function InvalidDimensionsException(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, InvalidDimensionsException);
  }
  function ArraySizeException(d, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Array too large. Requested size: [' + joinToString(d, ', ') + ']', pos);
    captureStack(this, ArraySizeException);
  }
  function APLIndexOutOfBoundsException(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Index out of bounds: ' + message, pos);
    captureStack(this, APLIndexOutOfBoundsException);
  }
  function APLEvalException(message, pos, cause) {
    pos = pos === VOID ? null : pos;
    cause = cause === VOID ? null : cause;
    APLGenericException.call(this, message, pos, cause);
    captureStack(this, APLEvalException);
    this.a3a_1 = null;
    this.b3a_1 = null;
  }
  protoOf(APLEvalException).c3a = function () {
    return this.b3a_1;
  };
  function CapturedStorageStackFrame(frame) {
    this.l4j_1 = frame;
    this.m4j_1 = null;
  }
  function CapturedStorageStack(stack) {
    var tmp = this;
    // Inline function 'kotlin.collections.map' call
    var this_0 = stack.r3b_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = new CapturedStorageStackFrame(item);
      destination.h(tmp$ret$0);
    }
    tmp.n4j_1 = destination;
  }
  function ReturnValue(value, returnEnvironment, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Target stack frame is not available', pos);
    captureStack(this, ReturnValue);
    this.s4j_1 = value;
    this.t4j_1 = returnEnvironment;
  }
  function KapLogger() {
    KapLogger_instance = this;
    SimpleLogger.call(this, 'kap');
  }
  var KapLogger_instance;
  function KapLogger_getInstance() {
    if (KapLogger_instance == null)
      new KapLogger();
    return KapLogger_instance;
  }
  function APLEvaluationInterrupted(pos) {
    pos = pos === VOID ? null : pos;
    APLGenericException.call(this, 'Interrupted', pos);
    captureStack(this, APLEvaluationInterrupted);
  }
  function UnmodifiableSystemParameterException(pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'System parameter cannot be modified', pos);
    captureStack(this, UnmodifiableSystemParameterException);
  }
  function IllegalArgumentNumException(expectedCount, receivedCount, pos, minArgs) {
    pos = pos === VOID ? null : pos;
    minArgs = minArgs === VOID ? null : minArgs;
    APLEvalException.call(this, 'Expected a list of ' + (minArgs == null ? expectedCount.toString() : '' + minArgs + '-' + expectedCount) + ' values. Actual elements: ' + receivedCount, pos);
    captureStack(this, IllegalArgumentNumException);
  }
  function Unimplemented1ArgException(pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Function cannot be called with one argument', pos);
    captureStack(this, Unimplemented1ArgException);
    details(this, 'An attempt was made to call this function with a single argument (i.e. a call of the form: FN x), but this function can only be called with two arguments.');
  }
  function Unimplemented2ArgException(pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Function cannot be called with two arguments', pos);
    captureStack(this, Unimplemented2ArgException);
    details(this, 'An attempt was made to call this function with two arguments (i.e. a call of the form: x FN y), but this function can only be called with a single argument to the right of the function name.');
  }
  function InverseNotAvailable(pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Function does not have an inverse', pos);
    captureStack(this, InverseNotAvailable);
  }
  function StructuralUnderNotSupported(pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'under not supported for function', pos);
    captureStack(this, StructuralUnderNotSupported);
  }
  function AsyncNotSupported(fnName, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Async not supported for function: ' + fnName, pos);
    captureStack(this, AsyncNotSupported);
  }
  function AxisNotSupported(pos) {
    APLEvalException.call(this, 'Function does not support axis specifier', pos);
    captureStack(this, AxisNotSupported);
  }
  function IncompatibleTypeParseException(message, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, message, pos);
    captureStack(this, IncompatibleTypeParseException);
  }
  function KapOverflowException(message, pos, cause) {
    pos = pos === VOID ? null : pos;
    cause = cause === VOID ? null : cause;
    APLEvalException.call(this, message, pos, cause);
    captureStack(this, KapOverflowException);
  }
  function IntMagnitudeException(value, pos) {
    pos = pos === VOID ? null : pos;
    KapOverflowException.call(this, 'Value does not fit in an int: ' + value.toString(), pos);
    captureStack(this, IntMagnitudeException);
  }
  function APLIllegalArgumentException(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, APLIllegalArgumentException);
  }
  function APLArgumentComplexOrderingException(pos) {
    pos = pos === VOID ? null : pos;
    NumericComparisonNotSupported.call(this, 'Complex numbers does not have a total order', pos);
    captureStack(this, APLArgumentComplexOrderingException);
  }
  function APLArgumentIsNotANumberException(pos) {
    pos = pos === VOID ? null : pos;
    NumericComparisonNotSupported.call(this, 'Value is not a number', pos);
    captureStack(this, APLArgumentIsNotANumberException);
  }
  function LongMagnitudeException(value, pos) {
    pos = pos === VOID ? null : pos;
    KapOverflowException.call(this, 'Value does not fit in a long: ' + BigInt__toString_impl_xmp9e6(value), pos);
    captureStack(this, LongMagnitudeException);
  }
  function IncompatibleTypeException(message, pos, cause) {
    pos = pos === VOID ? null : pos;
    cause = cause === VOID ? null : cause;
    APLEvalException.call(this, message, pos, cause);
    captureStack(this, IncompatibleTypeException);
  }
  function ParseException(message, pos, cause) {
    pos = pos === VOID ? null : pos;
    cause = cause === VOID ? null : cause;
    APLGenericException.call(this, message, pos, cause);
    captureStack(this, ParseException);
  }
  function IllegalContextForFunction(pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'No arguments specified for function', pos);
    captureStack(this, IllegalContextForFunction);
  }
  function UnexpectedToken(token, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'Unexpected token: ' + token.u4j(), pos);
    captureStack(this, UnexpectedToken);
  }
  function InvalidFunctionRedefinition(name, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'Function cannot be redefined: ' + name.t3e(), pos);
    captureStack(this, InvalidFunctionRedefinition);
  }
  function InvalidOperatorArgument(name, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'Operator without left function: ' + name.h2j_1, pos);
    captureStack(this, InvalidOperatorArgument);
  }
  function IllegalDeclaration(message, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'Illegal declaration: ' + message, pos);
    captureStack(this, IllegalDeclaration);
  }
  function SyntaxRuleMismatch(expectedSymbol, foundSymbol, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'In custom syntax rule: Expected: ' + expectedSymbol.h2j_1 + '. Found: ' + foundSymbol.h2j_1, pos);
    captureStack(this, SyntaxRuleMismatch);
  }
  function SyntaxSubRuleNotFound(name, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'Syntax sub rule does not exist. Name: ' + name.toString(), pos);
    captureStack(this, SyntaxSubRuleNotFound);
  }
  function UnexpectedSymbol(ch, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, "Unexpected symbol: '" + charToString(ch) + "' (" + toString_0(ch, 16) + ')', pos);
    captureStack(this, UnexpectedSymbol);
  }
  function IllegalNumberFormat(message, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, message, pos);
    captureStack(this, IllegalNumberFormat);
  }
  function ListOutOfBounds(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, ListOutOfBounds);
  }
  function NumericComparisonNotSupported(message, pos) {
    pos = pos === VOID ? null : pos;
    APLIllegalArgumentException.call(this, message, pos);
    captureStack(this, NumericComparisonNotSupported);
  }
  function APLGenericException(message, pos, cause) {
    pos = pos === VOID ? null : pos;
    cause = cause === VOID ? null : cause;
    Exception_init_$Init$(message, cause, this);
    captureStack(this, APLGenericException);
    this.f3e_1 = pos;
    this.g3e_1 = null;
  }
  protoOf(APLGenericException).h3e = function () {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    if (!(this.f3e_1 == null)) {
      var name = this.f3e_1.v4j_1.p2();
      var fileName = name == null ? '' : ' ' + name;
      this_0.i8('Error at' + fileName + ': ' + (this.f3e_1.w4j_1 + 1 | 0) + ':' + (this.f3e_1.x4j_1 + 1 | 0) + ': ');
      if (!(this.f3e_1.y4j_1 == null)) {
        this_0.i8('' + this.f3e_1.y4j_1 + ': ');
      }
    } else {
      this_0.i8('Error: ');
    }
    if (!(this.message == null)) {
      this_0.i8(this.message);
    } else {
      this_0.i8('no message');
    }
    return this_0.toString();
  };
  protoOf(APLGenericException).toString = function () {
    return this.h3e();
  };
  function details(_this__u8e3s4, description) {
    if (!(_this__u8e3s4.g3e_1 == null)) {
      throw IllegalStateException_init_$Create$('Extended description already set');
    }
    _this__u8e3s4.g3e_1 = description;
    return _this__u8e3s4;
  }
  function APLArithmeticException(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, APLArithmeticException);
  }
  function ensureValidAxis(axis, dimensions, pos) {
    pos = pos === VOID ? null : pos;
    if (axis < 0 || axis >= _Dimensions___get_size__impl__uu37ek(dimensions)) {
      throwAPLException(IllegalAxisException_init_$Create$(axis, dimensions, pos));
    }
  }
  function IllegalAxisException_init_$Init$(axis, dimensions, pos, $this) {
    pos = pos === VOID ? null : pos;
    IllegalAxisException.call($this, 'Axis ' + axis + ' is not valid. Expected: ' + _Dimensions___get_size__impl__uu37ek(dimensions), pos);
    return $this;
  }
  function IllegalAxisException_init_$Create$(axis, dimensions, pos) {
    var tmp = IllegalAxisException_init_$Init$(axis, dimensions, pos, objectCreate(protoOf(IllegalAxisException)));
    captureStack(tmp, IllegalAxisException_init_$Create$);
    return tmp;
  }
  function IllegalAxisException(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, IllegalAxisException);
  }
  function ArrayTooLargeException(message, pos) {
    pos = pos === VOID ? null : pos;
    KapOverflowException.call(this, message, pos);
    captureStack(this, ArrayTooLargeException);
  }
  function throwTagCatch(engine, name, data, message, pos, relatedException) {
    pos = pos === VOID ? null : pos;
    relatedException = relatedException === VOID ? null : relatedException;
    throwAPLException(new TagCatch(new ThrowableTag(new APLSymbol(engine.s39(name, engine.i3i())), data), message, pos, relatedException));
  }
  function BitwiseNotSupported(pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'Function does not support bitwise operations', pos);
    captureStack(this, BitwiseNotSupported);
  }
  function ParallelNotSupported(pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'Function does not support parallel', pos);
    captureStack(this, ParallelNotSupported);
  }
  function LeftAssigned2ArgException(pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Left assigned functions cannot be called with two arguments', pos);
    captureStack(this, LeftAssigned2ArgException);
  }
  function DestructuringAssignmentShapeMismatch_init_$Init$(pos, $this) {
    pos = pos === VOID ? null : pos;
    DestructuringAssignmentShapeMismatch.call($this, 'Destructuring assignment target shape does not match argument', pos);
    return $this;
  }
  function DestructuringAssignmentShapeMismatch_init_$Create$(pos) {
    var tmp = DestructuringAssignmentShapeMismatch_init_$Init$(pos, objectCreate(protoOf(DestructuringAssignmentShapeMismatch)));
    captureStack(tmp, DestructuringAssignmentShapeMismatch_init_$Create$);
    return tmp;
  }
  function DestructuringAssignmentShapeMismatch(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, DestructuringAssignmentShapeMismatch);
  }
  function KeyNotFoundException(pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Key not found', pos);
    captureStack(this, KeyNotFoundException);
  }
  function VariableNotAssigned(name, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Variable not assigned: ' + name.t3e(), pos);
    captureStack(this, VariableNotAssigned);
  }
  function AssignmentToConstantException(name, pos) {
    pos = pos === VOID ? null : pos;
    ParseException.call(this, 'Assignment to constant variable: ' + name.t3e(), pos);
    captureStack(this, AssignmentToConstantException);
  }
  function CircularDynamicAssignment(pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Circular dynamic assignment', pos);
    captureStack(this, CircularDynamicAssignment);
  }
  function readCsv(source) {
    return (new CsvReader()).f4k(source);
  }
  function CsvParseException(msg, line, col) {
    Exception_init_$Init$_0('Error at ' + (line + 1 | 0) + ':' + (col + 1 | 0) + ': ' + msg, this);
    captureStack(this, CsvParseException);
    this.g4k_1 = line;
    this.h4k_1 = col;
  }
  function readRows($this, source) {
    var rows = ArrayList_init_$Create$();
    var lineNumber = {_v: 0};
    $l$loop: while (true) {
      var tmp0_elvis_lhs = source.z3k();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        break $l$loop;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var line = {_v: tmp};
      lineNumber._v = lineNumber._v + 1 | 0;
      var fields = ArrayList_init_$Create$();
      var pos = {_v: 0};
      if ($this.d4k_1) {
        readRows$skipWhitespace(line, pos, $this);
      }
      if (!readRows$atEol(pos, line)) {
        $l$loop_0: while (true) {
          if ($this.d4k_1) {
            readRows$skipWhitespace(line, pos, $this);
          }
          if (readRows$atEol(pos, line))
            break $l$loop_0;
          var tmp_0 = line._v;
          var _unary__edvuaz = pos._v;
          pos._v = _unary__edvuaz + 1 | 0;
          var ch = charSequenceGet(tmp_0, _unary__edvuaz);
          var tmp_1;
          var tmp_2;
          var tmp_3 = $this.c4k_1;
          if (!((tmp_3 == null ? null : new Char(tmp_3)) == null)) {
            var tmp_4 = $this.c4k_1;
            tmp_2 = equals(new Char(ch), tmp_4 == null ? null : new Char(tmp_4));
          } else {
            tmp_2 = false;
          }
          if (tmp_2) {
            tmp_1 = stringToAplValue($this, readRows$readQuotedField(line, source, lineNumber, pos, $this));
          } else {
            if (ch === $this.b4k_1) {
              pos._v = pos._v - 1 | 0;
              tmp_1 = Companion_getInstance_46().j2o_1;
            } else {
              tmp_1 = stringToAplValue($this, readRows$readUnquotedField(line, pos, $this, ch));
            }
          }
          var field = tmp_1;
          fields.h(field);
          if ($this.d4k_1) {
            readRows$skipWhitespace(line, pos, $this);
          }
          if (!readRows$atEol(pos, line)) {
            var tmp_5 = line._v;
            var _unary__edvuaz_0 = pos._v;
            pos._v = _unary__edvuaz_0 + 1 | 0;
            var ch2 = charSequenceGet(tmp_5, _unary__edvuaz_0);
            if (!(ch2 === $this.b4k_1)) {
              throw new CsvParseException('Syntax error in CSV file', lineNumber._v - 1 | 0, pos._v);
            }
          }
        }
        rows.h(fields);
      }
    }
    return rows;
  }
  function stringToAplValue($this, string) {
    if (!($this.e4k_1 == null)) {
      var v = $this.e4k_1.z1l(string);
      if (!(v == null)) {
        return v;
      }
    }
    return Companion_getInstance_18().i4k_1.cb(string) ? makeAPLNumberWithReduction(of(Companion_instance, string)) : Companion_getInstance_18().j4k_1.cb(string) ? makeAPLNumber(toDouble(string)) : Companion_getInstance_18().k4k_1.cb(string) ? makeAPLNumber(toDouble(string)) : Companion_getInstance_46().k2o(string);
  }
  function Companion_16() {
    Companion_instance_18 = this;
    var tmp = this;
    // Inline function 'kotlin.text.toRegex' call
    var this_0 = '^-?[0-9]+$';
    tmp.i4k_1 = Regex_init_$Create$(this_0);
    var tmp_0 = this;
    // Inline function 'kotlin.text.toRegex' call
    var this_1 = '^-?[0-9]+\\.[0-9]*$';
    tmp_0.j4k_1 = Regex_init_$Create$(this_1);
    var tmp_1 = this;
    // Inline function 'kotlin.text.toRegex' call
    var this_2 = '^-?[0-9]*\\.[0-9]+$';
    tmp_1.k4k_1 = Regex_init_$Create$(this_2);
  }
  var Companion_instance_18;
  function Companion_getInstance_18() {
    if (Companion_instance_18 == null)
      new Companion_16();
    return Companion_instance_18;
  }
  function readRows$atEol(pos, line) {
    return pos._v >= line._v.length;
  }
  function readRows$isCsvWhitespace(this$0, ch) {
    return !(ch === this$0.b4k_1) && isWhitespace(ch);
  }
  function readRows$skipWhitespace(line, pos, this$0) {
    while (!readRows$atEol(pos, line) && readRows$isCsvWhitespace(this$0, charSequenceGet(line._v, pos._v))) {
      pos._v = pos._v + 1 | 0;
    }
  }
  function readRows$readQuotedField(line, $source, lineNumber, pos, this$0) {
    var buf2 = StringBuilder_init_$Create$();
    loop: while (true) {
      while (readRows$atEol(pos, line)) {
        var tmp0_elvis_lhs = $source.z3k();
        var tmp;
        if (tmp0_elvis_lhs == null) {
          throw new CsvParseException('End of file in the middle of string', lineNumber._v - 1 | 0, pos._v);
        } else {
          tmp = tmp0_elvis_lhs;
        }
        line._v = tmp;
        lineNumber._v = lineNumber._v + 1 | 0;
        pos._v = 0;
        buf2.i8('\n');
      }
      var tmp_0 = line._v;
      var _unary__edvuaz = pos._v;
      pos._v = _unary__edvuaz + 1 | 0;
      var ch = charSequenceGet(tmp_0, _unary__edvuaz);
      var tmp_1;
      var tmp_2 = this$0.c4k_1;
      if (!((tmp_2 == null ? null : new Char(tmp_2)) == null)) {
        var tmp_3 = this$0.c4k_1;
        tmp_1 = equals(new Char(ch), tmp_3 == null ? null : new Char(tmp_3));
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        if (readRows$atEol(pos, line) || !(charSequenceGet(line._v, pos._v) === _Char___init__impl__6a9atx(34))) {
          break loop;
        } else {
          buf2.i8('"');
          pos._v = pos._v + 1 | 0;
        }
      } else {
        var tmp_4;
        var tmp_5 = this$0.c4k_1;
        if (!((tmp_5 == null ? null : new Char(tmp_5)) == null)) {
          tmp_4 = ch === _Char___init__impl__6a9atx(92);
        } else {
          tmp_4 = false;
        }
        if (tmp_4) {
          if (readRows$atEol(pos, line)) {
            throw new CsvParseException('Unterminated string', lineNumber._v - 1 | 0, pos._v);
          } else {
            var tmp_6 = line._v;
            var _unary__edvuaz_0 = pos._v;
            pos._v = _unary__edvuaz_0 + 1 | 0;
            buf2.j8(charSequenceGet(tmp_6, _unary__edvuaz_0));
          }
        } else {
          buf2.j8(ch);
        }
      }
    }
    return buf2.toString();
  }
  function readRows$readUnquotedField(line, pos, this$0, initial) {
    var buf = StringBuilder_init_$Create$();
    buf.j8(initial);
    var heldWhitespace = StringBuilder_init_$Create$();
    loop: while (!readRows$atEol(pos, line)) {
      var ch = charSequenceGet(line._v, pos._v);
      if (ch === this$0.b4k_1) {
        if (!this$0.d4k_1) {
          buf.i(heldWhitespace);
        }
        break loop;
      } else if (readRows$isCsvWhitespace(this$0, ch))
        heldWhitespace.j8(ch);
      else {
        buf.i(heldWhitespace);
        heldWhitespace = StringBuilder_init_$Create$();
        buf.j8(ch);
      }
      pos._v = pos._v + 1 | 0;
    }
    return buf.toString();
  }
  function CsvReader(separator, quoteChar, trim, valueConverter) {
    Companion_getInstance_18();
    separator = separator === VOID ? _Char___init__impl__6a9atx(44) : separator;
    quoteChar = quoteChar === VOID ? _Char___init__impl__6a9atx(34) : quoteChar;
    trim = trim === VOID ? true : trim;
    valueConverter = valueConverter === VOID ? null : valueConverter;
    this.b4k_1 = separator;
    this.c4k_1 = quoteChar;
    this.d4k_1 = trim;
    this.e4k_1 = valueConverter;
  }
  protoOf(CsvReader).f4k = function (source) {
    var rows = readRows(this, source);
    if (rows.o()) {
      // Inline function 'com.dhsdevelopments.kap.Companion.make' call
      var dimensions = dimensionsOfSize(new Int32Array([0, 0]));
      var st = {_v: new ArrayMemberType(Companion_getInstance_45().d2k_1)};
      var tmp = Dimensions__contentSize_impl_4eihds(dimensions);
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_0 = Array(tmp);
      while (0 < tmp) {
        throw Exception_init_$Create$('Attempt to read a value when initialising empty array');
      }
      var content = tmp_0;
      return new APLArrayImpl(dimensions, content, st._v.e2k_1);
    }
    // Inline function 'com.dhsdevelopments.kap.maxValueBy' call
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.require' call
    if (!!rows.o()) {
      var message = 'call to maxValueBy on empty list';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var currMax = null;
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = rows.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var res = element.n();
      if (currMax == null || compareTo_3(res, ensureNotNull(currMax)) > 0) {
        currMax = res;
      }
    }
    var width = ensureNotNull(currMax);
    // Inline function 'com.dhsdevelopments.kap.Companion.make' call
    var dimensions_0 = dimensionsOfSize(new Int32Array([rows.n(), width]));
    var st_0 = {_v: new ArrayMemberType(Companion_getInstance_45().d2k_1)};
    var tmp_1 = 0;
    var tmp_2 = Dimensions__contentSize_impl_4eihds(dimensions_0);
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_3 = Array(tmp_2);
    while (tmp_1 < tmp_2) {
      var tmp_4 = tmp_1;
      var rowIndex = tmp_4 / width | 0;
      var colIndex = tmp_4 % width | 0;
      var row = rows.p(rowIndex);
      var tmp_5;
      if (colIndex >= row.n()) {
        tmp_5 = APLNullValue_getInstance();
      } else {
        tmp_5 = row.p(colIndex);
      }
      // Inline function 'kotlin.also' call
      var this_0 = tmp_5;
      st_0._v = new ArrayMemberType(ArrayMemberType__intersection_impl_osmuy1(st_0._v.e2k_1, this_0.f2k()));
      tmp_3[tmp_4] = this_0;
      tmp_1 = tmp_1 + 1 | 0;
    }
    var content_0 = tmp_3;
    return new APLArrayImpl(dimensions_0, content_0, st_0._v.e2k_1);
  };
  function writeAPLArrayAsCsv(dest, value, pos) {
    pos = pos === VOID ? null : pos;
    var dimensions = value.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(dimensions) === 2)) {
      throwAPLException(new InvalidDimensionsException('Value must be a 2-dimensional array', pos));
    }
    var csvWriter = new CsvWriter(dest);
    var width = Dimensions__get_impl_4npepw(dimensions, 1);
    var currRow = ArrayList_init_$Create$();
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (value.b2l()) {
      var v0 = value.g2k();
      var s = toStringValueOrNull(v0);
      var tmp;
      if (!(s == null)) {
        tmp = s;
      } else {
        var tmp_0;
        if (v0 instanceof APLNumber) {
          var n = v0.p2i(pos);
          var tmp_1;
          if (n instanceof APLLong) {
            tmp_1 = n.g2n_1.toString();
          } else {
            if (n instanceof APLDouble) {
              tmp_1 = n.a2r_1.toString();
            } else {
              if (n instanceof APLComplex) {
                tmp_1 = n.l4k() ? '' + n.z3n_1.a3o_1 + 'J' + n.z3n_1.b3o_1 : n.x2s(pos).toString();
              } else {
                if (n instanceof APLBigInt) {
                  tmp_1 = BigInt__toString_impl_xmp9e6(n.z2q_1);
                } else {
                  if (n instanceof APLRational) {
                    tmp_1 = n.d31_1.l3().toString();
                  } else {
                    tmp_1 = 'error';
                  }
                }
              }
            }
          }
          tmp_0 = tmp_1;
        } else {
          tmp_0 = 'unknown-type';
        }
        tmp = tmp_0;
      }
      var s0 = tmp;
      currRow.h(s0);
      if (currRow.n() >= width) {
        csvWriter.o4k(currRow);
        currRow.f2();
      }
    } else {
      var inductionVariable = 0;
      var last = value.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v0_0 = value.h2k(i).g2k();
          var s_0 = toStringValueOrNull(v0_0);
          var tmp_2;
          if (!(s_0 == null)) {
            tmp_2 = s_0;
          } else {
            var tmp_3;
            if (v0_0 instanceof APLNumber) {
              var n_0 = v0_0.p2i(pos);
              var tmp_4;
              if (n_0 instanceof APLLong) {
                tmp_4 = n_0.g2n_1.toString();
              } else {
                if (n_0 instanceof APLDouble) {
                  tmp_4 = n_0.a2r_1.toString();
                } else {
                  if (n_0 instanceof APLComplex) {
                    tmp_4 = n_0.l4k() ? '' + n_0.z3n_1.a3o_1 + 'J' + n_0.z3n_1.b3o_1 : n_0.x2s(pos).toString();
                  } else {
                    if (n_0 instanceof APLBigInt) {
                      tmp_4 = BigInt__toString_impl_xmp9e6(n_0.z2q_1);
                    } else {
                      if (n_0 instanceof APLRational) {
                        tmp_4 = n_0.d31_1.l3().toString();
                      } else {
                        tmp_4 = 'error';
                      }
                    }
                  }
                }
              }
              tmp_3 = tmp_4;
            } else {
              tmp_3 = 'unknown-type';
            }
            tmp_2 = tmp_3;
          }
          var s0_0 = tmp_2;
          currRow.h(s0_0);
          if (currRow.n() >= width) {
            csvWriter.o4k(currRow);
            currRow.f2();
          }
        }
         while (inductionVariable < last);
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!currRow.o()) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  function escapeString($this, s) {
    var buf = StringBuilder_init_$Create$();
    // Inline function 'kotlin.text.forEach' call
    var inductionVariable = 0;
    while (inductionVariable < charSequenceLength(s)) {
      var element = charSequenceGet(s, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      if (element === _Char___init__impl__6a9atx(34))
        buf.i8('""');
      else
        buf.j8(element);
    }
    return buf.toString();
  }
  function CsvWriter$writeRow$lambda(this$0) {
    return function (v) {
      return '"' + escapeString(this$0, v) + '"';
    };
  }
  function CsvWriter(consumer) {
    this.m4k_1 = consumer;
    this.n4k_1 = null;
  }
  protoOf(CsvWriter).o4k = function (values) {
    var n = this.n4k_1;
    if (n == null) {
      this.n4k_1 = values.n();
    } else if (!(n === values.n())) {
      throw IllegalArgumentException_init_$Create$('Attempt to add a row of ' + values.n() + ' cells. Table is expected to have ' + n + ' columns.');
    }
    var tmp0 = joinToString_0(values, ',', VOID, VOID, VOID, VOID, CsvWriter$writeRow$lambda(this));
    // Inline function 'kotlin.let' call
    this.m4k_1.d3i(tmp0);
    this.m4k_1.d3i('\n');
  };
  function CustomRendererParameter(engine) {
    this.p4k_1 = engine;
  }
  protoOf(CustomRendererParameter).m3d = function () {
    var tmp0_elvis_lhs = this.p4k_1.x38_1;
    return tmp0_elvis_lhs == null ? APLNullValue_getInstance() : tmp0_elvis_lhs;
  };
  protoOf(CustomRendererParameter).n3d = function (newValue, pos) {
    var v = newValue.x2g();
    var tmp;
    if (Dimensions__isNullDimensions_impl_he2082(v.o2i())) {
      tmp = null;
    } else {
      if (v instanceof LambdaValue) {
        tmp = v;
      } else {
        throwAPLException(new APLIllegalArgumentException('Argument must be a lambda value', pos));
      }
    }
    var res = tmp;
    this.p4k_1.x38_1 = res;
  };
  function APLTimestamp(time) {
    APLSingleValue.call(this);
    this.t4g_1 = time;
  }
  protoOf(APLTimestamp).z2p = function () {
    return Companion_getInstance_35().q3l_1;
  };
  protoOf(APLTimestamp).i2o = function (style) {
    return this.t4g_1.toString();
  };
  protoOf(APLTimestamp).h2n = function (reference, pos, typeDiscrimination) {
    var tmp;
    if (reference instanceof APLTimestamp) {
      tmp = this.t4g_1.equals(reference.t4g_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(APLTimestamp).u3l = function (reference, pos, typeDiscrimination) {
    var tmp;
    if (reference instanceof APLTimestamp) {
      tmp = this.t4g_1.az(reference.t4g_1);
    } else {
      tmp = protoOf(APLSingleValue).u3l.call(this, reference, pos, typeDiscrimination);
    }
    return tmp;
  };
  protoOf(APLTimestamp).w3l = function (reference, pos) {
    return this.u3l(reference, pos, true);
  };
  protoOf(APLTimestamp).h2q = function () {
    return this.t4g_1.hashCode();
  };
  function get_EMPTY_LIST_DIMENSIONS() {
    _init_properties_dimension_kt__gkzqms();
    return EMPTY_LIST_DIMENSIONS;
  }
  var EMPTY_LIST_DIMENSIONS;
  function get_EMPTY_DIMENSIONS() {
    _init_properties_dimension_kt__gkzqms();
    return EMPTY_DIMENSIONS;
  }
  var EMPTY_DIMENSIONS;
  function get_SIZE_1_DIMENSIONS() {
    _init_properties_dimension_kt__gkzqms();
    return SIZE_1_DIMENSIONS;
  }
  var SIZE_1_DIMENSIONS;
  function _DimensionMultipliers___init__impl__q8k8nf(values) {
    return values;
  }
  function _get_values__tel787($this) {
    return $this;
  }
  function DimensionMultipliers__positionFromIndex_impl_en9oiu($this, p) {
    var tmp;
    switch (_get_values__tel787($this).length) {
      case 0:
        tmp = Companion_getInstance_19().z2k_1;
        break;
      case 1:
        // Inline function 'kotlin.intArrayOf' call

        tmp = new Int32Array([p]);
        break;
      case 2:
        // Inline function 'kotlin.let' call

        var multiplier = _get_values__tel787($this)[0];
        // Inline function 'kotlin.intArrayOf' call

        tmp = new Int32Array([p / multiplier | 0, p % multiplier | 0]);
        break;
      default:
        var size = _get_values__tel787($this).length;
        // Inline function 'kotlin.also' call

        var this_0 = new Int32Array(size);
        var curr = p;
        // Inline function 'kotlin.repeat' call

        var times = size - 2 | 0;
        var inductionVariable = 0;
        if (inductionVariable < times)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var multiplier_0 = _get_values__tel787($this)[index];
            this_0[index] = curr / multiplier_0 | 0;
            curr = curr % multiplier_0 | 0;
          }
           while (inductionVariable < times);
        var multiplier_1 = _get_values__tel787($this)[size - 2 | 0];
        this_0[size - 2 | 0] = curr / multiplier_1 | 0;
        this_0[size - 1 | 0] = curr % multiplier_1 | 0;
        tmp = this_0;
        break;
    }
    return tmp;
  }
  function _DimensionMultipliers___get_size__impl__pshf43($this) {
    return _get_values__tel787($this).length;
  }
  function DimensionMultipliers__get_impl_90rsg3($this, i) {
    return _get_values__tel787($this)[i];
  }
  function checkAndAdjustSelectedIndex$throwError($index, $axisSize, $pos) {
    throwAPLException(new APLIndexOutOfBoundsException('Position ' + $index + ' is outside valid range. Axis size: ' + $axisSize, $pos));
  }
  function _Dimensions___init__impl__sxkzw4(dimensions) {
    var curr = new Long(1, 0);
    // Inline function 'kotlin.collections.forEach' call
    var indexedObject = _get_dimensions__vv6gte(dimensions);
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var element = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      if (element < 0) {
        throwAPLException(new InvalidDimensionsException('Dimensions contains negative values'));
      }
      // Inline function 'kotlin.Long.times' call
      curr = curr.y2(toLong_0(element));
      if (curr.a1(new Long(2147483647, 0)) > 0) {
        throwAPLException(new ArraySizeException(_get_dimensions__vv6gte(dimensions)));
      }
    }
    return dimensions;
  }
  function _get_dimensions__vv6gte($this) {
    return $this;
  }
  function _Dimensions___get_size__impl__uu37ek($this) {
    return _get_dimensions__vv6gte($this).length;
  }
  function _Dimensions___get_indices__impl__n5lmcy($this) {
    return get_indices(_get_dimensions__vv6gte($this));
  }
  function Dimensions__get_impl_4npepw($this, i) {
    return _get_dimensions__vv6gte($this)[i];
  }
  function Dimensions__contentSize_impl_4eihds($this) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (_get_dimensions__vv6gte($this).length === 0) {
      tmp = 1;
    } else {
      // Inline function 'kotlin.collections.reduce' call
      var this_0 = _get_dimensions__vv6gte($this);
      // Inline function 'kotlin.collections.isEmpty' call
      if (this_0.length === 0)
        throw UnsupportedOperationException_init_$Create$("Empty array can't be reduced.");
      var accumulator = this_0[0];
      var inductionVariable = 1;
      var last = get_lastIndex(this_0);
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var tmp2 = accumulator;
          var b = this_0[index];
          accumulator = imul(tmp2, b);
        }
         while (!(index === last));
      tmp = accumulator;
    }
    return tmp;
  }
  function Dimensions__isEmpty_impl_2yd13($this) {
    // Inline function 'kotlin.collections.isEmpty' call
    return _get_dimensions__vv6gte($this).length === 0;
  }
  function Dimensions__isNullDimensions_impl_he2082($this) {
    return _get_dimensions__vv6gte($this).length === 1 && _get_dimensions__vv6gte($this)[0] === 0;
  }
  function Dimensions__compareEquals_impl_5g4nme($this, other) {
    return ArrayUtils_instance.rz(_get_dimensions__vv6gte($this), _get_dimensions__vv6gte(other));
  }
  function Dimensions__asList_impl_2n2llc($this) {
    // Inline function 'kotlin.collections.asList' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$1 = _get_dimensions__vv6gte($this);
    return asList(tmp$ret$1);
  }
  function Dimensions__compareTo_impl_x2rz52($this, other) {
    return ArrayUtils_instance.sz(_get_dimensions__vv6gte($this), _get_dimensions__vv6gte(other));
  }
  function Dimensions__insert_impl_s8tvqx($this, pos, newValue) {
    var tmp = 0;
    var tmp_0 = _get_dimensions__vv6gte($this).length + 1 | 0;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = tmp_2 < pos ? _get_dimensions__vv6gte($this)[tmp_2] : tmp_2 > pos ? _get_dimensions__vv6gte($this)[tmp_2 - 1 | 0] : newValue;
      tmp = tmp + 1 | 0;
    }
    var v = tmp_1;
    return _Dimensions___init__impl__sxkzw4(v);
  }
  function Dimensions__remove_impl_ve6v38($this, toRemove) {
    if (toRemove < 0 || toRemove >= _get_dimensions__vv6gte($this).length) {
      throw IndexOutOfBoundsException_init_$Create$('Index does not fit in array. index=' + toRemove + ', size=' + _get_dimensions__vv6gte($this).length);
    }
    var tmp = 0;
    var tmp_0 = _get_dimensions__vv6gte($this).length - 1 | 0;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = tmp_2 < toRemove ? _get_dimensions__vv6gte($this)[tmp_2] : _get_dimensions__vv6gte($this)[tmp_2 + 1 | 0];
      tmp = tmp + 1 | 0;
    }
    var v = tmp_1;
    return _Dimensions___init__impl__sxkzw4(v);
  }
  function Dimensions__replace_impl_aoneje($this, axis, newValue) {
    if (axis < 0 || axis >= _get_dimensions__vv6gte($this).length) {
      throw IndexOutOfBoundsException_init_$Create$('Selected axis is not valid. Selected axis: ' + axis + ', numer of axis: ' + _get_dimensions__vv6gte($this).length);
    }
    var tmp = 0;
    var tmp_0 = _get_dimensions__vv6gte($this).length;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = tmp_2 === axis ? newValue : _get_dimensions__vv6gte($this)[tmp_2];
      tmp = tmp + 1 | 0;
    }
    return _Dimensions___init__impl__sxkzw4(tmp_1);
  }
  function throwIndexOutOfRange($this, p, pos) {
    throwAPLException(new APLIndexOutOfBoundsException('Index out of range. Requested position: ' + ArrayUtils_instance.uz(p) + ', dimensions: ' + toString(_get_dimensions__vv6gte($this)), pos));
  }
  function refCoord($this, p, dimensionIndex, pos) {
    var v = p[dimensionIndex];
    if (v < 0 || v >= _get_dimensions__vv6gte($this)[dimensionIndex]) {
      throwIndexOutOfRange($this, p, pos);
    }
    return v;
  }
  function Dimensions__indexFromPosition_impl_e6hvbp($this, p, pos) {
    if (!(p.length === _get_dimensions__vv6gte($this).length)) {
      throwAPLException(new InvalidDimensionsException('Dimensions does not match', pos));
    }
    var tmp;
    switch (p.length) {
      case 0:
        tmp = 0;
        break;
      case 1:
        tmp = refCoord($this, p, 0, pos);
        break;
      case 2:
        tmp = imul(refCoord($this, p, 0, pos), _get_dimensions__vv6gte($this)[1]) + refCoord($this, p, 1, pos) | 0;
        break;
      default:
        var curr = refCoord($this, p, 0, pos);
        var inductionVariable = 1;
        var last = p.length;
        if (inductionVariable < last)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            curr = imul(curr, _get_dimensions__vv6gte($this)[i]) + refCoord($this, p, i, pos) | 0;
          }
           while (inductionVariable < last);
        tmp = curr;
        break;
    }
    return tmp;
  }
  function Dimensions__indexFromPosition$default_impl_khimhk($this, p, pos, $super) {
    pos = pos === VOID ? null : pos;
    var tmp;
    if ($super === VOID) {
      tmp = Dimensions__indexFromPosition_impl_e6hvbp($this, p, pos);
    } else {
      var tmp_0 = $super;
      tmp = (tmp_0 == null ? null : new Dimensions(tmp_0)).q4k.call(new Dimensions($this), p, pos);
    }
    return tmp;
  }
  function Dimensions__indexFromPositionNegativeSupport_impl_bjb4c5($this, p, pos) {
    if (!(p.length === _get_dimensions__vv6gte($this).length)) {
      throwAPLException(new InvalidDimensionsException('Dimensions does not match', pos));
    }
    var tmp;
    switch (p.length) {
      case 0:
        tmp = 0;
        break;
      case 1:
        tmp = Companion_getInstance_19().a2l(p[0], _get_dimensions__vv6gte($this)[0], pos);
        break;
      case 2:
        tmp = imul(Companion_getInstance_19().a2l(p[0], _get_dimensions__vv6gte($this)[0], pos), _get_dimensions__vv6gte($this)[1]) + Companion_getInstance_19().a2l(p[1], _get_dimensions__vv6gte($this)[1], pos) | 0;
        break;
      default:
        var curr = Companion_getInstance_19().a2l(p[0], _get_dimensions__vv6gte($this)[0], pos);
        var inductionVariable = 1;
        var last = p.length;
        if (inductionVariable < last)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            curr = imul(curr, _get_dimensions__vv6gte($this)[i]) + Companion_getInstance_19().a2l(p[i], _get_dimensions__vv6gte($this)[i], pos) | 0;
          }
           while (inductionVariable < last);
        tmp = curr;
        break;
    }
    return tmp;
  }
  function Dimensions__indexFromPositionNegativeSupport_impl_bjb4c5_0($this, p, pos) {
    if (!(_get_dimensions__vv6gte($this).length === 1)) {
      throwAPLException(new InvalidDimensionsException('Dimensions does not match', pos));
    }
    var size = _get_dimensions__vv6gte($this)[0];
    return Companion_getInstance_19().a2l(p, size, pos);
  }
  function Dimensions__multipliers_impl_u1suko($this) {
    var tmp;
    switch (_get_dimensions__vv6gte($this).length) {
      case 0:
        tmp = Companion_getInstance_19().z2k_1;
        break;
      case 1:
        // Inline function 'kotlin.intArrayOf' call

        tmp = new Int32Array([1]);
        break;
      case 2:
        // Inline function 'kotlin.intArrayOf' call

        tmp = new Int32Array([_get_dimensions__vv6gte($this)[1], 1]);
        break;
      default:
        var curr = 1;
        var a = new Int32Array(_get_dimensions__vv6gte($this).length);
        var inductionVariable = _get_dimensions__vv6gte($this).length - 1 | 0;
        if (1 <= inductionVariable)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            a[i] = curr;
            curr = imul(curr, _get_dimensions__vv6gte($this)[i]);
          }
           while (1 <= inductionVariable);
        a[0] = curr;
        tmp = a;
        break;
    }
    var res = tmp;
    return _DimensionMultipliers___init__impl__q8k8nf(res);
  }
  function Dimensions__lastDimension_impl_2wikwm($this, pos) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (_get_dimensions__vv6gte($this).length === 0) {
      throwAPLException(new InvalidDimensionsException("Can't take dimension from scalar", pos));
    } else {
      tmp = _get_dimensions__vv6gte($this)[_get_dimensions__vv6gte($this).length - 1 | 0];
    }
    return tmp;
  }
  function Dimensions__lastDimension$default_impl_b2ui3x($this, pos, $super) {
    pos = pos === VOID ? null : pos;
    var tmp;
    if ($super === VOID) {
      tmp = Dimensions__lastDimension_impl_2wikwm($this, pos);
    } else {
      var tmp_0 = $super;
      tmp = (tmp_0 == null ? null : new Dimensions(tmp_0)).r4k.call(new Dimensions($this), pos);
    }
    return tmp;
  }
  function Dimensions__lastAxis_impl_jffa09($this, pos) {
    // Inline function 'kotlin.collections.isEmpty' call
    if (_get_dimensions__vv6gte($this).length === 0) {
      throwAPLException(new InvalidDimensionsException('No axis available', pos));
    } else {
      return _get_dimensions__vv6gte($this).length - 1 | 0;
    }
  }
  function Dimensions__lastAxis$default_impl_rqeluc($this, pos, $super) {
    pos = pos === VOID ? null : pos;
    var tmp;
    if ($super === VOID) {
      tmp = Dimensions__lastAxis_impl_jffa09($this, pos);
    } else {
      var tmp_0 = $super;
      tmp = (tmp_0 == null ? null : new Dimensions(tmp_0)).s4k.call(new Dimensions($this), pos);
    }
    return tmp;
  }
  function Dimensions__incrementMutablePosition_impl_to8c4g($this, position) {
    var inductionVariable = position.length - 1 | 0;
    if (0 <= inductionVariable)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var p = position[i];
        var size = _get_dimensions__vv6gte($this)[i];
        if (p < (size - 1 | 0)) {
          position[i] = position[i] + 1 | 0;
          break $l$loop;
        } else if (p === (size - 1 | 0)) {
          position[i] = 0;
        } else if (p >= size)
          throw IllegalStateException_init_$Create$('Invalid position');
      }
       while (0 <= inductionVariable);
  }
  function Dimensions__toString_impl_fhouq4($this) {
    return '[' + joinToString(_get_dimensions__vv6gte($this), ', ') + ']';
  }
  function Companion_17() {
    Companion_instance_19 = this;
    var tmp = this;
    // Inline function 'kotlin.intArrayOf' call
    tmp.z2k_1 = new Int32Array([]);
  }
  protoOf(Companion_17).a2l = function (index, axisSize, pos) {
    var tmp;
    if (index >= 0) {
      if (index >= axisSize) {
        checkAndAdjustSelectedIndex$throwError(index, axisSize, pos);
      }
      tmp = index;
    } else {
      if (index < (-axisSize | 0)) {
        checkAndAdjustSelectedIndex$throwError(index, axisSize, pos);
      }
      tmp = axisSize + index | 0;
    }
    return tmp;
  };
  var Companion_instance_19;
  function Companion_getInstance_19() {
    if (Companion_instance_19 == null)
      new Companion_17();
    return Companion_instance_19;
  }
  function Dimensions__hashCode_impl_xs9ag5($this) {
    return hashCode($this);
  }
  function Dimensions__equals_impl_ucsqf5($this, other) {
    if (!(other instanceof Dimensions))
      return false;
    var tmp0_other_with_cast = other instanceof Dimensions ? other.w36_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function Dimensions(dimensions) {
    Companion_getInstance_19();
    this.w36_1 = dimensions;
  }
  protoOf(Dimensions).toString = function () {
    return Dimensions__toString_impl_fhouq4(this.w36_1);
  };
  protoOf(Dimensions).hashCode = function () {
    return Dimensions__hashCode_impl_xs9ag5(this.w36_1);
  };
  protoOf(Dimensions).equals = function (other) {
    return Dimensions__equals_impl_ucsqf5(this.w36_1, other);
  };
  function dimensionsOfSize(values) {
    _init_properties_dimension_kt__gkzqms();
    return _Dimensions___init__impl__sxkzw4(values);
  }
  function size1Dimensions() {
    _init_properties_dimension_kt__gkzqms();
    return get_SIZE_1_DIMENSIONS();
  }
  function emptyDimensions() {
    _init_properties_dimension_kt__gkzqms();
    return get_EMPTY_DIMENSIONS();
  }
  function emptyListDimensions() {
    _init_properties_dimension_kt__gkzqms();
    return get_EMPTY_LIST_DIMENSIONS();
  }
  var properties_initialized_dimension_kt_a3u1oq;
  function _init_properties_dimension_kt__gkzqms() {
    if (!properties_initialized_dimension_kt_a3u1oq) {
      properties_initialized_dimension_kt_a3u1oq = true;
      // Inline function 'kotlin.intArrayOf' call
      var tmp$ret$0 = new Int32Array([0]);
      EMPTY_LIST_DIMENSIONS = _Dimensions___init__impl__sxkzw4(tmp$ret$0);
      // Inline function 'kotlin.intArrayOf' call
      var tmp$ret$0_0 = new Int32Array([]);
      EMPTY_DIMENSIONS = _Dimensions___init__impl__sxkzw4(tmp$ret$0_0);
      // Inline function 'kotlin.intArrayOf' call
      var tmp$ret$0_1 = new Int32Array([1]);
      SIZE_1_DIMENSIONS = _Dimensions___init__impl__sxkzw4(tmp$ret$0_1);
    }
  }
  function RegexpParseException(message, cause) {
    Exception_init_$Init$(message, cause, this);
    captureStack(this, RegexpParseException);
  }
  function SingleThreadedThreadPoolExecutor$start$o$await$lambda($fn) {
    return function () {
      return $fn();
    };
  }
  function SingleThreadedThreadPoolExecutor$start$1($fn) {
    this.t4k_1 = $fn;
  }
  protoOf(SingleThreadedThreadPoolExecutor$start$1).k48 = function () {
    // Inline function 'com.dhsdevelopments.kap.withThreadLocalsUnassigned' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!!(currentStorageStackOrNull() == null)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return withThreadLocalStorageStackAssigned(null, SingleThreadedThreadPoolExecutor$start$o$await$lambda(this.t4k_1));
  };
  function SingleThreadedThreadPoolExecutor() {
  }
  protoOf(SingleThreadedThreadPoolExecutor).b48 = function () {
    return 1;
  };
  protoOf(SingleThreadedThreadPoolExecutor).j48 = function (fn) {
    return new SingleThreadedThreadPoolExecutor$start$1(fn);
  };
  protoOf(SingleThreadedThreadPoolExecutor).h1l = function () {
  };
  function SleepNotSupportedException() {
    Exception_init_$Init$_0('Sleep not supported', this);
    captureStack(this, SleepNotSupportedException);
  }
  function Companion_18() {
  }
  var Companion_instance_20;
  function Companion_getInstance_20() {
    return Companion_instance_20;
  }
  function processDynamicAssignment(_this__u8e3s4, pos, leftArgs) {
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!(leftArgs.n() === 1)) {
      throw new IncompatibleTypeParseException('Can only assign to a single variable', pos);
    }
    var dest = leftArgs.p(0);
    if (!(dest instanceof VariableRef)) {
      throw new IncompatibleTypeParseException('Dynamic assignment only works for single variables', pos);
    }
    var tmp2 = 'dynamic assignment';
    var tmp$ret$3;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
      var env = _this__u8e3s4.z4k(tmp2, false, false);
      try {
        tmp$ret$3 = new Pair(_this__u8e3s4.a4l(), env);
        break $l$block;
      }finally {
        _this__u8e3s4.b4l();
      }
    }
    var holder = tmp$ret$3.de();
    var parsedEnv = tmp$ret$3.ee();
    var tmp;
    if (holder instanceof InstrParseResult) {
      tmp = makeDynamicAssignInstruction(_this__u8e3s4, dest, holder, parsedEnv);
    } else {
      if (holder instanceof FnParseResult) {
        throw new IllegalContextForFunction(holder.d4l_1);
      } else {
        if (holder instanceof EmptyParseResult) {
          throw new ParseException('No right-side value in dynamic assignment instruction', pos);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  }
  function makeDynamicAssignInstruction(parser, dest, holder, parsedEnv) {
    var env = parser.e4l();
    env.f4l();
    var freeVariableRefs_0 = freeVariableRefs(parsedEnv);
    var assignmentInstr = Companion_instance_22.m4l(dest.i4l_1, freeVariableRefs_0, holder.l4l_1, parsedEnv, holder.d4l_1);
    return new InstrParseResult(assignmentInstr, assignmentInstr.i31_1, holder.c4l_1);
  }
  function processDestinationUpdated($this, newValue) {
    var tmp;
    if (!(newValue instanceof DynamicValue)) {
      tmp = true;
    } else {
      tmp = !(newValue.o4l_1 === $this);
    }
    if (tmp) {
      // Inline function 'kotlin.collections.forEach' call
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s = $this.x4l_1.c2().k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        // Inline function 'kotlin.collections.component1' call
        var holder = element.w1();
        // Inline function 'kotlin.collections.component2' call
        var listener = element.x1();
        var wasFound = holder.b4m(listener.be_1);
        // Inline function 'kotlin.require' call
        if (!wasFound) {
          var message = 'Listener was not found when attempting to unregister tracker: value=' + toString(newValue) + ', tracker=' + toString($this);
          throw IllegalArgumentException_init_$Create$(toString(message));
        }
      }
      $this.u4l_1.b4m($this.y4l_1.be_1);
    }
  }
  function processUpdate($this, newValue) {
    var updateId = computeUpdateId($this, newValue);
    $this.u4l_1.c4m(new DynamicValue($this.s4l_1, $this, VOID, updateId));
  }
  function computeUpdateId($this, newValue) {
    if (newValue instanceof DynamicValue) {
      var oldDest = $this.u4l_1.d4m();
      if (oldDest instanceof DynamicValue) {
        var id = oldDest.p4l_1;
        if (newValue.p4l_1 === id) {
          $this.u4l_1.e4m(APLNullValue_getInstance());
          throwAPLException(new CircularDynamicAssignment($this.t4l_1.i31_1));
        } else {
          return newValue.p4l_1;
        }
      }
    }
    return new UpdateId();
  }
  function sam$com_dhsdevelopments_kap_VariableUpdateListener$0(function_0) {
    this.f4m_1 = function_0;
  }
  protoOf(sam$com_dhsdevelopments_kap_VariableUpdateListener$0).g4m = function (newValue, oldValue) {
    return this.f4m_1(newValue, oldValue);
  };
  protoOf(sam$com_dhsdevelopments_kap_VariableUpdateListener$0).m3 = function () {
    return this.f4m_1;
  };
  protoOf(sam$com_dhsdevelopments_kap_VariableUpdateListener$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, VariableUpdateListener) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.m3(), other.m3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$com_dhsdevelopments_kap_VariableUpdateListener$0).hashCode = function () {
    return hashCode(this.m3());
  };
  function DynamicAssignmentInstruction$UpdateTracker$lambda(this$0) {
    return function (newValue, _unused_var__etf5q3) {
      processUpdate(this$0, newValue);
      return Unit_instance;
    };
  }
  function DynamicAssignmentInstruction$UpdateTracker$lambda_0(this$0) {
    return function (newValue, _unused_var__etf5q3) {
      processDestinationUpdated(this$0, newValue);
      return Unit_instance;
    };
  }
  function Companion_19() {
    this.h4m_1 = 0;
  }
  var Companion_instance_21;
  function Companion_getInstance_21() {
    return Companion_instance_21;
  }
  function computeValue($this) {
    var tmp0 = $this.o4l_1.w4l_1;
    var tmp$ret$7;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
      var stack = currentStorageStack().r3b_1;
      stack.h(tmp0);
      try {
        var tmp0_0 = $this.o4l_1.v4l_1;
        var tmp1 = 'dynamic assignment';
        // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
        var pos = $this.o4l_1.t4l_1.i31_1;
        // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
        var this_0 = currentStorageStack();
        var frame = StorageStackFrame_init_$Create$(this_0, tmp0_0, tmp1, pos);
        this_0.r3b_1.h(frame);
        var result;
        try {
          result = $this.o4l_1.t4l_1.j31($this.n4l_1);
        } catch ($p) {
          if ($p instanceof ReturnValue) {
            var retValue = $p;
            if (retValue.t4j_1 === tmp0_0) {
              result = retValue.s4j_1;
            } else {
              throw retValue;
            }
          } else {
            throw $p;
          }
        }
        finally {
          var removed = removeLast(this_0.r3b_1);
          // Inline function 'kotlin.require' call
          if (!(removed === frame)) {
            var message = 'Removed frame does not match inserted frame';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
          frame.i4m();
        }
        tmp$ret$7 = result;
        break $l$block;
      }finally {
        var removed_0 = removeLast(stack);
        // Inline function 'kotlin.require' call
        if (!(removed_0 === tmp0)) {
          var message_0 = 'Removed frame does not match inserted frame';
          throw IllegalArgumentException_init_$Create$(toString(message_0));
        }
      }
    }
    var v = tmp$ret$7;
    $this.q4l_1 = v;
    return v;
  }
  function Companion_20() {
  }
  protoOf(Companion_20).m4l = function (storageRef, bindings, instr, env, pos) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(bindings, 10));
    var _iterator__ex2g4s = bindings.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = new StackStorageRef(item);
      destination.h(tmp$ret$0);
    }
    var vars = destination;
    return new DynamicAssignmentInstruction(storageRef, vars, instr, env, pos);
  };
  var Companion_instance_22;
  function Companion_getInstance_22() {
    return Companion_instance_22;
  }
  function UpdateTracker(context, vars, instr, destinationHolder, env, savedFrame) {
    this.s4l_1 = context;
    this.t4l_1 = instr;
    this.u4l_1 = destinationHolder;
    this.v4l_1 = env;
    this.w4l_1 = savedFrame;
    var listenerMap = HashMap_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = vars.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var depth = depthOfEnv(element.j4m_1.a4i_1, this.v4l_1);
      var storage = currentStorageStack().m4m(element.k4m() === -2 ? -2 : element.k4m() - depth | 0, element.l4m());
      var tmp = DynamicAssignmentInstruction$UpdateTracker$lambda(this);
      var innerListener = new sam$com_dhsdevelopments_kap_VariableUpdateListener$0(tmp);
      var listener = new WeakRefVariableUpdateListener(this.s4l_1.j38_1, 'TrackedDependency(ref=' + element.p2().toString() + ')', storage, innerListener);
      // Inline function 'kotlin.collections.set' call
      var value = new Pair(listener, innerListener);
      listenerMap.j2(storage, value);
    }
    this.x4l_1 = listenerMap;
    var tmp_0 = DynamicAssignmentInstruction$UpdateTracker$lambda_0(this);
    var innerDestListener = new sam$com_dhsdevelopments_kap_VariableUpdateListener$0(tmp_0);
    this.y4l_1 = new Pair(new WeakRefVariableUpdateListener(this.s4l_1.j38_1, 'UpdateTracker(env=' + this.v4l_1.p37_1 + ')', this.u4l_1, innerDestListener), innerDestListener);
  }
  protoOf(UpdateTracker).n4m = function (res) {
    return new DynamicValue(this.s4l_1, this, res);
  };
  function UpdateId() {
    var tmp = this;
    var _unary__edvuaz = Companion_instance_21.h4m_1;
    Companion_instance_21.h4m_1 = _unary__edvuaz + 1 | 0;
    tmp.o4m_1 = _unary__edvuaz;
  }
  protoOf(UpdateId).toString = function () {
    return 'UpdateId(' + this.o4m_1 + ')';
  };
  function DynamicValue(context, tracker, initial, updateId) {
    initial = initial === VOID ? null : initial;
    updateId = updateId === VOID ? new UpdateId() : updateId;
    AbstractDelegatedValue.call(this);
    this.n4l_1 = context;
    this.o4l_1 = tracker;
    this.p4l_1 = updateId;
    this.q4l_1 = initial;
    this.r4l_1 = new MPLock();
  }
  protoOf(DynamicValue).x1 = function () {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.r4l_1;
    var tmp0_elvis_lhs = this.q4l_1;
    return tmp0_elvis_lhs == null ? computeValue(this) : tmp0_elvis_lhs;
  };
  protoOf(DynamicValue).toString = function () {
    return 'DynamicValue(' + toString_1(this.q4l_1) + ')';
  };
  function DynamicAssignmentInstruction(storageRef, vars, instr, env, pos) {
    Instruction.call(this, pos);
    this.q4m_1 = storageRef;
    this.r4m_1 = vars;
    this.s4m_1 = instr;
    this.t4m_1 = env;
    this.u4m_1 = new MPLock();
    this.v4m_1 = null;
  }
  protoOf(DynamicAssignmentInstruction).j31 = function (context) {
    var stack = currentStorageStack();
    var frame = stack.s3b();
    var holder = stack.w4m(this.q4m_1);
    var tmp0 = this.t4m_1;
    var tmp1 = 'dynamic assignment';
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.i31_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame_0 = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame_0);
    var result;
    try {
      var res = this.s4m_1.j31(context).x2g();
      // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
      this.u4m_1;
      var tmp0_elvis_lhs = this.v4m_1;
      var tmp;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'kotlin.also' call
        var this_1 = new UpdateTracker(context, this.r4m_1, this.s4m_1, holder, this.t4m_1, frame);
        this.v4m_1 = this_1;
        tmp = this_1;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var tr = tmp;
      // Inline function 'kotlin.also' call
      var this_2 = tr.n4m(res);
      holder.c4m(this_2);
      result = this_2;
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame_0)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame_0.i4m();
    }
    return result;
  };
  protoOf(DynamicAssignmentInstruction).b1h = function () {
    return listOf_0(this.s4m_1);
  };
  protoOf(DynamicAssignmentInstruction).x4m = function (updatedChildList, newPos) {
    return new DynamicAssignmentInstruction(this.q4m_1, this.r4m_1, updatedChildList.p(0), this.t4m_1, newPos);
  };
  function WeakRefVariableUpdateListener(engine, debugName, storage, inner) {
    this.z4m_1 = debugName;
    this.a4n_1 = storage;
    this.b4n_1 = make_1(Companion_instance_20, inner);
    this.a4n_1.c4n(engine, this);
  }
  protoOf(WeakRefVariableUpdateListener).g4m = function (newValue, oldValue) {
    var l = this.b4n_1.x1();
    if (l == null) {
      // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.w' call
      var tmp0 = KapLogger_getInstance();
      // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.logWithLevel' call
      var msgLevel = Level_WARNING_getInstance();
      if (msgLevel.qz_1 < tmp0.lz_1.qz_1) {
        var tmp$ret$0 = 'Unregistering listener after GC: name=' + this.z4m_1;
        tmp0.nz(msgLevel, tmp$ret$0);
      }
      this.a4n_1.b4m(this);
    } else {
      l.g4m(newValue, oldValue);
    }
  };
  function throwAPLException(ex) {
    var stack = currentStorageStackOrNull();
    if (!(stack == null)) {
      ex.a3a_1 = new CapturedStorageStack(stack);
    }
    throw ex;
  }
  function StorageStackFrame_init_$Init$(stack, environment, name, pos, $this) {
    // Inline function 'com.dhsdevelopments.kap.computeStorageList' call
    var localStorageSize = environment.u37_1.n();
    var externalStorageList = environment.v37_1;
    var externalStorageSize = externalStorageList.n();
    var tmp = 0;
    var tmp_0 = localStorageSize + externalStorageSize | 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp_3;
      if (tmp_2 < localStorageSize) {
        tmp_3 = new VariableHolder();
      } else {
        var ref = externalStorageList.p(tmp_2 - localStorageSize | 0);
        var stackIndex = ref.d4n_1 === -2 ? 0 : stack.r3b_1.n() - ref.d4n_1 | 0;
        var frame = stack.r3b_1.p(stackIndex);
        tmp_3 = frame.w3b_1[ref.e4n_1];
      }
      tmp_1[tmp_2] = tmp_3;
      tmp = tmp + 1 | 0;
    }
    StorageStackFrame.call($this, environment, name, pos, tmp_1);
    return $this;
  }
  function StorageStackFrame_init_$Create$(stack, environment, name, pos) {
    return StorageStackFrame_init_$Init$(stack, environment, name, pos, objectCreate(protoOf(StorageStackFrame)));
  }
  function StorageStackFrame_init_$Init$_0(environment, $this) {
    StorageStackFrame.call($this, environment, 'root', null, computeRootFrame(environment));
    return $this;
  }
  function StorageStackFrame_init_$Create$_0(environment) {
    return StorageStackFrame_init_$Init$_0(environment, objectCreate(protoOf(StorageStackFrame)));
  }
  function StorageStack_init_$Init$(rootFrame, $this) {
    StorageStack.call($this);
    $this.r3b_1.h(rootFrame);
    return $this;
  }
  function StorageStack_init_$Create$(rootFrame) {
    return StorageStack_init_$Init$(rootFrame, objectCreate(protoOf(StorageStack)));
  }
  function StorageStackFrame(environment, name, pos, storageList) {
    this.t3b_1 = environment;
    this.u3b_1 = name;
    this.v3b_1 = pos;
    this.w3b_1 = storageList;
    this.x3b_1 = null;
  }
  protoOf(StorageStackFrame).y3b = function (callback) {
    var list = this.x3b_1;
    if (list == null) {
      var updated = ArrayList_init_$Create$();
      updated.h(callback);
      this.x3b_1 = updated;
    } else {
      list.h(callback);
    }
  };
  protoOf(StorageStackFrame).i4m = function () {
    var list = this.x3b_1;
    if (!(list == null)) {
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = asReversed_0(list).k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        element();
      }
    }
  };
  function StorageStack() {
    this.r3b_1 = ArrayList_init_$Create$();
  }
  protoOf(StorageStack).w4m = function (storageRef) {
    return this.m4m(storageRef.k4m(), storageRef.l4m());
  };
  protoOf(StorageStack).m4m = function (frameIndex, storageOffset) {
    var frame = this.r3b_1.p(frameIndex === -2 ? 0 : (this.r3b_1.n() - frameIndex | 0) - 1 | 0);
    return frame.w3b_1[storageOffset];
  };
  protoOf(StorageStack).s3b = function () {
    return last(this.r3b_1);
  };
  function fireListeners($this, newValue, oldValue) {
    var tmp0_safe_receiver = $this.a4m_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = tmp0_safe_receiver.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        element.g4m(newValue, oldValue);
      }
    }
  }
  function VariableHolder() {
    this.z4l_1 = null;
    this.a4m_1 = null;
  }
  protoOf(VariableHolder).d4m = function () {
    return this.z4l_1;
  };
  protoOf(VariableHolder).c4m = function (newValue) {
    var oldValue = this.z4l_1;
    this.z4l_1 = newValue;
    if (!(newValue == null) && !(oldValue === newValue)) {
      fireListeners(this, newValue, oldValue);
    }
  };
  protoOf(VariableHolder).e4m = function (newValue) {
    this.z4l_1 = newValue;
  };
  protoOf(VariableHolder).c4n = function (engine, listener) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    engine.a39_1;
    var listenersCopy = this.a4m_1;
    var tmp;
    if (listenersCopy == null) {
      var newListenerList = new MTSafeArrayList();
      this.a4m_1 = newListenerList;
      tmp = newListenerList;
    } else {
      tmp = listenersCopy;
    }
    var list = tmp;
    list.j4n(listener);
  };
  protoOf(VariableHolder).b4m = function (listener) {
    var tmp0_safe_receiver = this.a4m_1;
    return (tmp0_safe_receiver == null ? null : tmp0_safe_receiver.k4n(listener)) === true;
  };
  function computeRootFrame(env) {
    // Inline function 'kotlin.require' call
    if (!env.v37_1.o()) {
      var message = 'Root frame should not have external refs';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var tmp = 0;
    var tmp_0 = env.u37_1.n();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = Array(tmp_0);
    while (tmp < tmp_0) {
      tmp_1[tmp] = new VariableHolder();
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function VariableUpdateListener() {
  }
  function Engine_init_$Init$(numComputeEngines, defaultOptimiser, $this) {
    numComputeEngines = numComputeEngines === VOID ? null : numComputeEngines;
    defaultOptimiser = defaultOptimiser === VOID ? null : defaultOptimiser;
    Engine.call($this, numComputeEngines, defaultOptimiser == null ? StandardOptimiser_getInstance() : defaultOptimiser, false);
    return $this;
  }
  function Engine_init_$Create$(numComputeEngines, defaultOptimiser) {
    return Engine_init_$Init$(numComputeEngines, defaultOptimiser, objectCreate(protoOf(Engine)));
  }
  function standardEngineInit($this) {
    platformInit($this);
    addStandardCmds($this);
    $this.l4n(new UnicodeModule());
    $this.l4n(new JsonAPLModule());
    $this.l4n(new RegexpModule());
  }
  function addStandardCmds($this) {
    registerNativeFunction$default($this, 'registerCmd', new RegisterCmdFunction(), 'int');
    $this.z38_1.r4i('modlist', new ModListCommandHandler());
    $this.z38_1.r4i('cd', new ChangeWorkingDirectoryCommandHandler());
  }
  function initSingleCharFunctionList($this) {
    return hashSetOf(['!', '#', '%', '&', '*', '+', ',', '-', '/', '<', '=', '>', '?', '^', '|', '~', '\xA8', '\xD7', '\xF7', '\u2191', '\u2192', '\u2193', '\u220A', '\u2218', '\u2227', '\u2228', '\u2229', '\u222A', '\u223C', '\u2260', '\u2261', '\u2262', '\u2264', '\u2265', '\u2282', '\u2283', '\u2296', '\u22A2', '\u22A3', '\u22A4', '\u22A5', '\u22C6', '\u2308', '\u230A', '\u2336', '\u2337', '\u2339', '\u233B', '\u233D', '\u233F', '\u2340', '\u2349', '\u234B', '\u234E', '\u2352', '\u2355', '\u235E', '\u235F', '\u2360', '\u2363', '\u2364', '\u2365', '\u2368', '\u236A', '\u236B', '\u2371', '\u2372', '\u2373', '\u2374', '\u2375', '\u2376', '\u2377', '\u2378', '\u2379', '\u237A', '\u25CA', '\u25CB', '$', '\xA5', '\u03C7', '\\', '\u2235', '\u2353', '\u2AFD', '\u244A', '\u2286', '\u2287', '\u2365', '\u2225', '\u235B', '\u02DD', '\u2362', '\u221A', '\u2219', '\u2338', '\u226C', '\u236E', '\u2AC7', '\u2026']);
  }
  function registerNativeFunction($this, name, fn, namespaceName, exported) {
    var namespace = namespaceName == null ? $this.r39() : $this.x4e(namespaceName);
    var sym = exported ? namespace.e3k(name) : namespace.l4f(name);
    $this.v4g(sym, fn);
  }
  function registerNativeFunction$default($this, name, fn, namespaceName, exported, $super) {
    namespaceName = namespaceName === VOID ? null : namespaceName;
    exported = exported === VOID ? true : exported;
    return registerNativeFunction($this, name, fn, namespaceName, exported);
  }
  function registerNativeOperator($this, name, fn, namespaceName) {
    var namespace = namespaceName == null ? $this.r39() : $this.x4e(namespaceName);
    var sym = namespace.e3k(name);
    $this.m4n(sym, fn);
  }
  function registerNativeOperator$default($this, name, fn, namespaceName, $super) {
    namespaceName = namespaceName === VOID ? null : namespaceName;
    return registerNativeOperator($this, name, fn, namespaceName);
  }
  function resolveAlias($this, name) {
    var tmp0_elvis_lhs = $this.q38_1.a2(name);
    return tmp0_elvis_lhs == null ? name : tmp0_elvis_lhs;
  }
  function parseAndEvalWithPostProcessing$callPostProcess(ts, $postProcess, startTime, context, result) {
    var currTime = ts.sc();
    return $postProcess(context, result, new Duration(ValueTimeMark__minus_impl_f87sko(currTime, startTime)));
  }
  function Engine$parseAndEval$lambda($collapseResult) {
    return function (_unused_var__etf5q3, result, _unused_var__etf5q3_0) {
      var tmp;
      if ($collapseResult) {
        tmp = result.x2g();
      } else {
        tmp = result;
      }
      return tmp;
    };
  }
  function Engine$parseAndEvalWithPostProcessing$lambda(this$0, $instr, $ts, $postProcess, $startTime) {
    return function () {
      this$0.n4n();
      var context = new RuntimeContext(this$0);
      var result = $instr.j31(context);
      return parseAndEvalWithPostProcessing$callPostProcess($ts, $postProcess, $startTime, context, result);
    };
  }
  function Engine$parseAndEvalWithPostProcessing$lambda_0(this$0, $updatedEnv, $instr, $bindingsWithValues, $ts, $postProcess, $startTime) {
    return function () {
      this$0.n4n();
      var context = new RuntimeContext(this$0);
      var tmp0 = $updatedEnv;
      var tmp1 = 'extraBindings';
      // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
      var pos = $instr.i31_1;
      // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
      var this_0 = currentStorageStack();
      var frame = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
      this_0.r3b_1.h(frame);
      var result;
      try {
        var stack = currentStorageStack();
        // Inline function 'kotlin.collections.forEach' call
        // Inline function 'kotlin.collections.iterator' call
        var _iterator__ex2g4s = $bindingsWithValues.c2().k();
        while (_iterator__ex2g4s.l()) {
          var element = _iterator__ex2g4s.m();
          // Inline function 'kotlin.collections.component1' call
          var binding = element.w1();
          // Inline function 'kotlin.collections.component2' call
          var value = element.x1();
          var storage = stack.w4m(new StackStorageRef(binding));
          storage.c4m(value);
        }
        result = $instr.j31(context);
      } catch ($p) {
        if ($p instanceof ReturnValue) {
          var retValue = $p;
          if (retValue.t4j_1 === tmp0) {
            result = retValue.s4j_1;
          } else {
            throw retValue;
          }
        } else {
          throw $p;
        }
      }
      finally {
        var removed = removeLast(this_0.r3b_1);
        // Inline function 'kotlin.require' call
        if (!(removed === frame)) {
          var message = 'Removed frame does not match inserted frame';
          throw IllegalArgumentException_init_$Create$(toString(message));
        }
        frame.i4m();
      }
      var result_0 = result;
      return parseAndEvalWithPostProcessing$callPostProcess($ts, $postProcess, $startTime, context, result_0);
    };
  }
  function Engine(numComputeEngines, defaultOptimiser, forSyntaxCheck) {
    numComputeEngines = numComputeEngines === VOID ? null : numComputeEngines;
    this.k38_1 = defaultOptimiser;
    this.l38_1 = forSyntaxCheck;
    this.m38_1 = false;
    this.n38_1 = HashMap_init_$Create$();
    this.o38_1 = HashMap_init_$Create$();
    this.p38_1 = ArrayList_init_$Create$();
    this.q38_1 = HashMap_init_$Create$();
    this.r38_1 = new NamespaceList();
    this.s38_1 = HashMap_init_$Create$();
    this.t38_1 = HashMap_init_$Create$();
    this.u38_1 = ArrayList_init_$Create$();
    this.v38_1 = ArrayList_init_$Create$();
    this.w38_1 = initSingleCharFunctionList(this);
    this.x38_1 = null;
    this.y38_1 = new ClassManager(this);
    this.z38_1 = new CommandManager(this);
    this.a39_1 = new MPLock();
    this.b39_1 = new Environment('root', null);
    this.c39_1 = StorageStackFrame_init_$Create$_0(this.b39_1);
    this.d39_1 = new NullCharacterOutput();
    this.e39_1 = new NullCharacterProvider();
    this.f39_1 = makeTimerHandler(this);
    this.g39_1 = this.o4n();
    this.h39_1 = HashMap_init_$Create$();
    var tmp = this;
    tmp.i39_1 = makeBackgroundDispatcher(numComputeEngines == null ? numCores() : numComputeEngines);
    var tmp_0 = this;
    // Inline function 'com.dhsdevelopments.kap.mpthread.makeMPThreadLocal' call
    tmp_0.j39_1 = makeMPThreadLocalBackend(PrimitiveClasses_getInstance().p9());
    this.k39_1 = HashMap_init_$Create$();
    this.l39_1 = new StandardSymbols(this);
    this.m39_1 = makeNativeData();
    this.n39_1 = Default_getInstance();
    this.o39_1 = false;
    var _iterator__ex2g4s = listOf(['\u2375', '\u237A', '\u2379', '\u2376']).k();
    while (_iterator__ex2g4s.l()) {
      var name = _iterator__ex2g4s.m();
      this.r39().e3k(name);
    }
    registerNativeFunction$default(this, '+', new AddAPLFunction());
    registerNativeFunction$default(this, '-', new SubAPLFunction());
    registerNativeFunction$default(this, '\xD7', new MulAPLFunction());
    registerNativeFunction$default(this, '\xF7', new DivAPLFunction());
    registerNativeFunction$default(this, '\u22C6', new PowerAPLFunction());
    registerNativeFunction$default(this, '\u235F', new LogAPLFunction());
    registerNativeFunction$default(this, '\u2373', new IotaAPLFunction());
    registerNativeFunction$default(this, '\u2374', new RhoAPLFunction());
    registerNativeFunction$default(this, '\u22A2', new IdentityAPLFunction());
    registerNativeFunction$default(this, '\u22A3', new HideAPLFunction());
    registerNativeFunction$default(this, '=', new EqualsAPLFunction());
    registerNativeFunction$default(this, '\u2260', new NotEqualsAPLFunction());
    registerNativeFunction$default(this, '<', new LessThanAPLFunction());
    registerNativeFunction$default(this, '>', new GreaterThanAPLFunction());
    registerNativeFunction$default(this, '\u2264', new LessThanEqualAPLFunction());
    registerNativeFunction$default(this, '\u2265', new GreaterThanEqualAPLFunction());
    registerNativeFunction$default(this, '\u2337', new AccessFromIndexAPLFunction());
    registerNativeFunction$default(this, '\u2282', new EncloseAPLFunction());
    registerNativeFunction$default(this, '\u2283', new DiscloseAPLFunction());
    registerNativeFunction$default(this, '\u2227', new AndAPLFunction());
    registerNativeFunction$default(this, '\u2228', new OrAPLFunction());
    registerNativeFunction$default(this, ',', new ConcatenateAPLFunctionLastAxis());
    registerNativeFunction$default(this, '\u236A', new ConcatenateAPLFunctionFirstAxis());
    registerNativeFunction$default(this, '\u2191', new TakeAPLFunction());
    registerNativeFunction$default(this, '?', new RandomAPLFunction());
    registerNativeFunction$default(this, '\u233D', new RotateHorizFunction());
    registerNativeFunction$default(this, '\u2296', new RotateVertFunction());
    registerNativeFunction$default(this, '\u2193', new DropAPLFunction());
    registerNativeFunction$default(this, '\u2349', new TransposeFunction());
    registerNativeFunction$default(this, '\u230A', new MinAPLFunction());
    registerNativeFunction$default(this, '\u2308', new MaxAPLFunction());
    registerNativeFunction$default(this, '|', new ModAPLFunction());
    registerNativeFunction$default(this, '\u2218', new NullFunction());
    registerNativeFunction$default(this, '\u2261', new CompareFunction());
    registerNativeFunction$default(this, '\u2262', new CompareNotEqualFunction());
    registerNativeFunction$default(this, '\u220A', new MemberFunction());
    registerNativeFunction$default(this, '\u234B', new GradeUpFunction());
    registerNativeFunction$default(this, '\u2352', new GradeDownFunction());
    registerNativeFunction$default(this, '\u2377', new FindFunction());
    registerNativeFunction$default(this, '\u2AFD', new SelectElementsLastAxisFunction());
    registerNativeFunction$default(this, '/', new SelectElementsLastAxisFunction());
    registerNativeFunction$default(this, '\u233F', new SelectElementsFirstAxisFunction());
    registerNativeFunction$default(this, '\\', new ExpandLastAxisFunction());
    registerNativeFunction$default(this, '\u2340', new ExpandFirstAxisFunction());
    registerNativeFunction$default(this, '\u223C', new NotAPLFunction());
    registerNativeFunction$default(this, '\u2355', new FormatAPLFunction());
    registerNativeFunction$default(this, '\u2378', new WhereAPLFunction());
    registerNativeFunction$default(this, '\u222A', new UniqueFunction());
    registerNativeFunction$default(this, '\u2372', new NandAPLFunction());
    registerNativeFunction$default(this, '\u2371', new NorAPLFunction());
    registerNativeFunction$default(this, '\u2229', new IntersectionAPLFunction());
    registerNativeFunction$default(this, '!', new BinomialAPLFunction());
    registerNativeFunction$default(this, '\u234E', new ParseNumberFunction());
    registerNativeFunction$default(this, '%', new CaseFunction());
    registerNativeFunction$default(this, '\u2286', new PartitionedEncloseFunction());
    registerNativeFunction$default(this, '\u2287', new PickAPLFunction());
    registerNativeFunction$default(this, 'cmp', new CompareObjectsFunction());
    registerNativeFunction$default(this, '\u2192', new ReturnFunction());
    registerNativeFunction$default(this, '\u236E', new PairAPLFunction());
    registerNativeFunction$default(this, '\u2AC7', new GroupFunction());
    registerNativeFunction$default(this, '\u2026', new RangeFunction());
    registerNativeFunction$default(this, 'map', new MapAPLFunction());
    registerNativeFunction$default(this, 'mapGet', new MapGetAPLFunction());
    registerNativeFunction$default(this, 'mapPut', new MapPutAPLFunction());
    registerNativeFunction$default(this, 'mapRemove', new MapRemoveAPLFunction());
    registerNativeFunction$default(this, 'mapToArray', new MapKeyValuesFunction());
    registerNativeFunction$default(this, 'mapSize', new MapSizeFunction());
    registerNativeFunction$default(this, 'mapKeys', new MapKeysFunction());
    registerNativeFunction$default(this, 'read', new ReadFunction(), 'io');
    registerNativeFunction$default(this, 'write', new WriteFunction(), 'io');
    registerNativeFunction$default(this, 'print', new PrintAPLFunction(), 'io');
    registerNativeFunction$default(this, 'println', new PrintLnAPLFunction(), 'io');
    registerNativeFunction$default(this, 'readLine', new ReadLineFunction(), 'io');
    registerNativeFunction$default(this, 'writeCsv', new WriteCsvFunction(), 'io');
    registerNativeFunction$default(this, 'readCsv', new ReadCsvFunction(), 'io');
    registerNativeFunction$default(this, 'readFile', new ReadFileFunction(), 'io');
    registerNativeFunction$default(this, 'load', new LoadFunction(), 'io');
    registerNativeFunction$default(this, 'readdir', new ReaddirFunction(), 'io');
    registerNativeFunction$default(this, 'close', new CloseAPLFunction());
    registerNativeFunction$default(this, 'toHtml', new ToHtmlFunction(), 'io');
    registerNativeFunction$default(this, 'fromHtmlTable', new FromHtmlTableFunction(), 'io');
    registerNativeFunction$default(this, 'get', new HttpRequestFunction(HttpMethod_GET_getInstance(), false), 'http');
    registerNativeFunction$default(this, 'post', new HttpRequestFunction(HttpMethod_POST_getInstance(), true), 'http');
    registerNativeFunction$default(this, 'put', new HttpRequestFunction(HttpMethod_PUT_getInstance(), true), 'http');
    registerNativeFunction$default(this, 'delete', new HttpRequestFunction(HttpMethod_DELETE_getInstance(), false), 'http');
    registerNativeFunction$default(this, 'open', new OpenFunction(), 'io2');
    registerNativeFunction$default(this, 'read', new ReadFromStreamFunction(), 'io2');
    registerNativeFunction$default(this, 'readLine', new ReadLineFromStreamFunction(), 'io2');
    registerNativeFunction$default(this, 'write', new WriteToStreamFunction(), 'io2');
    registerNativeFunction$default(this, 'sleep', new SleepFunction(), 'time');
    registerNativeFunction$default(this, 'timeMillis', new TimeMillisFunction(), 'time');
    registerNativeFunction$default(this, 'makeTimer', new MakeTimerFunction(), 'time');
    registerNativeFunction$default(this, 'toTimestamp', new ToTimestampFunction(), 'time');
    registerNativeFunction$default(this, 'fromTimestamp', new FromTimestampFunction(), 'time');
    registerNativeFunction$default(this, 'format', new FormatTimestampFunction(), 'time');
    registerNativeFunction$default(this, 'parse', new ParseTimestampFunction(), 'time');
    registerNativeFunction$default(this, 'throw', new ThrowFunction());
    registerNativeOperator$default(this, 'catch', new CatchOperator());
    registerNativeFunction$default(this, 'labels', new LabelsFunction());
    registerNativeFunction$default(this, 'unwindProtect', new UnwindProtectAPLFunction(), 'int');
    registerNativeOperator$default(this, 'defer', new DeferAPLOperator());
    registerNativeFunction$default(this, 'ensureGeneric', new EnsureTypeFunction(Companion_getInstance_45().z2j_1), 'int');
    registerNativeFunction$default(this, 'ensureLong', new EnsureTypeFunction(Companion_getInstance_45().x2j_1), 'int');
    registerNativeFunction$default(this, 'ensureDouble', new EnsureTypeFunction(Companion_getInstance_45().y2j_1), 'int');
    registerNativeFunction$default(this, 'ensureBoolean', new EnsureTypeFunction(Companion_getInstance_45().a2k_1), 'int');
    registerNativeFunction$default(this, 'asBigint', new AsBigintFunction(), 'int');
    registerNativeFunction$default(this, 'asRational', new AsRationalFunction(), 'int');
    registerNativeOperator$default(this, 'atLeave', new AtLeaveScopeOperator());
    registerNativeFunction$default(this, 'toList', new ToListFunction());
    registerNativeFunction$default(this, '\u226C', new ToListFunction());
    registerNativeFunction$default(this, 'fromList', new FromListFunction());
    registerNativeFunction$default(this, 'proto', new AssignPrototypeFunction(), 'int');
    registerNativeFunction$default(this, 'toBoolean', new ToBooleanFunction());
    registerNativeFunction$default(this, 'toRational', new RationaliseAPLFunction());
    registerNativeFunction$default(this, 'hashCode', new HashCodeAPLFunction(), 'int');
    registerNativeFunction$default(this, 'formatRational', new RenderRationalFunction(), 'int');
    registerNativeFunction$default(this, 'isKapString', new IsStringFunction(), 'int');
    registerNativeFunction$default(this, 'sin', new SinAPLFunction(), 'math');
    registerNativeFunction$default(this, 'cos', new CosAPLFunction(), 'math');
    registerNativeFunction$default(this, 'tan', new TanAPLFunction(), 'math');
    registerNativeFunction$default(this, 'asin', new AsinAPLFunction(), 'math');
    registerNativeFunction$default(this, 'acos', new AcosAPLFunction(), 'math');
    registerNativeFunction$default(this, 'atan', new AtanAPLFunction(), 'math');
    registerNativeFunction$default(this, 'sinh', new SinhAPLFunction(), 'math');
    registerNativeFunction$default(this, 'cosh', new CoshAPLFunction(), 'math');
    registerNativeFunction$default(this, 'tanh', new TanhAPLFunction(), 'math');
    registerNativeFunction$default(this, 'asinh', new AsinhAPLFunction(), 'math');
    registerNativeFunction$default(this, 'acosh', new AcoshAPLFunction(), 'math');
    registerNativeFunction$default(this, 'atanh', new AtanhAPLFunction(), 'math');
    registerNativeFunction$default(this, '\u221A', new SqrtAPLFunction());
    registerNativeFunction$default(this, 'gcd', new GcdAPLFunction(), 'math');
    registerNativeFunction$default(this, 'lcm', new LcmAPLFunction(), 'math');
    registerNativeFunction$default(this, 'numerator', new NumeratorAPLFunction(), 'math');
    registerNativeFunction$default(this, 'denominator', new DenominatorAPLFunction(), 'math');
    registerNativeFunction$default(this, 'factor', new FactorAPLFunction(), 'math');
    registerNativeFunction$default(this, 'divisors', new DivisorsAPLFunction(), 'math');
    registerNativeFunction$default(this, 're', new RealpartAPLFunction(), 'math');
    registerNativeFunction$default(this, 'im', new ImagpartAPLFunction_0(), 'math');
    registerNativeFunction$default(this, 'floorc', new ComplexFloorFunction(), 'math');
    registerNativeFunction$default(this, 'ceilc', new ComplexCeilFunction(), 'math');
    registerNativeFunction$default(this, 'round', new RoundNumFunction(), 'math');
    registerNativeFunction$default(this, 'typeof', new TypeofFunction());
    registerNativeFunction$default(this, 'isLocallyBound', new IsLocallyBoundFunction());
    registerNativeFunction$default(this, 'comp', new CompFunction());
    registerNativeFunction$default(this, 'sysparam', new SystemParameterFunction());
    registerNativeFunction$default(this, 'valueInfo', new InternalValueInfoFunction(), 'int');
    registerNativeFunction$default(this, 'list', new ListModulesFunction(), 'mod');
    registerNativeFunction$default(this, 'hasLabels', new HasLabelsFunction(), 'int');
    registerNativeFunction$default(this, 'throwNative', new ThrowNativeFunction(), 'int');
    registerNativeFunction$default(this, 'intern', new InternFunction(), 'int');
    registerNativeFunction$default(this, 'symbolName', new SymbolNameFunction(), 'int');
    registerNativeOperator$default(this, '\xA8', new ForEachOp());
    registerNativeOperator$default(this, '/', new ReduceOpLastAxis());
    registerNativeOperator$default(this, '\u233F', new ReduceOpFirstAxis());
    registerNativeOperator$default(this, '\u233B', new OuterJoinOp());
    registerNativeOperator$default(this, '\u2219', new OuterInnerJoinOp());
    registerNativeOperator$default(this, '\u2368', new CommuteOp());
    registerNativeOperator$default(this, '\u2363', new PowerAPLOperator());
    registerNativeOperator$default(this, '\\', new ScanLastAxisOp());
    registerNativeOperator$default(this, '\u2340', new ScanFirstAxisOp());
    registerNativeOperator$default(this, '\u2364', new RankOperator());
    registerNativeOperator$default(this, '\u2235', new BitwiseOp());
    registerNativeOperator$default(this, '\u2218', new ComposeOp());
    registerNativeOperator$default(this, '\u2365', new OverOp());
    registerNativeOperator$default(this, '\u2225', new ParallelOp());
    registerNativeOperator$default(this, '\u235B', new ReverseComposeOp());
    registerNativeOperator$default(this, '\u02DD', new InverseFnOp());
    registerNativeOperator$default(this, '\u2362', new StructuralUnderOp());
    registerNativeOperator$default(this, 'callAsync', new CallAsyncOp());
    var tmp0 = this.q38_1;
    var tmp1 = this.r39().e3k('*');
    // Inline function 'kotlin.collections.set' call
    var value = this.r39().e3k('\u22C6');
    tmp0.j2(tmp1, value);
    var tmp3 = this.q38_1;
    var tmp4 = this.r39().e3k('~');
    // Inline function 'kotlin.collections.set' call
    var value_0 = this.r39().e3k('\u223C');
    tmp3.j2(tmp4, value_0);
    this.y38_1.p4n();
    registerIoClosableHandlers(this);
    var tmp6 = this.k39_1;
    var tmp7 = this.l39_1.u4n();
    // Inline function 'kotlin.collections.set' call
    var value_1 = new CustomRendererParameter(this);
    tmp6.j2(tmp7, value_1);
    if (!this.l38_1) {
      standardEngineInit(this);
    }
    // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.v' call
    var tmp0_0 = KapLogger_getInstance();
    // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.logWithLevel' call
    var msgLevel = Level_VERBOSE_getInstance();
    if (msgLevel.qz_1 < tmp0_0.lz_1.qz_1) {
      var tmp$ret$4 = 'Engine initialised';
      tmp0_0.nz(msgLevel, tmp$ret$4);
    }
    this.p39_1 = currentDirectory();
    this.q39_1 = ArrayList_init_$Create$();
  }
  protoOf(Engine).r39 = function () {
    return this.r38_1.y4n_1;
  };
  protoOf(Engine).i3i = function () {
    return this.r38_1.z4n_1;
  };
  protoOf(Engine).o4n = function () {
    return this.r38_1.a4o_1;
  };
  protoOf(Engine).b4o = function (ch) {
    return this.w38_1.s1(ch);
  };
  protoOf(Engine).h1l = function () {
    if (!this.m38_1) {
      this.i39_1.h1l();
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = this.v38_1.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        element.h1l();
      }
      this.m39_1.h1l();
      this.m38_1 = true;
      // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.v' call
      var tmp0 = KapLogger_getInstance();
      // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.logWithLevel' call
      var msgLevel = Level_VERBOSE_getInstance();
      if (msgLevel.qz_1 < tmp0.lz_1.qz_1) {
        var tmp$ret$2 = 'Engine closed';
        tmp0.nz(msgLevel, tmp$ret$2);
      }
    }
  };
  protoOf(Engine).q42 = function (pos) {
    var pending = this.o39_1;
    var tmp;
    if (pending) {
      tmp = true;
    } else {
      var tmp$ret$0;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.nativeBreakPending' call
        var tmp0_elvis_lhs = jsNativeData(this).c4o_1;
        var tmp_0;
        if (tmp0_elvis_lhs == null) {
          tmp$ret$0 = false;
          break $l$block;
        } else {
          tmp_0 = tmp0_elvis_lhs;
        }
        var jsTransferQueue = tmp_0;
        tmp$ret$0 = jsTransferQueue.i10() === 1;
      }
      tmp = tmp$ret$0;
    }
    if (tmp) {
      if (!this.m48()) {
        this.f4o();
      }
      throw new APLEvaluationInterrupted(pos);
    }
  };
  protoOf(Engine).i42 = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    var tmp;
    if ($super === VOID) {
      this.q42(pos);
      tmp = Unit_instance;
    } else {
      tmp = $super.q42.call(this, pos);
    }
    return tmp;
  };
  protoOf(Engine).f4o = function () {
    this.o39_1 = false;
    // Inline function 'com.dhsdevelopments.kap.nativeUpdateBreakPending' call
    var tmp0_safe_receiver = jsNativeData(this).c4o_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.h10(false);
    }
  };
  protoOf(Engine).m48 = function () {
    return this.j39_1.x1() === true;
  };
  protoOf(Engine).l4n = function (module_0) {
    var tmp0 = this.v38_1;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp;
      if (isInterface(tmp0, Collection)) {
        tmp = tmp0.o();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var _iterator__ex2g4s = tmp0.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        if (element.p2() === module_0.p2()) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    if (tmp$ret$0) {
      // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.e' call
      var tmp0_0 = KapLogger_getInstance();
      // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.logWithLevel' call
      var msgLevel = Level_ERROR_getInstance();
      if (msgLevel.qz_1 < tmp0_0.lz_1.qz_1) {
        var tmp$ret$2 = 'Attempted to add module that was already registered: ' + module_0.p2();
        tmp0_0.nz(msgLevel, tmp$ret$2);
      }
    } else {
      try {
        module_0.u4g(this);
        this.v38_1.h(module_0);
      } catch ($p) {
        if ($p instanceof ModuleInitSkipped) {
          var e = $p;
          // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.i' call
          var tmp0_1 = KapLogger_getInstance();
          // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.logWithLevelAndThrowable' call
          var msgLevel_0 = Level_INFO_getInstance();
          if (msgLevel_0.qz_1 <= tmp0_1.lz_1.qz_1) {
            var tmp$ret$5 = 'Skipped initialisation of module: ' + getKClassFromExpression(module_0).b9();
            tmp0_1.mz(msgLevel_0, tmp$ret$5, e);
          }
        } else {
          if ($p instanceof ModuleInitFailedException) {
            var e_0 = $p;
            // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.e' call
            var tmp0_2 = KapLogger_getInstance();
            // Inline function 'com.dhsdevelopments.kap.log.SimpleLogger.logWithLevelAndThrowable' call
            var msgLevel_1 = Level_ERROR_getInstance();
            if (msgLevel_1.qz_1 <= tmp0_2.lz_1.qz_1) {
              var tmp$ret$8 = 'Failed to initialise module: ' + getKClassFromExpression(module_0).b9();
              tmp0_2.mz(msgLevel_1, tmp$ret$8, e_0);
            }
          } else {
            if ($p instanceof Exception) {
              var e_1 = $p;
              this.h1l();
              throw e_1;
            } else {
              throw $p;
            }
          }
        }
      }
    }
  };
  protoOf(Engine).g4o = function (path) {
    var fixedPath = Companion_instance_29.h4o(path);
    if (!this.u38_1.s1(fixedPath)) {
      this.u38_1.h(fixedPath);
    }
  };
  protoOf(Engine).i4o = function (requestedFile) {
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(requestedFile) === 0) {
      return null;
    }
    if (Companion_instance_29.j4o(requestedFile)) {
      return null;
    }
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this.u38_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var name = element + '/' + requestedFile;
      if (fileExists(name)) {
        return name;
      }
    }
    return null;
  };
  protoOf(Engine).v4g = function (name, fn) {
    // Inline function 'kotlin.collections.set' call
    this.n38_1.j2(name, fn);
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this.p38_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      element.k4o(name, fn);
    }
  };
  protoOf(Engine).m4n = function (name, fn) {
    // Inline function 'kotlin.collections.set' call
    this.o38_1.j2(name, fn);
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this.p38_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      element.l4o(name, fn);
    }
  };
  protoOf(Engine).m4o = function (name) {
    return this.n38_1.a2(resolveAlias(this, name));
  };
  protoOf(Engine).n4o = function (name) {
    return this.o38_1.a2(resolveAlias(this, name));
  };
  protoOf(Engine).o4o = function (name) {
    return new Symbol(name == null ? '<anonymous>' : '<anonymous: ' + name + '>', Companion_getInstance_41().m2j_1);
  };
  protoOf(Engine).p4o = function (name, $super) {
    name = name === VOID ? null : name;
    return $super === VOID ? this.o4o(name) : $super.o4o.call(this, name);
  };
  protoOf(Engine).q4o = function (source, extraBindings, collapseResult) {
    return this.r4o(source, extraBindings, Engine$parseAndEval$lambda(collapseResult));
  };
  protoOf(Engine).f3j = function (source, extraBindings, collapseResult, $super) {
    extraBindings = extraBindings === VOID ? null : extraBindings;
    collapseResult = collapseResult === VOID ? true : collapseResult;
    return $super === VOID ? this.q4o(source, extraBindings, collapseResult) : $super.q4o.call(this, source, extraBindings, collapseResult);
  };
  protoOf(Engine).r4o = function (source, extraBindings, postProcess) {
    var ts = Monotonic_instance;
    var startTime = ts.sc();
    var tmp0 = new TokenGenerator(this, source);
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.use' call
      try {
        var parser = new APLParser(tmp0);
        var tmp;
        if (extraBindings == null) {
          var instr = parser.t4o(EndOfFile_getInstance());
          escapeAnalysis(this.b39_1);
          // Inline function 'com.dhsdevelopments.kap.Engine.withThreadLocalAssigned' call
          // Inline function 'kotlin.require' call
          // Inline function 'kotlin.require' call
          if (!(currentStorageStackOrNull() == null)) {
            var message = 'Failed requirement.';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
          var newStack = StorageStack_init_$Create$(this.c39_1);
          return withThreadLocalStorageStackAssigned(newStack, Engine$parseAndEvalWithPostProcessing$lambda(this, instr, ts, postProcess, startTime));
        } else {
          var instr_0;
          var bindingsWithValues;
          var updatedEnv;
          $l$block: {
            // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
            var env = parser.z4k(null, false, false);
            try {
              // Inline function 'kotlin.collections.map' call
              // Inline function 'kotlin.collections.mapTo' call
              var destination = ArrayList_init_$Create$_0(extraBindings.n());
              // Inline function 'kotlin.collections.iterator' call
              var _iterator__ex2g4s = extraBindings.c2().k();
              while (_iterator__ex2g4s.l()) {
                var item = _iterator__ex2g4s.m();
                // Inline function 'kotlin.collections.component1' call
                var sym = item.w1();
                // Inline function 'kotlin.collections.component2' call
                var value = item.x1();
                var tmp$ret$7 = new Pair(env.s4o(sym), value);
                destination.h(tmp$ret$7);
              }
              bindingsWithValues = toMap(destination);
              instr_0 = parser.t4o(EndOfFile_getInstance());
              updatedEnv = env;
              break $l$block;
            }finally {
              parser.b4l();
            }
          }
          escapeAnalysis(this.b39_1);
          // Inline function 'com.dhsdevelopments.kap.Engine.withThreadLocalAssigned' call
          // Inline function 'kotlin.require' call
          // Inline function 'kotlin.require' call
          if (!(currentStorageStackOrNull() == null)) {
            var message_0 = 'Failed requirement.';
            throw IllegalArgumentException_init_$Create$(toString(message_0));
          }
          var newStack_0 = StorageStack_init_$Create$(this.c39_1);
          return withThreadLocalStorageStackAssigned(newStack_0, Engine$parseAndEvalWithPostProcessing$lambda_0(this, updatedEnv, instr_0, bindingsWithValues, ts, postProcess, startTime));
        }
      }finally {
        tmp0.h1l();
      }
    }
  };
  protoOf(Engine).y4e = function (name, namespace, exported) {
    var ns = namespace == null ? this.g39_1 : namespace;
    return exported ? ns.e3k(name) : ns.l4f(name);
  };
  protoOf(Engine).s39 = function (name, namespace, exported, $super) {
    namespace = namespace === VOID ? null : namespace;
    exported = exported === VOID ? false : exported;
    return $super === VOID ? this.y4e(name, namespace, exported) : $super.y4e.call(this, name, namespace, exported);
  };
  protoOf(Engine).u4o = function (name, overrideDefaultImport) {
    return this.r38_1.u4o(name, overrideDefaultImport);
  };
  protoOf(Engine).x4e = function (name, overrideDefaultImport, $super) {
    overrideDefaultImport = overrideDefaultImport === VOID ? false : overrideDefaultImport;
    return $super === VOID ? this.u4o(name, overrideDefaultImport) : $super.u4o.call(this, name, overrideDefaultImport);
  };
  protoOf(Engine).v4o = function (name) {
    return equals(name.i2j_1, this.i3i().a3k_1);
  };
  protoOf(Engine).w4o = function (customSyntax) {
    var tmp0 = this.t38_1;
    // Inline function 'kotlin.collections.set' call
    var key = customSyntax.x4o_1;
    tmp0.j2(key, customSyntax);
  };
  protoOf(Engine).c4p = function (name) {
    return this.t38_1.a2(name);
  };
  protoOf(Engine).d4p = function (customSyntax) {
    var tmp0 = this.s38_1;
    // Inline function 'kotlin.collections.set' call
    var key = customSyntax.x4o_1;
    tmp0.j2(key, customSyntax);
  };
  protoOf(Engine).e4p = function (name) {
    return this.s38_1.a2(name);
  };
  protoOf(Engine).n4n = function () {
    if (!(currentStorageStack().r3b_1.n() === 1)) {
      throw IllegalStateException_init_$Create$('Attempt to recompute the root frame without an empty stack');
    }
    var frame = this.c39_1;
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!this.b39_1.v37_1.o()) {
      throw IllegalStateException_init_$Create$('External storage list for the root environment is not empty');
    }
    var oldStorageList = frame.w3b_1;
    var tmp = frame;
    var tmp_0 = 0;
    var tmp_1 = this.b39_1.u37_1.n();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_2 = Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var tmp_4;
      if (tmp_3 < oldStorageList.length) {
        tmp_4 = frame.w3b_1[tmp_3];
      } else {
        tmp_4 = new VariableHolder();
      }
      tmp_2[tmp_3] = tmp_4;
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.w3b_1 = tmp_2;
  };
  protoOf(Engine).f4p = function (name) {
    this.w38_1.h(name);
  };
  protoOf(Engine).x3h = function (file) {
    return resolveDirectoryPath(file, this.p39_1);
  };
  protoOf(Engine).y4f = function (delays, callbacks, pos) {
    var tmp0_elvis_lhs = this.f39_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new APLEvalException('Backend does not support timers', pos));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var handler = tmp;
    return handler.g4p(delays, callbacks);
  };
  protoOf(Engine).h4p = function (name) {
    var tmp0_elvis_lhs = this.i4p(name);
    return tmp0_elvis_lhs == null ? this.g39_1.l4f(name) : tmp0_elvis_lhs;
  };
  protoOf(Engine).i4p = function (name) {
    return this.r38_1.j4p(this.g39_1.a3k_1, name);
  };
  protoOf(Engine).k4p = function (namespaceName) {
    return this.r38_1.l4p(namespaceName);
  };
  function FunctionDefinitionListener() {
  }
  function ClosableHandler() {
  }
  function SystemParameterProvider() {
  }
  function StandardSymbols$platform$delegate$lambda(this$0) {
    return function () {
      return this$0.q4n_1.s39('platform', this$0.q4n_1.r39());
    };
  }
  function StandardSymbols$renderer$delegate$lambda(this$0) {
    return function () {
      return this$0.q4n_1.s39('renderer', this$0.q4n_1.r39());
    };
  }
  function StandardSymbols$methods$delegate$lambda(this$0) {
    return function () {
      return this$0.q4n_1.s39('methods', this$0.q4n_1.r39());
    };
  }
  function StandardSymbols(engine) {
    this.q4n_1 = engine;
    var tmp = this;
    tmp.r4n_1 = lazy(StandardSymbols$platform$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.s4n_1 = lazy(StandardSymbols$renderer$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.t4n_1 = lazy(StandardSymbols$methods$delegate$lambda(this));
  }
  protoOf(StandardSymbols).m4p = function () {
    var tmp0 = this.r4n_1;
    // Inline function 'kotlin.getValue' call
    platform$factory();
    return tmp0.x1();
  };
  protoOf(StandardSymbols).u4n = function () {
    var tmp0 = this.s4n_1;
    // Inline function 'kotlin.getValue' call
    renderer$factory();
    return tmp0.x1();
  };
  protoOf(StandardSymbols).n4p = function () {
    var tmp0 = this.t4n_1;
    // Inline function 'kotlin.getValue' call
    methods$factory();
    return tmp0.x1();
  };
  function CloseAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(CloseAPLFunctionImpl).n2i = function (context, a) {
    var value = a.d2q();
    var tmp0 = context.j38_1;
    // Inline function 'com.dhsdevelopments.kap.Engine.callClosableHandler' call
    var pos = this.t2g_1;
    var tmp0_elvis_lhs = tmp0.h39_1.a2(getKClassFromExpression(value));
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new APLEvalException('Value cannot be closed: ' + value.i2o(FormatStyle_PLAIN_getInstance()), pos));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var handler = tmp;
    (isInterface(handler, ClosableHandler) ? handler : THROW_CCE()).f3m(value);
    return value;
  };
  protoOf(CloseAPLFunctionImpl).z2h = function () {
    return 'close';
  };
  function CloseAPLFunction() {
  }
  protoOf(CloseAPLFunction).i2i = function (instantiation) {
    return new CloseAPLFunctionImpl(instantiation);
  };
  function ChangeWorkingDirectoryCommandHandler() {
    NumArgsCheckedCommandHandler.call(this, 1, 1);
  }
  function assignArgs$checkLength($pos, expectedLength, actualLength) {
    if (!(expectedLength === actualLength)) {
      throwAPLException(new IllegalArgumentNumException(expectedLength, actualLength, $pos));
    }
  }
  function RuntimeContext(engine) {
    this.j38_1 = engine;
    if (this.j38_1.l38_1) {
      throw IllegalStateException_init_$Create$('Attempt to create a runtime context for a syntax checker engine');
    }
  }
  protoOf(RuntimeContext).d3d = function (sym) {
    var b = currentStorageStack().s3b().t3b_1.s4p(sym);
    var tmp;
    if (b == null) {
      tmp = false;
    } else {
      var storage = currentStorageStack().w4m(new StackStorageRef(b));
      tmp = !(storage.d4m() == null);
    }
    return tmp;
  };
  protoOf(RuntimeContext).t4p = function (storageRef, value) {
    var stack = currentStorageStack();
    var holder = stack.w4m(storageRef);
    holder.c4m(value);
  };
  protoOf(RuntimeContext).u4p = function (args, a, pos) {
    var v = a.g2k();
    var tmp;
    if (v instanceof APLList) {
      tmp = !(args.n() === 1);
    } else {
      tmp = false;
    }
    if (tmp) {
      assignArgs$checkLength(pos, args.n(), v.n3h());
      var inductionVariable = 0;
      var last = args.n() - 1 | 0;
      if (inductionVariable <= last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          this.t4p(args.p(i), v.v4p(i));
        }
         while (inductionVariable <= last);
    } else {
      assignArgs$checkLength(pos, args.n(), 1);
      this.t4p(args.p(0), v);
    }
  };
  protoOf(RuntimeContext).w4p = function (args, a, pos, $super) {
    pos = pos === VOID ? null : pos;
    var tmp;
    if ($super === VOID) {
      this.u4p(args, a, pos);
      tmp = Unit_instance;
    } else {
      tmp = $super.u4p.call(this, args, a, pos);
    }
    return tmp;
  };
  function FunctionInstantiation(engine, pos, env) {
    this.c38_1 = engine;
    this.d38_1 = pos;
    this.e38_1 = env;
  }
  function ConstantSymbolSystemParameterProvider(name) {
    this.x4p_1 = name;
  }
  protoOf(ConstantSymbolSystemParameterProvider).m3d = function () {
    return new APLSymbol(this.x4p_1);
  };
  function platform$factory() {
    return getPropertyCallableRef('platform', 1, KProperty1, function (receiver) {
      return receiver.m4p();
    }, null);
  }
  function renderer$factory() {
    return getPropertyCallableRef('renderer', 1, KProperty1, function (receiver) {
      return receiver.u4n();
    }, null);
  }
  function methods$factory() {
    return getPropertyCallableRef('methods', 1, KProperty1, function (receiver) {
      return receiver.n4p();
    }, null);
  }
  function APLFunction$allCapturedEnvironments$lambda($result) {
    return function (fn) {
      $result.q(fn.x2h());
      return Unit_instance;
    };
  }
  function APLFunction(instantiation, fns) {
    fns = fns === VOID ? emptyList() : fns;
    this.s2g_1 = fns;
    this.t2g_1 = instantiation.d38_1;
    this.u2g_1 = instantiation.e38_1;
    this.v2g_1 = instantiation.c38_1;
  }
  protoOf(APLFunction).c2h = function () {
    return new FunctionInstantiation(this.v2g_1, this.t2g_1, this.u2g_1);
  };
  protoOf(APLFunction).d2h = function (context, rightArgs) {
    var rightValue = rightArgs.j31(context);
    return this.w2g(context, rightValue, null);
  };
  protoOf(APLFunction).e2h = function (context, rightArgs) {
    var rightValue = rightArgs.j31(context);
    this.f2h(context, rightValue, null);
  };
  protoOf(APLFunction).w2g = function (context, a, axis) {
    throwAPLException(new Unimplemented1ArgException(this.t2g_1));
  };
  protoOf(APLFunction).f2h = function (context, a, axis) {
    this.w2g(context, a, axis).r2k(true);
  };
  protoOf(APLFunction).g2h = function (context, leftArgs, rightArgs) {
    var rightValue = rightArgs.j31(context);
    var leftValue = leftArgs.j31(context);
    return this.a2h(context, leftValue, rightValue, null);
  };
  protoOf(APLFunction).h2h = function (context, leftArgs, rightArgs) {
    var rightValue = rightArgs.j31(context);
    var leftValue = leftArgs.j31(context);
    this.i2h(context, leftValue, rightValue, null);
  };
  protoOf(APLFunction).a2h = function (context, a, b, axis) {
    throwAPLException(new Unimplemented2ArgException(this.t2g_1));
  };
  protoOf(APLFunction).i2h = function (context, a, b, axis) {
    this.a2h(context, a, b, axis).r2k(true);
  };
  protoOf(APLFunction).j2h = function () {
    throwAPLException(new APLEvalException('Function does not have an identity value', this.t2g_1));
  };
  protoOf(APLFunction).k2h = function () {
    return null;
  };
  protoOf(APLFunction).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(0);
  };
  protoOf(APLFunction).m2h = function (context, a, axis) {
    throw IllegalStateException_init_$Create$('Illegal call to specialised function: ' + getKClassFromExpression(this).b9());
  };
  protoOf(APLFunction).n2h = function (context, a, axis) {
    throw IllegalStateException_init_$Create$('Illegal call to specialised function: ' + getKClassFromExpression(this).b9());
  };
  protoOf(APLFunction).o2h = function (context, a, b, axis) {
    throw IllegalStateException_init_$Create$('Illegal call to specialised function: ' + getKClassFromExpression(this).b9());
  };
  protoOf(APLFunction).p2h = function (context, a, b, axis) {
    throw IllegalStateException_init_$Create$('Illegal call to specialised function: ' + getKClassFromExpression(this).b9());
  };
  protoOf(APLFunction).q2h = function (context, a, axis) {
    throwAPLException(new InverseNotAvailable(this.t2g_1));
  };
  protoOf(APLFunction).r2h = function (context, a, b, axis) {
    throwAPLException(new InverseNotAvailable(this.t2g_1));
  };
  protoOf(APLFunction).s2h = function (context, a, b, axis) {
    throwAPLException(new InverseNotAvailable(this.t2g_1));
  };
  protoOf(APLFunction).t2h = function (parser) {
    var tmp;
    if (this.s2g_1.o()) {
      tmp = new Pair(this, emptyList());
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this.s2g_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.k();
      while (_iterator__ex2g4s.l()) {
        var item = _iterator__ex2g4s.m();
        var tmp$ret$0 = item.t2h(parser);
        destination.h(tmp$ret$0);
      }
      var closureList = destination;
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination_0 = ArrayList_init_$Create$();
      var _iterator__ex2g4s_0 = closureList.k();
      while (_iterator__ex2g4s_0.l()) {
        var element = _iterator__ex2g4s_0.m();
        var list = element.ce_1;
        addAll(destination_0, list);
      }
      var instrs = destination_0;
      var tmp_0;
      if (instrs.o()) {
        tmp_0 = new Pair(this, emptyList());
      } else {
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_1 = ArrayList_init_$Create$_0(collectionSizeOrDefault(closureList, 10));
        var _iterator__ex2g4s_1 = closureList.k();
        while (_iterator__ex2g4s_1.l()) {
          var item_0 = _iterator__ex2g4s_1.m();
          var tmp$ret$6 = item_0.be_1;
          destination_1.h(tmp$ret$6);
        }
        var newFn = this.u2h(destination_1);
        tmp_0 = new Pair(newFn, instrs);
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(APLFunction).u2h = function (fns) {
    throw new NotImplementedError('copy function must be implemented. class = ' + getKClassFromExpression(this).b9());
  };
  protoOf(APLFunction).v2h = function (baseFn, context, a, axis) {
    throwAPLException(new StructuralUnderNotSupported(this.t2g_1));
  };
  protoOf(APLFunction).w2h = function (baseFn, context, a, b, axis) {
    throwAPLException(new StructuralUnderNotSupported(this.t2g_1));
  };
  protoOf(APLFunction).x2h = function () {
    return emptyList();
  };
  protoOf(APLFunction).y2h = function () {
    var result = ArrayList_init_$Create$();
    iterateFunctionTree(this, APLFunction$allCapturedEnvironments$lambda(result));
    return result;
  };
  protoOf(APLFunction).z2h = function () {
    var tmp0_elvis_lhs = getKClassFromExpression(this).b9();
    return tmp0_elvis_lhs == null ? 'unnamed' : tmp0_elvis_lhs;
  };
  protoOf(APLFunction).a2i = function () {
    var tmp0_elvis_lhs = getKClassFromExpression(this).b9();
    return tmp0_elvis_lhs == null ? 'unnamed' : tmp0_elvis_lhs;
  };
  protoOf(APLFunction).b2i = function () {
    return 'inverse [' + this.z2h() + ']';
  };
  protoOf(APLFunction).c2i = function () {
    return 'inverse [' + this.a2i() + ']';
  };
  protoOf(APLFunction).k2m = function (underFn, baseFn, context, a, axis) {
    var v = underFn.w2g(context, a, axis);
    var baseRes = baseFn.w2g(context, v, null);
    return underFn.q2h(context, baseRes, axis);
  };
  protoOf(APLFunction).l2m = function (underFn, baseFn, context, a, b, axis) {
    var v = underFn.a2h(context, a, b, axis);
    var baseRes = baseFn.w2g(context, v, null);
    return underFn.r2h(context, a, baseRes, axis);
  };
  protoOf(APLFunction).d2i = function (context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis) {
    return defaultReduceLongToLong(this, context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis);
  };
  protoOf(APLFunction).e2i = function (context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis) {
    return defaultReduceDoubleToDouble(this, context, arg, offset, sizeAlongAxis, stepLength, pos, savedStack, functionAxis);
  };
  protoOf(APLFunction).f2i = function (context, arg, sizeAlongAxis, stepLength, offset, savedStack, functionAxis) {
    return defaultReduceGeneric(this, context, arg, offset, sizeAlongAxis, stepLength, this.t2g_1, savedStack, functionAxis);
  };
  protoOf(APLFunction).z2g = function (context, a, axis, callback) {
    throwAPLException(new AsyncNotSupported(this.z2h(), this.t2g_1));
  };
  protoOf(APLFunction).b2h = function (context, a, b, axis, callback) {
    throwAPLException(new AsyncNotSupported(this.a2i(), this.t2g_1));
  };
  function NoAxisAPLFunction(pos, fns) {
    fns = fns === VOID ? emptyList() : fns;
    APLFunction.call(this, pos, fns);
  }
  protoOf(NoAxisAPLFunction).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    return this.n2i(context, a);
  };
  protoOf(NoAxisAPLFunction).n2i = function (context, a) {
    throwAPLException(new Unimplemented1ArgException(this.t2g_1));
  };
  protoOf(NoAxisAPLFunction).a2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    return this.t2i(context, a, b);
  };
  protoOf(NoAxisAPLFunction).t2i = function (context, a, b) {
    throwAPLException(new Unimplemented2ArgException(this.t2g_1));
  };
  protoOf(NoAxisAPLFunction).q2h = function (context, a, axis) {
    ensureAxisNull(this, axis);
    return this.a2j(context, a);
  };
  protoOf(NoAxisAPLFunction).a2j = function (context, a) {
    throwAPLException(new InverseNotAvailable(this.t2g_1));
  };
  protoOf(NoAxisAPLFunction).r2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    return this.b2j(context, a, b);
  };
  protoOf(NoAxisAPLFunction).c2j = function (context, a, b) {
    throwAPLException(new InverseNotAvailable(this.t2g_1));
  };
  protoOf(NoAxisAPLFunction).s2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    return this.c2j(context, a, b);
  };
  protoOf(NoAxisAPLFunction).b2j = function (context, a, b) {
    throwAPLException(new InverseNotAvailable(this.t2g_1));
  };
  protoOf(NoAxisAPLFunction).d2j = function (baseFn, context, a) {
    throwAPLException(new StructuralUnderNotSupported(this.t2g_1));
  };
  protoOf(NoAxisAPLFunction).v2h = function (baseFn, context, a, axis) {
    ensureAxisNull(this, axis);
    return this.d2j(baseFn, context, a);
  };
  protoOf(NoAxisAPLFunction).e2j = function (baseFn, context, a, b) {
    throwAPLException(new StructuralUnderNotSupported(this.t2g_1));
  };
  protoOf(NoAxisAPLFunction).w2h = function (baseFn, context, a, b, axis) {
    ensureAxisNull(this, axis);
    return this.e2j(baseFn, context, a, b);
  };
  function _OptimisationFlags___init__impl__uhe3e(flags) {
    return flags;
  }
  function _OptimisationFlags___get_flags__impl__rfsbyc($this) {
    return $this;
  }
  function _OptimisationFlags___get_is1ALong__impl__5sl2il($this) {
    return !((_OptimisationFlags___get_flags__impl__rfsbyc($this) & 1) === 0);
  }
  function _OptimisationFlags___get_is1ADouble__impl__kg3og8($this) {
    return !((_OptimisationFlags___get_flags__impl__rfsbyc($this) & 2) === 0);
  }
  function _OptimisationFlags___get_is2ALongLong__impl__oapfj6($this) {
    return !((_OptimisationFlags___get_flags__impl__rfsbyc($this) & 4) === 0);
  }
  function _OptimisationFlags___get_is2ADoubleDouble__impl__dvcim0($this) {
    return !((_OptimisationFlags___get_flags__impl__rfsbyc($this) & 8) === 0);
  }
  function _OptimisationFlags___get_isFloatConversionRules__impl__ydk03g($this) {
    return !((_OptimisationFlags___get_flags__impl__rfsbyc($this) & 16) === 0);
  }
  function _OptimisationFlags___get_is2ADFloatConversionRules__impl__xlul5x($this) {
    return (_OptimisationFlags___get_flags__impl__rfsbyc($this) & 24) === 24;
  }
  function flagsString($this) {
    var flagMap = listOf([to(1, '1ALong'), to(2, '1ADouble'), to(4, '2ALongLong'), to(8, '2ADoubleDouble'), to(16, 'floatConversionRules')]);
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$();
    var _iterator__ex2g4s = flagMap.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var value = element.de();
      if (!((_OptimisationFlags___get_flags__impl__rfsbyc($this) & value) === 0)) {
        destination.h(element);
      }
    }
    var tmp = destination;
    var flagsString = joinToString_0(tmp, ', ', VOID, VOID, VOID, VOID, OptimisationFlags$flagsString$lambda);
    return 'OptimisationFlags(flags=0x' + toString_0(_OptimisationFlags___get_flags__impl__rfsbyc($this), 16) + ', values: ' + flagsString + ')';
  }
  function OptimisationFlags__andWith_impl_fnzthf($this, other) {
    return _OptimisationFlags___init__impl__uhe3e(_OptimisationFlags___get_flags__impl__rfsbyc($this) & _OptimisationFlags___get_flags__impl__rfsbyc(other));
  }
  function OptimisationFlags__orWith_impl_sum7ht($this, other) {
    return _OptimisationFlags___init__impl__uhe3e(_OptimisationFlags___get_flags__impl__rfsbyc($this) | _OptimisationFlags___get_flags__impl__rfsbyc(other));
  }
  function _OptimisationFlags___get_masked1Arg__impl__ue95q5($this) {
    return _OptimisationFlags___init__impl__uhe3e(_OptimisationFlags___get_flags__impl__rfsbyc($this) & 3);
  }
  function _OptimisationFlags___get_masked2Arg__impl__awzzpg($this) {
    return _OptimisationFlags___init__impl__uhe3e(_OptimisationFlags___get_flags__impl__rfsbyc($this) & 28);
  }
  function OptimisationFlags__toString_impl_k26zv6($this) {
    return flagsString($this);
  }
  function Companion_21() {
    this.y4p_1 = 1;
    this.z4p_1 = 2;
    this.a4q_1 = 4;
    this.b4q_1 = 8;
    this.c4q_1 = 16;
    this.d4q_1 = 3;
    this.e4q_1 = 28;
  }
  var Companion_instance_23;
  function Companion_getInstance_23() {
    return Companion_instance_23;
  }
  function OptimisationFlags__hashCode_impl_t7r5b3($this) {
    return $this;
  }
  function OptimisationFlags__equals_impl_d4n1rv($this, other) {
    if (!(other instanceof OptimisationFlags))
      return false;
    if (!($this === (other instanceof OptimisationFlags ? other.v31_1 : THROW_CCE())))
      return false;
    return true;
  }
  function OptimisationFlags$flagsString$lambda(it) {
    return it.ce_1;
  }
  function OptimisationFlags(flags) {
    this.v31_1 = flags;
  }
  protoOf(OptimisationFlags).toString = function () {
    return OptimisationFlags__toString_impl_k26zv6(this.v31_1);
  };
  protoOf(OptimisationFlags).hashCode = function () {
    return OptimisationFlags__hashCode_impl_t7r5b3(this.v31_1);
  };
  protoOf(OptimisationFlags).equals = function (other) {
    return OptimisationFlags__equals_impl_d4n1rv(this.v31_1, other);
  };
  function iterateFunctionTree(_this__u8e3s4, fn) {
    fn(_this__u8e3s4);
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = _this__u8e3s4.s2g_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      iterateFunctionTree(element, fn);
    }
  }
  function ensureAxisNull(_this__u8e3s4, axis) {
    if (!(axis == null)) {
      throwAPLException(new AxisNotSupported(_this__u8e3s4.t2g_1));
    }
  }
  function _get_underlying__fkgnjm($this) {
    return $this.s2g_1.p(0);
  }
  function LeftAssignedFunction(underlying, leftArgs, pos, leftArgBindEnv) {
    leftArgBindEnv = leftArgBindEnv === VOID ? null : leftArgBindEnv;
    APLFunction.call(this, pos, listOf_0(underlying));
    this.j4q_1 = leftArgs;
    this.k4q_1 = leftArgBindEnv;
  }
  protoOf(LeftAssignedFunction).w2g = function (context, a, axis) {
    var leftArg = this.j4q_1.j31(context);
    return _get_underlying__fkgnjm(this).a2h(context, leftArg, a, axis);
  };
  protoOf(LeftAssignedFunction).a2h = function (context, a, b, axis) {
    throwAPLException(new LeftAssigned2ArgException(this.t2g_1));
  };
  protoOf(LeftAssignedFunction).q2h = function (context, a, axis) {
    var leftArg = this.j4q_1.j31(context);
    return _get_underlying__fkgnjm(this).r2h(context, leftArg, a, axis);
  };
  protoOf(LeftAssignedFunction).r2h = function (context, a, b, axis) {
    throwAPLException(new LeftAssigned2ArgException(this.t2g_1));
  };
  protoOf(LeftAssignedFunction).s2h = function (context, a, b, axis) {
    throwAPLException(new LeftAssigned2ArgException(this.t2g_1));
  };
  protoOf(LeftAssignedFunction).v2h = function (baseFn, context, a, axis) {
    var leftArg = this.j4q_1.j31(context);
    return _get_underlying__fkgnjm(this).w2h(baseFn, context, leftArg, a, axis);
  };
  protoOf(LeftAssignedFunction).w2h = function (baseFn, context, a, b, axis) {
    throwAPLException(new LeftAssigned2ArgException(this.t2g_1));
  };
  protoOf(LeftAssignedFunction).x2h = function () {
    return this.k4q_1 == null ? emptyList() : listOf_0(this.k4q_1);
  };
  protoOf(LeftAssignedFunction).t2h = function (parser) {
    var sym = parser.u4k_1.l4q_1.o4o('leftAssignedFunction');
    var binding = parser.e4l().s4o(sym);
    var _destruct__k2r9zo = _get_underlying__fkgnjm(this).t2h(parser);
    var innerFn = _destruct__k2r9zo.de();
    var relatedInstrs = _destruct__k2r9zo.ee();
    var ref = new StackStorageRef(binding);
    var list = mutableListOf([Companion_instance_28.q4q(ref, this.j4q_1, this.t2g_1)]);
    list.q(relatedInstrs);
    var env = parser.e4l();
    return new Pair(new LeftAssignedFunction(innerFn, new VariableRef(sym, ref, this.t2g_1), new FunctionInstantiation(parser.u4k_1.l4q_1, this.t2g_1, env), env), list);
  };
  protoOf(LeftAssignedFunction).z2h = function () {
    return _get_underlying__fkgnjm(this).a2i();
  };
  function DelegatedAPLFunctionImpl(pos, fns) {
    fns = fns === VOID ? emptyList() : fns;
    APLFunction.call(this, pos, fns);
    this.v4q_1 = this.x4q().z2h();
    this.w4q_1 = this.x4q().a2i();
  }
  protoOf(DelegatedAPLFunctionImpl).d2h = function (context, rightArgs) {
    return this.x4q().d2h(context, rightArgs);
  };
  protoOf(DelegatedAPLFunctionImpl).g2h = function (context, leftArgs, rightArgs) {
    return this.x4q().g2h(context, leftArgs, rightArgs);
  };
  protoOf(DelegatedAPLFunctionImpl).w2g = function (context, a, axis) {
    return this.x4q().w2g(context, a, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).a2h = function (context, a, b, axis) {
    return this.x4q().a2h(context, a, b, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).j2h = function () {
    return this.x4q().j2h();
  };
  protoOf(DelegatedAPLFunctionImpl).k2h = function () {
    return this.x4q().k2h();
  };
  protoOf(DelegatedAPLFunctionImpl).l2h = function () {
    return this.x4q().l2h();
  };
  protoOf(DelegatedAPLFunctionImpl).m2h = function (context, a, axis) {
    return this.x4q().m2h(context, a, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).n2h = function (context, a, axis) {
    return this.x4q().n2h(context, a, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).o2h = function (context, a, b, axis) {
    return this.x4q().o2h(context, a, b, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).p2h = function (context, a, b, axis) {
    return this.x4q().p2h(context, a, b, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).q2h = function (context, a, axis) {
    return this.x4q().q2h(context, a, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).v2h = function (baseFn, context, a, axis) {
    return this.x4q().v2h(baseFn, context, a, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).r2h = function (context, a, b, axis) {
    return this.x4q().r2h(context, a, b, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).s2h = function (context, a, b, axis) {
    return this.x4q().s2h(context, a, b, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    return this.x4q().w2h(baseFn, context, a, b, axis);
  };
  protoOf(DelegatedAPLFunctionImpl).t2h = function (parser) {
    return this.x4q().t2h(parser);
  };
  protoOf(DelegatedAPLFunctionImpl).x2h = function () {
    return this.x4q().x2h();
  };
  protoOf(DelegatedAPLFunctionImpl).f2i = function (context, arg, sizeAlongAxis, stepLength, offset, savedStack, functionAxis) {
    return this.x4q().f2i(context, arg, sizeAlongAxis, stepLength, offset, savedStack, functionAxis);
  };
  protoOf(DelegatedAPLFunctionImpl).z2h = function () {
    return this.v4q_1;
  };
  protoOf(DelegatedAPLFunctionImpl).a2i = function () {
    return this.w4q_1;
  };
  function DeclaredFunctionImpl($outer, pos) {
    this.g4r_1 = $outer;
    APLFunction.call(this, pos);
    this.c4r_1 = new StackStorageRef(this.g4r_1.j4r_1);
    this.d4r_1 = new StackStorageRef(this.g4r_1.k4r_1);
    this.e4r_1 = 'declaredFunction1arg(' + this.g4r_1.h4r_1 + ')';
    this.f4r_1 = 'declaredFunction2arg(' + this.g4r_1.h4r_1 + ')';
  }
  protoOf(DeclaredFunctionImpl).w2g = function (context, a, axis) {
    var tmp0 = this.g4r_1.l4r_1;
    var tmp1 = this.e4r_1;
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.t2g_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame);
    var result;
    try {
      context.t4p(this.d4r_1, a);
      result = this.g4r_1.i4r_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame.i4m();
    }
    return result;
  };
  protoOf(DeclaredFunctionImpl).a2h = function (context, a, b, axis) {
    var tmp0 = this.g4r_1.l4r_1;
    var tmp1 = this.f4r_1;
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.t2g_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame);
    var result;
    try {
      context.t4p(this.c4r_1, a);
      context.t4p(this.d4r_1, b);
      result = this.g4r_1.i4r_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame.i4m();
    }
    return result;
  };
  protoOf(DeclaredFunctionImpl).x2h = function () {
    return listOf_0(this.g4r_1.l4r_1);
  };
  protoOf(DeclaredFunctionImpl).z2h = function () {
    return this.g4r_1.h4r_1;
  };
  protoOf(DeclaredFunctionImpl).a2i = function () {
    return this.g4r_1.h4r_1;
  };
  function DeclaredFunction(name, instruction, leftArgName, rightArgName, env) {
    this.h4r_1 = name;
    this.i4r_1 = instruction;
    this.j4r_1 = leftArgName;
    this.k4r_1 = rightArgName;
    this.l4r_1 = env;
  }
  protoOf(DeclaredFunction).i2i = function (instantiation) {
    return new DeclaredFunctionImpl(this, instantiation);
  };
  function DeclaredNonBoundFunctionImpl($outer, pos) {
    this.q4r_1 = $outer;
    APLFunction.call(this, pos);
  }
  protoOf(DeclaredNonBoundFunctionImpl).w2g = function (context, a, axis) {
    return this.q4r_1.r4r_1.j31(context);
  };
  protoOf(DeclaredNonBoundFunctionImpl).a2h = function (context, a, b, axis) {
    return this.q4r_1.r4r_1.j31(context);
  };
  function DeclaredNonBoundFunction(instruction) {
    this.r4r_1 = instruction;
  }
  protoOf(DeclaredNonBoundFunction).i2i = function (instantiation) {
    return new DeclaredNonBoundFunctionImpl(this, instantiation);
  };
  function _get_baseFn__wal3g2($this) {
    return $this.s2g_1.p(0);
  }
  function AxisValAssignedFunctionDirect(baseFn, axis, axisBindEnv) {
    axisBindEnv = axisBindEnv === VOID ? null : axisBindEnv;
    NoAxisAPLFunction.call(this, baseFn.c2h(), listOf_0(baseFn));
    this.w4r_1 = axis;
    this.x4r_1 = axisBindEnv;
  }
  protoOf(AxisValAssignedFunctionDirect).d2h = function (context, rightArgs) {
    var rightValue = rightArgs.j31(context);
    var axisValue = this.w4r_1.j31(context);
    return _get_baseFn__wal3g2(this).w2g(context, rightValue, axisValue);
  };
  protoOf(AxisValAssignedFunctionDirect).g2h = function (context, leftArgs, rightArgs) {
    var rightValue = rightArgs.j31(context);
    var axisValue = this.w4r_1.j31(context);
    var leftValue = leftArgs.j31(context);
    return _get_baseFn__wal3g2(this).a2h(context, leftValue, rightValue, axisValue);
  };
  protoOf(AxisValAssignedFunctionDirect).n2i = function (context, a) {
    return _get_baseFn__wal3g2(this).w2g(context, a, this.w4r_1.j31(context));
  };
  protoOf(AxisValAssignedFunctionDirect).t2i = function (context, a, b) {
    return _get_baseFn__wal3g2(this).a2h(context, a, b, this.w4r_1.j31(context));
  };
  protoOf(AxisValAssignedFunctionDirect).a2j = function (context, a) {
    return _get_baseFn__wal3g2(this).q2h(context, a, this.w4r_1.j31(context));
  };
  protoOf(AxisValAssignedFunctionDirect).c2j = function (context, a, b) {
    return _get_baseFn__wal3g2(this).s2h(context, a, b, this.w4r_1.j31(context));
  };
  protoOf(AxisValAssignedFunctionDirect).b2j = function (context, a, b) {
    return _get_baseFn__wal3g2(this).r2h(context, a, b, this.w4r_1.j31(context));
  };
  protoOf(AxisValAssignedFunctionDirect).d2j = function (processingFN, context, a) {
    return _get_baseFn__wal3g2(this).v2h(processingFN, context, a, this.w4r_1.j31(context));
  };
  protoOf(AxisValAssignedFunctionDirect).e2j = function (processingFn, context, a, b) {
    return _get_baseFn__wal3g2(this).w2h(processingFn, context, a, b, this.w4r_1.j31(context));
  };
  protoOf(AxisValAssignedFunctionDirect).x2h = function () {
    return this.x4r_1 == null ? emptyList() : listOf_0(this.x4r_1);
  };
  protoOf(AxisValAssignedFunctionDirect).t2h = function (parser) {
    var sym = parser.u4k_1.l4q_1.o4o('axisFn');
    var binding = parser.e4l().s4o(sym);
    var _destruct__k2r9zo = _get_baseFn__wal3g2(this).t2h(parser);
    var innerFn = _destruct__k2r9zo.de();
    var relatedInstrs = _destruct__k2r9zo.ee();
    var ref = new StackStorageRef(binding);
    var list = ArrayList_init_$Create$();
    list.q(relatedInstrs);
    list.h(Companion_instance_28.q4q(ref, this.w4r_1, this.t2g_1));
    var env = parser.e4l();
    return new Pair(new AxisValAssignedFunctionDirect(innerFn, new VariableRef(sym, ref, this.t2g_1), env), list);
  };
  protoOf(AxisValAssignedFunctionDirect).z2h = function () {
    return _get_baseFn__wal3g2(this).z2h();
  };
  protoOf(AxisValAssignedFunctionDirect).a2i = function () {
    return _get_baseFn__wal3g2(this).a2i();
  };
  function MultiArgumentAPLFunction(minArgs, maxArgs, pos, fns) {
    fns = fns === VOID ? emptyList() : fns;
    NoAxisAPLFunction.call(this, pos, fns);
    this.h4j_1 = minArgs;
    this.i4j_1 = maxArgs;
  }
  protoOf(MultiArgumentAPLFunction).n2i = function (context, a) {
    var args = listify(a);
    var nargs = args.n3h();
    if (nargs < this.h4j_1 || (!(this.i4j_1 == null) && nargs > this.i4j_1)) {
      throwAPLException(new APLArgumentCountMismatch(nargs, this.h4j_1, this.i4j_1, this.t2g_1));
    }
    return this.b4j(context, args.e3c_1);
  };
  function computeCapturedEnvs($this, fns) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$();
    var _iterator__ex2g4s = fns.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var list = element.y2h();
      addAll(destination, list);
    }
    var capturedEnvs = destination;
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!capturedEnvs.o()) {
      var tmp = $this;
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp.f3g_1 = !capturedEnvs.o();
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s_0 = capturedEnvs.k();
      while (_iterator__ex2g4s_0.l()) {
        var element_0 = _iterator__ex2g4s_0.m();
        element_0.f4l();
      }
    }
  }
  function SaveStackSupport(fn) {
    this.f3g_1 = false;
    computeCapturedEnvs(this, fn.s2g_1);
    fn.u2g_1.f4l();
  }
  protoOf(SaveStackSupport).g3g = function () {
    return this.f3g_1 ? currentStorageStack().s3b() : null;
  };
  function Companion_22() {
  }
  protoOf(Companion_22).y4r = function (nargs, minArgs, maxArgs) {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    if (maxArgs == null) {
      this_0.i8('Expected at least ');
      this_0.ka(minArgs);
      this_0.i8(' arguments');
    } else if (maxArgs === minArgs) {
      this_0.i8('Expected ');
      this_0.ka(minArgs);
      this_0.i8(' arguments');
    } else {
      this_0.i8('Expected between ');
      this_0.ka(minArgs);
      this_0.i8('-');
      this_0.ka(maxArgs);
      this_0.i8(' arguments');
    }
    this_0.i8(', got: ');
    this_0.ka(nargs);
    return this_0.toString();
  };
  var Companion_instance_24;
  function Companion_getInstance_24() {
    return Companion_instance_24;
  }
  function APLArgumentCountMismatch(nargs, minArgs, maxArgs, pos) {
    pos = pos === VOID ? null : pos;
    APLIllegalArgumentException.call(this, Companion_instance_24.y4r(nargs, minArgs, maxArgs), pos);
    captureStack(this, APLArgumentCountMismatch);
  }
  function get_logF_head() {
    _init_properties_gamma_kt__j0joid();
    return logF_head;
  }
  var logF_head;
  function get_logF_tail() {
    _init_properties_gamma_kt__j0joid();
    return logF_tail;
  }
  var logF_tail;
  function get_complexp0() {
    _init_properties_gamma_kt__j0joid();
    return complexp0;
  }
  var complexp0;
  function get_complexp1() {
    _init_properties_gamma_kt__j0joid();
    return complexp1;
  }
  var complexp1;
  function get_complexp2() {
    _init_properties_gamma_kt__j0joid();
    return complexp2;
  }
  var complexp2;
  function get_complexp3() {
    _init_properties_gamma_kt__j0joid();
    return complexp3;
  }
  var complexp3;
  function get_complexp4() {
    _init_properties_gamma_kt__j0joid();
    return complexp4;
  }
  var complexp4;
  function get_complexp5() {
    _init_properties_gamma_kt__j0joid();
    return complexp5;
  }
  var complexp5;
  function get_complexp6() {
    _init_properties_gamma_kt__j0joid();
    return complexp6;
  }
  var complexp6;
  function get_factorials() {
    _init_properties_gamma_kt__j0joid();
    return factorials;
  }
  var factorials;
  function get_biggestBinomials() {
    _init_properties_gamma_kt__j0joid();
    return biggestBinomials;
  }
  var biggestBinomials;
  function get_biggestSimpleBinomials() {
    _init_properties_gamma_kt__j0joid();
    return biggestSimpleBinomials;
  }
  var biggestSimpleBinomials;
  function doubleGamma(x) {
    _init_properties_gamma_kt__j0joid();
    var tmp;
    if (x >= 6) {
      var tmp_0;
      if (x > 171.63) {
        tmp_0 = Infinity;
      } else {
        var u = largeGamma(x);
        tmp_0 = expD(u.z4r_1, u.a4s_1);
      }
      tmp = tmp_0;
    } else if (x >= 1.0 + -0.3955078125 + 0.46163214496836236) {
      tmp = smallGamma(x);
    } else if (x > 1.0E-17) {
      tmp = smallerGamma(x);
    } else if (x > -1.0E-17) {
      tmp = 1.0 / x;
    } else if (!isFinite(x)) {
      tmp = x - x;
    } else {
      tmp = negGamma(x);
    }
    return tmp;
  }
  function complexGamma(a) {
    _init_properties_gamma_kt__j0joid();
    var x = a.a3o_1;
    var y = a.b3o_1;
    if (a.a3o_1 < 0.5) {
      return Companion_getInstance_30().l3p_1.e3p(ComplexFieldExtension_instance.k3t(Companion_getInstance_30().l3p_1.u3o(a)).u3o(complexGamma(new Complex(1.0 - x, -y))));
    }
    var z1 = new Complex(x + 5.5, y);
    var z2 = new Complex(x + 0.5, y);
    var tmp0 = 2 * 3.141592653589793;
    // Inline function 'kotlin.math.pow' call
    var x_0 = 1.0 / 2.0;
    var tmp$ret$0 = Math.pow(tmp0, x_0);
    var res = toComplex(tmp$ret$0).e3p(a).u3o(get_complexp0().e3o(get_complexp1().e3p(new Complex(x + 1.0, y))).e3o(get_complexp2().e3p(new Complex(x + 2.0, y))).e3o(get_complexp3().e3p(new Complex(x + 3.0, y))).e3o(get_complexp4().e3p(new Complex(x + 4.0, y))).e3o(get_complexp5().e3p(new Complex(x + 5.0, y))).e3o(get_complexp6().e3p(new Complex(x + 6.0, y)))).u3o(z1.q3p(z2)).u3o(Companion_getInstance_30().k3p_1.q3p(z1.d3()));
    return res;
  }
  function longBinomial(n, k) {
    _init_properties_gamma_kt__j0joid();
    var n0 = n;
    var k0 = k;
    if (n < 0) {
      throw IllegalArgumentException_init_$Create$('n is negative');
    }
    if (k < 0) {
      throw IllegalArgumentException_init_$Create$('k is negative');
    }
    if (k > n) {
      throw IllegalArgumentException_init_$Create$('n must be less than or equal to k');
    }
    if (k0 > n0 >> 1) {
      k0 = n0 - k0 | 0;
    }
    var tmp;
    switch (k0) {
      case 0:
        tmp = new Long(1, 0);
        break;
      case 1:
        tmp = toLong_0(n0);
        break;
      default:
        var tmp_0;
        if (n0 < get_factorials().length) {
          tmp_0 = get_factorials()[n0].z2(get_factorials()[k0].y2(get_factorials()[n0 - k0 | 0]));
        } else if (k0 >= get_biggestBinomials().length || n0 > get_biggestBinomials()[k0]) {
          tmp_0 = new Long(-1, 2147483647);
        } else if (k0 < get_biggestSimpleBinomials().length && n0 <= get_biggestSimpleBinomials()[k0]) {
          var _unary__edvuaz = n0;
          n0 = _unary__edvuaz - 1 | 0;
          var result = toLong_0(_unary__edvuaz);
          var i = 2;
          while (i <= k0) {
            result = result.y2(toLong_0(n0));
            result = result.z2(toLong_0(i));
            n0 = n0 - 1 | 0;
            i = i + 1 | 0;
          }
          tmp_0 = result;
        } else {
          var nBits = log2Rounding(toLong_0(n0), RoundingMode_CEILING_getInstance());
          var result_0 = new Long(1, 0);
          var _unary__edvuaz_0 = n0;
          n0 = _unary__edvuaz_0 - 1 | 0;
          var numerator = toLong_0(_unary__edvuaz_0);
          var denominator = new Long(1, 0);
          var numeratorBits = nBits;
          var i_0 = 2;
          while (i_0 <= k0) {
            if ((numeratorBits + nBits | 0) < 63) {
              numerator = numerator.y2(toLong_0(n0));
              denominator = denominator.y2(toLong_0(i_0));
              numeratorBits = numeratorBits + nBits | 0;
            } else {
              result_0 = multiplyFraction(result_0, numerator, denominator);
              numerator = toLong_0(n0);
              denominator = toLong_0(i_0);
              numeratorBits = nBits;
            }
            i_0 = i_0 + 1 | 0;
            n0 = n0 - 1 | 0;
          }
          tmp_0 = multiplyFraction(result_0, numerator, denominator);
        }

        tmp = tmp_0;
        break;
    }
    return tmp;
  }
  function complexBinomial(a, b) {
    _init_properties_gamma_kt__j0joid();
    var ra = a.a3o_1;
    var rb = b.a3o_1;
    var rba = rb - ra;
    var ia = a.b3o_1;
    var ib = b.b3o_1;
    var iba = ib - ia;
    var gamma1a = complexGamma(new Complex(ra + 1.0, ia));
    var gamma1b = complexGamma(new Complex(rb + 1.0, ib));
    var gamma1ba = complexGamma(new Complex(rba + 1.0, iba));
    return gamma1b.e3p(gamma1a.u3o(gamma1ba));
  }
  function doubleBinomial(a, b) {
    _init_properties_gamma_kt__j0joid();
    var r1a = 1 + a;
    var r1b = 1 + b;
    var r1ba = r1b - a;
    if (r1a < 0 && doubleBinomial$nearInt(r1a) || (r1b < 0 && doubleBinomial$nearInt(r1b)) || (r1ba < 0 && doubleBinomial$nearInt(r1ba))) {
      doubleBinomial$throwInvalidArgument();
    }
    var gammaR1B = doubleGamma(r1b);
    if (!isFinite(gammaR1B)) {
      doubleBinomial$throwInvalidArgument();
    }
    var gammaR1A = doubleGamma(r1a);
    if (!isFinite(gammaR1A)) {
      doubleBinomial$throwInvalidArgument();
    }
    var gammaR1BA = doubleGamma(r1ba);
    if (!isFinite(gammaR1BA)) {
      doubleBinomial$throwInvalidArgument();
    }
    return gammaR1B / gammaR1A / gammaR1BA;
  }
  function DoubleSet(a, b) {
    this.z4r_1 = a;
    this.a4s_1 = b;
  }
  protoOf(DoubleSet).toString = function () {
    return 'DoubleSet(a=' + this.z4r_1 + ', b=' + this.a4s_1 + ')';
  };
  protoOf(DoubleSet).hashCode = function () {
    var result = getNumberHashCode(this.z4r_1);
    result = imul(result, 31) + getNumberHashCode(this.a4s_1) | 0;
    return result;
  };
  protoOf(DoubleSet).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DoubleSet))
      return false;
    var tmp0_other_with_cast = other instanceof DoubleSet ? other : THROW_CCE();
    if (!equals(this.z4r_1, tmp0_other_with_cast.z4r_1))
      return false;
    if (!equals(this.a4s_1, tmp0_other_with_cast.a4s_1))
      return false;
    return true;
  };
  function largeGamma(xInput) {
    _init_properties_gamma_kt__j0joid();
    var x = xInput;
    var z = 1.0 / (x * x);
    var p = 0.08333333333333331 + z * (-0.0027777777777454812 + z * (7.936507787544356E-4 + z * (-5.952350825666728E-4 + z * (8.414285603466537E-4 + z * (-0.001897735264638792 + z * (0.0056939446343941165 + z * -0.014470556242142892))))));
    p = p / x;
    var u = logD(x);
    var ua = u.z4r_1 - 1.0;
    var ub = u.a4s_1;
    x = x - 0.5;
    var va = x;
    va = doubleTruncate(va);
    var vb = x - va;
    var ta = va * ua;
    var tb = vb * ua + x * ub;
    tb = tb + -6.77929532725822E-6;
    tb = tb + p;
    ua = 0.4189453125 + tb;
    ua = ua + ta;
    ub = ta - ua;
    ub = ub + 0.4189453125;
    ub = ub + tb;
    return new DoubleSet(ua, ub);
  }
  function expD(xInput, cInput) {
    _init_properties_gamma_kt__j0joid();
    var x = xInput;
    var c = cInput;
    if (isNaN_0(x)) {
      return x;
    }
    // Inline function 'kotlin.fromBits' call
    var bits = new Long(364375282, 1082548267);
    var lnhuge = doubleFromBits(bits);
    // Inline function 'kotlin.ULong.toLong' call
    var this_0 = _ULong___init__impl__c78o9k(new Long(-336927916, -1064862984));
    // Inline function 'kotlin.fromBits' call
    var bits_0 = _ULong___get_data__impl__fggpzb(this_0);
    var lntiny = doubleFromBits(bits_0);
    // Inline function 'kotlin.fromBits' call
    var bits_1 = new Long(1697350398, 1073157447);
    var invln2 = doubleFromBits(bits_1);
    // Inline function 'kotlin.fromBits' call
    var bits_2 = new Long(-18874368, 1072049730);
    var ln2hi = doubleFromBits(bits_2);
    // Inline function 'kotlin.fromBits' call
    var bits_3 = new Long(897137782, 1038760431);
    var ln2lo = doubleFromBits(bits_3);
    // Inline function 'kotlin.ULong.toLong' call
    var this_1 = _ULong___init__impl__c78o9k(new Long(1431655742, 1069897045));
    // Inline function 'kotlin.fromBits' call
    var bits_4 = _ULong___get_data__impl__fggpzb(this_1);
    var p1 = doubleFromBits(bits_4);
    // Inline function 'kotlin.ULong.toLong' call
    var this_2 = _ULong___init__impl__c78o9k(new Long(381599123, -1083784852));
    // Inline function 'kotlin.fromBits' call
    var bits_5 = _ULong___get_data__impl__fggpzb(this_2);
    var p2 = doubleFromBits(bits_5);
    // Inline function 'kotlin.ULong.toLong' call
    var this_3 = _ULong___init__impl__c78o9k(new Long(-1356472788, 1058100842));
    // Inline function 'kotlin.fromBits' call
    var bits_6 = _ULong___get_data__impl__fggpzb(this_3);
    var p3 = doubleFromBits(bits_6);
    // Inline function 'kotlin.ULong.toLong' call
    var this_4 = _ULong___init__impl__c78o9k(new Long(-976065551, -1094992575));
    // Inline function 'kotlin.fromBits' call
    var bits_7 = _ULong___get_data__impl__fggpzb(this_4);
    var p4 = doubleFromBits(bits_7);
    // Inline function 'kotlin.ULong.toLong' call
    var this_5 = _ULong___init__impl__c78o9k(new Long(1925096656, 1046886249));
    // Inline function 'kotlin.fromBits' call
    var bits_8 = _ULong___get_data__impl__fggpzb(this_5);
    var p5 = doubleFromBits(bits_8);
    var z;
    var k;
    var hi;
    var lo;
    var tmp;
    if (x <= lnhuge) {
      var tmp_0;
      if (x >= lntiny) {
        z = invln2 * x;
        k = numberToInt(z + copysign(0.5, x));
        hi = x - k * ln2hi;
        lo = k * ln2lo - c;
        x = hi - lo;
        z = x * x;
        c = x - z * (p1 + z * (p2 + z * (p3 + z * (p4 + z * p5))));
        c = x * c / (2.0 - c);
        tmp_0 = scalb(1.0 + (hi - (lo - c)), k);
      } else {
        var tmp_1;
        if (isFinite(x)) {
          tmp_1 = scalb(1.0, -5000.0);
        } else {
          tmp_1 = 0.0;
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    } else {
      tmp = isFinite(x) ? scalb(1.0, 5000.0) : x;
    }
    return tmp;
  }
  function smallGamma(x) {
    _init_properties_gamma_kt__j0joid();
    var y = x - 1.0;
    var ym1 = y - 1.0;
    if (y <= 1.0 + (-0.3955078125 + 0.46163214496836236)) {
      var yy = ratfunGamma(y - 0.46163214496836236, 0.0);
      return yy.z4r_1 + yy.a4s_1;
    }
    var ra = doubleTruncate(y);
    var yya = ra - 1.0;
    y = ym1;
    var rb = y - yya;
    var yyb = rb;
    ym1 = y - 1.0;
    while (ym1 > -0.3955078125 + 0.46163214496836236) {
      var t = ra * yya;
      rb = ra * yyb + y * rb;
      ra = doubleTruncate(t);
      rb = rb + (t - ra);
      var _unary__edvuaz = ym1;
      ym1 = _unary__edvuaz - 1;
      y = _unary__edvuaz;
      yya = yya - 1;
    }
    var yy_0 = ratfunGamma(y - 0.46163214496836236, 0.0);
    y = rb * (yy_0.z4r_1 + yy_0.a4s_1) + ra * yy_0.a4s_1;
    y = y + yy_0.z4r_1 * ra;
    return y;
  }
  function smallerGamma(xInput) {
    _init_properties_gamma_kt__j0joid();
    var x = xInput;
    var t;
    var d;
    var xxa;
    var xxb;
    if (x < 0.46163214496836236 + -0.3955078125) {
      t = doubleTruncate(x);
      d = (t + x) * (x - t);
      t = t * t;
      xxa = doubleTruncate(t + x);
      xxb = x - xxa;
      xxb = xxb + t;
      xxb = xxb + d;
      t = 1.0 - 0.46163214496836236;
      t = t + x;
      d = 1.0 - 0.46163214496836236;
      d = d - t;
      d = d + x;
      x = xxa + xxb;
    } else {
      xxa = doubleTruncate(x);
      xxb = x - xxa;
      t = x - 0.46163214496836236;
      d = -0.46163214496836236 - t;
      d = d + x;
    }
    var r = ratfunGamma(t, d);
    var ra = r.z4r_1;
    var rb = r.a4s_1;
    d = doubleTruncate(ra / x);
    ra = ra - d * xxa;
    ra = ra - d * xxb;
    ra = ra + rb;
    return d + ra / x;
  }
  function negGamma(x) {
    _init_properties_gamma_kt__j0joid();
    var sgn = 1;
    var y;
    var z;
    // Inline function 'kotlin.math.ceil' call
    y = Math.ceil(x);
    if (y === x) {
      return (x - x) / 0.0;
    }
    z = y - x;
    if (z > 0.5) {
      z = 1.0 - z;
    }
    y = 0.5 * y;
    var tmp = y;
    // Inline function 'kotlin.math.ceil' call
    var x_0 = y;
    if (tmp === Math.ceil(x_0)) {
      sgn = -1;
    }
    var tmp_0;
    if (z < 0.25) {
      // Inline function 'kotlin.math.sin' call
      var x_1 = 3.141592653589793 * z;
      tmp_0 = Math.sin(x_1);
    } else {
      // Inline function 'kotlin.math.cos' call
      var x_2 = 3.141592653589793 * (0.5 - z);
      tmp_0 = Math.cos(x_2);
    }
    z = tmp_0;
    if (x < -170) {
      if (x < -190) {
        var tiny = 1.0E-300;
        return sgn * tiny * tiny;
      }
      y - 1.0 - x;
      var lg = largeGamma(y);
      var lga = lg.z4r_1;
      var lgb = lg.a4s_1;
      var lsine = logD(3.141592653589793 / z);
      lga = lga - lsine.z4r_1;
      lgb = lgb - lsine.a4s_1;
      y = -(lga + lgb);
      z = y + lga + lgb;
      y = expD(y, z);
      if (sgn < 0) {
        y = -y;
      }
      return y;
    }
    y = 1.0 - x;
    if (1.0 - y === x) {
      y = doubleGamma(y);
    } else {
      y = -x * doubleGamma(-x);
    }
    if (sgn < 0) {
      y = -y;
    }
    return 3.141592653589793 / (y * z);
  }
  function log2Rounding(x, mode) {
    _init_properties_gamma_kt__j0joid();
    if (x.a1(new Long(0, 0)) < 0) {
      throw IllegalArgumentException_init_$Create$('x is negative');
    }
    var tmp;
    switch (mode.o2_1) {
      case 0:
        if (!isPowerOfTwo(x)) {
          throw ArithmeticException_init_$Create$_0('mode was UNNECESSARY, but rounding was necessary');
        }

        tmp = 63 - countLeadingZeroes(x) | 0;
        break;
      case 1:
      case 3:
        tmp = 63 - countLeadingZeroes(x) | 0;
        break;
      case 2:
      case 4:
        // Inline function 'kotlin.Long.minus' call

        var tmp$ret$0 = x.x2(toLong_0(1));
        tmp = 64 - countLeadingZeroes(tmp$ret$0) | 0;
        break;
      case 5:
      case 6:
      case 7:
        var leadingZeros = countLeadingZeroes(x);
        var cmp = (new Long(-102865788, -1257966797)).h3(leadingZeros);
        var logFloor = 63 - leadingZeros | 0;
        tmp = logFloor + lessThanBranchFree(cmp, x) | 0;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  }
  var RoundingMode_UNNECESSARY_instance;
  var RoundingMode_DOWN_instance;
  var RoundingMode_UP_instance;
  var RoundingMode_FLOOR_instance;
  var RoundingMode_CEILING_instance;
  var RoundingMode_HALF_DOWN_instance;
  var RoundingMode_HALF_UP_instance;
  var RoundingMode_HALF_EVEN_instance;
  var RoundingMode_entriesInitialized;
  function RoundingMode_initEntries() {
    if (RoundingMode_entriesInitialized)
      return Unit_instance;
    RoundingMode_entriesInitialized = true;
    RoundingMode_UNNECESSARY_instance = new RoundingMode('UNNECESSARY', 0);
    RoundingMode_DOWN_instance = new RoundingMode('DOWN', 1);
    RoundingMode_UP_instance = new RoundingMode('UP', 2);
    RoundingMode_FLOOR_instance = new RoundingMode('FLOOR', 3);
    RoundingMode_CEILING_instance = new RoundingMode('CEILING', 4);
    RoundingMode_HALF_DOWN_instance = new RoundingMode('HALF_DOWN', 5);
    RoundingMode_HALF_UP_instance = new RoundingMode('HALF_UP', 6);
    RoundingMode_HALF_EVEN_instance = new RoundingMode('HALF_EVEN', 7);
  }
  function RoundingMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function multiplyFraction(x, numerator, denominator) {
    _init_properties_gamma_kt__j0joid();
    var x0 = x;
    var denominator0 = denominator;
    if (x0.equals(new Long(1, 0))) {
      return numerator.z2(denominator0);
    }
    var commonDivisor = integerGcd(x0, denominator0);
    x0 = x0.z2(commonDivisor);
    denominator0 = denominator0.z2(commonDivisor);
    return x0.y2(numerator.z2(denominator0));
  }
  function logD(x) {
    _init_properties_gamma_kt__j0joid();
    var m = numberToInt(logB(x));
    var g = ldexp(x, -m | 0);
    if (m === -1022) {
      var a = numberToInt(logB(g));
      m = m + a | 0;
      g = ldexp(g, -a | 0);
    }
    var j = numberToInt(128 * (g - 1) + 0.5);
    var F = 1.0 / 128 * j + 1;
    var f = g - F;
    g = 1 / (2 * F + f);
    var u = 2 * f * g;
    var v = u * u;
    var q = u * v * (0.08333333333333179 + v * (0.01250000000377175 + v * (0.002232139987919448 + v * 4.348877777076146E-4)));
    var u1;
    if (!(m === 0) || !(j === 0)) {
      u1 = u + 513;
      u1 = u1 - 513;
    } else {
      u1 = doubleTruncate(u);
    }
    var u2 = (2.0 * (f - F * u1) - u1 * f) * g;
    u1 = u1 + (m * get_logF_head()[128] + get_logF_head()[j]);
    u2 = u2 + get_logF_tail()[j];
    u2 = u2 + q;
    u2 = u2 + get_logF_tail()[128] * m;
    var resultA = doubleTruncate(u1 + u2);
    var resultB = u1 - resultA + u2;
    return new DoubleSet(resultA, resultB);
  }
  function doubleTruncate(x) {
    _init_properties_gamma_kt__j0joid();
    // Inline function 'kotlin.toULong' call
    var this_0 = toBits(x);
    var xBits = _ULong___init__impl__c78o9k(this_0);
    // Inline function 'kotlin.ULong.and' call
    var other = _ULong___init__impl__c78o9k(new Long(0, -1));
    var highBits = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(xBits).i3(_ULong___get_data__impl__fggpzb(other)));
    // Inline function 'kotlin.ULong.and' call
    var other_0 = _ULong___init__impl__c78o9k(new Long(-1, 0));
    var lowBits = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(xBits).i3(_ULong___get_data__impl__fggpzb(other_0)));
    // Inline function 'kotlin.ULong.and' call
    var other_1 = _ULong___init__impl__c78o9k(new Long(-134217728, 0));
    // Inline function 'kotlin.ULong.or' call
    var other_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(lowBits).i3(_ULong___get_data__impl__fggpzb(other_1)));
    // Inline function 'kotlin.ULong.toLong' call
    var this_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(highBits).j3(_ULong___get_data__impl__fggpzb(other_2)));
    // Inline function 'kotlin.fromBits' call
    var bits = _ULong___get_data__impl__fggpzb(this_1);
    return doubleFromBits(bits);
  }
  function copysign(x, y) {
    _init_properties_gamma_kt__j0joid();
    // Inline function 'kotlin.toULong' call
    var this_0 = toBits(x);
    var xBits = _ULong___init__impl__c78o9k(this_0);
    // Inline function 'kotlin.toULong' call
    var this_1 = toBits(y);
    var yBits = _ULong___init__impl__c78o9k(this_1);
    // Inline function 'kotlin.ULong.and' call
    var other = _ULong___init__impl__c78o9k(new Long(0, 2147483647));
    var tmp6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(xBits).i3(_ULong___get_data__impl__fggpzb(other)));
    // Inline function 'kotlin.ULong.and' call
    var other_0 = _ULong___init__impl__c78o9k(new Long(0, -2147483648));
    // Inline function 'kotlin.ULong.or' call
    var other_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(yBits).i3(_ULong___get_data__impl__fggpzb(other_0)));
    var res = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).j3(_ULong___get_data__impl__fggpzb(other_1)));
    // Inline function 'kotlin.ULong.toLong' call
    // Inline function 'kotlin.fromBits' call
    var bits = _ULong___get_data__impl__fggpzb(res);
    return doubleFromBits(bits);
  }
  function scalb(x, exp) {
    _init_properties_gamma_kt__j0joid();
    // Inline function 'kotlin.math.pow' call
    return x * Math.pow(2.0, exp);
  }
  function ratfunGamma(z, c) {
    _init_properties_gamma_kt__j0joid();
    var q = 1.4501953125 + z * (1.0625852194801617 + z * (-0.20747456194385994 + z * (-0.14673413178200542 + z * (0.030787817615617552 + z * (0.005124493479806662 + z * (-0.00176012741431667 + z * (9.35021023573789E-5 + z * 6.13275507472444E-6)))))));
    var p = 0.6213895718218209 + z * (0.26575719865153347 + z * (0.005538594464299175 + z * (0.0013845669830409657 + z * 0.0024065995003271137)));
    p = p / q;
    var ta = doubleTruncate(z);
    var tb = z - ta + c;
    tb = tb * (ta + z);
    ta = ta * ta;
    q = ta;
    ta = doubleTruncate(ta);
    tb = tb + (q - ta);
    var ra = doubleTruncate(p);
    var rb = p - ra;
    tb = tb * p + ta * rb + -4.99642703646902E-17;
    ta = ta * ra;
    ra = doubleTruncate(ta + 0.8856031944108887);
    rb = 0.8856031944108887 - ra + ta + tb;
    return new DoubleSet(ra, rb);
  }
  function isPowerOfTwo(x) {
    _init_properties_gamma_kt__j0joid();
    var tmp = x.a1(new Long(0, 0)) > 0;
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = x.x2(toLong_0(1));
    return !!(tmp & x.i3(tmp$ret$0).equals(new Long(0, 0)));
  }
  function countLeadingZeroes(v) {
    _init_properties_gamma_kt__j0joid();
    var tmp;
    if (v.i3(new Long(0, -1)).equals(new Long(0, 0))) {
      // Inline function 'kotlin.let' call
      var res = countLeadingZeroes_0(v.c1());
      tmp = res === 0 ? 0 : res + 32 | 0;
    } else {
      tmp = countLeadingZeroes_0(v.h3(32).c1());
    }
    return tmp;
  }
  function lessThanBranchFree(x, y) {
    _init_properties_gamma_kt__j0joid();
    return x.x2(y).e3().e3().h3(63).c1();
  }
  function logB(x) {
    _init_properties_gamma_kt__j0joid();
    // Inline function 'kotlin.toULong' call
    var this_0 = toBits(x);
    var xBits = _ULong___init__impl__c78o9k(this_0);
    // Inline function 'kotlin.ULong.and' call
    var other = _ULong___init__impl__c78o9k(new Long(0, -1));
    // Inline function 'kotlin.ULong.shr' call
    var this_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(xBits).i3(_ULong___get_data__impl__fggpzb(other)));
    // Inline function 'kotlin.ULong.toInt' call
    var this_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(32));
    var ix = _ULong___get_data__impl__fggpzb(this_2).c1();
    // Inline function 'kotlin.ULong.and' call
    var other_0 = _ULong___init__impl__c78o9k(new Long(-1, 0));
    // Inline function 'kotlin.ULong.toInt' call
    var this_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(xBits).i3(_ULong___get_data__impl__fggpzb(other_0)));
    var lx = _ULong___get_data__impl__fggpzb(this_3).c1();
    var ixA = ix & 2147483647;
    var tmp;
    if ((ixA | lx) === 0) {
      var tmp_0 = -1.0;
      // Inline function 'kotlin.math.absoluteValue' call
      tmp = tmp_0 / Math.abs(x);
    } else if (ixA >= 2146435072) {
      tmp = x * x;
    } else if (ixA < 1048576) {
      var xUp = x * 1.8014398509481984E16;
      // Inline function 'kotlin.toULong' call
      var this_4 = toBits(xUp);
      var xUBits = _ULong___init__impl__c78o9k(this_4);
      // Inline function 'kotlin.ULong.shr' call
      var tmp13 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(xUBits).h3(32));
      // Inline function 'kotlin.ULong.and' call
      var other_1 = _ULong___init__impl__c78o9k(new Long(2147483647, 0));
      var xBitsMasked = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp13).i3(_ULong___get_data__impl__fggpzb(other_1)));
      // Inline function 'kotlin.ULong.minus' call
      var other_2 = _ULong___init__impl__c78o9k(new Long(1023, 0));
      var tmp17 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(xBitsMasked).x2(_ULong___get_data__impl__fggpzb(other_2)));
      // Inline function 'kotlin.ULong.minus' call
      var other_3 = _ULong___init__impl__c78o9k(new Long(54, 0));
      // Inline function 'kotlin.ULong.toDouble' call
      var this_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp17).x2(_ULong___get_data__impl__fggpzb(other_3)));
      tmp = ulongToDouble(_ULong___get_data__impl__fggpzb(this_5));
    } else {
      // Inline function 'kotlin.Long.minus' call
      tmp = toLong_0(ixA).g3(20).x2(toLong_0(1023)).l3();
    }
    return tmp;
  }
  function ldexp(x, y) {
    _init_properties_gamma_kt__j0joid();
    var tmp;
    if (y > 0) {
      tmp = x * (1 << y);
    } else {
      // Inline function 'kotlin.math.absoluteValue' call
      tmp = x / (1 << abs(y));
    }
    return tmp;
  }
  function countLeadingZeroes_0(v) {
    _init_properties_gamma_kt__j0joid();
    var n = 32;
    var x = v;
    var y = x >> 16;
    if (!(y === 0)) {
      n = n - 16 | 0;
      x = y;
    }
    y = x >> 8;
    if (!(y === 0)) {
      n = n - 8 | 0;
      x = y;
    }
    y = x >> 4;
    if (!(y === 0)) {
      n = n - 4 | 0;
      x = y;
    }
    y = x >> 2;
    if (!(y === 0)) {
      n = n - 2 | 0;
      x = y;
    }
    y = x >> 1;
    return !(y === 0) ? n - 2 | 0 : n - x | 0;
  }
  function doubleBinomial$nearInt(n) {
    return n % 1 === 0.0;
  }
  function doubleBinomial$throwInvalidArgument() {
    throw IllegalArgumentException_init_$Create$_0();
  }
  function RoundingMode_CEILING_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_CEILING_instance;
  }
  var properties_initialized_gamma_kt_8eu2jb;
  function _init_properties_gamma_kt__j0joid() {
    if (!properties_initialized_gamma_kt_8eu2jb) {
      properties_initialized_gamma_kt_8eu2jb = true;
      // Inline function 'kotlin.doubleArrayOf' call
      logF_head = new Float64Array([0.0, 0.007782140442060381, 0.015504186535963527, 0.02316705928154761, 0.030771658666765234, 0.038318864302141264, 0.045809536031242715, 0.053244514518837605, 0.06062462181648698, 0.06795066190852594, 0.07522342123752424, 0.08244366921098845, 0.08961215868976069, 0.09672962645845473, 0.10379679368156758, 0.11081436634026431, 0.11778303565643, 0.1247034785010328, 0.13157635778861732, 0.13840232285929233, 0.14518200984457508, 0.15191604202573217, 0.15860503017665906, 0.16524957289539088, 0.17185025692651834, 0.1784076574726896, 0.1849223384938341, 0.19139485299956505, 0.19782574332975855, 0.2042155414287663, 0.21056476910735, 0.21687393830052315, 0.22314355131402408, 0.22937410106487732, 0.23556607131286, 0.24171993688696602, 0.2478361639045943, 0.25391520998073247, 0.25995752443668607, 0.265963548496984, 0.27193371548401046, 0.2778684510030871, 0.28376817313073843, 0.28963329258294834, 0.29546421289342106, 0.3012613305781997, 0.30702503529482783, 0.3127557100042395, 0.3184537311180975, 0.32411946865431673, 0.32975328637257917, 0.33535554192076233, 0.3409265869704541, 0.3464667673461008, 0.35197642315688427, 0.3574558889222317, 0.3629054936891407, 0.36832556115859916, 0.3737164097938148, 0.37907835293481185, 0.3844116989102986, 0.38971675114044046, 0.3949938082405424, 0.40024316412745975, 0.4054651081078191, 0.4106599249853389, 0.4158278951435932, 0.4209692946442374, 0.42608439531068143, 0.43117346481813, 0.4362367667745275, 0.44127456080514094, 0.44628710262804816, 0.45127464413963025, 0.4562374334818742, 0.4611757151224083, 0.46608972992453346, 0.4709797152190731, 0.4758459048698569, 0.4806885293455707, 0.4855078157816024, 0.49030398804552533, 0.49507726679803454, 0.4998278695566114, 0.5045560107519123, 0.5092619017905236, 0.5139457511013461, 0.5186077642083546, 0.5232481437651586, 0.5278670896204858, 0.532464798869114, 0.5370414658973459, 0.5415972824321216, 0.5461324375974073, 0.5506471179523942, 0.5551415075406112, 0.5596157879353996, 0.5640701382853877, 0.5685047353526897, 0.5729197535620187, 0.5773153650352469, 0.5816917396350618, 0.5860490450031648, 0.590387446602108, 0.5947071077462169, 0.5990081896452466, 0.6032908514389419, 0.6075552502243227, 0.6118015411066153, 0.6160298772156239, 0.6202404097512044, 0.6244332880123693, 0.6286086594227527, 0.6327666695706284, 0.636907462236195, 0.6410311794206791, 0.6451379613736208, 0.649227946625615, 0.6533012720119586, 0.6573580727090302, 0.6613984822452039, 0.6654226325445052, 0.6694306539429817, 0.6734226752123504, 0.6773988235909201, 0.6813592248072382, 0.6853040030982811, 0.6892332812385575, 0.6931471805601177]);
      // Inline function 'kotlin.doubleArrayOf' call
      logF_tail = new Float64Array([0.0, -5.43229938420049E-15, 1.72745674997061E-15, -1.323017818229233E-14, -1.154527628289872E-14, -4.665294699583E-15, 5.14884957268581E-14, -2.532168943117445E-14, -5.213620639136504E-14, -1.819506003016881E-14, 6.329065958724544E-14, 8.614512936087814E-14, -7.355770219435027E-14, 9.638067658552277E-14, 7.598636597194141E-14, 2.57999912830699E-14, -4.654729747598444E-14, -7.556920687451336E-14, 1.0195735223708472E-13, -1.7319034406422305E-13, -7.718001336828099E-14, 1.0980754099855238E-13, -2.047235780046195E-14, -8.372091099235912E-14, 1.4088127937111135E-13, 1.2869017157588258E-13, 1.7788850778198106E-13, 6.440856150696891E-14, 1.6132822667240823E-13, -7.540916511956188E-14, -3.650718883179E-16, 9.120937249914984E-14, 1.856757095979601E-13, -3.149265065191483E-14, -9.30945949519689E-14, 1.7914338601329117E-13, -1.302979717330866E-14, 2.309738521758694E-13, 2.3999540484211735E-13, 1.5393776174455408E-13, -3.687042831583768E-13, 3.692037508208009E-13, -9.383417223663699E-14, 9.43339818951269E-14, 4.148131870425857E-13, -3.792316480209314E-14, 8.403156304792425E-14, -3.426293434828543E-13, 4.3712191957429144E-13, -1.0475750058776541E-13, -1.1118671389559323E-13, 3.754957725725985E-13, 1.3912841212197566E-13, 1.077574303757264E-13, 2.9391859187648E-13, -4.2790509060060775E-13, 2.2774076114039556E-13, 1.0849569622967912E-13, -2.3073801945705757E-13, 1.5761203773969435E-13, 3.345710269544082E-14, -4.152515806343612E-13, 3.2655698896907146E-13, -4.4704265010452445E-13, 3.452764795203977E-13, -7.048962392109747E-14, 1.1776978751369214E-13, -1.0774341461609578E-13, 2.186334329321591E-13, 2.413263949133313E-13, 3.90574622098307E-13, -2.657067920356075E-13, 3.713514191959202E-13, -1.7166921336082432E-13, -2.8658285157914353E-13, -2.3812542263446807E-13, 6.576659768580061E-14, -2.821014384618127E-13, 1.0701931762114254E-13, 1.811934636644111E-13, 9.840465278232627E-14, -3.314915028275254E-13, -1.8302857356041668E-13, -1.620740015674495E-13, 4.83033149495532E-13, -7.156055317238212E-13, 8.882123951857185E-13, -3.0900580513238243E-13, -6.10765519728515E-13, 3.565996966334783E-13, 3.5782396591276384E-13, -4.622608700154458E-13, 6.227976291722515E-13, 7.283894727206574E-13, 2.680964661521167E-13, -1.0960825046059278E-13, 2.311949383800537E-14, -5.846905800529924E-13, -2.103748251144494E-14, -2.332318294558741E-13, -4.2333694288141915E-13, -4.3933937969737843E-13, 4.1341647073835564E-13, 6.841763641591467E-14, 4.758553400443064E-13, 8.367967867475769E-13, -8.576373464665864E-13, 2.1913281229340092E-13, -6.224284253643115E-13, -1.098359432543843E-13, 6.531043137763365E-13, -4.758019902171077E-13, -3.785425126545704E-13, 4.0939233218678666E-13, 8.742438391485829E-13, 2.521818845684288E-13, -3.608131360422557E-14, -5.05185559242809E-13, 7.869940332335531E-13, -6.702087696194906E-13, 1.6108575753932459E-13, 5.852718843625151E-13, -3.524675729790479E-13, -1.8372084495629058E-13, 8.860668981349492E-13, 6.64862680714687E-13, 6.383161517064652E-13, 2.514423072837607E-13, -1.7239444525614835E-13]);
      complexp0 = new Complex(1.000000000190015, 0.0);
      complexp1 = new Complex(76.18009172947146, 0.0);
      complexp2 = new Complex(-86.50532032941678, 0.0);
      complexp3 = new Complex(24.01409824083091, 0.0);
      complexp4 = new Complex(-1.231739572450155, 0.0);
      complexp5 = new Complex(0.001208650973866179, 0.0);
      complexp6 = new Complex(-5.395239384953E-6, 0.0);
      var tmp = new Long(1, 0);
      var tmp_0 = new Long(1, 0);
      // Inline function 'kotlin.Long.times' call
      var tmp_1 = (new Long(1, 0)).y2(toLong_0(2));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_2 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_3 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_4 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_5 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_6 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_7 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_8 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_9 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_10 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_11 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_12 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12)).y2(toLong_0(13));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_13 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12)).y2(toLong_0(13)).y2(toLong_0(14));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_14 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12)).y2(toLong_0(13)).y2(toLong_0(14)).y2(toLong_0(15));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_15 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12)).y2(toLong_0(13)).y2(toLong_0(14)).y2(toLong_0(15)).y2(toLong_0(16));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_16 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12)).y2(toLong_0(13)).y2(toLong_0(14)).y2(toLong_0(15)).y2(toLong_0(16)).y2(toLong_0(17));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_17 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12)).y2(toLong_0(13)).y2(toLong_0(14)).y2(toLong_0(15)).y2(toLong_0(16)).y2(toLong_0(17)).y2(toLong_0(18));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp_18 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12)).y2(toLong_0(13)).y2(toLong_0(14)).y2(toLong_0(15)).y2(toLong_0(16)).y2(toLong_0(17)).y2(toLong_0(18)).y2(toLong_0(19));
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.times' call
      var tmp$ret$189 = (new Long(1, 0)).y2(toLong_0(2)).y2(toLong_0(3)).y2(toLong_0(4)).y2(toLong_0(5)).y2(toLong_0(6)).y2(toLong_0(7)).y2(toLong_0(8)).y2(toLong_0(9)).y2(toLong_0(10)).y2(toLong_0(11)).y2(toLong_0(12)).y2(toLong_0(13)).y2(toLong_0(14)).y2(toLong_0(15)).y2(toLong_0(16)).y2(toLong_0(17)).y2(toLong_0(18)).y2(toLong_0(19)).y2(toLong_0(20));
      // Inline function 'kotlin.longArrayOf' call
      factorials = longArrayOf([tmp, tmp_0, tmp_1, tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8, tmp_9, tmp_10, tmp_11, tmp_12, tmp_13, tmp_14, tmp_15, tmp_16, tmp_17, tmp_18, tmp$ret$189]);
      // Inline function 'kotlin.intArrayOf' call
      biggestBinomials = new Int32Array([2147483647, 2147483647, 2147483647, 3810779, 121977, 16175, 4337, 1733, 887, 534, 361, 265, 206, 169, 143, 125, 111, 101, 94, 88, 83, 79, 76, 74, 72, 70, 69, 68, 67, 67, 66, 66, 66, 66]);
      // Inline function 'kotlin.intArrayOf' call
      biggestSimpleBinomials = new Int32Array([2147483647, 2147483647, 2147483647, 2642246, 86251, 11724, 3218, 1313, 684, 419, 287, 214, 169, 139, 119, 105, 95, 87, 81, 76, 73, 70, 68, 66, 64, 63, 62, 62, 61, 61, 61]);
    }
  }
  function escapeHtml(s, buf) {
    // Inline function 'kotlin.text.forEach' call
    var inductionVariable = 0;
    while (inductionVariable < charSequenceLength(s)) {
      var element = charSequenceGet(s, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      var escapedChar = element === _Char___init__impl__6a9atx(38) ? '&amp;' : element === _Char___init__impl__6a9atx(60) ? '&lt;' : element === _Char___init__impl__6a9atx(62) ? '&gt;' : toString_2(element);
      buf.i(escapedChar);
    }
  }
  function array2DAsHtml(value, buf) {
    var borderStyle = 'border: 1px solid; border-collapse: collapse;';
    var colHeaderStyle = borderStyle + ' text-align: center;';
    var tdStyle = borderStyle + ' text-align: right;';
    var d = value.o2i();
    var labelsCopy = value.m2l().p2r();
    // Inline function 'com.dhsdevelopments.kap.encloseInTag' call
    var attrs = [to('style', borderStyle)];
    buf.i('<');
    buf.i('table');
    // Inline function 'kotlin.collections.forEach' call
    var inductionVariable = 0;
    var last = attrs.length;
    while (inductionVariable < last) {
      var element = attrs[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      buf.i(' ');
      buf.i(element.be_1);
      buf.i('="');
      buf.i(element.ce_1);
      buf.i('"');
    }
    buf.i('>');
    var tmp1_safe_receiver = labelsCopy == null ? null : labelsCopy.q2r_1;
    var rowLabels = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.p(0);
    var tmp3_safe_receiver = labelsCopy == null ? null : labelsCopy.q2r_1;
    var tmp4_safe_receiver = tmp3_safe_receiver == null ? null : tmp3_safe_receiver.p(1);
    if (tmp4_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'com.dhsdevelopments.kap.encloseInTag' call
      var attrs_0 = [];
      buf.i('<');
      buf.i('thead');
      // Inline function 'kotlin.collections.forEach' call
      var inductionVariable_0 = 0;
      var last_0 = attrs_0.length;
      while (inductionVariable_0 < last_0) {
        var element_0 = attrs_0[inductionVariable_0];
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        buf.i(' ');
        buf.i(element_0.be_1);
        buf.i('="');
        buf.i(element_0.ce_1);
        buf.i('"');
      }
      buf.i('>');
      // Inline function 'com.dhsdevelopments.kap.encloseInTag' call
      var attrs_1 = [];
      buf.i('<');
      buf.i('tr');
      // Inline function 'kotlin.collections.forEach' call
      var inductionVariable_1 = 0;
      var last_1 = attrs_1.length;
      while (inductionVariable_1 < last_1) {
        var element_1 = attrs_1[inductionVariable_1];
        inductionVariable_1 = inductionVariable_1 + 1 | 0;
        buf.i(' ');
        buf.i(element_1.be_1);
        buf.i('="');
        buf.i(element_1.ce_1);
        buf.i('"');
      }
      buf.i('>');
      if (!(rowLabels == null)) {
        buf.i('<th style="' + borderStyle + '"><\/th>');
      }
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = tmp4_safe_receiver.k();
      while (_iterator__ex2g4s.l()) {
        var element_2 = _iterator__ex2g4s.m();
        if (!(element_2 == null)) {
          // Inline function 'com.dhsdevelopments.kap.encloseInTag' call
          var attrs_2 = [to('style', colHeaderStyle)];
          buf.i('<');
          buf.i('th');
          // Inline function 'kotlin.collections.forEach' call
          var inductionVariable_2 = 0;
          var last_2 = attrs_2.length;
          while (inductionVariable_2 < last_2) {
            var element_3 = attrs_2[inductionVariable_2];
            inductionVariable_2 = inductionVariable_2 + 1 | 0;
            buf.i(' ');
            buf.i(element_3.be_1);
            buf.i('="');
            buf.i(element_3.ce_1);
            buf.i('"');
          }
          buf.i('>');
          escapeHtml(element_2.j35_1, buf);
          buf.i('<\/');
          buf.i('th');
          buf.i('>');
        } else {
          buf.i('<th style="' + colHeaderStyle + '"><\/th>');
        }
      }
      buf.i('<\/');
      buf.i('tr');
      buf.i('>');
      buf.i('<\/');
      buf.i('thead');
      buf.i('>');
    }
    // Inline function 'com.dhsdevelopments.kap.encloseInTag' call
    var attrs_3 = [];
    buf.i('<');
    buf.i('tbody');
    // Inline function 'kotlin.collections.forEach' call
    var inductionVariable_3 = 0;
    var last_3 = attrs_3.length;
    while (inductionVariable_3 < last_3) {
      var element_4 = attrs_3[inductionVariable_3];
      inductionVariable_3 = inductionVariable_3 + 1 | 0;
      buf.i(' ');
      buf.i(element_4.be_1);
      buf.i('="');
      buf.i(element_4.ce_1);
      buf.i('"');
    }
    buf.i('>');
    // Inline function 'kotlin.repeat' call
    var times = Dimensions__get_impl_4npepw(d, 0);
    var inductionVariable_4 = 0;
    if (inductionVariable_4 < times)
      do {
        var index = inductionVariable_4;
        inductionVariable_4 = inductionVariable_4 + 1 | 0;
        // Inline function 'com.dhsdevelopments.kap.encloseInTag' call
        var attrs_4 = [];
        buf.i('<');
        buf.i('tr');
        // Inline function 'kotlin.collections.forEach' call
        var inductionVariable_5 = 0;
        var last_4 = attrs_4.length;
        while (inductionVariable_5 < last_4) {
          var element_5 = attrs_4[inductionVariable_5];
          inductionVariable_5 = inductionVariable_5 + 1 | 0;
          buf.i(' ');
          buf.i(element_5.be_1);
          buf.i('="');
          buf.i(element_5.ce_1);
          buf.i('"');
        }
        buf.i('>');
        if (!(rowLabels == null)) {
          var header = rowLabels.p(index);
          if (!(header == null)) {
            // Inline function 'com.dhsdevelopments.kap.encloseInTag' call
            var attrs_5 = [to('style', colHeaderStyle)];
            buf.i('<');
            buf.i('th');
            // Inline function 'kotlin.collections.forEach' call
            var inductionVariable_6 = 0;
            var last_5 = attrs_5.length;
            while (inductionVariable_6 < last_5) {
              var element_6 = attrs_5[inductionVariable_6];
              inductionVariable_6 = inductionVariable_6 + 1 | 0;
              buf.i(' ');
              buf.i(element_6.be_1);
              buf.i('="');
              buf.i(element_6.ce_1);
              buf.i('"');
            }
            buf.i('>');
            escapeHtml(header.j35_1, buf);
            buf.i('<\/');
            buf.i('th');
            buf.i('>');
          } else {
            buf.i('<td style="' + borderStyle + '"><\/td>');
          }
        }
        // Inline function 'kotlin.repeat' call
        var times_0 = Dimensions__get_impl_4npepw(d, 1);
        var inductionVariable_7 = 0;
        if (inductionVariable_7 < times_0)
          do {
            var index_0 = inductionVariable_7;
            inductionVariable_7 = inductionVariable_7 + 1 | 0;
            // Inline function 'com.dhsdevelopments.kap.encloseInTag' call
            var attrs_6 = [to('style', tdStyle)];
            buf.i('<');
            buf.i('td');
            // Inline function 'kotlin.collections.forEach' call
            var inductionVariable_8 = 0;
            var last_6 = attrs_6.length;
            while (inductionVariable_8 < last_6) {
              var element_7 = attrs_6[inductionVariable_8];
              inductionVariable_8 = inductionVariable_8 + 1 | 0;
              buf.i(' ');
              buf.i(element_7.be_1);
              buf.i('="');
              buf.i(element_7.ce_1);
              buf.i('"');
            }
            buf.i('>');
            var v = value.h2k(imul(index, Dimensions__get_impl_4npepw(d, 1)) + index_0 | 0);
            v.j2q(buf);
            buf.i('<\/');
            buf.i('td');
            buf.i('>');
          }
           while (inductionVariable_7 < times_0);
        buf.i('<\/');
        buf.i('tr');
        buf.i('>');
      }
       while (inductionVariable_4 < times);
    buf.i('<\/');
    buf.i('tbody');
    buf.i('>');
    buf.i('<\/');
    buf.i('table');
    buf.i('>');
  }
  function get_VALUE_PARSERS() {
    _init_properties_htmlconverter_kt__3xexs3();
    return VALUE_PARSERS;
  }
  var VALUE_PARSERS;
  function NumberWithThousandsSeparator() {
    NumberWithThousandsSeparator_instance = this;
    var tmp = this;
    // Inline function 'kotlin.text.toRegex' call
    var this_0 = '^(-?)((?:[0-9]+,)*[0-9]+)(?:\\.([0-9]+))?.*$';
    tmp.b4s_1 = Regex_init_$Create$(this_0);
  }
  protoOf(NumberWithThousandsSeparator).z1l = function (s) {
    var tmp0_elvis_lhs = this.b4s_1.hb(s);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var matchResult = tmp;
    var tmp_0;
    var tmp1_safe_receiver = matchResult.wb().p(1);
    if ((tmp1_safe_receiver == null ? null : tmp1_safe_receiver.sb_1) === '-') {
      tmp_0 = '-';
    } else {
      tmp_0 = '';
    }
    var neg = tmp_0;
    // Inline function 'kotlin.text.filter' call
    var tmp0 = ensureNotNull(matchResult.wb().p(2)).sb_1;
    // Inline function 'kotlin.text.filterTo' call
    var destination = StringBuilder_init_$Create$();
    var inductionVariable = 0;
    var last = charSequenceLength(tmp0);
    if (inductionVariable < last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var element = charSequenceGet(tmp0, index);
        if (_Char___init__impl__6a9atx(48) <= element ? element <= _Char___init__impl__6a9atx(57) : false) {
          destination.j8(element);
        }
      }
       while (inductionVariable < last);
    var intPart = destination.toString();
    var tmp2_safe_receiver = matchResult.wb().p(3);
    var decimalPart = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.sb_1;
    var tmp_1;
    if (decimalPart == null) {
      tmp_1 = makeAPLNumberWithReduction(of(Companion_instance, neg + intPart));
    } else {
      tmp_1 = makeAPLNumber(toDouble(neg + intPart + '.' + decimalPart));
    }
    return tmp_1;
  };
  var NumberWithThousandsSeparator_instance;
  function NumberWithThousandsSeparator_getInstance() {
    if (NumberWithThousandsSeparator_instance == null)
      new NumberWithThousandsSeparator();
    return NumberWithThousandsSeparator_instance;
  }
  function htmlTableToArray(doc, n) {
    n = n === VOID ? 0 : n;
    _init_properties_htmlconverter_kt__3xexs3();
    var tmp0_elvis_lhs = parseAsHtmlTable(doc, n);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var _destruct__k2r9zo = tmp;
    var content = _destruct__k2r9zo.de();
    var headers = _destruct__k2r9zo.ee();
    if (content.o())
      return null;
    var numRows = content.n();
    // Inline function 'com.dhsdevelopments.kap.maxValueBy' call
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.require' call
    if (!!content.o()) {
      var message = 'call to maxValueBy on empty list';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var currMax = null;
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = content.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var res = element.n();
      if (currMax == null || compareTo_3(res, ensureNotNull(currMax)) > 0) {
        currMax = res;
      }
    }
    var numCols = ensureNotNull(currMax);
    if (numCols === 0)
      return null;
    var list = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s_0 = content.k();
    while (_iterator__ex2g4s_0.l()) {
      var element_0 = _iterator__ex2g4s_0.m();
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s_1 = element_0.k();
      while (_iterator__ex2g4s_1.l()) {
        var element_1 = _iterator__ex2g4s_1.m();
        list.h(parseStringToAPLValue(element_1));
      }
      // Inline function 'kotlin.repeat' call
      var times = numCols - element_0.n() | 0;
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          list.h(get_APLLONG_0());
        }
         while (inductionVariable < times);
    }
    var res_0 = new APLArrayList(dimensionsOfSize(new Int32Array([numRows, numCols])), list);
    var tmp_0;
    if (headers == null) {
      tmp_0 = res_0;
    } else {
      var tmp_1 = Companion_instance_56;
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(headers, 10));
      var _iterator__ex2g4s_2 = headers.k();
      while (_iterator__ex2g4s_2.l()) {
        var item = _iterator__ex2g4s_2.m();
        var tmp$ret$13 = new AxisLabel(item);
        destination.h(tmp$ret$13);
      }
      tmp_0 = tmp_1.n3a(res_0, listOf([null, destination]));
    }
    return tmp_0;
  }
  function parseAsHtmlTable(doc, n) {
    n = n === VOID ? 0 : n;
    _init_properties_htmlconverter_kt__3xexs3();
    var body = doc.t1g();
    var tableNodes = body.f1h('table');
    if (n < 0 || n >= tableNodes.n()) {
      return null;
    }
    var tableNode = tableNodes.p(n);
    var tbodyElements = tableNode.p1h('tbody');
    if (!(tbodyElements.n() === 1))
      return null;
    var tbody = tbodyElements.p(0);
    var result = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = tbody.b1h().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      if (element.x1g() === 'tr') {
        var rowElements = ArrayList_init_$Create$();
        // Inline function 'kotlin.collections.forEach' call
        var _iterator__ex2g4s_0 = element.b1h().k();
        while (_iterator__ex2g4s_0.l()) {
          var element_0 = _iterator__ex2g4s_0.m();
          if (element_0.x1g() === 'td' || element_0.x1g() === 'th') {
            rowElements.h(element_0.q1h());
          }
        }
        result.h(rowElements);
      }
    }
    var h = parseHeaders(tableNode);
    var headers = !(h == null) && h.n() === first(result).n() ? h : null;
    return new Pair(result, headers);
  }
  function parseStringToAPLValue(text) {
    _init_properties_htmlconverter_kt__3xexs3();
    // Inline function 'kotlin.text.trim' call
    var trimmed = toString(trim(isCharSequence(text) ? text : THROW_CCE()));
    var _iterator__ex2g4s = get_VALUE_PARSERS().k();
    while (_iterator__ex2g4s.l()) {
      var parser = _iterator__ex2g4s.m();
      var v = parser.z1l(trimmed);
      if (!(v == null)) {
        return v;
      }
    }
    return Companion_getInstance_46().k2o(trimmed);
  }
  function parseHeaders(tableNode) {
    _init_properties_htmlconverter_kt__3xexs3();
    var theadElements = tableNode.p1h('thead');
    if (!(theadElements.n() === 1))
      return null;
    var trElements = theadElements.p(0).b1h();
    if (trElements.o())
      return null;
    var thElements = trElements.p(0);
    var result = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = thElements.b1h().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      if (element.x1g() === 'td' || element.x1g() === 'th') {
        result.h(element.q1h());
      }
    }
    return result;
  }
  var properties_initialized_htmlconverter_kt_fxedyz;
  function _init_properties_htmlconverter_kt__3xexs3() {
    if (!properties_initialized_htmlconverter_kt_fxedyz) {
      properties_initialized_htmlconverter_kt_fxedyz = true;
      VALUE_PARSERS = listOf_0(NumberWithThousandsSeparator_getInstance());
    }
  }
  var HttpMethod_GET_instance;
  var HttpMethod_POST_instance;
  var HttpMethod_PUT_instance;
  var HttpMethod_DELETE_instance;
  var HttpMethod_PATCH_instance;
  var HttpMethod_HEAD_instance;
  var HttpMethod_OPTIONS_instance;
  var HttpMethod_entriesInitialized;
  function HttpMethod_initEntries() {
    if (HttpMethod_entriesInitialized)
      return Unit_instance;
    HttpMethod_entriesInitialized = true;
    HttpMethod_GET_instance = new HttpMethod('GET', 0);
    HttpMethod_POST_instance = new HttpMethod('POST', 1);
    HttpMethod_PUT_instance = new HttpMethod('PUT', 2);
    HttpMethod_DELETE_instance = new HttpMethod('DELETE', 3);
    HttpMethod_PATCH_instance = new HttpMethod('PATCH', 4);
    HttpMethod_HEAD_instance = new HttpMethod('HEAD', 5);
    HttpMethod_OPTIONS_instance = new HttpMethod('OPTIONS', 6);
  }
  function HttpMethod(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function HttpRequestData(url, method, data, headers) {
    this.c4s_1 = url;
    this.d4s_1 = method;
    this.e4s_1 = data;
    this.f4s_1 = headers;
  }
  protoOf(HttpRequestData).equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (!(other instanceof HttpRequestData))
      THROW_CCE();
    if (!(this.c4s_1 === other.c4s_1))
      return false;
    if (!this.d4s_1.equals(other.d4s_1))
      return false;
    if (!contentEquals_0(this.e4s_1, other.e4s_1))
      return false;
    if (!equals(this.f4s_1, other.f4s_1))
      return false;
    return true;
  };
  protoOf(HttpRequestData).hashCode = function () {
    var result = getStringHashCode(this.c4s_1);
    result = imul(31, result) + this.d4s_1.hashCode() | 0;
    var tmp = imul(31, result);
    var tmp0_safe_receiver = this.e4s_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : contentHashCode(tmp0_safe_receiver);
    result = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
    result = imul(31, result) + hashCode(this.f4s_1) | 0;
    return result;
  };
  protoOf(HttpRequestData).toString = function () {
    return 'HttpRequestData(url=' + this.c4s_1 + ', method=' + this.d4s_1.toString() + ', data=' + toString(this.e4s_1) + ', headers=' + toString(this.f4s_1) + ')';
  };
  function HttpMethod_GET_getInstance() {
    HttpMethod_initEntries();
    return HttpMethod_GET_instance;
  }
  function HttpMethod_POST_getInstance() {
    HttpMethod_initEntries();
    return HttpMethod_POST_instance;
  }
  function HttpMethod_PUT_getInstance() {
    HttpMethod_initEntries();
    return HttpMethod_PUT_instance;
  }
  function HttpMethod_DELETE_getInstance() {
    HttpMethod_initEntries();
    return HttpMethod_DELETE_instance;
  }
  function lookupFromArray($this, indexValue, contentValue, aDimensions) {
    var indexAsList = listify(indexValue);
    if (!(indexAsList.n3h() === _Dimensions___get_size__impl__uu37ek(contentValue.o2i()))) {
      throwAPLException(details(new InvalidDimensionsException('Rank of argument does not match index. Argument=' + _Dimensions___get_size__impl__uu37ek(aDimensions) + ', index=' + indexAsList.n3h(), $this.i31_1), lookupFromArray$exceptionDetailsPrefix(reformatLines('\n                            In this case the array being indexed has rank ' + _Dimensions___get_size__impl__uu37ek(contentValue.o2i()) + ',\n                            and therefore the index specification must be a list of this many elements.\n                            The index contains ' + indexAsList.n3h() + ' elements, which is not equal to the array rank.\n                            '))));
    }
    var tmp = 0;
    var tmp_0 = indexAsList.n3h();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var axisSize = Dimensions__get_impl_4npepw(aDimensions, tmp_2);
      // Inline function 'kotlin.let' call
      var result = indexAsList.v4p(tmp_2).g2k();
      var tmp_3;
      if (_Dimensions___get_size__impl__uu37ek(result.o2i()) > 0) {
        // Inline function 'com.dhsdevelopments.kap.Companion.fromAPLValue' call
        var pos = $this.i31_1;
        var tmp_4;
        if (result instanceof IntArrayValue) {
          // Inline function 'kotlin.error' call
          throw IllegalStateException_init_$Create$(toString('foo'));
        } else {
          var tmp_5 = 0;
          var tmp_6 = result.n();
          var tmp_7 = new Int32Array(tmp_6);
          while (tmp_5 < tmp_6) {
            var tmp_8 = tmp_5;
            var v = result.r2i(tmp_8, pos);
            tmp_7[tmp_8] = Companion_getInstance_19().a2l(v, axisSize, $this.i31_1);
            tmp_5 = tmp_5 + 1 | 0;
          }
          var values = tmp_7;
          tmp_4 = new IntArrayValue(result.o2i(), values);
        }
        var tmp$ret$3 = tmp_4;
        tmp_3 = new Right(tmp$ret$3);
      } else {
        if (result instanceof APLNilValue) {
          var tmp_9 = dimensionsOfSize(new Int32Array([axisSize]));
          var tmp_10 = 0;
          var tmp_11 = new Int32Array(axisSize);
          while (tmp_10 < axisSize) {
            var tmp_12 = tmp_10;
            tmp_11[tmp_12] = tmp_12;
            tmp_10 = tmp_10 + 1 | 0;
          }
          tmp_3 = new Right(new IntArrayValue(tmp_9, tmp_11));
        } else {
          var tmp0_elvis_lhs = result.l2q();
          var tmp_13;
          if (tmp0_elvis_lhs == null) {
            throwAPLException(details(new IncompatibleTypeException('Array index must be an integer or an array of integers. Got: ' + result.a2q()), lookupFromArray$exceptionDetailsPrefix(reformatLines('                                    \n                                        When checking the indexes for axis ' + tmp_2 + ', it was not possible to convert this value to an integer or\n                                        an array of integers, since it is of the wrong type.\n                                        '))));
          } else {
            tmp_13 = tmp0_elvis_lhs;
          }
          var n = tmp_13;
          tmp_3 = new Left(Companion_getInstance_19().a2l(n.q2i($this.i31_1), axisSize, $this.i31_1));
        }
      }
      tmp_1[tmp_2] = tmp_3;
      tmp = tmp + 1 | 0;
    }
    var axis = tmp_1;
    return Companion_instance_25.c2l(contentValue, axis);
  }
  function lookupFromArray$exceptionDetailsPrefix(s) {
    return reformatLines('\n            The value being indexed is an array, and the index\n            must be a list of indexes specifying which elements to get\n            from each axis.\n            \n            ' + s + '            \n            ');
  }
  function ArrayIndex(content, indexInstr, pos) {
    Instruction.call(this, pos);
    this.h4s_1 = content;
    this.i4s_1 = indexInstr;
  }
  protoOf(ArrayIndex).j31 = function (context) {
    var indexValue = this.i4s_1.j31(context);
    var contentValue = this.h4s_1.j31(context).g2k();
    var aDimensions = contentValue.o2i();
    var tmp;
    if (contentValue instanceof APLMap) {
      tmp = mapLookupFromAPLValue(contentValue, indexValue, this.i31_1);
    } else {
      tmp = lookupFromArray(this, indexValue, contentValue, aDimensions);
    }
    return tmp;
  };
  protoOf(ArrayIndex).b1h = function () {
    return listOf([this.h4s_1, this.i4s_1]);
  };
  protoOf(ArrayIndex).x4m = function (updatedChildList, newPos) {
    return new ArrayIndex(updatedChildList.p(0), updatedChildList.p(1), newPos);
  };
  function computeLabels_1($this) {
    if (Dimensions__isEmpty_impl_2yd13($this.k4s_1)) {
      return null;
    }
    var tmp0_elvis_lhs = $this.j4s_1.p2r();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var contentLabels = tmp;
    var resultLabels = ArrayList_init_$Create$();
    var resultHasLabels = false;
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = $this.l4s_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var numAxisInSource = _Dimensions___get_size__impl__uu37ek(element.q4s_1.o4s_1);
      var tmp_0;
      switch (numAxisInSource) {
        case 0:
          throw IllegalStateException_init_$Create$('Source selection should not have 0 dimensions');
        case 1:
          var srcLabelList = contentLabels.q2r_1.p(element.s4s_1);
          var tmp_1;
          if (srcLabelList == null) {
            tmp_1 = null;
          } else {
            // Inline function 'kotlin.collections.map' call
            var this_0 = element.q4s_1.n4s_1;
            // Inline function 'kotlin.collections.mapTo' call
            var destination = ArrayList_init_$Create$_0(this_0.length);
            var inductionVariable = 0;
            var last = this_0.length;
            while (inductionVariable < last) {
              var item = this_0[inductionVariable];
              inductionVariable = inductionVariable + 1 | 0;
              // Inline function 'kotlin.also' call
              var this_1 = srcLabelList.p(item);
              if (!(this_1 == null))
                resultHasLabels = true;
              destination.h(this_1);
            }
            tmp_1 = destination;
          }

          tmp_0 = tmp_1;
          break;
        default:
          // Inline function 'kotlin.collections.map' call

          var this_2 = until(0, numAxisInSource);
          // Inline function 'kotlin.collections.mapTo' call

          var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_2, 10));
          var inductionVariable_0 = this_2.u_1;
          var last_0 = this_2.v_1;
          if (inductionVariable_0 <= last_0)
            do {
              var item_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              destination_0.h(null);
            }
             while (!(item_0 === last_0));
          tmp_0 = destination_0;
          break;
      }
      var res = tmp_0;
      resultLabels.h(res);
    }
    return resultHasLabels ? new DimensionLabels(resultLabels) : null;
  }
  function IndexedArrayValue$IndexedArrayValueMetadata$labels$delegate$lambda(this$0) {
    return function () {
      return computeLabels_1(this$0);
    };
  }
  function computeNewIndex($this, p) {
    if (_Dimensions___get_size__impl__uu37ek($this.t4s_1.o2i()) === 1 && _Dimensions___get_size__impl__uu37ek($this.u4s_1) === 1) {
      var srcAxisPos = $this.w4s_1.p(0).q4s_1.z4s(p);
      return srcAxisPos + $this.x4s_1 | 0;
    } else {
      var positionArray = DimensionMultipliers__positionFromIndex_impl_en9oiu($this.v4s_1, p);
      var result = $this.x4s_1;
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = $this.w4s_1.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        var tmp = 0;
        var tmp_0 = element.q4s_1.v2i();
        var tmp_1 = new Int32Array(tmp_0);
        while (tmp < tmp_0) {
          var tmp_2 = tmp;
          tmp_1[tmp_2] = positionArray[element.p4s_1 + tmp_2 | 0];
          tmp = tmp + 1 | 0;
        }
        var srcCoords = tmp_1;
        var srcAxisPos_0 = element.q4s_1.z4s(Dimensions__indexFromPosition$default_impl_khimhk(element.q4s_1.o4s_1, srcCoords));
        result = result + imul(srcAxisPos_0, element.r4s_1) | 0;
      }
      return result;
    }
  }
  function Companion_23() {
  }
  protoOf(Companion_23).c2l = function (content, indexValue) {
    var d = content.o2i();
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(indexValue.length === _Dimensions___get_size__impl__uu37ek(d))) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var tmp$ret$4;
    $l$block: {
      // Inline function 'kotlin.collections.all' call
      var inductionVariable = 0;
      var last = indexValue.length;
      while (inductionVariable < last) {
        var element = indexValue[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        if (!(element instanceof Left)) {
          tmp$ret$4 = false;
          break $l$block;
        }
      }
      tmp$ret$4 = true;
    }
    if (tmp$ret$4) {
      var tmp = 0;
      var tmp_0 = indexValue.length;
      var tmp_1 = new Int32Array(tmp_0);
      while (tmp < tmp_0) {
        var tmp_2 = tmp;
        var tmp_3 = indexValue[tmp_2];
        tmp_1[tmp_2] = (tmp_3 instanceof Left ? tmp_3 : THROW_CCE()).vz_1;
        tmp = tmp + 1 | 0;
      }
      var coords = tmp_1;
      return Companion_instance_51.s2i(content.h2k(Dimensions__indexFromPosition$default_impl_khimhk(d, coords)));
    } else {
      return new IndexedArrayValue(content, indexValue);
    }
  };
  var Companion_instance_25;
  function Companion_getInstance_25() {
    return Companion_instance_25;
  }
  function AxisValueAndOffset(sourceIndex, source, multiplier, sourceAxis) {
    this.p4s_1 = sourceIndex;
    this.q4s_1 = source;
    this.r4s_1 = multiplier;
    this.s4s_1 = sourceAxis;
  }
  function IndexedArrayValueMetadata(sourceMetadata, valueDimensions, destToSourceAxis) {
    this.j4s_1 = sourceMetadata;
    this.k4s_1 = valueDimensions;
    this.l4s_1 = destToSourceAxis;
    var tmp = this;
    tmp.m4s_1 = lazy(IndexedArrayValue$IndexedArrayValueMetadata$labels$delegate$lambda(this));
  }
  protoOf(IndexedArrayValueMetadata).p2r = function () {
    var tmp0 = this.m4s_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_13();
    return tmp0.x1();
  };
  function IndexedArrayValue$metadata$delegate$lambda(this$0) {
    return function () {
      // Inline function 'com.dhsdevelopments.kap.maybeDefaultMetadata' call
      var sourceMetadata = this$0.t4s_1.m2l();
      var tmp;
      if (sourceMetadata.y2r()) {
        tmp = DefaultMetadata_instance;
      } else {
        tmp = new IndexedArrayValueMetadata(sourceMetadata, this$0.u4s_1, this$0.w4s_1);
      }
      return tmp;
    };
  }
  function IndexedArrayValue(content, indexValue) {
    APLArray.call(this);
    this.t4s_1 = content;
    var contentMult = Dimensions__multipliers_impl_u1suko(this.t4s_1.o2i());
    var offset = 0;
    var a = ArrayList_init_$Create$();
    var destAxis = ArrayList_init_$Create$();
    var outputAxis = 0;
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var inductionVariable = 0;
    var last = indexValue.length;
    while (inductionVariable < last) {
      var item = indexValue[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      if (item instanceof Left) {
        offset = offset + imul(DimensionMultipliers__get_impl_90rsg3(contentMult, _unary__edvuaz), item.vz_1) | 0;
      } else {
        if (item instanceof Right) {
          // Inline function 'com.dhsdevelopments.kap.Dimensions.forEach' call
          var this_0 = item.wz_1.o4s_1;
          // Inline function 'kotlin.repeat' call
          var times = _Dimensions___get_size__impl__uu37ek(this_0);
          var inductionVariable_0 = 0;
          if (inductionVariable_0 < times)
            do {
              var index_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              var v = Dimensions__get_impl_4npepw(this_0, index_0);
              a.h(v);
            }
             while (inductionVariable_0 < times);
          destAxis.h(new AxisValueAndOffset(outputAxis, item.wz_1, DimensionMultipliers__get_impl_90rsg3(contentMult, _unary__edvuaz), _unary__edvuaz));
          outputAxis = outputAxis + _Dimensions___get_size__impl__uu37ek(item.wz_1.o4s_1) | 0;
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    this.u4s_1 = _Dimensions___init__impl__sxkzw4(toIntArray(a));
    this.v4s_1 = Dimensions__multipliers_impl_u1suko(this.u4s_1);
    this.w4s_1 = destAxis;
    this.x4s_1 = offset;
    var tmp = this;
    tmp.y4s_1 = lazy(IndexedArrayValue$metadata$delegate$lambda(this));
  }
  protoOf(IndexedArrayValue).o2i = function () {
    return this.u4s_1;
  };
  protoOf(IndexedArrayValue).f2n = function () {
    return this.t4s_1.f2n();
  };
  protoOf(IndexedArrayValue).h2k = function (p) {
    return this.t4s_1.h2k(computeNewIndex(this, p));
  };
  protoOf(IndexedArrayValue).r2i = function (p, pos) {
    return this.t4s_1.r2i(computeNewIndex(this, p), pos);
  };
  protoOf(IndexedArrayValue).i2n = function (p) {
    return this.t4s_1.i2n(computeNewIndex(this, p));
  };
  protoOf(IndexedArrayValue).y2p = function (p) {
    return this.t4s_1.y2p(computeNewIndex(this, p));
  };
  protoOf(IndexedArrayValue).m2l = function () {
    var tmp0 = this.y4s_1;
    // Inline function 'kotlin.getValue' call
    metadata$factory_11();
    return tmp0.x1();
  };
  protoOf(IndexedArrayValue).g2k = function () {
    return unwrapEnclosedSingleValue(this);
  };
  function metadata$factory_11() {
    return getPropertyCallableRef('metadata', 1, KProperty1, function (receiver) {
      return receiver.m2l();
    }, null);
  }
  function labels$factory_13() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function Instruction(pos) {
    this.i31_1 = pos;
  }
  protoOf(Instruction).k31 = function (context) {
    this.j31(context).r2k(true);
  };
  protoOf(Instruction).y4m = function () {
    throw new IncompatibleTypeParseException('Unable to assign to expression', this.i31_1);
  };
  function LiteralAPLValueInstruction(pos) {
    Instruction.call(this, pos);
  }
  function LiteralInteger_init_$Init$(value, pos, $this) {
    LiteralInteger.call($this, makeAPLNumber_0(value), pos);
    return $this;
  }
  function LiteralInteger_init_$Create$(value, pos) {
    return LiteralInteger_init_$Init$(value, pos, objectCreate(protoOf(LiteralInteger)));
  }
  function LiteralInteger(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.d4t_1 = valueInt;
  }
  protoOf(LiteralInteger).b4t = function () {
    return this.d4t_1;
  };
  protoOf(LiteralInteger).j31 = function (context) {
    return this.d4t_1;
  };
  protoOf(LiteralInteger).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralInteger).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralInteger(this.d4t_1, newPos);
  };
  protoOf(LiteralInteger).toString = function () {
    return 'LiteralInteger[value=' + this.d4t_1.toString() + ']';
  };
  protoOf(LiteralInteger).x1 = function () {
    return this.d4t_1.g2n_1;
  };
  function LiteralDouble_init_$Init$(value, pos, $this) {
    LiteralDouble.call($this, makeAPLNumber(value), pos);
    return $this;
  }
  function LiteralDouble_init_$Create$(value, pos) {
    return LiteralDouble_init_$Init$(value, pos, objectCreate(protoOf(LiteralDouble)));
  }
  function LiteralDouble(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.f4t_1 = valueInt;
  }
  protoOf(LiteralDouble).b4t = function () {
    return this.f4t_1;
  };
  protoOf(LiteralDouble).j31 = function (context) {
    return this.f4t_1;
  };
  protoOf(LiteralDouble).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralDouble).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralDouble(this.f4t_1, newPos);
  };
  protoOf(LiteralDouble).toString = function () {
    return 'LiteralDouble[value=' + this.f4t_1.toString() + ']';
  };
  protoOf(LiteralDouble).x1 = function () {
    return this.f4t_1.a2r_1;
  };
  function LiteralRational_init_$Init$(value, pos, $this) {
    LiteralRational.call($this, new APLRational(value), pos);
    return $this;
  }
  function LiteralRational_init_$Create$(value, pos) {
    return LiteralRational_init_$Init$(value, pos, objectCreate(protoOf(LiteralRational)));
  }
  function LiteralRational(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.h4t_1 = valueInt;
  }
  protoOf(LiteralRational).b4t = function () {
    return this.h4t_1;
  };
  protoOf(LiteralRational).j31 = function (context) {
    return this.h4t_1;
  };
  protoOf(LiteralRational).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralRational).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralRational(this.h4t_1, newPos);
  };
  protoOf(LiteralRational).toString = function () {
    return 'LiteralRational[value=' + this.h4t_1.toString() + ']';
  };
  function LiteralBigInt_init_$Init$(value, pos, $this) {
    LiteralBigInt.call($this, new APLBigInt(value), pos);
    return $this;
  }
  function LiteralBigInt_init_$Create$(value, pos) {
    return LiteralBigInt_init_$Init$(value, pos, objectCreate(protoOf(LiteralBigInt)));
  }
  function LiteralBigInt(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.j4t_1 = valueInt;
  }
  protoOf(LiteralBigInt).b4t = function () {
    return this.j4t_1;
  };
  protoOf(LiteralBigInt).j31 = function (context) {
    return this.j4t_1;
  };
  protoOf(LiteralBigInt).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralBigInt).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralBigInt(this.j4t_1, newPos);
  };
  protoOf(LiteralBigInt).toString = function () {
    return 'LiteralComplex[value=' + this.j4t_1.toString() + ']';
  };
  function LiteralComplex_init_$Init$(value, pos, $this) {
    LiteralComplex.call($this, new APLComplex(value), pos);
    return $this;
  }
  function LiteralComplex_init_$Create$(value, pos) {
    return LiteralComplex_init_$Init$(value, pos, objectCreate(protoOf(LiteralComplex)));
  }
  function LiteralComplex(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.l4t_1 = valueInt;
  }
  protoOf(LiteralComplex).b4t = function () {
    return this.l4t_1;
  };
  protoOf(LiteralComplex).j31 = function (context) {
    return this.l4t_1;
  };
  protoOf(LiteralComplex).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralComplex).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralComplex(this.l4t_1, newPos);
  };
  protoOf(LiteralComplex).toString = function () {
    return 'LiteralComplex[value=' + this.l4t_1.toString() + ']';
  };
  function LiteralCharacter_init_$Init$(value, pos, $this) {
    LiteralCharacter.call($this, new APLChar(value), pos);
    return $this;
  }
  function LiteralCharacter_init_$Create$(value, pos) {
    return LiteralCharacter_init_$Init$(value, pos, objectCreate(protoOf(LiteralCharacter)));
  }
  function LiteralCharacter(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.n4t_1 = valueInt;
  }
  protoOf(LiteralCharacter).b4t = function () {
    return this.n4t_1;
  };
  protoOf(LiteralCharacter).j31 = function (context) {
    return this.n4t_1;
  };
  protoOf(LiteralCharacter).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralCharacter).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralCharacter(this.n4t_1, newPos);
  };
  protoOf(LiteralCharacter).toString = function () {
    return 'LiteralCharacter[value=' + this.n4t_1.toString() + ']';
  };
  function ConstantValueInstruction(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.p4t_1 = valueInt;
  }
  protoOf(ConstantValueInstruction).b4t = function () {
    return this.p4t_1;
  };
  protoOf(ConstantValueInstruction).j31 = function (context) {
    return this.p4t_1;
  };
  protoOf(ConstantValueInstruction).b1h = function () {
    return emptyList();
  };
  protoOf(ConstantValueInstruction).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new ConstantValueInstruction(this.p4t_1, newPos);
  };
  function collectLongValues($this, firstValue, values, pos) {
    var result = ArrayList_init_$Create$();
    result.h(firstValue);
    var isBoolean = firstValue.equals(new Long(0, 0)) || firstValue.equals(new Long(1, 0));
    var inductionVariable = 1;
    var last = values.n();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var v = values.p(i);
        if (v instanceof LiteralInteger) {
          if (isBoolean && !v.x1().equals(new Long(0, 0)) && !v.x1().equals(new Long(1, 0))) {
            isBoolean = false;
          }
          result.h(v.x1());
        } else {
          return new Literal1DArray(values, collectLongValues$makePos(values, pos));
        }
      }
       while (inductionVariable < last);
    var tmp;
    if (isBoolean) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(result, 10));
      var _iterator__ex2g4s = result.k();
      while (_iterator__ex2g4s.l()) {
        var item = _iterator__ex2g4s.m();
        var tmp_0;
        if (item.equals(new Long(0, 0))) {
          tmp_0 = false;
        } else if (item.equals(new Long(1, 0))) {
          tmp_0 = true;
        } else {
          var message = 'Non-boolean value in array';
          throw IllegalStateException_init_$Create$(toString(message));
        }
        var tmp$ret$0 = tmp_0;
        destination.h(tmp$ret$0);
      }
      var booleanResultArray = toBooleanArray(destination);
      tmp = LiteralBooleanArray_init_$Create$(booleanResultArray, collectLongValues$makePos(values, pos));
    } else {
      tmp = LiteralLongArray_init_$Create$(toLongArray(result), collectLongValues$makePos(values, pos));
    }
    return tmp;
  }
  function collectDoubleValues($this, firstValue, values, pos) {
    var result = ArrayList_init_$Create$();
    result.h(firstValue);
    var inductionVariable = 1;
    var last = values.n();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var v = values.p(i);
        if (v instanceof LiteralDouble) {
          result.h(v.x1());
        } else {
          return new Literal1DArray(values, collectDoubleValues$makePos(values, pos));
        }
      }
       while (inductionVariable < last);
    return LiteralDoubleArray_init_$Create$(toDoubleArray(result), collectDoubleValues$makePos(values, pos));
  }
  function collectLongValues$makePos($values, $pos) {
    var tmp;
    if ($values.o()) {
      tmp = $pos;
    } else {
      tmp = $pos.q4t(last($values).i31_1);
    }
    return tmp;
  }
  function collectDoubleValues$makePos($values, $pos) {
    var tmp;
    if ($values.o()) {
      tmp = $pos;
    } else {
      tmp = $pos.q4t(last($values).i31_1);
    }
    return tmp;
  }
  function Companion_24() {
  }
  protoOf(Companion_24).r4t = function (values) {
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.require' call
    if (!!values.o()) {
      var message = 'attempt to create empty Literal1DArray';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var firstElement = values.p(0);
    var tmp;
    if (firstElement instanceof LiteralInteger) {
      tmp = collectLongValues(this, firstElement.x1(), values, firstElement.i31_1);
    } else {
      if (firstElement instanceof LiteralDouble) {
        tmp = collectDoubleValues(this, firstElement.x1(), values, firstElement.i31_1);
      } else {
        tmp = new Literal1DArray(values, firstElement.i31_1);
      }
    }
    return tmp;
  };
  var Companion_instance_26;
  function Companion_getInstance_26() {
    return Companion_instance_26;
  }
  function Literal1DArray$deriveLvalueReader$1($innerReaders, this$0) {
    this.s4t_1 = $innerReaders;
    this.t4t_1 = this$0;
  }
  protoOf(Literal1DArray$deriveLvalueReader$1).u4t = function (context, value) {
    if (!(_Dimensions___get_size__impl__uu37ek(value.o2i()) === 1) || !(Dimensions__get_impl_4npepw(value.o2i(), 0) === this.s4t_1.n())) {
      throwAPLException(new DestructuringAssignmentShapeMismatch('In destructuring assignment, expected a rank-1 array of ' + this.s4t_1.n() + ', got dimensions: ' + Dimensions__toString_impl_fhouq4(value.o2i()) + '}', this.t4t_1.i31_1));
    }
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = this.s4t_1.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var i = checkIndexOverflow(_unary__edvuaz);
      item.u4t(context, value.h2k(i));
    }
  };
  function Literal1DArray(values, pos) {
    Instruction.call(this, pos);
    this.w4t_1 = values;
  }
  protoOf(Literal1DArray).j31 = function (context) {
    var size = this.w4t_1.n();
    var tmp = 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_0 = Array(size);
    while (tmp < size) {
      tmp_0[tmp] = null;
      tmp = tmp + 1 | 0;
    }
    var result = tmp_0;
    var inductionVariable = size - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        result[i] = this.w4t_1.p(i).j31(context);
      }
       while (0 <= inductionVariable);
    // Inline function 'com.dhsdevelopments.kap.Companion.make' call
    var dimensions = dimensionsOfSize(new Int32Array([size]));
    var st = {_v: new ArrayMemberType(Companion_getInstance_45().d2k_1)};
    var tmp_1 = 0;
    var tmp_2 = Dimensions__contentSize_impl_4eihds(dimensions);
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_3 = Array(tmp_2);
    while (tmp_1 < tmp_2) {
      var tmp_4 = tmp_1;
      // Inline function 'kotlin.also' call
      var this_0 = ensureNotNull(result[tmp_4]);
      st._v = new ArrayMemberType(ArrayMemberType__intersection_impl_osmuy1(st._v.e2k_1, this_0.f2k()));
      tmp_3[tmp_4] = this_0;
      tmp_1 = tmp_1 + 1 | 0;
    }
    var content = tmp_3;
    return new APLArrayImpl(dimensions, content, st._v.e2k_1);
  };
  protoOf(Literal1DArray).b1h = function () {
    return this.w4t_1;
  };
  protoOf(Literal1DArray).x4m = function (updatedChildList, newPos) {
    return new Literal1DArray(updatedChildList, newPos);
  };
  protoOf(Literal1DArray).y4m = function () {
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.w4t_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = item.y4m();
      destination.h(tmp$ret$0);
    }
    var innerReaders = destination;
    return new Literal1DArray$deriveLvalueReader$1(innerReaders, this);
  };
  protoOf(Literal1DArray).toString = function () {
    return 'Literal1DArray(' + toString(this.w4t_1) + ')';
  };
  function UserFunctionImpl($outer, pos) {
    this.d4u_1 = $outer;
    APLFunction.call(this, pos);
    var tmp = this;
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.d4u_1.f4u_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = new StackStorageRef(item);
      destination.h(tmp$ret$0);
    }
    tmp.b4u_1 = destination;
    var tmp_0 = this;
    // Inline function 'kotlin.collections.map' call
    var this_1 = this.d4u_1.g4u_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_1, 10));
    var _iterator__ex2g4s_0 = this_1.k();
    while (_iterator__ex2g4s_0.l()) {
      var item_0 = _iterator__ex2g4s_0.m();
      var tmp$ret$3 = new StackStorageRef(item_0);
      destination_0.h(tmp$ret$3);
    }
    tmp_0.c4u_1 = destination_0;
  }
  protoOf(UserFunctionImpl).w2g = function (context, a, axis) {
    var tmp0 = this.d4u_1.i4u_1;
    var tmp1 = this.d4u_1.e4u_1.t3e();
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.t2g_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame);
    var result;
    try {
      context.u4p(this.c4u_1, a, this.t2g_1);
      result = this.d4u_1.h4u_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame.i4m();
    }
    return result;
  };
  protoOf(UserFunctionImpl).a2h = function (context, a, b, axis) {
    var tmp0 = this.d4u_1.i4u_1;
    var tmp1 = this.d4u_1.e4u_1.t3e();
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.t2g_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame);
    var result;
    try {
      context.u4p(this.b4u_1, a, this.t2g_1);
      context.u4p(this.c4u_1, b, this.t2g_1);
      result = this.d4u_1.h4u_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame.i4m();
    }
    return result;
  };
  function UserFunction(name, leftFnArgs, rightFnArgs, instr, env) {
    this.e4u_1 = name;
    this.f4u_1 = leftFnArgs;
    this.g4u_1 = rightFnArgs;
    this.h4u_1 = instr;
    this.i4u_1 = env;
  }
  protoOf(UserFunction).i2i = function (instantiation) {
    return new UserFunctionImpl(this, instantiation);
  };
  function EmptyValueMarker(pos) {
    Instruction.call(this, pos);
  }
  protoOf(EmptyValueMarker).j31 = function (context) {
    return APLNilValue_getInstance();
  };
  protoOf(EmptyValueMarker).b1h = function () {
    return emptyList();
  };
  protoOf(EmptyValueMarker).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new EmptyValueMarker(newPos);
  };
  function LiteralAPLList_init_$Init$(instructions, $this) {
    LiteralAPLList.call($this, instructions, instructions.p(0).i31_1);
    return $this;
  }
  function LiteralAPLList_init_$Create$(instructions) {
    return LiteralAPLList_init_$Init$(instructions, objectCreate(protoOf(LiteralAPLList)));
  }
  function LiteralAPLList$deriveLvalueReader$1(this$0, $innerReaders) {
    this.k4u_1 = this$0;
    this.l4u_1 = $innerReaders;
  }
  protoOf(LiteralAPLList$deriveLvalueReader$1).u4t = function (context, value) {
    if (!(value instanceof APLList)) {
      throwAPLException(new DestructuringAssignmentShapeMismatch('In destructuring assignment, expected a list, got: ' + value.z2p().p2(), this.k4u_1.i31_1));
    }
    if (!(value.n3h() === this.l4u_1.n())) {
      throwAPLException(new DestructuringAssignmentShapeMismatch('In destructuring assignment, expected a list of size ' + this.l4u_1.n() + ', got: ' + value.n3h(), this.k4u_1.i31_1));
    }
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = this.l4u_1.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var i = checkIndexOverflow(_unary__edvuaz);
      item.u4t(context, value.v4p(i));
    }
  };
  function LiteralAPLList(instructions, pos) {
    Instruction.call(this, pos);
    this.n4u_1 = instructions;
  }
  protoOf(LiteralAPLList).j31 = function (context) {
    var resultList = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this.n4u_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      resultList.h(element.j31(context));
    }
    return new APLList(resultList);
  };
  protoOf(LiteralAPLList).b1h = function () {
    return this.n4u_1;
  };
  protoOf(LiteralAPLList).x4m = function (updatedChildList, newPos) {
    return new LiteralAPLList(updatedChildList, newPos);
  };
  protoOf(LiteralAPLList).y4m = function () {
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.n4u_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = item.y4m();
      destination.h(tmp$ret$0);
    }
    var innerReaders = destination;
    return new LiteralAPLList$deriveLvalueReader$1(this, innerReaders);
  };
  protoOf(LiteralAPLList).toString = function () {
    return 'LiteralAPLList[instructions=' + toString(this.n4u_1) + ']';
  };
  function FunctionCall2Arg(fn, leftArgs, rightArgs, pos) {
    FunctionCallInstruction.call(this, pos);
    this.p4u_1 = fn;
    this.q4u_1 = leftArgs;
    this.r4u_1 = rightArgs;
  }
  protoOf(FunctionCall2Arg).j31 = function (context) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.FunctionCallInstruction.withStackRecovery' call
      try {
        tmp$ret$1 = this.p4u_1.g2h(context, this.q4u_1, this.r4u_1);
        break $l$block;
      } catch ($p) {
        if ($p instanceof APLEvalException) {
          var e = $p;
          var stack = currentStorageStackOrNull();
          var exceptionStack = e.a3a_1;
          if (!(stack == null) && !(exceptionStack == null)) {
            var activeFrame = last(stack.r3b_1);
            // Inline function 'kotlin.collections.find' call
            var tmp0 = exceptionStack.n4j_1;
            var tmp$ret$3;
            $l$block_0: {
              // Inline function 'kotlin.collections.firstOrNull' call
              var _iterator__ex2g4s = tmp0.k();
              while (_iterator__ex2g4s.l()) {
                var element = _iterator__ex2g4s.m();
                if (element.l4j_1 === activeFrame) {
                  tmp$ret$3 = element;
                  break $l$block_0;
                }
              }
              tmp$ret$3 = null;
            }
            var matchedFrame = tmp$ret$3;
            if (!(matchedFrame == null)) {
              matchedFrame.m4j_1 = this.i31_1;
            }
          }
          throw e;
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(FunctionCall2Arg).k31 = function (context) {
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.FunctionCallInstruction.withStackRecovery' call
      try {
        this.p4u_1.h2h(context, this.q4u_1, this.r4u_1);
        break $l$block;
      } catch ($p) {
        if ($p instanceof APLEvalException) {
          var e = $p;
          var stack = currentStorageStackOrNull();
          var exceptionStack = e.a3a_1;
          if (!(stack == null) && !(exceptionStack == null)) {
            var activeFrame = last(stack.r3b_1);
            // Inline function 'kotlin.collections.find' call
            var tmp0 = exceptionStack.n4j_1;
            var tmp$ret$3;
            $l$block_0: {
              // Inline function 'kotlin.collections.firstOrNull' call
              var _iterator__ex2g4s = tmp0.k();
              while (_iterator__ex2g4s.l()) {
                var element = _iterator__ex2g4s.m();
                if (element.l4j_1 === activeFrame) {
                  tmp$ret$3 = element;
                  break $l$block_0;
                }
              }
              tmp$ret$3 = null;
            }
            var matchedFrame = tmp$ret$3;
            if (!(matchedFrame == null)) {
              matchedFrame.m4j_1 = this.i31_1;
            }
          }
          throw e;
        } else {
          throw $p;
        }
      }
    }
  };
  protoOf(FunctionCall2Arg).b1h = function () {
    return listOf([this.q4u_1, this.r4u_1]);
  };
  protoOf(FunctionCall2Arg).x4m = function (updatedChildList, newPos) {
    return new FunctionCall2Arg(this.p4u_1, updatedChildList.p(0), updatedChildList.p(1), newPos);
  };
  protoOf(FunctionCall2Arg).toString = function () {
    return 'FunctionCall2Arg(fn=' + toString(this.p4u_1) + ', leftArgs=' + toString(this.q4u_1) + ', rightArgs=' + toString(this.r4u_1) + ')';
  };
  function FunctionCall1Arg(fn, rightArgs, pos) {
    FunctionCallInstruction.call(this, pos);
    this.t4u_1 = fn;
    this.u4u_1 = rightArgs;
  }
  protoOf(FunctionCall1Arg).j31 = function (context) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.FunctionCallInstruction.withStackRecovery' call
      try {
        tmp$ret$1 = this.t4u_1.d2h(context, this.u4u_1);
        break $l$block;
      } catch ($p) {
        if ($p instanceof APLEvalException) {
          var e = $p;
          var stack = currentStorageStackOrNull();
          var exceptionStack = e.a3a_1;
          if (!(stack == null) && !(exceptionStack == null)) {
            var activeFrame = last(stack.r3b_1);
            // Inline function 'kotlin.collections.find' call
            var tmp0 = exceptionStack.n4j_1;
            var tmp$ret$3;
            $l$block_0: {
              // Inline function 'kotlin.collections.firstOrNull' call
              var _iterator__ex2g4s = tmp0.k();
              while (_iterator__ex2g4s.l()) {
                var element = _iterator__ex2g4s.m();
                if (element.l4j_1 === activeFrame) {
                  tmp$ret$3 = element;
                  break $l$block_0;
                }
              }
              tmp$ret$3 = null;
            }
            var matchedFrame = tmp$ret$3;
            if (!(matchedFrame == null)) {
              matchedFrame.m4j_1 = this.i31_1;
            }
          }
          throw e;
        } else {
          throw $p;
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(FunctionCall1Arg).k31 = function (context) {
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.FunctionCallInstruction.withStackRecovery' call
      try {
        this.t4u_1.e2h(context, this.u4u_1);
        break $l$block;
      } catch ($p) {
        if ($p instanceof APLEvalException) {
          var e = $p;
          var stack = currentStorageStackOrNull();
          var exceptionStack = e.a3a_1;
          if (!(stack == null) && !(exceptionStack == null)) {
            var activeFrame = last(stack.r3b_1);
            // Inline function 'kotlin.collections.find' call
            var tmp0 = exceptionStack.n4j_1;
            var tmp$ret$3;
            $l$block_0: {
              // Inline function 'kotlin.collections.firstOrNull' call
              var _iterator__ex2g4s = tmp0.k();
              while (_iterator__ex2g4s.l()) {
                var element = _iterator__ex2g4s.m();
                if (element.l4j_1 === activeFrame) {
                  tmp$ret$3 = element;
                  break $l$block_0;
                }
              }
              tmp$ret$3 = null;
            }
            var matchedFrame = tmp$ret$3;
            if (!(matchedFrame == null)) {
              matchedFrame.m4j_1 = this.i31_1;
            }
          }
          throw e;
        } else {
          throw $p;
        }
      }
    }
  };
  protoOf(FunctionCall1Arg).b1h = function () {
    return listOf_0(this.u4u_1);
  };
  protoOf(FunctionCall1Arg).x4m = function (updatedChildList, newPos) {
    return new FunctionCall1Arg(this.t4u_1, updatedChildList.p(0), newPos);
  };
  protoOf(FunctionCall1Arg).toString = function () {
    return 'FunctionCall1Arg(fn=' + toString(this.t4u_1) + ', rightArgs=' + toString(this.u4u_1) + ')';
  };
  function computeOptimisationFlags_0($this) {
    return _OptimisationFlags___init__impl__uhe3e(0);
  }
  function Chain2(pos, fn0, fn1) {
    FunctionCallChain.call(this, pos, listOf([fn0, fn1]));
    this.z4u_1 = computeOptimisationFlags_0(this);
    this.a4v_1 = new StructuralUnderOp();
  }
  protoOf(Chain2).r2g = function () {
    return this.s2g_1.p(0);
  };
  protoOf(Chain2).y2g = function () {
    return this.s2g_1.p(1);
  };
  protoOf(Chain2).l2h = function () {
    return this.z4u_1;
  };
  protoOf(Chain2).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    var res = this.y2g().w2g(context, a, null);
    return this.r2g().w2g(context, res, null);
  };
  protoOf(Chain2).a2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    var res = this.y2g().a2h(context, a, b, null);
    return this.r2g().w2g(context, res, null);
  };
  protoOf(Chain2).q2h = function (context, a, axis) {
    ensureAxisNull(this, axis);
    var res = this.r2g().q2h(context, a, null);
    return this.y2g().q2h(context, res, null);
  };
  protoOf(Chain2).v2h = function (baseFn, context, a, axis) {
    ensureAxisNull(this, axis);
    var innerFn = this.a4v_1.l2g(baseFn, this.r2g(), this.r2g().c2h()).i2i(this.c2h());
    var outerFn = this.a4v_1.l2g(innerFn, this.y2g(), this.y2g().c2h()).i2i(this.c2h());
    return outerFn.w2g(context, a, null);
  };
  protoOf(Chain2).r2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    var res = this.r2g().q2h(context, b, null);
    return this.y2g().r2h(context, a, res, null);
  };
  protoOf(Chain2).u2h = function (fns) {
    return new Chain2(this.c2h(), fns.p(0), fns.p(1));
  };
  function Chain3(pos, fn0, fn1, fn2) {
    FunctionCallChain.call(this, pos, listOf([fn0, fn1, fn2]));
  }
  protoOf(Chain3).r2g = function () {
    return this.s2g_1.p(0);
  };
  protoOf(Chain3).y2g = function () {
    return this.s2g_1.p(1);
  };
  protoOf(Chain3).f4v = function () {
    return this.s2g_1.p(2);
  };
  protoOf(Chain3).w2g = function (context, a, axis) {
    ensureAxisNull(this, axis);
    var right = this.f4v().w2g(context, a, null);
    var left = this.r2g().w2g(context, a, null);
    return this.y2g().a2h(context, left, right, null);
  };
  protoOf(Chain3).a2h = function (context, a, b, axis) {
    ensureAxisNull(this, axis);
    var right = this.f4v().a2h(context, a, b, null);
    var left = this.r2g().a2h(context, a, b, null);
    return this.y2g().a2h(context, left, right, null);
  };
  protoOf(Chain3).u2h = function (fns) {
    return new Chain3(this.c2h(), fns.p(0), fns.p(1), fns.p(2));
  };
  function FunctionCallChain(pos, fns) {
    APLFunction.call(this, pos, fns);
  }
  function DestructureAssignInstruction(lvalueReader, arg, pos) {
    Instruction.call(this, pos);
    this.h4v_1 = lvalueReader;
    this.i4v_1 = arg;
  }
  protoOf(DestructureAssignInstruction).j31 = function (context) {
    var res = this.i4v_1.j31(context);
    var v = res.x2g();
    this.h4v_1.u4t(context, v);
    return v;
  };
  protoOf(DestructureAssignInstruction).b1h = function () {
    return listOf_0(this.i4v_1);
  };
  protoOf(DestructureAssignInstruction).x4m = function (updatedChildList, newPos) {
    return new DestructureAssignInstruction(this.h4v_1, updatedChildList.p(0), newPos);
  };
  function LiteralAPLNullValue(pos) {
    LiteralAPLValueInstruction.call(this, pos);
  }
  protoOf(LiteralAPLNullValue).b4t = function () {
    return APLNullValue_getInstance();
  };
  protoOf(LiteralAPLNullValue).j31 = function (context) {
    return APLNullValue_getInstance();
  };
  protoOf(LiteralAPLNullValue).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralAPLNullValue).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralAPLNullValue(newPos);
  };
  function DummyInstr(pos) {
    Instruction.call(this, pos);
  }
  protoOf(DummyInstr).j31 = function (context) {
    throw IllegalStateException_init_$Create$('Attempt to call dummy instruction');
  };
  protoOf(DummyInstr).b1h = function () {
    return emptyList();
  };
  protoOf(DummyInstr).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new DummyInstr(newPos);
  };
  function MemberDereferenceInstruction(leftInstr, rightInstr, pos) {
    Instruction.call(this, pos);
    this.m4v_1 = leftInstr;
    this.n4v_1 = rightInstr;
  }
  protoOf(MemberDereferenceInstruction).j31 = function (context) {
    var rightValue = this.n4v_1.j31(context);
    var leftValue = this.m4v_1.j31(context).g2k();
    var tmp;
    if (leftValue instanceof APLMap) {
      var tmp0_elvis_lhs = leftValue.o3n(rightValue.s2o());
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        throwAPLException(new KeyNotFoundException(this.i31_1));
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      if (leftValue instanceof APLList) {
        tmp = leftValue.o3h(rightValue.p2i(this.i31_1).q2i(this.i31_1), this.i31_1);
      } else {
        if (_Dimensions___get_size__impl__uu37ek(leftValue.o2i()) > 0) {
          var rightValueDimensions = rightValue.o2i();
          var tmp_1;
          switch (_Dimensions___get_size__impl__uu37ek(rightValueDimensions)) {
            case 0:
              tmp_1 = Dimensions__indexFromPositionNegativeSupport_impl_bjb4c5_0(leftValue.o2i(), rightValue.p2i(this.i31_1).q2i(this.i31_1), this.i31_1);
              break;
            case 1:
              tmp_1 = Dimensions__indexFromPositionNegativeSupport_impl_bjb4c5(leftValue.o2i(), rightValue.y2k(this.i31_1), this.i31_1);
              break;
            default:
              throwAPLException(new InvalidDimensionsException('Index must be a scalar or 1-dimensional array', this.i31_1));
              break;
          }
          var index = tmp_1;
          tmp = leftValue.h2k(index);
        } else {
          throwAPLException(new IncompatibleTypeException('Invalid type for member dereference. Got: ' + leftValue.z2p().p2()));
        }
      }
    }
    return tmp;
  };
  protoOf(MemberDereferenceInstruction).b1h = function () {
    return listOf([this.m4v_1, this.n4v_1]);
  };
  protoOf(MemberDereferenceInstruction).x4m = function (updatedChildList, newPos) {
    return new MemberDereferenceInstruction(updatedChildList.p(0), updatedChildList.p(1), newPos);
  };
  function LiteralSymbol_init_$Init$(name, pos, $this) {
    LiteralSymbol.call($this, new APLSymbol(name), pos);
    return $this;
  }
  function LiteralSymbol_init_$Create$(name, pos) {
    return LiteralSymbol_init_$Init$(name, pos, objectCreate(protoOf(LiteralSymbol)));
  }
  function LiteralSymbol(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.p4v_1 = valueInt;
  }
  protoOf(LiteralSymbol).b4t = function () {
    return this.p4v_1;
  };
  protoOf(LiteralSymbol).j31 = function (context) {
    return this.p4v_1;
  };
  protoOf(LiteralSymbol).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralSymbol).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralSymbol(this.p4v_1, newPos);
  };
  function LiteralStringValue_init_$Init$(value, pos, $this) {
    LiteralStringValue.call($this, Companion_getInstance_46().k2o(value), pos);
    return $this;
  }
  function LiteralStringValue_init_$Create$(value, pos) {
    return LiteralStringValue_init_$Init$(value, pos, objectCreate(protoOf(LiteralStringValue)));
  }
  function LiteralStringValue(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.r4v_1 = valueInt;
  }
  protoOf(LiteralStringValue).b4t = function () {
    return this.r4v_1;
  };
  protoOf(LiteralStringValue).j31 = function (context) {
    return this.r4v_1;
  };
  protoOf(LiteralStringValue).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralStringValue).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralStringValue(this.r4v_1, newPos);
  };
  function EvalLambdaFnx(fn, pos, relatedInstructions) {
    relatedInstructions = relatedInstructions === VOID ? emptyList() : relatedInstructions;
    Instruction.call(this, pos);
    this.t4v_1 = fn;
    this.u4v_1 = relatedInstructions;
  }
  protoOf(EvalLambdaFnx).j31 = function (context) {
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = asReversed(this.u4v_1).k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      element.j31(context);
    }
    return new LambdaValue(this.t4v_1, currentStorageStack().s3b());
  };
  protoOf(EvalLambdaFnx).b1h = function () {
    return this.u4v_1;
  };
  protoOf(EvalLambdaFnx).x4m = function (updatedChildList, newPos) {
    return new EvalLambdaFnx(this.t4v_1, newPos, updatedChildList);
  };
  function VariableRef$deriveLvalueReader$1(this$0) {
    this.v4v_1 = this$0;
  }
  protoOf(VariableRef$deriveLvalueReader$1).u4t = function (context, value) {
    context.t4p(this.v4v_1.i4l_1, value);
  };
  function VariableRef(name, storageRef, pos) {
    Instruction.call(this, pos);
    this.h4l_1 = name;
    this.i4l_1 = storageRef;
  }
  protoOf(VariableRef).j31 = function (context) {
    var tmp0_elvis_lhs = currentStorageStack().w4m(this.i4l_1).d4m();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new VariableNotAssigned(this.i4l_1.p2(), this.i31_1));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(VariableRef).b1h = function () {
    return emptyList();
  };
  protoOf(VariableRef).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new VariableRef(this.h4l_1, this.i4l_1, newPos);
  };
  protoOf(VariableRef).y4m = function () {
    if (this.i4l_1.j4m_1.e4i().i4i_1) {
      throw new AssignmentToConstantException(this.i4l_1.j4m_1.b4i_1, this.i31_1);
    }
    return new VariableRef$deriveLvalueReader$1(this);
  };
  protoOf(VariableRef).toString = function () {
    return 'Var(' + this.h4l_1.toString() + ')';
  };
  function resolveFn($this, context) {
    var result = $this.a4w_1.j31(context);
    var v = result.g2k();
    if (!(v instanceof LambdaValue)) {
      throwAPLException(new IncompatibleTypeException('Cannot evaluate values of type: ' + v.z2p().p2(), $this.t2g_1));
    }
    return v.f3a();
  }
  function DynamicFunctionImpl(instr, pos, bindEnv) {
    bindEnv = bindEnv === VOID ? null : bindEnv;
    APLFunction.call(this, pos);
    this.a4w_1 = instr;
    this.b4w_1 = bindEnv;
  }
  protoOf(DynamicFunctionImpl).w2g = function (context, a, axis) {
    return resolveFn(this, context).w2g(context, a, axis);
  };
  protoOf(DynamicFunctionImpl).a2h = function (context, a, b, axis) {
    return resolveFn(this, context).a2h(context, a, b, axis);
  };
  protoOf(DynamicFunctionImpl).q2h = function (context, a, axis) {
    return resolveFn(this, context).q2h(context, a, axis);
  };
  protoOf(DynamicFunctionImpl).r2h = function (context, a, b, axis) {
    return resolveFn(this, context).r2h(context, a, b, axis);
  };
  protoOf(DynamicFunctionImpl).s2h = function (context, a, b, axis) {
    return resolveFn(this, context).s2h(context, a, b, axis);
  };
  protoOf(DynamicFunctionImpl).v2h = function (baseFn, context, a, axis) {
    return resolveFn(this, context).v2h(baseFn, context, a, axis);
  };
  protoOf(DynamicFunctionImpl).w2h = function (baseFn, context, a, b, axis) {
    return resolveFn(this, context).w2h(baseFn, context, a, b, axis);
  };
  protoOf(DynamicFunctionImpl).x2h = function () {
    return this.b4w_1 == null ? emptyList() : listOf_0(this.b4w_1);
  };
  protoOf(DynamicFunctionImpl).t2h = function (parser) {
    var sym = parser.u4k_1.l4q_1.o4o('leftAssignedFunction');
    var binding = parser.e4l().s4o(sym);
    var ref = new StackStorageRef(binding);
    var list = listOf_0(Companion_instance_28.q4q(ref, this.a4w_1, this.t2g_1));
    var env = parser.e4l();
    return new Pair(new DynamicFunctionImpl(new VariableRef(sym, ref, this.t2g_1), new FunctionInstantiation(parser.u4k_1.l4q_1, this.t2g_1, env), env), list);
  };
  function DynamicFunctionDescriptor(instr) {
    this.c4w_1 = instr;
  }
  protoOf(DynamicFunctionDescriptor).i2i = function (instantiation) {
    return new DynamicFunctionImpl(this.c4w_1, instantiation, instantiation.e38_1.d4w() ? instantiation.e38_1 : null);
  };
  function computePos_1($this, l) {
    var tmp;
    switch (l.n()) {
      case 0:
        throw IllegalStateException_init_$Create$('Empty instruction list');
      case 1:
        tmp = l.p(0).i31_1;
        break;
      default:
        // Inline function 'kotlin.let' call

        var last_0 = last(l).i31_1;
        tmp = l.p(0).i31_1.g4w(VOID, VOID, VOID, VOID, last_0.e4w(), last_0.f4w());
        break;
    }
    return tmp;
  }
  function InstructionList_init_$Init$(instructions, $this) {
    InstructionList.call($this, instructions, computePos_1(Companion_instance_27, instructions));
    return $this;
  }
  function InstructionList_init_$Create$(instructions) {
    return InstructionList_init_$Init$(instructions, objectCreate(protoOf(InstructionList)));
  }
  function Companion_25() {
  }
  var Companion_instance_27;
  function Companion_getInstance_27() {
    return Companion_instance_27;
  }
  function InstructionList(instructions, pos) {
    Instruction.call(this, pos);
    this.i4w_1 = instructions;
  }
  protoOf(InstructionList).j31 = function (context) {
    var len = this.i4w_1.n();
    var inductionVariable = 0;
    var last = len - 1 | 0;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var instr = this.i4w_1.p(i);
        instr.k31(context);
      }
       while (inductionVariable < last);
    return this.i4w_1.p(len - 1 | 0).j31(context);
  };
  protoOf(InstructionList).b1h = function () {
    return this.i4w_1;
  };
  protoOf(InstructionList).x4m = function (updatedChildList, newPos) {
    return new InstructionList(updatedChildList, this.i31_1);
  };
  function Companion_26() {
  }
  protoOf(Companion_26).q4q = function (variableRef, instr, pos) {
    if (variableRef.j4m_1.e4i().i4i_1) {
      throw new AssignmentToConstantException(variableRef.j4m_1.b4i_1, pos);
    }
    return new AssignmentInstruction(variableRef, instr, pos);
  };
  var Companion_instance_28;
  function Companion_getInstance_28() {
    return Companion_instance_28;
  }
  function AssignmentInstruction(variableRef, instr, pos) {
    Instruction.call(this, pos);
    this.k4w_1 = variableRef;
    this.l4w_1 = instr;
  }
  protoOf(AssignmentInstruction).j31 = function (context) {
    var res = this.l4w_1.j31(context).x2g();
    context.t4p(this.k4w_1, res);
    return res;
  };
  protoOf(AssignmentInstruction).b1h = function () {
    return listOf_0(this.l4w_1);
  };
  protoOf(AssignmentInstruction).x4m = function (updatedChildList, newPos) {
    return new AssignmentInstruction(this.k4w_1, updatedChildList.p(0), newPos);
  };
  function LiteralBooleanArray_init_$Init$(value, pos, $this) {
    LiteralBooleanArray.call($this, new APLArrayBoolean(dimensionsOfSize(new Int32Array([value.length])), value), pos);
    return $this;
  }
  function LiteralBooleanArray_init_$Create$(value, pos) {
    return LiteralBooleanArray_init_$Init$(value, pos, objectCreate(protoOf(LiteralBooleanArray)));
  }
  function LiteralBooleanArray(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.n4w_1 = valueInt;
  }
  protoOf(LiteralBooleanArray).b4t = function () {
    return this.n4w_1;
  };
  protoOf(LiteralBooleanArray).j31 = function (context) {
    return this.n4w_1;
  };
  protoOf(LiteralBooleanArray).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralBooleanArray).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralBooleanArray(this.n4w_1, newPos);
  };
  function LiteralLongArray_init_$Init$(value, pos, $this) {
    LiteralLongArray.call($this, new APLArrayLong(dimensionsOfSize(new Int32Array([value.length])), value), pos);
    return $this;
  }
  function LiteralLongArray_init_$Create$(value, pos) {
    return LiteralLongArray_init_$Init$(value, pos, objectCreate(protoOf(LiteralLongArray)));
  }
  function LiteralLongArray(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.p4w_1 = valueInt;
  }
  protoOf(LiteralLongArray).b4t = function () {
    return this.p4w_1;
  };
  protoOf(LiteralLongArray).j31 = function (context) {
    return this.p4w_1;
  };
  protoOf(LiteralLongArray).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralLongArray).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralLongArray(this.p4w_1, newPos);
  };
  function LiteralDoubleArray_init_$Init$(value, pos, $this) {
    LiteralDoubleArray.call($this, new APLArrayDouble(dimensionsOfSize(new Int32Array([value.length])), value), pos);
    return $this;
  }
  function LiteralDoubleArray_init_$Create$(value, pos) {
    return LiteralDoubleArray_init_$Init$(value, pos, objectCreate(protoOf(LiteralDoubleArray)));
  }
  function LiteralDoubleArray(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.r4w_1 = valueInt;
  }
  protoOf(LiteralDoubleArray).b4t = function () {
    return this.r4w_1;
  };
  protoOf(LiteralDoubleArray).j31 = function (context) {
    return this.r4w_1;
  };
  protoOf(LiteralDoubleArray).b1h = function () {
    return emptyList();
  };
  protoOf(LiteralDoubleArray).x4m = function (updatedChildList, newPos) {
    // Inline function 'com.dhsdevelopments.kap.Instruction.ensureEmptyChildList' call
    // Inline function 'kotlin.require' call
    if (!updatedChildList.o()) {
      var message = 'updated child list must be empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new LiteralDoubleArray(this.r4w_1, newPos);
  };
  function FunctionCallInstruction(pos) {
    Instruction.call(this, pos);
  }
  function NullCharacterOutput() {
  }
  protoOf(NullCharacterOutput).d3i = function (s) {
    return Unit_instance;
  };
  function CharacterProvider$lines$lambda(this$0) {
    return function () {
      return this$0.z3k();
    };
  }
  function CharacterProvider() {
  }
  function NullCharacterProvider() {
  }
  protoOf(NullCharacterProvider).h1l = function () {
  };
  protoOf(NullCharacterProvider).e3j = function () {
    return null;
  };
  function Companion_27() {
  }
  protoOf(Companion_27).h4o = function (path) {
    var i = path.length;
    while (i > 0 && charSequenceGet(path, i - 1 | 0) === _Char___init__impl__6a9atx(47)) {
      i = i - 1 | 0;
    }
    // Inline function 'kotlin.text.substring' call
    var endIndex = i;
    // Inline function 'kotlin.js.asDynamic' call
    return path.substring(0, endIndex);
  };
  protoOf(Companion_27).j4o = function (path) {
    var tmp;
    // Inline function 'kotlin.text.isNotEmpty' call
    if (charSequenceLength(path) > 0) {
      tmp = charSequenceGet(path, 0) === _Char___init__impl__6a9atx(47);
    } else {
      tmp = false;
    }
    return tmp;
  };
  var Companion_instance_29;
  function Companion_getInstance_29() {
    return Companion_instance_29;
  }
  function fileExists(path) {
    return !(fileType(path) == null);
  }
  function resolveDirectoryPath(fileName, workingDirectory) {
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(fileName) === 0) {
      throw IllegalArgumentException_init_$Create$('Empty file name');
    } else {
      if (workingDirectory == null) {
        tmp = fileName;
      } else {
        tmp = resolveDirectoryPathInt(fileName, workingDirectory);
      }
    }
    return tmp;
  }
  var FileNameType_FILE_instance;
  var FileNameType_DIRECTORY_instance;
  var FileNameType_UNDEFINED_instance;
  var FileNameType_entriesInitialized;
  function FileNameType_initEntries() {
    if (FileNameType_entriesInitialized)
      return Unit_instance;
    FileNameType_entriesInitialized = true;
    FileNameType_FILE_instance = new FileNameType('FILE', 0);
    FileNameType_DIRECTORY_instance = new FileNameType('DIRECTORY', 1);
    FileNameType_UNDEFINED_instance = new FileNameType('UNDEFINED', 2);
  }
  function FileNameType(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function StringBuilderOutput() {
    this.s4w_1 = StringBuilder_init_$Create$();
  }
  protoOf(StringBuilderOutput).d3i = function (s) {
    this.s4w_1.i8(s);
  };
  function MPFileException(message, cause) {
    cause = cause === VOID ? null : cause;
    Exception_init_$Init$(message, cause, this);
    captureStack(this, MPFileException);
  }
  function CharWithPosition(character, line, col) {
    this.t4w_1 = character;
    this.u4w_1 = line;
    this.v4w_1 = col;
  }
  function PushBackCharacterProvider(sourceLocation) {
    this.w4w_1 = sourceLocation;
    this.x4w_1 = this.w4w_1.c4x();
    this.y4w_1 = ArrayList_init_$Create$();
    this.z4w_1 = ArrayDeque_init_$Create$();
    this.a4x_1 = 0;
    this.b4x_1 = 0;
  }
  protoOf(PushBackCharacterProvider).d4x = function () {
    return new Pair(this.e3j(), this.q1n());
  };
  protoOf(PushBackCharacterProvider).e3j = function () {
    var tmp;
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!this.y4w_1.o()) {
      tmp = removeLast(this.y4w_1);
    } else {
      var tmp0_elvis_lhs = this.x4w_1.e3j();
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        return null;
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      var ch = tmp_0;
      var chWithPos = new CharWithPosition(ch, this.a4x_1, this.b4x_1);
      this.z4w_1.sd(chWithPos);
      while (this.z4w_1.od_1 > 5) {
        this.z4w_1.td();
      }
      tmp = chWithPos;
    }
    var ch_0 = tmp;
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(10);
    var tmp$ret$1 = Char__toInt_impl_vasixd(this_0);
    if (ch_0.t4w_1 === tmp$ret$1) {
      this.a4x_1 = this.a4x_1 + 1 | 0;
      this.b4x_1 = 0;
    } else {
      this.b4x_1 = this.b4x_1 + 1 | 0;
    }
    return ch_0.t4w_1;
  };
  protoOf(PushBackCharacterProvider).e4x = function () {
    var ch = this.z4w_1.ud();
    this.y4w_1.h(ch);
    this.a4x_1 = ch.u4w_1;
    this.b4x_1 = ch.v4w_1;
  };
  protoOf(PushBackCharacterProvider).q1n = function () {
    return new Position(this.w4w_1, this.a4x_1, this.b4x_1);
  };
  protoOf(PushBackCharacterProvider).h1l = function () {
    this.x4w_1.h1l();
  };
  function ByteToCharacterProvider(source) {
    this.f4x_1 = source;
    this.g4x_1 = null;
  }
  protoOf(ByteToCharacterProvider).e3j = function () {
    var utfCodepoint = 0;
    var utfBytesSeen = 0;
    var utfBytesNeeded = 0;
    var utfLowerBoundary = 128;
    var utfUpperBoundary = 191;
    while (true) {
      var tmp0_elvis_lhs = this.f4x_1.h4x();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        var tmp_0;
        if (!(utfBytesNeeded === 0)) {
          throw new MPFileException('Truncated UTF-8 stream');
        } else {
          return null;
        }
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var nextByte = tmp;
      var a = nextByte & 255;
      if (utfBytesNeeded === 0) {
        if (a <= 127) {
          return a;
        } else if (194 <= a ? a <= 223 : false) {
          utfBytesNeeded = 1;
          utfCodepoint = a & 31;
        } else if (224 <= a ? a <= 239 : false) {
          if (a === 224)
            utfLowerBoundary = 160;
          else if (a === 237)
            utfUpperBoundary = 159;
          utfBytesNeeded = 2;
          utfCodepoint = a & 15;
        } else if (240 <= a ? a <= 244 : false) {
          if (a === 240)
            utfLowerBoundary = 144;
          else if (a === 244)
            utfUpperBoundary = 143;
          utfBytesNeeded = 3;
          utfCodepoint = a & 7;
        } else
          throw new MPFileException('Unexpected value in UTF-8 stream');
      } else {
        if (a < utfLowerBoundary || a > utfUpperBoundary) {
          this.g4x_1 = nextByte;
          throw new MPFileException('Invalid UTF-8 bytes');
        }
        utfLowerBoundary = 128;
        utfUpperBoundary = 191;
        utfCodepoint = utfCodepoint << 6 | a & 63;
        utfBytesSeen = utfBytesSeen + 1 | 0;
        if (utfBytesSeen === utfBytesNeeded) {
          return utfCodepoint;
        }
      }
    }
  };
  protoOf(ByteToCharacterProvider).h1l = function () {
    this.f4x_1.h1l();
  };
  function ByteProvider() {
  }
  function MPFileNotFoundException(message, cause) {
    cause = cause === VOID ? null : cause;
    MPFileException.call(this, message, cause);
    captureStack(this, MPFileNotFoundException);
  }
  function ByteArrayByteProvider(content, name) {
    name = name === VOID ? null : name;
    this.i4x_1 = content;
    this.j4x_1 = name;
    this.k4x_1 = 0;
  }
  protoOf(ByteArrayByteProvider).h4x = function () {
    var tmp;
    if (this.k4x_1 >= this.i4x_1.length) {
      tmp = null;
    } else {
      var _unary__edvuaz = this.k4x_1;
      this.k4x_1 = _unary__edvuaz + 1 | 0;
      tmp = this.i4x_1[_unary__edvuaz];
    }
    return tmp;
  };
  protoOf(ByteArrayByteProvider).h1l = function () {
  };
  function CharacterConsumer() {
  }
  function PathEntry(name, size, type) {
    this.k3j_1 = name;
    this.l3j_1 = size;
    this.m3j_1 = type;
  }
  protoOf(PathEntry).toString = function () {
    return 'PathEntry(name=' + this.k3j_1 + ', size=' + this.l3j_1.toString() + ', type=' + this.m3j_1.toString() + ')';
  };
  protoOf(PathEntry).hashCode = function () {
    var result = getStringHashCode(this.k3j_1);
    result = imul(result, 31) + this.l3j_1.hashCode() | 0;
    result = imul(result, 31) + this.m3j_1.hashCode() | 0;
    return result;
  };
  protoOf(PathEntry).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof PathEntry))
      return false;
    var tmp0_other_with_cast = other instanceof PathEntry ? other : THROW_CCE();
    if (!(this.k3j_1 === tmp0_other_with_cast.k3j_1))
      return false;
    if (!this.l3j_1.equals(tmp0_other_with_cast.l3j_1))
      return false;
    if (!this.m3j_1.equals(tmp0_other_with_cast.m3j_1))
      return false;
    return true;
  };
  function ByteConsumer() {
  }
  function ByteArrayByteConsumer() {
    this.l3k_1 = new Int8Array(1024);
    this.m3k_1 = 0;
  }
  protoOf(ByteArrayByteConsumer).a3l = function (value) {
    if (this.m3k_1 >= this.l3k_1.length) {
      this.l3k_1 = copyOf_0(this.l3k_1, imul(this.l3k_1.length, 3) / 2 | 0);
    }
    var tmp = this.l3k_1;
    var _unary__edvuaz = this.m3k_1;
    this.m3k_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = value;
  };
  protoOf(ByteArrayByteConsumer).h1l = function () {
  };
  protoOf(ByteArrayByteConsumer).n3k = function () {
    return copyOf_0(this.l3k_1, this.m3k_1);
  };
  function CharacterToByteConsumer(dest) {
    this.n4x_1 = dest;
  }
  protoOf(CharacterToByteConsumer).l4x = function (ch) {
    this.n4x_1.m4x(encodeToByteArray(charToString(ch)));
  };
  protoOf(CharacterToByteConsumer).d3i = function (s) {
    this.n4x_1.m4x(encodeToByteArray(s));
  };
  protoOf(CharacterToByteConsumer).h1l = function () {
    this.n4x_1.h1l();
  };
  function FileNameType_FILE_getInstance() {
    FileNameType_initEntries();
    return FileNameType_FILE_instance;
  }
  function FileNameType_DIRECTORY_getInstance() {
    FileNameType_initEntries();
    return FileNameType_DIRECTORY_instance;
  }
  function JsonAPLModule() {
  }
  protoOf(JsonAPLModule).p2 = function () {
    return 'json';
  };
  protoOf(JsonAPLModule).u4g = function (engine) {
    var namespace = engine.x4e('json');
    engine.v4g(namespace.e3k('read'), new ReadJsonAPLFunction());
    engine.v4g(namespace.e3k('readString'), new ReadStringJsonAPLFunction());
    engine.v4g(namespace.e3k('writeString'), new WriteStringJsonAPLFunction());
  };
  function ReadJsonAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReadJsonAPLFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var filename = result;
    var tmp2 = openInputCharFile(context.j38_1.x3h(filename));
    var tmp$ret$3;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.use' call
      try {
        tmp$ret$3 = parseJsonToAPLWithExceptions(tmp2, this.t2g_1);
        break $l$block;
      }finally {
        tmp2.h1l();
      }
    }
    var json = tmp$ret$3;
    return json;
  };
  function ReadJsonAPLFunction() {
  }
  protoOf(ReadJsonAPLFunction).i2i = function (instantiation) {
    return new ReadJsonAPLFunctionImpl(instantiation);
  };
  function ReadStringJsonAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(ReadStringJsonAPLFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var content = result;
    return parseJsonToAPLWithExceptions(makeStringCharacterProvider(content), this.t2g_1);
  };
  function ReadStringJsonAPLFunction() {
  }
  protoOf(ReadStringJsonAPLFunction).i2i = function (instantiation) {
    return new ReadStringJsonAPLFunctionImpl(instantiation);
  };
  function WriteStringJsonAPLFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(WriteStringJsonAPLFunctionImpl).n2i = function (context, a) {
    var out = new StringBuilderOutput();
    parseAPLToJson(context.j38_1, a, out, this.t2g_1);
    return Companion_getInstance_46().k2o(out.s4w_1.toString());
  };
  function WriteStringJsonAPLFunction() {
  }
  protoOf(WriteStringJsonAPLFunction).i2i = function (instantiation) {
    return new WriteStringJsonAPLFunctionImpl(instantiation);
  };
  function parseJsonToAPLWithExceptions(input, pos) {
    pos = pos === VOID ? null : pos;
    try {
      return parseJsonToAPL(input);
    } catch ($p) {
      if ($p instanceof JsonParseException) {
        var e = $p;
        var tmp0_elvis_lhs = e.message;
        throwAPLException(new JsonDecodeException(tmp0_elvis_lhs == null ? 'Error while parsing JSON' : tmp0_elvis_lhs, pos));
      } else {
        throw $p;
      }
    }
  }
  function parseAPLToJson(engine, input, output, pos) {
    var v = input.x2g();
    if (v instanceof APLMap) {
      output.d3i('{');
      var first = true;
      // Inline function 'kotlin.collections.forEach' call
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s = v.s3m_1.c2().k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        // Inline function 'kotlin.collections.component1' call
        var key = element.w1();
        // Inline function 'kotlin.collections.component2' call
        var value = element.x1();
        if (first) {
          first = false;
        } else {
          output.d3i(',');
        }
        parseAPLToJson$writeKeyValuePair(pos, output, engine, key.x1(), value);
      }
      output.d3i('}');
    } else {
      if (v instanceof APLDouble) {
        output.d3i(v.a2r_1.toString());
      } else {
        if (v instanceof APLLong) {
          output.d3i(v.g2n_1.toString());
        } else {
          if (v instanceof APLSymbol) {
            var sym = v.g2j_1;
            if (!equals(sym.i2j_1, engine.i3i().a3k_1)) {
              parseAPLToJson$throwJsonEncodingError(v, pos);
            }
            switch (sym.h2j_1) {
              case 'true':
                output.d3i('true');
                break;
              case 'false':
                output.d3i('false');
                break;
              default:
                parseAPLToJson$throwJsonEncodingError(v, pos);
                break;
            }
          } else {
            if (v instanceof APLNilValue) {
              output.d3i('null');
            } else {
              if (_Dimensions___get_size__impl__uu37ek(v.o2i()) === 0) {
                var inner = v.o2l();
                if (!(_Dimensions___get_size__impl__uu37ek(inner.o2i()) === 1)) {
                  parseAPLToJson$throwNotString(pos);
                }
                output.d3i('"');
                var tmp1_elvis_lhs = toStringValueOrNull(inner);
                var tmp;
                if (tmp1_elvis_lhs == null) {
                  parseAPLToJson$throwNotString(pos);
                } else {
                  tmp = tmp1_elvis_lhs;
                }
                var strValue = tmp;
                output.d3i(jsonEscape(strValue));
                output.d3i('"');
              } else {
                if (_Dimensions___get_size__impl__uu37ek(v.o2i()) === 1 && Dimensions__get_impl_4npepw(v.o2i(), 0) === 0) {
                  output.d3i('[]');
                } else {
                  if (isStringValue(v)) {
                    output.d3i('"');
                    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
                    var result = toStringValueOrNull(v);
                    if (result == null) {
                      var m = null;
                      var messagePrefix = m == null ? '' : '' + m + ': ';
                      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
                    }
                    output.d3i(jsonEscape(result));
                    output.d3i('"');
                  } else {
                    if (_Dimensions___get_size__impl__uu37ek(v.o2i()) === 1) {
                      output.d3i('[');
                      // Inline function 'com.dhsdevelopments.kap.iterateMembersWithPosition' call
                      if (v.b2l()) {
                        if (0 > 0) {
                          output.d3i(',');
                        }
                        parseAPLToJson(engine, v, output, pos);
                      } else {
                        var inductionVariable = 0;
                        var last = v.n();
                        if (inductionVariable < last)
                          do {
                            var i = inductionVariable;
                            inductionVariable = inductionVariable + 1 | 0;
                            var aplValue = v.h2k(i);
                            if (i > 0) {
                              output.d3i(',');
                            }
                            parseAPLToJson(engine, aplValue, output, pos);
                          }
                           while (inductionVariable < last);
                      }
                      output.d3i(']');
                    } else {
                      if (_Dimensions___get_size__impl__uu37ek(v.o2i()) === 2) {
                        if (!(Dimensions__get_impl_4npepw(v.o2i(), 1) === 2)) {
                          throwAPLException(new JsonEncodeException('Two-dimensional values must have 2 columns', pos));
                        }
                        output.d3i('{');
                        var inductionVariable_0 = 0;
                        var last_0 = v.n() / 2 | 0;
                        if (inductionVariable_0 < last_0)
                          do {
                            var i_0 = inductionVariable_0;
                            inductionVariable_0 = inductionVariable_0 + 1 | 0;
                            if (i_0 > 0) {
                              output.d3i(',');
                            }
                            parseAPLToJson$writeKeyValuePair(pos, output, engine, v.h2k(imul(i_0, 2)), v.h2k(imul(i_0, 2) + 1 | 0));
                          }
                           while (inductionVariable_0 < last_0);
                        output.d3i('}');
                      } else {
                        parseAPLToJson$throwJsonEncodingError(v, pos);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  function JsonParseException(message, cause) {
    cause = cause === VOID ? null : cause;
    Exception_init_$Init$(message, cause, this);
    captureStack(this, JsonParseException);
  }
  function JsonDecodeException(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, JsonDecodeException);
  }
  function JsonEncodeException(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, JsonEncodeException);
  }
  function jsonEscape(s) {
    var buf = StringBuilder_init_$Create$();
    // Inline function 'kotlin.text.forEach' call
    var inductionVariable = 0;
    while (inductionVariable < charSequenceLength(s)) {
      var element = charSequenceGet(s, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      if (element === _Char___init__impl__6a9atx(92))
        buf.i8('\\\\');
      else if (element === _Char___init__impl__6a9atx(34))
        buf.i8('\\"');
      else if (isPrintable(element))
        buf.j8(element);
      else {
        buf.i8('\\u');
        // Inline function 'kotlin.code' call
        var tmp$ret$0 = Char__toInt_impl_vasixd(element);
        var hexString = toString_0(tmp$ret$0, 16);
        // Inline function 'kotlin.repeat' call
        var times = 4 - hexString.length | 0;
        var inductionVariable_0 = 0;
        if (inductionVariable_0 < times)
          do {
            var index = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            buf.i8('0');
          }
           while (inductionVariable_0 < times);
        buf.i8(hexString);
      }
    }
    return buf.toString();
  }
  function isPrintable(ch) {
    return (_Char___init__impl__6a9atx(97) <= ch ? ch <= _Char___init__impl__6a9atx(122) : false) || (_Char___init__impl__6a9atx(65) <= ch ? ch <= _Char___init__impl__6a9atx(90) : false) || (_Char___init__impl__6a9atx(32) <= ch ? ch <= _Char___init__impl__6a9atx(63) : false);
  }
  function parseAPLToJson$throwJsonEncodingError(v, $pos) {
    throwAPLException(new JsonEncodeException('Value cannot be encoded to JSON: ' + v.i2o(FormatStyle_PLAIN_getInstance()), $pos));
  }
  function parseAPLToJson$writeKeyValuePair($pos, $output, $engine, key, value) {
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!isStringValue(key)) {
      throwAPLException(new JsonEncodeException('Key is not a string: ' + key.i2o(FormatStyle_PLAIN_getInstance()), $pos));
    }
    $output.d3i('"');
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var result = toStringValueOrNull(key);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', null));
    }
    $output.d3i(jsonEscape(result));
    $output.d3i('":');
    parseAPLToJson($engine, value, $output, $pos);
  }
  function parseAPLToJson$throwNotString($pos) {
    throwAPLException(new JsonEncodeException('Content in enclosed values must be strings', $pos));
  }
  function Companion_28() {
    Companion_instance_30 = this;
    this.f3p_1 = new Complex(0.0, 0.0);
    this.g3p_1 = new Complex(1.0, 0.0);
    this.h3p_1 = new Complex(2.0, 0.0);
    this.i3p_1 = new Complex(0.0, 1.0);
    this.j3p_1 = new Complex(0.0, 2.0);
    this.k3p_1 = toComplex(2.718281828459045);
    this.l3p_1 = toComplex(3.141592653589793);
    this.m3p_1 = new Complex(-0.0, 0.0);
    this.n3p_1 = new Complex(-1.0, 0.0);
    this.o3p_1 = new Complex(0.5, 0.0);
    this.p3p_1 = new Complex(3.141592653589793 / 2.0, 0.0);
  }
  protoOf(Companion_28).a4y = function (absolute, arg) {
    // Inline function 'kotlin.math.cos' call
    var tmp = Math.cos(arg) * absolute;
    // Inline function 'kotlin.math.sin' call
    var tmp$ret$1 = Math.sin(arg);
    return new Complex(tmp, tmp$ret$1 * absolute);
  };
  var Companion_instance_30;
  function Companion_getInstance_30() {
    if (Companion_instance_30 == null)
      new Companion_28();
    return Companion_instance_30;
  }
  function Complex(re, im) {
    Companion_getInstance_30();
    im = im === VOID ? 0.0 : im;
    this.a3o_1 = re;
    this.b3o_1 = im;
  }
  protoOf(Complex).d3p = function () {
    var scale = this.a3o_1 * this.a3o_1 + this.b3o_1 * this.b3o_1;
    return new Complex(this.a3o_1 / scale, -this.b3o_1 / scale);
  };
  protoOf(Complex).c3z = function () {
    var tmp0 = this.a3o_1;
    // Inline function 'kotlin.math.hypot' call
    var y = this.b3o_1;
    return hypot(tmp0, y);
  };
  protoOf(Complex).d3 = function () {
    return new Complex(-this.a3o_1, -this.b3o_1);
  };
  protoOf(Complex).t3s = function (other) {
    return new Complex(this.a3o_1 + other, this.b3o_1);
  };
  protoOf(Complex).b4y = function (other) {
    return new Complex(this.a3o_1 / other, this.b3o_1 / other);
  };
  protoOf(Complex).e3o = function (other) {
    return new Complex(this.a3o_1 + other.a3o_1, this.b3o_1 + other.b3o_1);
  };
  protoOf(Complex).m3o = function (other) {
    return new Complex(this.a3o_1 - other.a3o_1, this.b3o_1 - other.b3o_1);
  };
  protoOf(Complex).u3o = function (other) {
    return new Complex(this.a3o_1 * other.a3o_1 - this.b3o_1 * other.b3o_1, this.a3o_1 * other.b3o_1 + this.b3o_1 * other.a3o_1);
  };
  protoOf(Complex).e3p = function (other) {
    return this.u3o(other.d3p());
  };
  protoOf(Complex).q3p = function (complex) {
    var tmp;
    if (this.a3o_1 === 0.0 && this.b3o_1 === 0.0) {
      tmp = Companion_getInstance_30().f3p_1;
    } else {
      var tmp0 = this.b3o_1;
      // Inline function 'kotlin.math.atan2' call
      var x = this.a3o_1;
      var arg = Math.atan2(tmp0, x);
      // Inline function 'kotlin.math.ln' call
      var x_0 = this.c3z();
      // Inline function 'kotlin.math.exp' call
      var x_1 = Math.log(x_0) * complex.a3o_1 - arg * complex.b3o_1;
      var resultAbsolute = Math.exp(x_1);
      // Inline function 'kotlin.math.ln' call
      var x_2 = this.c3z();
      var resultArg = Math.log(x_2) * complex.b3o_1 + arg * complex.a3o_1;
      tmp = Companion_getInstance_30().a4y(resultAbsolute, resultArg);
    }
    return tmp;
  };
  protoOf(Complex).xj = function () {
    var tmp;
    if (this.a3o_1 === 0.0 && this.b3o_1 === 0.0) {
      tmp = Companion_getInstance_30().f3p_1;
    } else {
      tmp = this.b4y(this.c3z());
    }
    return tmp;
  };
  protoOf(Complex).o3q = function () {
    var tmp0 = this.a3o_1;
    // Inline function 'kotlin.math.hypot' call
    var y = this.b3o_1;
    // Inline function 'kotlin.math.ln' call
    var x = hypot(tmp0, y);
    var tmp = Math.log(x);
    var tmp3 = this.b3o_1;
    // Inline function 'kotlin.math.atan2' call
    var x_0 = this.a3o_1;
    var tmp$ret$2 = Math.atan2(tmp3, x_0);
    return new Complex(tmp, tmp$ret$2);
  };
  protoOf(Complex).q3q = function (base) {
    return this.o3q().e3p(base.o3q());
  };
  protoOf(Complex).p3q = function (base) {
    return this.q3q(toComplex(base));
  };
  protoOf(Complex).c4y = function () {
    return this.q3p(Companion_getInstance_30().k3p_1);
  };
  protoOf(Complex).e3x = function () {
    return new Complex(round(this.a3o_1), round(this.b3o_1));
  };
  protoOf(Complex).equals = function (other) {
    var tmp;
    var tmp_0;
    var tmp_1;
    if (!(other == null)) {
      tmp_1 = other instanceof Complex;
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = this.a3o_1 === other.a3o_1;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.b3o_1 === other.b3o_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Complex).hashCode = function () {
    return getNumberHashCode(this.a3o_1) ^ getNumberHashCode(this.b3o_1);
  };
  protoOf(Complex).toString = function () {
    return 'Complex(re=' + this.a3o_1 + ', im=' + this.b3o_1 + ')';
  };
  function toComplex(_this__u8e3s4) {
    return new Complex(_this__u8e3s4, 0.0);
  }
  function ComplexFieldExtension() {
  }
  protoOf(ComplexFieldExtension).k3t = function (v) {
    return pow_0(2.718281828459045, v.u3o(Companion_getInstance_30().i3p_1)).m3o(pow_0(2.718281828459045, v.d3().u3o(Companion_getInstance_30().i3p_1))).e3p(Companion_getInstance_30().j3p_1);
  };
  protoOf(ComplexFieldExtension).r3t = function (v) {
    return pow_0(2.718281828459045, v.u3o(Companion_getInstance_30().i3p_1)).e3o(pow_0(2.718281828459045, v.d3().u3o(Companion_getInstance_30().i3p_1))).e3p(Companion_getInstance_30().h3p_1);
  };
  protoOf(ComplexFieldExtension).y3t = function (v) {
    var re2 = v.a3o_1 * 2;
    var im2 = v.b3o_1 * 2;
    // Inline function 'kotlin.math.cos' call
    var tmp = Math.cos(re2);
    // Inline function 'kotlin.math.cosh' call
    var d = tmp + cosh(im2);
    // Inline function 'kotlin.math.sin' call
    var tmp_0 = Math.sin(re2) / d;
    // Inline function 'kotlin.math.sinh' call
    var tmp$ret$3 = sinh(im2);
    return new Complex(tmp_0, tmp$ret$3 / d);
  };
  protoOf(ComplexFieldExtension).z3t = function (v) {
    return Companion_getInstance_30().i3p_1.d3().u3o(minus_1(1.0, v.u3o(v)).q3p(Companion_getInstance_30().o3p_1).e3o(Companion_getInstance_30().i3p_1.u3o(v)).o3q());
  };
  protoOf(ComplexFieldExtension).g3u = function (v) {
    return Companion_getInstance_30().p3p_1.e3o(Companion_getInstance_30().i3p_1.u3o(minus_1(1.0, v.u3o(v)).q3p(Companion_getInstance_30().o3p_1).e3o(Companion_getInstance_30().i3p_1.u3o(v)).o3q()));
  };
  protoOf(ComplexFieldExtension).t3u = function (v) {
    var arg = Companion_getInstance_30().i3p_1.u3o(v);
    return Companion_getInstance_30().i3p_1.u3o(minus_1(1.0, arg).o3q().m3o(plus_2(1.0, arg).o3q())).b4y(2.0);
  };
  protoOf(ComplexFieldExtension).a3v = function (v) {
    return v.c4y().m3o(v.d3().c4y()).b4y(2.0);
  };
  protoOf(ComplexFieldExtension).h3v = function (v) {
    return v.c4y().e3o(v.d3().c4y()).b4y(2.0);
  };
  protoOf(ComplexFieldExtension).o3v = function (v) {
    return v.c4y().m3o(v.d3().c4y()).e3p(v.d3().c4y().e3o(v.c4y()));
  };
  protoOf(ComplexFieldExtension).v3v = function (v) {
    return v.u3o(v).e3o(Companion_getInstance_30().g3p_1).q3p(Companion_getInstance_30().o3p_1).e3o(v).o3q();
  };
  protoOf(ComplexFieldExtension).w3v = function (v) {
    return v.e3o(v.m3o(Companion_getInstance_30().g3p_1).u3o(v.e3o(Companion_getInstance_30().g3p_1)).q3p(Companion_getInstance_30().o3p_1)).o3q();
  };
  protoOf(ComplexFieldExtension).d3w = function (v) {
    return v.e3o(Companion_getInstance_30().g3p_1).o3q().m3o(Companion_getInstance_30().g3p_1.m3o(v).o3q()).b4y(2.0);
  };
  var ComplexFieldExtension_instance;
  function ComplexFieldExtension_getInstance() {
    return ComplexFieldExtension_instance;
  }
  function pow_0(_this__u8e3s4, complex) {
    return toComplex(_this__u8e3s4).q3p(complex);
  }
  function minus_1(_this__u8e3s4, complex) {
    return toComplex(_this__u8e3s4).m3o(complex);
  }
  function plus_2(_this__u8e3s4, complex) {
    return toComplex(_this__u8e3s4).e3o(complex);
  }
  function ImmutableMap2_init_$Init$($this) {
    ImmutableMap2.call($this, persistentMapOf());
    return $this;
  }
  function ImmutableMap2_init_$Create$() {
    return ImmutableMap2_init_$Init$(objectCreate(protoOf(ImmutableMap2)));
  }
  function Companion_29() {
  }
  protoOf(Companion_29).s3h = function (content) {
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$0 = copyToArray(content);
    var result = persistentHashMapOf(tmp$ret$0.slice());
    return new ImmutableMap2(result);
  };
  var Companion_instance_31;
  function Companion_getInstance_31() {
    return Companion_instance_31;
  }
  function ImmutableMap2(content) {
    this.j3n_1 = content;
  }
  protoOf(ImmutableMap2).d4y = function (key, value) {
    return new ImmutableMap2(this.j3n_1.j2(key, value));
  };
  protoOf(ImmutableMap2).e4y = function (valueList) {
    return new ImmutableMap2(this.j3n_1.o10(mapOf(valueList.slice())));
  };
  protoOf(ImmutableMap2).f4y = function (keys) {
    var tmp;
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.collections.isEmpty' call
    if (!(keys.length === 0)) {
      var curr = this.j3n_1;
      // Inline function 'kotlin.collections.forEach' call
      var inductionVariable = 0;
      var last = keys.length;
      while (inductionVariable < last) {
        var element = keys[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        curr = curr.k2(element);
      }
      tmp = new ImmutableMap2(curr);
    } else {
      tmp = this;
    }
    return tmp;
  };
  protoOf(ImmutableMap2).o = function () {
    return this.j3n_1.o();
  };
  protoOf(ImmutableMap2).y1 = function (key) {
    return this.j3n_1.y1(key);
  };
  protoOf(ImmutableMap2).a2 = function (key) {
    return this.j3n_1.a2(key);
  };
  protoOf(ImmutableMap2).n = function () {
    return this.j3n_1.n();
  };
  protoOf(ImmutableMap2).b2 = function () {
    return this.j3n_1.b2();
  };
  protoOf(ImmutableMap2).c2 = function () {
    return this.j3n_1.c2();
  };
  function MapClass() {
    SystemClass.call(this, 'map');
  }
  protoOf(MapClass).h4y = function (engine, ref, methodName, pos) {
    var map = ref.o2q(pos);
    var tmp0_elvis_lhs = map.o3n((new APLSymbol(engine.l39_1.n4p())).s2o());
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new MethodNotFoundException(methodName, pos));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var methodsValue = tmp;
    var methodsMap = methodsValue.o2q(pos);
    var tmp1_elvis_lhs = methodsMap.o3n((new APLSymbol(methodName)).s2o());
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      throwAPLException(new MethodNotFoundException(methodName, pos));
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    var v = tmp_0;
    var unwrapped = v.g2k();
    if (!(unwrapped instanceof LambdaValue)) {
      throwAPLException(new MethodNotFoundException(methodName, pos));
    }
    return new APLFunctionMethodCall(unwrapped.f3a());
  };
  function MethodCallFunctionImpl($outer, instantiation) {
    this.n4y_1 = $outer;
    NoAxisAPLFunction.call(this, instantiation);
  }
  protoOf(MethodCallFunctionImpl).n2i = function (context, a) {
    var objRef = this.n4y_1.o4y_1.j31(context);
    var method = objRef.z2p().h4y(context.j38_1, objRef, this.n4y_1.p4y_1, this.t2g_1);
    return method.q4y(context, objRef, a, this.t2g_1);
  };
  function MethodCallFunction(objectRefInstruction, methodName) {
    this.o4y_1 = objectRefInstruction;
    this.p4y_1 = methodName;
  }
  protoOf(MethodCallFunction).i2i = function (instantiation) {
    return new MethodCallFunctionImpl(this, instantiation);
  };
  function MethodNotFoundException(name, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Method not found: ' + name.t3e(), pos);
    captureStack(this, MethodNotFoundException);
  }
  function APLFunctionMethodCall(fn) {
    this.r4y_1 = fn;
  }
  protoOf(APLFunctionMethodCall).q4y = function (context, objRef, a, pos) {
    return this.r4y_1.a2h(context, objRef, a, null);
  };
  function KapModule() {
  }
  function ModListCommandHandler() {
    NoArgCommandHandler.call(this);
  }
  function ModuleInitSkipped() {
  }
  function ModuleInitFailedException() {
  }
  function addAtIndexInternal($this, l, index, element) {
    var updated = ArrayList_init_$Create$_0(l.n() + 1 | 0);
    updated.q(l.u1(0, index));
    updated.h(element);
    updated.q(l.u1(index, l.n()));
    $this.h4n_1 = updated;
  }
  function addAllInternal($this, l, elements, index) {
    var tmp;
    if (elements.o()) {
      tmp = false;
    } else {
      var updated = ArrayList_init_$Create$_0(l.n() + elements.n() | 0);
      updated.q(l.u1(0, index));
      updated.q(elements);
      updated.q(l.u1(index, l.n()));
      $this.h4n_1 = updated;
      tmp = true;
    }
    return tmp;
  }
  function MTSafeArrayList() {
    AbstractMutableList.call(this);
    this.h4n_1 = ArrayList_init_$Create$();
    this.i4n_1 = new MPLock();
  }
  protoOf(MTSafeArrayList).n = function () {
    return this.h4n_1.n();
  };
  protoOf(MTSafeArrayList).j4n = function (element) {
    // Inline function 'com.dhsdevelopments.kap.MTSafeArrayList.withImpl' call
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.i4n_1;
    var l = this.h4n_1;
    addAtIndexInternal(this, l, l.n(), element);
    return true;
  };
  protoOf(MTSafeArrayList).h = function (element) {
    return this.j4n((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(MTSafeArrayList).oe = function (index, element) {
    // Inline function 'com.dhsdevelopments.kap.MTSafeArrayList.withImpl' call
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.i4n_1;
    var l = this.h4n_1;
    addAtIndexInternal(this, l, index, element);
  };
  protoOf(MTSafeArrayList).h2 = function (index, element) {
    return this.oe(index, (element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(MTSafeArrayList).s4y = function (index, elements) {
    // Inline function 'com.dhsdevelopments.kap.MTSafeArrayList.withImpl' call
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.i4n_1;
    var l = this.h4n_1;
    return addAllInternal(this, l, elements, index);
  };
  protoOf(MTSafeArrayList).e2 = function (index, elements) {
    return this.s4y(index, elements);
  };
  protoOf(MTSafeArrayList).t4y = function (elements) {
    // Inline function 'com.dhsdevelopments.kap.MTSafeArrayList.withImpl' call
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.i4n_1;
    var l = this.h4n_1;
    return addAllInternal(this, l, elements, l.n());
  };
  protoOf(MTSafeArrayList).q = function (elements) {
    return this.t4y(elements);
  };
  protoOf(MTSafeArrayList).p = function (index) {
    return this.h4n_1.p(index);
  };
  protoOf(MTSafeArrayList).i2 = function (index) {
    // Inline function 'com.dhsdevelopments.kap.MTSafeArrayList.withImpl' call
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.i4n_1;
    var l = this.h4n_1;
    var updated = ArrayList_init_$Create$_0(l.n() - 1 | 0);
    updated.q(l.u1(0, index));
    updated.q(l.u1(index + 1 | 0, l.n()));
    this.h4n_1 = updated;
    return l.p(index);
  };
  protoOf(MTSafeArrayList).ne = function (index, element) {
    // Inline function 'com.dhsdevelopments.kap.MTSafeArrayList.withImpl' call
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.i4n_1;
    var l = this.h4n_1;
    var updated = ArrayList_init_$Create$_0(l.n());
    updated.q(l.u1(0, index));
    updated.h(element);
    updated.q(l.u1(index + 1 | 0, l.n()));
    this.h4n_1 = updated;
    return l.p(index);
  };
  protoOf(MTSafeArrayList).g2 = function (index, element) {
    return this.ne(index, (element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(MTSafeArrayList).f2 = function () {
    // Inline function 'com.dhsdevelopments.kap.MTSafeArrayList.withImpl' call
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.i4n_1;
    this.h4n_1;
    this.h4n_1 = ArrayList_init_$Create$();
  };
  protoOf(MTSafeArrayList).u4y = function (element) {
    return this.h4n_1.s1(element);
  };
  protoOf(MTSafeArrayList).s1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.u4y((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(MTSafeArrayList).v4y = function (element) {
    return this.h4n_1.t1(element);
  };
  protoOf(MTSafeArrayList).t1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return -1;
    return this.v4y((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(MTSafeArrayList).o = function () {
    return this.h4n_1.o();
  };
  protoOf(MTSafeArrayList).k4n = function (element) {
    // Inline function 'com.dhsdevelopments.kap.MTSafeArrayList.withImpl' call
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.i4n_1;
    var l = this.h4n_1;
    var updated = ArrayList_init_$Create$_0(l.n());
    var found = false;
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = l.k();
    while (_iterator__ex2g4s.l()) {
      var element_0 = _iterator__ex2g4s.m();
      if (!found && equals(element_0, element)) {
        found = true;
      } else {
        updated.h(element_0);
      }
    }
    this.h4n_1 = updated;
    return found;
  };
  protoOf(MTSafeArrayList).d2 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.k4n((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(MTSafeArrayList).u1 = function (fromIndex, toIndex) {
    return this.h4n_1.u1(fromIndex, toIndex);
  };
  protoOf(MTSafeArrayList).k = function () {
    return new MTSafeIterator(this.h4n_1);
  };
  protoOf(MTSafeArrayList).r = function (index) {
    return new MTSafeListIterator(this.h4n_1, index);
  };
  function MTSafeIterator(list) {
    this.w4y_1 = list.k();
  }
  protoOf(MTSafeIterator).l = function () {
    return this.w4y_1.l();
  };
  protoOf(MTSafeIterator).m = function () {
    return this.w4y_1.m();
  };
  protoOf(MTSafeIterator).i2d = function () {
    throw UnsupportedOperationException_init_$Create$_0();
  };
  protoOf(MTSafeIterator).f4 = function () {
    return this.i2d();
  };
  function MTSafeListIterator(list, index) {
    this.x4y_1 = list.r(index);
  }
  protoOf(MTSafeListIterator).l = function () {
    return this.x4y_1.l();
  };
  protoOf(MTSafeListIterator).p4 = function () {
    return this.x4y_1.p4();
  };
  protoOf(MTSafeListIterator).m = function () {
    return this.x4y_1.m();
  };
  protoOf(MTSafeListIterator).q4 = function () {
    return this.x4y_1.q4();
  };
  protoOf(MTSafeListIterator).i2d = function () {
    throw UnsupportedOperationException_init_$Create$_0();
  };
  protoOf(MTSafeListIterator).f4 = function () {
    return this.i2d();
  };
  function get_APLLONG_0() {
    _init_properties_number_kt__nf6ccp();
    return APLLONG_0;
  }
  var APLLONG_0;
  function get_APLLONG_1() {
    _init_properties_number_kt__nf6ccp();
    return APLLONG_1;
  }
  var APLLONG_1;
  function get_APLDOUBLE_0() {
    _init_properties_number_kt__nf6ccp();
    return APLDOUBLE_0;
  }
  var APLDOUBLE_0;
  function get_APLDOUBLE_1() {
    _init_properties_number_kt__nf6ccp();
    return APLDOUBLE_1;
  }
  var APLDOUBLE_1;
  function get_longCache() {
    _init_properties_number_kt__nf6ccp();
    return longCache;
  }
  var longCache;
  function APLNumber() {
    APLSingleValue.call(this);
  }
  protoOf(APLNumber).toString = function () {
    return 'APLNumber(' + this.i2o(FormatStyle_PRETTY_getInstance()) + ')';
  };
  protoOf(APLNumber).e2q = function () {
    return false;
  };
  protoOf(APLNumber).l2q = function () {
    return this;
  };
  protoOf(APLNumber).r2z = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.x2s(pos) : $super.x2s.call(this, pos);
  };
  protoOf(APLNumber).f2j = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.w2s(pos) : $super.w2s.call(this, pos);
  };
  protoOf(APLNumber).q2i = function (pos) {
    var l = this.w2s(pos);
    var tmp;
    if (l.a1(new Long(-2147483648, -1)) >= 0 && l.a1(new Long(2147483647, 0)) <= 0) {
      tmp = l.c1();
    } else {
      throwAPLException(new IntMagnitudeException(l, pos));
    }
    return tmp;
  };
  protoOf(APLNumber).i2k = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.q2i(pos) : $super.q2i.call(this, pos);
  };
  protoOf(APLNumber).r2q = function (pos) {
    return !this.w2s(pos).equals(new Long(0, 0));
  };
  protoOf(APLNumber).o2z = function (pos) {
    throwAPLException(new APLIllegalArgumentException('Value cannot be converted to bigint: ' + this.i2o(FormatStyle_PLAIN_getInstance()), pos));
  };
  protoOf(APLNumber).y4y = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.o2z(pos) : $super.o2z.call(this, pos).jk_1;
  };
  protoOf(APLNumber).p2z = function (pos) {
    throwAPLException(new APLIllegalArgumentException('Value cannot be converted to rational: ' + this.i2o(FormatStyle_PLAIN_getInstance()), pos));
  };
  protoOf(APLNumber).z4y = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.p2z(pos) : $super.p2z.call(this, pos);
  };
  protoOf(APLNumber).j2q = function (buf) {
    buf.i(this.i2o(FormatStyle_PLAIN_getInstance()));
  };
  protoOf(APLNumber).h2n = function (reference, pos, typeDiscrimination) {
    var ref0 = reference.g2k();
    var tmp;
    if (!(ref0 instanceof APLSingleValue)) {
      tmp = false;
    } else {
      if (!typeDiscrimination) {
        tmp = this.d32(ref0, pos);
      } else {
        tmp = this.f2q(reference, pos, typeDiscrimination) === 0;
      }
    }
    return tmp;
  };
  function makeAPLNumberWithReduction(_this__u8e3s4) {
    _init_properties_number_kt__nf6ccp();
    return rangeInLong(_this__u8e3s4) ? makeAPLNumber_0(toLong(_this__u8e3s4)) : new APLBigInt(_this__u8e3s4);
  }
  function Companion_30() {
  }
  protoOf(Companion_30).a4z = function (a, b) {
    return isNaN_0(a) ? isNaN_0(b) ? 0 : 1 : isNaN_0(b) ? -1 : compareTo_3(a, b);
  };
  protoOf(Companion_30).b4z = function (value) {
    return value < 0 || equals(value, -0.0) ? '\xAF' + formatDouble(-value) : formatDouble(value);
  };
  var Companion_instance_32;
  function Companion_getInstance_32() {
    return Companion_instance_32;
  }
  function APLDouble(value) {
    APLNumber.call(this);
    this.a2r_1 = value;
  }
  protoOf(APLDouble).z2p = function () {
    return Companion_getInstance_35().g3l_1;
  };
  protoOf(APLDouble).f2k = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(APLDouble).x2s = function (pos) {
    return this.a2r_1;
  };
  protoOf(APLDouble).w2s = function (pos) {
    return numberToLong(this.a2r_1);
  };
  protoOf(APLDouble).s2z = function () {
    return new Complex(this.a2r_1);
  };
  protoOf(APLDouble).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = formatDouble(this.a2r_1);
        break;
      case 2:
        tmp = formatDouble(this.a2r_1);
        break;
      case 1:
        tmp = Companion_instance_32.b4z(this.a2r_1);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLDouble).u3l = function (reference, pos, typeDiscrimination) {
    var v = reference.g2k();
    // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToSingleValue' call
    var a = this.a2r_1;
    var tmp;
    if (v instanceof APLLong) {
      // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToLong' call
      var b = v.g2n_1;
      var tmp_0;
      if (isFinite(a)) {
        tmp_0 = typeDiscrimination && equals(a, -0.0) && b.equals(new Long(0, 0)) ? -1 : !isInteger(a) ? rationalise(a).vj(toRational(b)) : a >= (new Long(0, -2147483648)).l3() && a <= (new Long(-1, 2147483647)).l3() ? numberToLong(a).a1(b) : compareTo_1(of_1(Companion_instance, a), toBigInt(b));
      } else if (isInfinite(a)) {
        tmp_0 = a > 0 ? 1 : -1;
      } else {
        throwAPLException(new APLArgumentIsNotANumberException(pos));
      }
      var res = tmp_0;
      tmp = typeDiscrimination && res === 0 ? -1 : res;
    } else {
      if (v instanceof APLDouble) {
        // Inline function 'kotlin.let' call
        var bDouble = v.a2r_1;
        tmp = typeDiscrimination ? compareTo_3(a, bDouble) : a < bDouble ? -1 : a > bDouble ? 1 : 0;
      } else {
        if (v instanceof APLComplex) {
          // Inline function 'kotlin.let' call
          var v0 = v.z3n_1;
          var tmp_1;
          if (v0.b3o_1 === 0.0) {
            var realPart = v0.a3o_1;
            tmp_1 = typeDiscrimination ? compareTo_3(a, realPart) : a < realPart ? -1 : a > realPart ? 1 : 0;
          } else {
            throwAPLException(new APLArgumentComplexOrderingException(pos));
          }
          tmp = tmp_1;
        } else {
          if (v instanceof APLBigInt) {
            // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToBigint' call
            var b_0 = v.z2q_1;
            var tmp_2;
            if (isFinite(a)) {
              tmp_2 = typeDiscrimination && equals(a, -0.0) && signum(b_0) === 0 ? -1 : isInteger(a) ? compareTo_1(of_1(Companion_instance, a), b_0) : rationalise(a).vj(toRational_0(b_0));
            } else if (isInfinite(a)) {
              tmp_2 = a > 0 ? 1 : -1;
            } else {
              throwAPLException(new APLArgumentIsNotANumberException(pos));
            }
            var res_0 = tmp_2;
            tmp = typeDiscrimination && res_0 === 0 ? -1 : res_0;
          } else {
            if (v instanceof APLRational) {
              // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToRational' call
              var b_1 = v.d31_1;
              var tmp_3;
              if (isFinite(a)) {
                tmp_3 = typeDiscrimination && equals(a, -0.0) && b_1.xj() === 0 ? -1 : rationalise(a).vj(b_1);
              } else if (isInfinite(a)) {
                tmp_3 = a > 0 ? 1 : -1;
              } else {
                throwAPLException(new APLArgumentIsNotANumberException(pos));
              }
              var res_1 = tmp_3;
              tmp = typeDiscrimination && res_1 === 0 ? -1 : res_1;
            } else {
              tmp = protoOf(APLNumber).u3l.call(this, reference, pos, typeDiscrimination);
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(APLDouble).v3l = function () {
    return !isNaN_0(this.a2r_1);
  };
  protoOf(APLDouble).w3l = function (reference, pos) {
    var tmp = Companion_instance_32;
    return tmp.a4z(this.a2r_1, (reference instanceof APLDouble ? reference : THROW_CCE()).a2r_1);
  };
  protoOf(APLDouble).toString = function () {
    return 'APLDouble(' + this.i2o(FormatStyle_PRETTY_getInstance()) + ')';
  };
  protoOf(APLDouble).r2q = function (pos) {
    return !(this.a2r_1 === 0.0);
  };
  protoOf(APLDouble).h2q = function () {
    return getNumberHashCode(this.a2r_1);
  };
  function makeAPLNumber(_this__u8e3s4) {
    _init_properties_number_kt__nf6ccp();
    return new APLDouble(_this__u8e3s4);
  }
  function Companion_31() {
    Companion_instance_33 = this;
    this.c4z_1 = new Long(0, -2097152);
    this.d4z_1 = new Long(0, 2097152);
  }
  var Companion_instance_33;
  function Companion_getInstance_33() {
    if (Companion_instance_33 == null)
      new Companion_31();
    return Companion_instance_33;
  }
  function APLLong(value) {
    Companion_getInstance_33();
    APLNumber.call(this);
    this.g2n_1 = value;
  }
  protoOf(APLLong).z2p = function () {
    return Companion_getInstance_35().f3l_1;
  };
  protoOf(APLLong).f2k = function () {
    return this.g2n_1.equals(new Long(0, 0)) || this.g2n_1.equals(new Long(1, 0)) ? Companion_getInstance_45().a2k_1 : Companion_getInstance_45().x2j_1;
  };
  protoOf(APLLong).x2s = function (pos) {
    return this.g2n_1.l3();
  };
  protoOf(APLLong).w2s = function (pos) {
    return this.g2n_1;
  };
  protoOf(APLLong).s2z = function () {
    return new Complex(this.g2n_1.l3());
  };
  protoOf(APLLong).r2q = function (pos) {
    return !this.g2n_1.equals(new Long(0, 0));
  };
  protoOf(APLLong).o2z = function (pos) {
    return of_0(Companion_instance, this.g2n_1);
  };
  protoOf(APLLong).p2z = function (pos) {
    return make(Companion_getInstance(), toBigInt(this.g2n_1), BigIntConstants_getInstance().ij_1);
  };
  protoOf(APLLong).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = this.g2n_1.toString();
        break;
      case 2:
        tmp = this.g2n_1.toString();
        break;
      case 1:
        tmp = this.g2n_1.a1(new Long(0, 0)) < 0 ? '\xAF' + this.g2n_1.d3().toString() : this.g2n_1.toString();
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLLong).u3l = function (reference, pos, typeDiscrimination) {
    var v = reference.g2k();
    var tmp;
    if (v instanceof APLLong) {
      tmp = this.g2n_1.a1(v.g2n_1);
    } else {
      if (v instanceof APLDouble) {
        var tmp1 = v.a2r_1;
        // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToLong' call
        var b = this.g2n_1;
        var tmp_0;
        if (isFinite(tmp1)) {
          tmp_0 = typeDiscrimination && equals(tmp1, -0.0) && b.equals(new Long(0, 0)) ? -1 : !isInteger(tmp1) ? rationalise(tmp1).vj(toRational(b)) : tmp1 >= (new Long(0, -2147483648)).l3() && tmp1 <= (new Long(-1, 2147483647)).l3() ? numberToLong(tmp1).a1(b) : compareTo_1(of_1(Companion_instance, tmp1), toBigInt(b));
        } else if (isInfinite(tmp1)) {
          tmp_0 = tmp1 > 0 ? 1 : -1;
        } else {
          throwAPLException(new APLArgumentIsNotANumberException(pos));
        }
        var res = tmp_0;
        tmp = -(typeDiscrimination && res === 0 ? -1 : res) | 0;
      } else {
        if (v instanceof APLComplex) {
          // Inline function 'kotlin.let' call
          var v0 = v.z3n_1;
          var tmp_1;
          if (v0.b3o_1 === 0.0) {
            var tmp1_0 = v0.a3o_1;
            // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToLong' call
            var b_0 = this.g2n_1;
            var tmp_2;
            if (isFinite(tmp1_0)) {
              tmp_2 = typeDiscrimination && equals(tmp1_0, -0.0) && b_0.equals(new Long(0, 0)) ? -1 : !isInteger(tmp1_0) ? rationalise(tmp1_0).vj(toRational(b_0)) : tmp1_0 >= (new Long(0, -2147483648)).l3() && tmp1_0 <= (new Long(-1, 2147483647)).l3() ? numberToLong(tmp1_0).a1(b_0) : compareTo_1(of_1(Companion_instance, tmp1_0), toBigInt(b_0));
            } else if (isInfinite(tmp1_0)) {
              tmp_2 = tmp1_0 > 0 ? 1 : -1;
            } else {
              throwAPLException(new APLArgumentIsNotANumberException(pos));
            }
            var res_0 = tmp_2;
            tmp_1 = -(typeDiscrimination && res_0 === 0 ? -1 : res_0) | 0;
          } else {
            throwAPLException(new APLArgumentComplexOrderingException(pos));
          }
          tmp = tmp_1;
        } else {
          if (v instanceof APLBigInt) {
            tmp = compareTo_1(toBigInt(this.g2n_1), v.z2q_1);
          } else {
            if (v instanceof APLRational) {
              tmp = toRational(this.g2n_1).vj(v.d31_1);
            } else {
              tmp = protoOf(APLNumber).u3l.call(this, v, pos, typeDiscrimination);
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(APLLong).v3l = function () {
    return true;
  };
  protoOf(APLLong).w3l = function (reference, pos) {
    return this.g2n_1.a1((reference instanceof APLLong ? reference : THROW_CCE()).g2n_1);
  };
  protoOf(APLLong).toString = function () {
    return 'APLLong(' + this.i2o(FormatStyle_PRETTY_getInstance()) + ')';
  };
  protoOf(APLLong).h2q = function () {
    return this.g2n_1.hashCode();
  };
  protoOf(APLLong).i2q = function () {
    var v = this.g2n_1;
    var vDouble = v.l3();
    if ((new Long(0, -2097152)).a1(v) <= 0 ? v.a1(new Long(0, 2097152)) <= 0 : false) {
      return getNumberHashCode(vDouble);
    }
    if (numberToLong(vDouble).equals(v)) {
      return getNumberHashCode(vDouble);
    }
    return v.hashCode();
  };
  function makeAPLNumber_0(_this__u8e3s4) {
    _init_properties_number_kt__nf6ccp();
    var tmp;
    if (_this__u8e3s4.a1(new Long(-512, -1)) >= 0 && _this__u8e3s4.a1(new Long(511, 0)) <= 0) {
      tmp = get_longCache()[_this__u8e3s4.c1() + 512 | 0];
    } else {
      tmp = new APLLong(_this__u8e3s4);
    }
    return tmp;
  }
  function APLBigInt(value) {
    APLNumber.call(this);
    this.z2q_1 = value;
  }
  protoOf(APLBigInt).z2p = function () {
    return Companion_getInstance_35().f3l_1;
  };
  protoOf(APLBigInt).f2k = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(APLBigInt).x2s = function (pos) {
    return toDouble_0(this.z2q_1);
  };
  protoOf(APLBigInt).w2s = function (pos) {
    checkBigIntInRangeLong(this.z2q_1, pos);
    return toLong(this.z2q_1);
  };
  protoOf(APLBigInt).s2z = function () {
    return toComplex(toDouble_0(this.z2q_1));
  };
  protoOf(APLBigInt).o2z = function (pos) {
    return this.z2q_1;
  };
  protoOf(APLBigInt).p2z = function (pos) {
    return make(Companion_getInstance(), this.z2q_1, BigIntConstants_getInstance().ij_1);
  };
  protoOf(APLBigInt).r2q = function (pos) {
    return !(signum(this.z2q_1) === 0);
  };
  protoOf(APLBigInt).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = BigInt__toString_impl_xmp9e6(this.z2q_1);
        break;
      case 2:
        tmp = BigInt__toString_impl_xmp9e6(this.z2q_1);
        break;
      case 1:
        tmp = bigIntToStringReadable(this.z2q_1);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLBigInt).u3l = function (reference, pos, typeDiscrimination) {
    var v = reference.g2k();
    var tmp;
    if (v instanceof APLLong) {
      tmp = compareTo_1(this.z2q_1, toBigInt(v.g2n_1));
    } else {
      if (v instanceof APLDouble) {
        var tmp1 = v.a2r_1;
        // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToBigint' call
        var b = this.z2q_1;
        var tmp_0;
        if (isFinite(tmp1)) {
          tmp_0 = typeDiscrimination && equals(tmp1, -0.0) && signum(b) === 0 ? -1 : isInteger(tmp1) ? compareTo_1(of_1(Companion_instance, tmp1), b) : rationalise(tmp1).vj(toRational_0(b));
        } else if (isInfinite(tmp1)) {
          tmp_0 = tmp1 > 0 ? 1 : -1;
        } else {
          throwAPLException(new APLArgumentIsNotANumberException(pos));
        }
        var res = tmp_0;
        tmp = -(typeDiscrimination && res === 0 ? -1 : res) | 0;
      } else {
        if (v instanceof APLComplex) {
          // Inline function 'kotlin.let' call
          var v0 = v.z3n_1;
          var tmp_1;
          if (v0.b3o_1 === 0.0) {
            var tmp1_0 = v0.a3o_1;
            // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToBigint' call
            var b_0 = this.z2q_1;
            var tmp_2;
            if (isFinite(tmp1_0)) {
              tmp_2 = typeDiscrimination && equals(tmp1_0, -0.0) && signum(b_0) === 0 ? -1 : isInteger(tmp1_0) ? compareTo_1(of_1(Companion_instance, tmp1_0), b_0) : rationalise(tmp1_0).vj(toRational_0(b_0));
            } else if (isInfinite(tmp1_0)) {
              tmp_2 = tmp1_0 > 0 ? 1 : -1;
            } else {
              throwAPLException(new APLArgumentIsNotANumberException(pos));
            }
            var res_0 = tmp_2;
            tmp_1 = -(typeDiscrimination && res_0 === 0 ? -1 : res_0) | 0;
          } else {
            throwAPLException(new APLArgumentComplexOrderingException(pos));
          }
          tmp = tmp_1;
        } else {
          if (v instanceof APLBigInt) {
            tmp = compareTo_1(this.z2q_1, v.z2q_1);
          } else {
            if (v instanceof APLRational) {
              tmp = make(Companion_getInstance(), this.z2q_1, BigIntConstants_getInstance().ij_1).vj(v.d31_1);
            } else {
              tmp = protoOf(APLNumber).u3l.call(this, v, pos, typeDiscrimination);
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(APLBigInt).v3l = function () {
    return true;
  };
  protoOf(APLBigInt).w3l = function (reference, pos) {
    return compareTo_1(this.z2q_1, (reference instanceof APLBigInt ? reference : THROW_CCE()).z2q_1);
  };
  protoOf(APLBigInt).toString = function () {
    return 'APLBigInt(' + this.i2o(FormatStyle_PRETTY_getInstance()) + ')';
  };
  protoOf(APLBigInt).h2q = function () {
    var tmp;
    if (rangeInLong(this.z2q_1)) {
      tmp = toLong(this.z2q_1).hashCode();
    } else {
      tmp = BigInt__hashCode_impl_fn8vs3(this.z2q_1);
    }
    return tmp;
  };
  protoOf(APLBigInt).i2q = function () {
    var v = this.z2q_1;
    var vDouble = toDouble_0(v);
    if (compareTo_2(v, new Long(0, -2097152)) >= 0 && compareTo_2(v, new Long(0, 2097152)) <= 0) {
      return getNumberHashCode(vDouble);
    }
    if (equals(of_1(Companion_instance, vDouble), v)) {
      return getNumberHashCode(vDouble);
    }
    return this.h2q();
  };
  function formatToAPL($this) {
    return formatDouble($this.z3n_1.a3o_1) + 'J' + formatDouble($this.z3n_1.b3o_1);
  }
  function formatToReadable($this) {
    return Companion_instance_32.b4z($this.z3n_1.a3o_1) + 'J' + Companion_instance_32.b4z($this.z3n_1.b3o_1);
  }
  function Companion_32() {
  }
  var Companion_instance_34;
  function Companion_getInstance_34() {
    return Companion_instance_34;
  }
  function APLComplex(value) {
    APLNumber.call(this);
    this.z3n_1 = value;
  }
  protoOf(APLComplex).z2p = function () {
    return Companion_getInstance_35().h3l_1;
  };
  protoOf(APLComplex).x2s = function (pos) {
    if (!(this.z3n_1.b3o_1 === 0.0)) {
      throwAPLException(new NumberComplexException(this.z3n_1, pos));
    }
    return this.z3n_1.a3o_1;
  };
  protoOf(APLComplex).w2s = function (pos) {
    if (!(this.z3n_1.b3o_1 === 0.0)) {
      throwAPLException(new NumberComplexException(this.z3n_1, pos));
    }
    return numberToLong(this.z3n_1.a3o_1);
  };
  protoOf(APLComplex).s2z = function () {
    return this.z3n_1;
  };
  protoOf(APLComplex).l4k = function () {
    return !(this.z3n_1.b3o_1 === 0.0);
  };
  protoOf(APLComplex).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = formatToAPL(this);
        break;
      case 2:
        tmp = formatToAPL(this);
        break;
      case 1:
        tmp = formatToReadable(this);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLComplex).r2q = function (pos) {
    return !this.z3n_1.equals(Companion_getInstance_30().f3p_1);
  };
  protoOf(APLComplex).d32 = function (reference, pos) {
    // Inline function 'com.dhsdevelopments.kap.Companion.compareEqualsComplexToSingleValue' call
    var tmp;
    if (!(this.z3n_1.b3o_1 === 0.0)) {
      var tmp_0;
      if (reference instanceof APLComplex) {
        tmp_0 = this.z3n_1.equals(reference.z3n_1);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = this.u3l(reference, pos, false) === 0;
    }
    return tmp;
  };
  protoOf(APLComplex).u3l = function (reference, pos, typeDiscrimination) {
    if (!(this.z3n_1.b3o_1 === 0.0)) {
      throwAPLException(new APLArgumentComplexOrderingException(pos));
    }
    var v = reference.g2k();
    // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToSingleValue' call
    var a = this.z3n_1.a3o_1;
    var tmp;
    if (v instanceof APLLong) {
      // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToLong' call
      var b = v.g2n_1;
      var tmp_0;
      if (isFinite(a)) {
        tmp_0 = typeDiscrimination && equals(a, -0.0) && b.equals(new Long(0, 0)) ? -1 : !isInteger(a) ? rationalise(a).vj(toRational(b)) : a >= (new Long(0, -2147483648)).l3() && a <= (new Long(-1, 2147483647)).l3() ? numberToLong(a).a1(b) : compareTo_1(of_1(Companion_instance, a), toBigInt(b));
      } else if (isInfinite(a)) {
        tmp_0 = a > 0 ? 1 : -1;
      } else {
        throwAPLException(new APLArgumentIsNotANumberException(pos));
      }
      var res = tmp_0;
      tmp = typeDiscrimination && res === 0 ? -1 : res;
    } else {
      if (v instanceof APLDouble) {
        // Inline function 'kotlin.let' call
        var bDouble = v.a2r_1;
        tmp = typeDiscrimination ? compareTo_3(a, bDouble) : a < bDouble ? -1 : a > bDouble ? 1 : 0;
      } else {
        if (v instanceof APLComplex) {
          // Inline function 'kotlin.let' call
          var v0 = v.z3n_1;
          var tmp_1;
          if (v0.b3o_1 === 0.0) {
            var realPart = v0.a3o_1;
            tmp_1 = typeDiscrimination ? compareTo_3(a, realPart) : a < realPart ? -1 : a > realPart ? 1 : 0;
          } else {
            throwAPLException(new APLArgumentComplexOrderingException(pos));
          }
          tmp = tmp_1;
        } else {
          if (v instanceof APLBigInt) {
            // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToBigint' call
            var b_0 = v.z2q_1;
            var tmp_2;
            if (isFinite(a)) {
              tmp_2 = typeDiscrimination && equals(a, -0.0) && signum(b_0) === 0 ? -1 : isInteger(a) ? compareTo_1(of_1(Companion_instance, a), b_0) : rationalise(a).vj(toRational_0(b_0));
            } else if (isInfinite(a)) {
              tmp_2 = a > 0 ? 1 : -1;
            } else {
              throwAPLException(new APLArgumentIsNotANumberException(pos));
            }
            var res_0 = tmp_2;
            tmp = typeDiscrimination && res_0 === 0 ? -1 : res_0;
          } else {
            if (v instanceof APLRational) {
              // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToRational' call
              var b_1 = v.d31_1;
              var tmp_3;
              if (isFinite(a)) {
                tmp_3 = typeDiscrimination && equals(a, -0.0) && b_1.xj() === 0 ? -1 : rationalise(a).vj(b_1);
              } else if (isInfinite(a)) {
                tmp_3 = a > 0 ? 1 : -1;
              } else {
                throwAPLException(new APLArgumentIsNotANumberException(pos));
              }
              var res_1 = tmp_3;
              tmp = typeDiscrimination && res_1 === 0 ? -1 : res_1;
            } else {
              tmp = protoOf(APLNumber).u3l.call(this, reference, pos, typeDiscrimination);
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(APLComplex).v3l = function () {
    return this.z3n_1.b3o_1 === 0.0 && !isNaN_0(this.z3n_1.a3o_1);
  };
  protoOf(APLComplex).w3l = function (reference, pos) {
    var other = (reference instanceof APLComplex ? reference : THROW_CCE()).z3n_1;
    var imResult = Companion_instance_32.a4z(this.z3n_1.b3o_1, other.b3o_1);
    var tmp;
    if (imResult === 0) {
      tmp = Companion_instance_32.a4z(this.z3n_1.a3o_1, other.a3o_1);
    } else {
      tmp = imResult;
    }
    return tmp;
  };
  protoOf(APLComplex).h2q = function () {
    var tmp;
    if (this.z3n_1.b3o_1 === 0.0) {
      tmp = getNumberHashCode(this.z3n_1.a3o_1);
    } else {
      tmp = this.z3n_1.hashCode();
    }
    return tmp;
  };
  protoOf(APLComplex).i2q = function () {
    return this.h2q();
  };
  function APLRational(value) {
    APLNumber.call(this);
    this.d31_1 = value;
  }
  protoOf(APLRational).x2s = function (pos) {
    return this.d31_1.l3();
  };
  protoOf(APLRational).w2s = function (pos) {
    var n = div(this.d31_1.oj(), this.d31_1.pj());
    if (rangeInLong(n)) {
      return toLong(n);
    }
    throwAPLException(new APLEvalException('Value does not fit in a long: ' + toString(this.d31_1), pos));
  };
  protoOf(APLRational).s2z = function () {
    return toComplex(this.d31_1.l3());
  };
  protoOf(APLRational).p2z = function (pos) {
    return this.d31_1;
  };
  protoOf(APLRational).r2q = function (pos) {
    return !(this.d31_1.xj() === 0);
  };
  protoOf(APLRational).z2p = function () {
    return Companion_getInstance_35().o3l_1;
  };
  protoOf(APLRational).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = BigInt__toString_impl_xmp9e6(this.d31_1.oj()) + '/' + BigInt__toString_impl_xmp9e6(this.d31_1.pj());
        break;
      case 2:
        tmp = BigInt__toString_impl_xmp9e6(this.d31_1.oj()) + '/' + BigInt__toString_impl_xmp9e6(this.d31_1.pj());
        break;
      case 1:
        tmp = bigIntToStringReadable(this.d31_1.oj()) + 'r' + bigIntToStringReadable(this.d31_1.pj());
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLRational).u3l = function (reference, pos, typeDiscrimination) {
    var v = reference.g2k();
    var tmp;
    if (v instanceof APLLong) {
      tmp = this.d31_1.vj(make(Companion_getInstance(), toBigInt(v.g2n_1), BigIntConstants_getInstance().ij_1));
    } else {
      if (v instanceof APLDouble) {
        var tmp1 = v.a2r_1;
        // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToRational' call
        var b = this.d31_1;
        var tmp_0;
        if (isFinite(tmp1)) {
          tmp_0 = typeDiscrimination && equals(tmp1, -0.0) && b.xj() === 0 ? -1 : rationalise(tmp1).vj(b);
        } else if (isInfinite(tmp1)) {
          tmp_0 = tmp1 > 0 ? 1 : -1;
        } else {
          throwAPLException(new APLArgumentIsNotANumberException(pos));
        }
        var res = tmp_0;
        tmp = -(typeDiscrimination && res === 0 ? -1 : res) | 0;
      } else {
        if (v instanceof APLComplex) {
          // Inline function 'kotlin.let' call
          var v0 = v.z3n_1;
          var tmp_1;
          if (v0.b3o_1 === 0.0) {
            var tmp1_0 = v0.a3o_1;
            // Inline function 'com.dhsdevelopments.kap.Companion.compareDoubleToRational' call
            var b_0 = this.d31_1;
            var tmp_2;
            if (isFinite(tmp1_0)) {
              tmp_2 = typeDiscrimination && equals(tmp1_0, -0.0) && b_0.xj() === 0 ? -1 : rationalise(tmp1_0).vj(b_0);
            } else if (isInfinite(tmp1_0)) {
              tmp_2 = tmp1_0 > 0 ? 1 : -1;
            } else {
              throwAPLException(new APLArgumentIsNotANumberException(pos));
            }
            var res_0 = tmp_2;
            tmp_1 = -(typeDiscrimination && res_0 === 0 ? -1 : res_0) | 0;
          } else {
            throwAPLException(new APLArgumentComplexOrderingException(pos));
          }
          tmp = tmp_1;
        } else {
          if (v instanceof APLBigInt) {
            tmp = this.d31_1.vj(make(Companion_getInstance(), v.z2q_1, BigIntConstants_getInstance().ij_1));
          } else {
            if (v instanceof APLRational) {
              tmp = this.d31_1.vj(v.d31_1);
            } else {
              tmp = protoOf(APLNumber).u3l.call(this, v, pos, typeDiscrimination);
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(APLRational).v3l = function () {
    return true;
  };
  protoOf(APLRational).w3l = function (reference, pos) {
    return this.d31_1.vj((reference instanceof APLRational ? reference : THROW_CCE()).d31_1);
  };
  protoOf(APLRational).toString = function () {
    return 'APLRational(' + this.i2o(FormatStyle_PRETTY_getInstance()) + ')';
  };
  protoOf(APLRational).h2q = function () {
    var tmp;
    if (this.d31_1.dk()) {
      tmp = this.d31_1.bk().hashCode();
    } else {
      tmp = hashCode(this.d31_1);
    }
    return tmp;
  };
  protoOf(APLRational).i2q = function () {
    var v = this.d31_1;
    var vDouble = v.l3();
    if (equals(rationalise(vDouble), v)) {
      return getNumberHashCode(vDouble);
    }
    return this.h2q();
  };
  function isInteger(_this__u8e3s4) {
    _init_properties_number_kt__nf6ccp();
    return _this__u8e3s4 % 1.0 === 0.0;
  }
  function APLInteger() {
  }
  function checkBigIntInRangeLong(value, pos) {
    _init_properties_number_kt__nf6ccp();
    if (!rangeInLong(value)) {
      throwAPLException(new LongMagnitudeException(value, pos));
    }
  }
  function bigIntToStringReadable(value) {
    _init_properties_number_kt__nf6ccp();
    return compareTo(value, 0) < 0 ? '\xAF' + BigInt__toString_impl_xmp9e6(unaryMinus(value)) : BigInt__toString_impl_xmp9e6(value);
  }
  function NumberComplexException(value, pos) {
    pos = pos === VOID ? null : pos;
    IncompatibleTypeException.call(this, 'Number is complex: ' + value.toString(), pos);
    captureStack(this, NumberComplexException);
  }
  function makeAPLNumber_1(_this__u8e3s4) {
    _init_properties_number_kt__nf6ccp();
    return _this__u8e3s4.b3o_1 === 0.0 ? new APLDouble(_this__u8e3s4.a3o_1) : new APLComplex(_this__u8e3s4);
  }
  function makeAPLNumber_2(_this__u8e3s4) {
    _init_properties_number_kt__nf6ccp();
    return new APLBigInt(_this__u8e3s4);
  }
  function makeAPLNumber_3(_this__u8e3s4) {
    _init_properties_number_kt__nf6ccp();
    return equals(_this__u8e3s4.pj(), BigIntConstants_getInstance().ij_1) ? makeAPLNumberWithReduction(_this__u8e3s4.oj()) : new APLRational(_this__u8e3s4);
  }
  function makeAPLNumber_4(_this__u8e3s4) {
    _init_properties_number_kt__nf6ccp();
    return makeAPLNumber_0(toLong_0(_this__u8e3s4));
  }
  var properties_initialized_number_kt_uakkvp;
  function _init_properties_number_kt__nf6ccp() {
    if (!properties_initialized_number_kt_uakkvp) {
      properties_initialized_number_kt_uakkvp = true;
      APLLONG_0 = new APLLong(new Long(0, 0));
      APLLONG_1 = new APLLong(new Long(1, 0));
      APLDOUBLE_0 = new APLDouble(0.0);
      APLDOUBLE_1 = new APLDouble(1.0);
      var tmp = 0;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_0 = Array(1024);
      while (tmp < 1024) {
        var tmp_1 = tmp;
        tmp_0[tmp_1] = new APLLong(numberToLong(tmp_1).x2(new Long(512, 0)));
        tmp = tmp + 1 | 0;
      }
      longCache = tmp_0;
    }
  }
  function registerClass($this, sym, cl) {
    // Inline function 'kotlin.collections.set' call
    $this.w3c_1.j2(sym, cl);
    // Inline function 'kotlin.collections.set' call
    $this.x3c_1.j2(cl, sym);
  }
  function ClassManager(engine) {
    this.v3c_1 = engine;
    this.w3c_1 = HashMap_init_$Create$();
    this.x3c_1 = HashMap_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = Companion_getInstance_35().t3l_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var sym = this.v3c_1.r39().l4f(element.p2());
      // Inline function 'kotlin.collections.set' call
      this.w3c_1.j2(sym, element);
      // Inline function 'kotlin.collections.set' call
      this.x3c_1.j2(element, sym);
    }
  }
  protoOf(ClassManager).e4z = function (sym) {
    return this.w3c_1.a2(sym);
  };
  protoOf(ClassManager).f4z = function (cl) {
    registerClass(this, cl.g4z_1, cl);
  };
  protoOf(ClassManager).y3c = function (cl) {
    var tmp0_elvis_lhs = this.x3c_1.a2(cl);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$('No symbol found for class: ' + cl.p2());
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(ClassManager).p4n = function () {
    var ns = this.v3c_1.x4e('objects');
    this.v3c_1.v4g(this.v3c_1.s39('defclass', ns), new DefclassFunctionDescriptor());
    this.v3c_1.v4g(this.v3c_1.s39('make', ns), new MakeClassInstanceFunctionDescriptor());
    this.v3c_1.v4g(this.v3c_1.s39('classof', ns), new TagOfFunctionDescriptor());
    this.v3c_1.v4g(this.v3c_1.s39('extract', ns), new ExtractFunctionDescriptor());
  };
  function Companion_33() {
    Companion_instance_35 = this;
    this.f3l_1 = new SystemClass('integer');
    this.g3l_1 = new SystemClass('float');
    this.h3l_1 = new SystemClass('complex');
    this.i3l_1 = new SystemClass('char');
    this.j3l_1 = new SystemClass('array');
    this.k3l_1 = new SystemClass('symbol');
    this.l3l_1 = new SystemClass('function');
    this.m3l_1 = new SystemClass('list');
    this.n3l_1 = new MapClass();
    this.o3l_1 = new SystemClass('rational');
    this.p3l_1 = new SystemClass('object');
    this.q3l_1 = new SystemClass('timestamp');
    this.r3l_1 = new SystemClass('null');
    this.s3l_1 = new SystemClass('internal');
    this.t3l_1 = listOf([this.f3l_1, this.g3l_1, this.h3l_1, this.i3l_1, this.j3l_1, this.k3l_1, this.l3l_1, this.m3l_1, this.n3l_1, this.o3l_1, this.p3l_1, this.q3l_1, this.r3l_1, this.s3l_1]);
  }
  var Companion_instance_35;
  function Companion_getInstance_35() {
    if (Companion_instance_35 == null)
      new Companion_33();
    return Companion_instance_35;
  }
  function SystemClass(name) {
    Companion_getInstance_35();
    this.i4y_1 = name;
  }
  protoOf(SystemClass).p2 = function () {
    return this.i4y_1;
  };
  function KapClass() {
  }
  function UserDefinedClass(sym) {
    this.g4z_1 = sym;
  }
  protoOf(UserDefinedClass).p2 = function () {
    return this.g4z_1.t3e();
  };
  function DefclassFunctionImpl(instantiation) {
    NoAxisAPLFunction.call(this, instantiation);
  }
  protoOf(DefclassFunctionImpl).n2i = function (context, a) {
    var a0 = listify(a);
    var name = a0.v4p(0).m2q(this.t2g_1);
    context.j38_1.y38_1.f4z(new UserDefinedClass(name.g2j_1));
    return name;
  };
  function DefclassFunctionDescriptor() {
  }
  protoOf(DefclassFunctionDescriptor).i2i = function (instantiation) {
    return new DefclassFunctionImpl(instantiation);
  };
  function MakeClassInstanceFunctionImpl(instantiation) {
    NoAxisAPLFunction.call(this, instantiation);
  }
  protoOf(MakeClassInstanceFunctionImpl).a2h = function (context, a, b, axis) {
    var className = a.m2q(this.t2g_1).g2j_1;
    var tmp0_elvis_lhs = context.j38_1.y38_1.e4z(className);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new KapClassNotFound(className, this.t2g_1));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var cl = tmp;
    return new TypedAPLValue(b, cl);
  };
  function MakeClassInstanceFunctionDescriptor() {
  }
  protoOf(MakeClassInstanceFunctionDescriptor).i2i = function (instantiation) {
    return new MakeClassInstanceFunctionImpl(instantiation);
  };
  function TagOfFunctionImpl(instantiation) {
    NoAxisAPLFunction.call(this, instantiation);
  }
  protoOf(TagOfFunctionImpl).n2i = function (context, a) {
    return new APLSymbol(context.j38_1.y38_1.y3c(a.z2p()));
  };
  function TagOfFunctionDescriptor() {
  }
  protoOf(TagOfFunctionDescriptor).i2i = function (instantiation) {
    return new TagOfFunctionImpl(instantiation);
  };
  function ensureTypedAPLValue($this, a) {
    var a0 = a.g2k();
    if (!(a0 instanceof TypedAPLValue)) {
      throwAPLException(new IncompatibleTypeException('Value is not a class instance: ' + a.i2o(FormatStyle_PLAIN_getInstance()), $this.t2g_1));
    }
    return a0;
  }
  function ExtractFunctionImpl(instantiation) {
    NoAxisAPLFunction.call(this, instantiation);
  }
  protoOf(ExtractFunctionImpl).n2i = function (context, a) {
    return ensureTypedAPLValue(this, a).x4z_1;
  };
  protoOf(ExtractFunctionImpl).d2j = function (baseFn, context, a) {
    var a0 = ensureTypedAPLValue(this, a);
    var result = baseFn.w2g(context, a0.x4z_1, null);
    return new TypedAPLValue(result, a0.y4z_1);
  };
  function ExtractFunctionDescriptor() {
  }
  protoOf(ExtractFunctionDescriptor).i2i = function (instantiation) {
    return new ExtractFunctionImpl(instantiation);
  };
  function KapClassNotFound(name, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, 'Class not found: ' + name.t3e(), pos);
    captureStack(this, KapClassNotFound);
  }
  function TypedAPLValue(delegate, kapClass) {
    APLSingleValue.call(this);
    this.x4z_1 = delegate;
    this.y4z_1 = kapClass;
  }
  protoOf(TypedAPLValue).z2p = function () {
    return this.y4z_1;
  };
  protoOf(TypedAPLValue).i2o = function (style) {
    return 'instance';
  };
  protoOf(TypedAPLValue).h2n = function (reference, pos, typeDiscrimination) {
    // Inline function 'kotlin.TODO' call
    var reason = 'Not yet implemented';
    throw new NotImplementedError('An operation is not implemented: ' + reason);
  };
  protoOf(TypedAPLValue).h2q = function () {
    // Inline function 'kotlin.TODO' call
    var reason = 'not implemented';
    throw new NotImplementedError('An operation is not implemented: ' + reason);
  };
  function InverseFnOp() {
  }
  protoOf(InverseFnOp).n2w = function (fn, pos) {
    return new InverseFnFunctionDescriptor(fn);
  };
  function APLOperatorOneArg() {
  }
  function _get_fn__ndc14z($this) {
    return $this.s2g_1.p(0);
  }
  function InverseFn(pos, fn) {
    APLFunction.call(this, pos, listOf_0(fn));
  }
  protoOf(InverseFn).w2g = function (context, a, axis) {
    return _get_fn__ndc14z(this).q2h(context, a, axis);
  };
  protoOf(InverseFn).a2h = function (context, a, b, axis) {
    return _get_fn__ndc14z(this).r2h(context, a, b, axis);
  };
  protoOf(InverseFn).z2h = function () {
    return _get_fn__ndc14z(this).b2i();
  };
  protoOf(InverseFn).a2i = function () {
    return _get_fn__ndc14z(this).c2i();
  };
  function InverseFnFunctionDescriptor(fn) {
    this.d50_1 = fn;
  }
  protoOf(InverseFnFunctionDescriptor).i2i = function (instantiation) {
    return new InverseFn(instantiation, this.d50_1);
  };
  function UserDefinedOperatorFn($outer, opFn, pos) {
    this.m50_1 = $outer;
    NoAxisAPLFunction.call(this, pos);
    this.i50_1 = opFn;
    this.j50_1 = new StackStorageRef(this.m50_1.o50_1);
    var tmp = this;
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.m50_1.p50_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = new StackStorageRef(item);
      destination.h(tmp$ret$0);
    }
    tmp.k50_1 = destination;
    var tmp_0 = this;
    // Inline function 'kotlin.collections.map' call
    var this_1 = this.m50_1.q50_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_1, 10));
    var _iterator__ex2g4s_0 = this_1.k();
    while (_iterator__ex2g4s_0.l()) {
      var item_0 = _iterator__ex2g4s_0.m();
      var tmp$ret$3 = new StackStorageRef(item_0);
      destination_0.h(tmp$ret$3);
    }
    tmp_0.l50_1 = destination_0;
  }
  protoOf(UserDefinedOperatorFn).n2i = function (context, a) {
    var frame = currentStorageStack().s3b();
    var tmp0 = this.m50_1.s50_1;
    var tmp1 = this.m50_1.n50_1.t3e();
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.t2g_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame_0 = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame_0);
    var result;
    try {
      context.w4p(this.l50_1, a);
      context.t4p(this.j50_1, new LambdaValue(this.i50_1, frame));
      result = this.m50_1.r50_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame_0)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame_0.i4m();
    }
    return result;
  };
  protoOf(UserDefinedOperatorFn).t2i = function (context, a, b) {
    var frame = currentStorageStack().s3b();
    var tmp0 = this.m50_1.s50_1;
    var tmp1 = this.m50_1.n50_1.t3e();
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.t2g_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame_0 = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame_0);
    var result;
    try {
      context.w4p(this.k50_1, a);
      context.w4p(this.l50_1, b);
      context.t4p(this.j50_1, new LambdaValue(this.i50_1, frame));
      result = this.m50_1.r50_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame_0)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame_0.i4m();
    }
    return result;
  };
  function UserDefinedOperatorOneArg$combineFunction$1(this$0, $fn) {
    this.t50_1 = this$0;
    this.u50_1 = $fn;
  }
  protoOf(UserDefinedOperatorOneArg$combineFunction$1).i2i = function (instantiation) {
    return new UserDefinedOperatorFn(this.t50_1, this.u50_1, instantiation);
  };
  function UserDefinedOperatorOneArg(name, opBinding, leftArgs, rightArgs, instr, env) {
    this.n50_1 = name;
    this.o50_1 = opBinding;
    this.p50_1 = leftArgs;
    this.q50_1 = rightArgs;
    this.r50_1 = instr;
    this.s50_1 = env;
  }
  protoOf(UserDefinedOperatorOneArg).n2w = function (fn, pos) {
    return new UserDefinedOperatorOneArg$combineFunction$1(this, fn);
  };
  function APLUserDefinedOperatorFunction($outer, leftFn, extraFns, pos) {
    this.e51_1 = $outer;
    NoAxisAPLFunction.call(this, pos, plus_1(listOf_0(leftFn), extraFns));
    this.z50_1 = new StackStorageRef(this.e51_1.g51_1);
    this.a51_1 = new StackStorageRef(this.e51_1.h51_1);
    var tmp = this;
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.e51_1.i51_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = new StackStorageRef(item);
      destination.h(tmp$ret$0);
    }
    tmp.b51_1 = destination;
    var tmp_0 = this;
    // Inline function 'kotlin.collections.map' call
    var this_1 = this.e51_1.j51_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_1, 10));
    var _iterator__ex2g4s_0 = this_1.k();
    while (_iterator__ex2g4s_0.l()) {
      var item_0 = _iterator__ex2g4s_0.m();
      var tmp$ret$3 = new StackStorageRef(item_0);
      destination_0.h(tmp$ret$3);
    }
    tmp_0.c51_1 = destination_0;
    this.d51_1 = this.s2g_1.p(0);
  }
  protoOf(APLUserDefinedOperatorFunction).n2i = function (context, a) {
    var frame = currentStorageStack().s3b();
    var arg = this.m51(context);
    var tmp0 = this.e51_1.l51_1;
    var tmp1 = this.e51_1.f51_1.t3e();
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.t2g_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame_0 = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame_0);
    var result;
    try {
      context.w4p(this.c51_1, a);
      context.t4p(this.z50_1, new LambdaValue(this.d51_1, frame));
      context.t4p(this.a51_1, arg);
      result = this.e51_1.k51_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame_0)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame_0.i4m();
    }
    return result;
  };
  protoOf(APLUserDefinedOperatorFunction).t2i = function (context, a, b) {
    var frame = currentStorageStack().s3b();
    var arg = this.m51(context);
    var tmp0 = this.e51_1.l51_1;
    var tmp1 = this.e51_1.f51_1.t3e();
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.t2g_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame_0 = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame_0);
    var result;
    try {
      context.w4p(this.b51_1, a);
      context.w4p(this.c51_1, b);
      context.t4p(this.z50_1, new LambdaValue(this.d51_1, frame));
      context.t4p(this.a51_1, arg);
      result = this.e51_1.k51_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame_0)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame_0.i4m();
    }
    return result;
  };
  function FnCall($outer, leftFn, rightFn, pos) {
    this.y51_1 = $outer;
    APLUserDefinedOperatorFunction.call(this, $outer, leftFn, listOf_0(rightFn), pos);
    this.x51_1 = this.s2g_1.p(1);
    new SaveStackSupport(this);
  }
  protoOf(FnCall).m51 = function (context) {
    return new LambdaValue(this.x51_1, currentStorageStack().s3b());
  };
  function ValueCall($outer, leftFn, argInstr, pos) {
    this.k52_1 = $outer;
    APLUserDefinedOperatorFunction.call(this, $outer, leftFn, emptyList(), pos);
    this.j52_1 = argInstr;
    new SaveStackSupport(this);
  }
  protoOf(ValueCall).m51 = function (context) {
    return this.j52_1.j31(context);
  };
  function UserDefinedOperatorTwoArg(name, leftOpBinding, rightOpBinding, leftArgs, rightArgs, instr, env) {
    this.f51_1 = name;
    this.g51_1 = leftOpBinding;
    this.h51_1 = rightOpBinding;
    this.i51_1 = leftArgs;
    this.j51_1 = rightArgs;
    this.k51_1 = instr;
    this.l51_1 = env;
  }
  protoOf(UserDefinedOperatorTwoArg).m2g = function (aplParser, currentFn, opPos) {
    var res = parseFunctionForOperatorRightArg(aplParser);
    var tmp;
    if (res instanceof Left) {
      var _destruct__k2r9zo = res.vz_1;
      var fn = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      tmp = new FnCall(this, currentFn, fn, new FunctionInstantiation(aplParser.m52(), opPos.d38_1.g4w(VOID, VOID, VOID, VOID, pos.z4j_1, pos.a4k_1), opPos.e38_1));
    } else {
      if (res instanceof Right) {
        var valueArg = aplParser.a4l();
        aplParser.u4k_1.l52(valueArg.c4l_1);
        var tmp_0;
        if (valueArg instanceof FnParseResult) {
          throw new ParseException('Function not allowed', valueArg.d4l_1);
        } else {
          if (valueArg instanceof InstrParseResult) {
            tmp_0 = new ValueCall(this, currentFn, valueArg.l4l_1, opPos);
          } else {
            if (valueArg instanceof EmptyParseResult) {
              throw new ParseException('No right argument given', opPos.d38_1);
            } else {
              noWhenBranchMatchedException();
            }
          }
        }
        tmp = tmp_0;
      } else {
        noWhenBranchMatchedException();
      }
    }
    return tmp;
  };
  function parseFunctionForOperatorRightArg(parser) {
    var tokenWithPos = parser.u4k_1.n52();
    var token = tokenWithPos.de();
    var pos = tokenWithPos.ee();
    var tmp;
    if (token instanceof Symbol) {
      var fn = parser.w52(token, parseFunctionForOperatorRightArg$lambda(parser, pos, token));
      var tmp_0;
      if (fn == null) {
        parser.u4k_1.l52(tokenWithPos);
        tmp_0 = new Right(new Pair(token, pos));
      } else {
        tmp_0 = parseFunctionForOperatorRightArg$makeFunctionResult(parser, pos, fn);
      }
      tmp = tmp_0;
    } else {
      if (token instanceof OpenFnDef) {
        tmp = parseFunctionForOperatorRightArg$makeFunctionResult(parser, pos, parser.v52().i2i(parseFunctionForOperatorRightArg$makeInstantiation(parser, pos)));
      } else {
        if (token instanceof OpenParen) {
          var holder = parser.r52(CloseParen_getInstance());
          if (!(holder instanceof FnParseResult)) {
            throw new ParseException('Expected function', pos);
          }
          tmp = parseFunctionForOperatorRightArg$makeFunctionResult(parser, pos, holder.u52_1);
        } else {
          if (token instanceof ApplyToken) {
            tmp = parseFunctionForOperatorRightArg$makeFunctionResult(parser, pos, parser.q52().i2i(parseFunctionForOperatorRightArg$makeInstantiation(parser, pos)));
          } else {
            parser.u4k_1.l52(tokenWithPos);
            tmp = new Right(new Pair(token, pos));
          }
        }
      }
    }
    return tmp;
  }
  function APLOperatorTwoArg() {
  }
  function APLOperatorCombinedRightArg() {
  }
  function APLOperatorValueRightArg() {
  }
  function parseFunctionForOperatorRightArg$makeFunctionResult($parser, pos, fn) {
    var axis = $parser.x52();
    var tmp;
    if (!(axis == null)) {
      var env = $parser.e4l();
      tmp = new AxisValAssignedFunctionDirect(fn, axis, env.d4w() ? env : null);
    } else {
      tmp = fn;
    }
    var updated = tmp;
    return new Left(new Pair(updated, pos));
  }
  function parseFunctionForOperatorRightArg$makeInstantiation($parser, pos) {
    return new FunctionInstantiation($parser.u4k_1.l4q_1, pos, $parser.e4l());
  }
  function parseFunctionForOperatorRightArg$lambda($parser, $pos, $token) {
    return function () {
      return new FunctionInstantiation($parser.u4k_1.l4q_1, $pos.y52($token.h2j_1), $parser.e4l());
    };
  }
  function DivideToFloorInstructionOptimiser() {
    DivideToFloorInstructionOptimiser_instance = this;
    Scalar2ArgInstructionChainOptimiser.call(this);
  }
  protoOf(DivideToFloorInstructionOptimiser).z52 = function (fn0, fn1) {
    var tmp;
    if (!(fn0 instanceof MinAPLFunctionImpl)) {
      tmp = true;
    } else {
      tmp = !(fn1 instanceof DivAPLFunctionImpl);
    }
    if (tmp) {
      return null;
    }
    return new MergedFloorDivFunction(fn0, fn1, fn0.c2h());
  };
  var DivideToFloorInstructionOptimiser_instance;
  function DivideToFloorInstructionOptimiser_getInstance() {
    if (DivideToFloorInstructionOptimiser_instance == null)
      new DivideToFloorInstructionOptimiser();
    return DivideToFloorInstructionOptimiser_instance;
  }
  function DivideToCeilInstructionOptimiser() {
    DivideToCeilInstructionOptimiser_instance = this;
    Scalar2ArgInstructionChainOptimiser.call(this);
  }
  protoOf(DivideToCeilInstructionOptimiser).z52 = function (fn0, fn1) {
    var tmp;
    if (!(fn0 instanceof MaxAPLFunctionImpl)) {
      tmp = true;
    } else {
      tmp = !(fn1 instanceof DivAPLFunctionImpl);
    }
    if (tmp) {
      return null;
    }
    return new MergedCeilDivFunction(fn0, fn1, fn0.c2h());
  };
  var DivideToCeilInstructionOptimiser_instance;
  function DivideToCeilInstructionOptimiser_getInstance() {
    if (DivideToCeilInstructionOptimiser_instance == null)
      new DivideToCeilInstructionOptimiser();
    return DivideToCeilInstructionOptimiser_instance;
  }
  function MergedFloorDivFunction(fn0, fn1, instantiation) {
    AbstractMergedFloorCeilDivFunction.call(this, fn0, fn1, instantiation);
  }
  protoOf(MergedFloorDivFunction).h53 = function (x) {
    return fromDoubleFloor(Companion_instance, x);
  };
  protoOf(MergedFloorDivFunction).i53 = function (x) {
    // Inline function 'kotlin.math.floor' call
    return Math.floor(x);
  };
  protoOf(MergedFloorDivFunction).j53 = function (x) {
    return x.zj();
  };
  protoOf(MergedFloorDivFunction).k53 = function (x, y) {
    return divFloor(x, y);
  };
  protoOf(MergedFloorDivFunction).l53 = function (x, y) {
    return divFloor_0(x, y);
  };
  function MergedCeilDivFunction(fn0, fn1, instantiation) {
    AbstractMergedFloorCeilDivFunction.call(this, fn0, fn1, instantiation);
  }
  protoOf(MergedCeilDivFunction).h53 = function (x) {
    return fromDoubleCeil(Companion_instance, x);
  };
  protoOf(MergedCeilDivFunction).i53 = function (x) {
    // Inline function 'kotlin.math.ceil' call
    return Math.ceil(x);
  };
  protoOf(MergedCeilDivFunction).j53 = function (x) {
    return x.yj();
  };
  protoOf(MergedCeilDivFunction).k53 = function (x, y) {
    return divCeil(x, y);
  };
  protoOf(MergedCeilDivFunction).l53 = function (x, y) {
    return divCeil_0(x, y);
  };
  function Companion_34() {
    Companion_instance_36 = this;
    this.y53_1 = of(Companion_instance, '9223372036854775808');
  }
  var Companion_instance_36;
  function Companion_getInstance_36() {
    if (Companion_instance_36 == null)
      new Companion_34();
    return Companion_instance_36;
  }
  function AbstractMergedFloorCeilDivFunction(fn0, fn1, pos) {
    Companion_getInstance_36();
    MathNumericCombineAPLFunction.call(this, pos, listOf([fn0, fn1]), VOID, Companion_getInstance_45().x2j_1);
  }
  protoOf(AbstractMergedFloorCeilDivFunction).d2x = function (a, b) {
    var tmp$ret$2;
    $l$block_2: {
      // Inline function 'com.dhsdevelopments.kap.optimiser.AbstractMergedFloorCeilDivFunction.opLong' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var pos = this.t2g_1;
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          if (tmp3.equals(new Long(0, -2147483648)) && y.equals(new Long(-1, -1))) {
            var x = Companion_getInstance_36().y53_1;
            tmp_1 = makeAPLNumber_2(x);
          } else {
            var x_0 = this.k53(tmp3, y);
            tmp_1 = makeAPLNumber_0(x_0);
          }
          tmp$ret$2 = tmp_1;
          break $l$block_2;
        } else {
          var tmp_2;
          if (a instanceof APLComplex) {
            tmp_2 = true;
          } else {
            tmp_2 = b instanceof APLComplex;
          }
          if (tmp_2) {
            a.s2z();
            b.s2z();
            throwAPLException(new IncompatibleTypeException('Floor is not valid for complex values', this.t2g_1));
          } else {
            var tmp_3;
            if (a instanceof APLDouble) {
              tmp_3 = true;
            } else {
              tmp_3 = b instanceof APLDouble;
            }
            if (tmp_3) {
              var tmp7 = a.r2z();
              var y_0 = b.r2z();
              var tmp_4;
              if (y_0 === 0.0) {
                var x_1 = new Long(0, 0);
                tmp_4 = makeAPLNumber_0(x_1);
              } else {
                // Inline function 'kotlin.let' call
                var result = tmp7 / y_0;
                var tmp_5;
                if (result <= (new Long(2, -1048576)).l3() || result >= (new Long(-2, 1048575)).l3()) {
                  var x_2 = this.h53(result);
                  tmp_5 = makeAPLNumber_2(x_2);
                } else {
                  var x_3 = numberToLong(this.i53(result));
                  tmp_5 = makeAPLNumber_0(x_3);
                }
                tmp_4 = tmp_5;
              }
              tmp$ret$2 = tmp_4;
              break $l$block_2;
            } else {
              var tmp_6;
              if (a instanceof APLRational) {
                tmp_6 = true;
              } else {
                tmp_6 = b instanceof APLRational;
              }
              if (tmp_6) {
                var tmp9 = a.p2z(pos);
                var y_1 = b.p2z(pos);
                // Inline function 'com.dhsdevelopments.kap.optimiser.AbstractMergedFloorCeilDivFunction.convertOrOverflow' call
                var a_0 = this.j53(tmp9.tj(y_1));
                var tmp_7;
                if (rangeInLong(a_0)) {
                  var x_4 = toLong(a_0);
                  tmp_7 = makeAPLNumber_0(x_4);
                } else {
                  tmp_7 = makeAPLNumber_2(a_0);
                }
                tmp$ret$2 = tmp_7;
                break $l$block_2;
              } else {
                var tmp_8;
                if (a instanceof APLBigInt) {
                  tmp_8 = true;
                } else {
                  tmp_8 = b instanceof APLBigInt;
                }
                if (tmp_8) {
                  var tmp11 = a.o2z(pos);
                  var y_2 = b.o2z(pos);
                  // Inline function 'com.dhsdevelopments.kap.optimiser.AbstractMergedFloorCeilDivFunction.convertOrOverflow' call
                  var a_1 = this.l53(tmp11, y_2);
                  var tmp_9;
                  if (rangeInLong(a_1)) {
                    var x_5 = toLong(a_1);
                    tmp_9 = makeAPLNumber_0(x_5);
                  } else {
                    tmp_9 = makeAPLNumber_2(a_1);
                  }
                  tmp$ret$2 = tmp_9;
                  break $l$block_2;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, pos);
                }
              }
            }
          }
        }
      } else {
        var tmp_10;
        if (a instanceof APLChar) {
          tmp_10 = b instanceof APLChar;
        } else {
          tmp_10 = false;
        }
        if (tmp_10) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(pos);
        } else {
          NumericRelationErrors_instance.l2z(a, b, pos);
        }
      }
    }
    return tmp$ret$2;
  };
  protoOf(AbstractMergedFloorCeilDivFunction).t2x = function (a, b) {
    var tmp$ret$1;
    $l$block_2: {
      // Inline function 'com.dhsdevelopments.kap.optimiser.AbstractMergedFloorCeilDivFunction.opLong' call
      // Inline function 'com.dhsdevelopments.kap.builtins.numericRelationOperation2' call
      var pos = this.t2g_1;
      var tmp;
      if (a instanceof APLNumber) {
        tmp = b instanceof APLNumber;
      } else {
        tmp = false;
      }
      if (tmp) {
        var tmp_0;
        if (a instanceof APLLong) {
          tmp_0 = b instanceof APLLong;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          var tmp3 = a.g2n_1;
          var y = b.g2n_1;
          var tmp_1;
          if (tmp3.equals(new Long(0, -2147483648)) && y.equals(new Long(-1, -1))) {
            var x = Companion_getInstance_36().y53_1;
            throw new LongExpressionOverflow(x);
          } else {
            tmp_1 = this.k53(tmp3, y);
          }
          tmp$ret$1 = tmp_1;
          break $l$block_2;
        } else {
          var tmp_2;
          if (a instanceof APLComplex) {
            tmp_2 = true;
          } else {
            tmp_2 = b instanceof APLComplex;
          }
          if (tmp_2) {
            a.s2z();
            b.s2z();
            throwAPLException(new IncompatibleTypeException('Floor is not valid for complex values', this.t2g_1));
          } else {
            var tmp_3;
            if (a instanceof APLDouble) {
              tmp_3 = true;
            } else {
              tmp_3 = b instanceof APLDouble;
            }
            if (tmp_3) {
              var tmp7 = a.r2z();
              var y_0 = b.r2z();
              var tmp_4;
              if (y_0 === 0.0) {
                tmp_4 = new Long(0, 0);
              } else {
                // Inline function 'kotlin.let' call
                var result = tmp7 / y_0;
                var tmp_5;
                if (result <= (new Long(2, -1048576)).l3() || result >= (new Long(-2, 1048575)).l3()) {
                  var x_0 = this.h53(result);
                  throw new LongExpressionOverflow(x_0);
                } else {
                  tmp_5 = numberToLong(this.i53(result));
                }
                tmp_4 = tmp_5;
              }
              tmp$ret$1 = tmp_4;
              break $l$block_2;
            } else {
              var tmp_6;
              if (a instanceof APLRational) {
                tmp_6 = true;
              } else {
                tmp_6 = b instanceof APLRational;
              }
              if (tmp_6) {
                var tmp9 = a.p2z(pos);
                var y_1 = b.p2z(pos);
                // Inline function 'com.dhsdevelopments.kap.optimiser.AbstractMergedFloorCeilDivFunction.convertOrOverflow' call
                var a_0 = this.j53(tmp9.tj(y_1));
                var tmp_7;
                if (rangeInLong(a_0)) {
                  tmp_7 = toLong(a_0);
                } else {
                  throw new LongExpressionOverflow(a_0);
                }
                tmp$ret$1 = tmp_7;
                break $l$block_2;
              } else {
                var tmp_8;
                if (a instanceof APLBigInt) {
                  tmp_8 = true;
                } else {
                  tmp_8 = b instanceof APLBigInt;
                }
                if (tmp_8) {
                  var tmp11 = a.o2z(pos);
                  var y_2 = b.o2z(pos);
                  // Inline function 'com.dhsdevelopments.kap.optimiser.AbstractMergedFloorCeilDivFunction.convertOrOverflow' call
                  var a_1 = this.l53(tmp11, y_2);
                  var tmp_9;
                  if (rangeInLong(a_1)) {
                    tmp_9 = toLong(a_1);
                  } else {
                    throw new LongExpressionOverflow(a_1);
                  }
                  tmp$ret$1 = tmp_9;
                  break $l$block_2;
                } else {
                  NumericRelationErrors_instance.l2z(a, b, pos);
                }
              }
            }
          }
        }
      } else {
        var tmp_10;
        if (a instanceof APLChar) {
          tmp_10 = b instanceof APLChar;
        } else {
          tmp_10 = false;
        }
        if (tmp_10) {
          a.m2z_1;
          b.m2z_1;
          NumericRelationErrors_instance.n2z(pos);
        } else {
          NumericRelationErrors_instance.l2z(a, b, pos);
        }
      }
    }
    return tmp$ret$1;
  };
  protoOf(AbstractMergedFloorCeilDivFunction).f2x = function (a, b) {
    return this.k53(a, b);
  };
  protoOf(AbstractMergedFloorCeilDivFunction).l2h = function () {
    return _OptimisationFlags___init__impl__uhe3e(4);
  };
  function divFloor(a, b) {
    var tmp0 = a.z2(b);
    // Inline function 'kotlin.Long.minus' call
    var other = !a.a3(b).equals(new Long(0, 0)) && a.k3(b).a1(new Long(0, 0)) < 0 ? 1 : 0;
    return tmp0.x2(toLong_0(other));
  }
  function divFloor_0(a, b) {
    return minus(div(a, b), !(signum(rem(a, b)) === 0) && signum(xor(a, b)) < 0 ? BigIntConstants_getInstance().ij_1 : BigIntConstants_getInstance().hj_1);
  }
  function divCeil(a, b) {
    var tmp0 = a.z2(b);
    // Inline function 'kotlin.Long.plus' call
    var other = !a.a3(b).equals(new Long(0, 0)) && a.k3(b).a1(new Long(0, 0)) > 0 ? 1 : 0;
    return tmp0.w2(toLong_0(other));
  }
  function divCeil_0(a, b) {
    return plus(div(a, b), !(signum(rem(a, b)) === 0) && signum(xor(a, b)) > 0 ? BigIntConstants_getInstance().ij_1 : BigIntConstants_getInstance().hj_1);
  }
  function IndexOfMaxInstructionOptimiser() {
    IndexOfMaxInstructionOptimiser_instance = this;
    NonScalar1ArgInstructionChainOptimiser.call(this);
  }
  protoOf(IndexOfMaxInstructionOptimiser).z52 = function (fn0, fn1) {
    var tmp;
    if (!(fn0 instanceof TakeAPLFunctionImpl)) {
      tmp = true;
    } else {
      tmp = !(fn1 instanceof GradeDownFunctionImpl);
    }
    if (tmp) {
      return null;
    }
    return new MergedIndexOfMaxFunction(fn0, fn1, fn0.c2h());
  };
  var IndexOfMaxInstructionOptimiser_instance;
  function IndexOfMaxInstructionOptimiser_getInstance() {
    if (IndexOfMaxInstructionOptimiser_instance == null)
      new IndexOfMaxInstructionOptimiser();
    return IndexOfMaxInstructionOptimiser_instance;
  }
  function IndexOfMinInstructionOptimiser() {
    IndexOfMinInstructionOptimiser_instance = this;
    NonScalar1ArgInstructionChainOptimiser.call(this);
  }
  protoOf(IndexOfMinInstructionOptimiser).z52 = function (fn0, fn1) {
    var tmp;
    if (!(fn0 instanceof TakeAPLFunctionImpl)) {
      tmp = true;
    } else {
      tmp = !(fn1 instanceof GradeUpFunctionImpl);
    }
    if (tmp) {
      return null;
    }
    return new MergedIndexOfMinFunction(fn0, fn1, fn0.c2h());
  };
  var IndexOfMinInstructionOptimiser_instance;
  function IndexOfMinInstructionOptimiser_getInstance() {
    if (IndexOfMinInstructionOptimiser_instance == null)
      new IndexOfMinInstructionOptimiser();
    return IndexOfMinInstructionOptimiser_instance;
  }
  function MergedIndexOfMaxFunction(fn0, fn1, instantiation) {
    AbstractMergedIndexOfMaxMinFunction.call(this, fn0, fn1, instantiation);
  }
  protoOf(MergedIndexOfMaxFunction).r4d = function (value) {
    return value;
  };
  function MergedIndexOfMinFunction(fn0, fn1, instantiation) {
    AbstractMergedIndexOfMaxMinFunction.call(this, fn0, fn1, instantiation);
  }
  protoOf(MergedIndexOfMinFunction).r4d = function (value) {
    return -value | 0;
  };
  function AbstractMergedIndexOfMaxMinFunction(fn0, fn1, instantiation) {
    APLFunction.call(this, instantiation, listOf([fn0, fn1]));
    this.j54_1 = fn0;
    this.k54_1 = fn1;
  }
  protoOf(AbstractMergedIndexOfMaxMinFunction).w2g = function (context, a, axis) {
    if (!(axis == null))
      return this.l54(context, a, axis);
    var d = a.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(d) === 1))
      return this.l54(context, a, axis);
    if (Dimensions__get_impl_4npepw(d, 0) === 0)
      return a.m2l().hv();
    var currMax = a.h2k(0);
    var currIndex = 0;
    var inductionVariable = 1;
    var last = Dimensions__get_impl_4npepw(d, 0);
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var v = a.h2k(i);
        var res = this.r4d(currMax.g2q(v, this.t2g_1));
        if (res < 0) {
          currMax = v;
          currIndex = i;
        }
      }
       while (inductionVariable < last);
    return makeAPLNumber_4(currIndex);
  };
  protoOf(AbstractMergedIndexOfMaxMinFunction).l54 = function (context, a, axis) {
    var res = this.k54_1.w2g(context, a, axis);
    return this.j54_1.w2g(context, res, null);
  };
  function findWidthAndOffset($this, instr) {
    var tmp0_safe_receiver = tryLeftArgument($this, instr);
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp0_safe_receiver;
    }
    var tmp1_safe_receiver = tryRightArgument($this, instr);
    if (tmp1_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp1_safe_receiver;
    }
    return null;
  }
  function tryLeftArgument($this, instr) {
    if (!(instr instanceof FunctionCall2Arg))
      return null;
    var tmp = instr.p4u_1;
    if (!(tmp instanceof AddAPLFunctionImpl))
      return null;
    var tmp_0 = instr.q4u_1;
    if (!(tmp_0 instanceof LiteralInteger))
      return null;
    var tmp_1 = instr.r4u_1;
    if (!(tmp_1 instanceof FunctionCall1Arg))
      return null;
    var tmp_2 = instr.r4u_1.t4u_1;
    if (!(tmp_2 instanceof IotaAPLFunctionImpl))
      return null;
    var tmp_3 = instr.r4u_1.u4u_1;
    if (!(tmp_3 instanceof LiteralInteger))
      return null;
    var width = instr.r4u_1.u4u_1.x1();
    var offset = instr.q4u_1.x1();
    return new WidthAndOffset(width, offset, instr.q4u_1.i31_1.q4t(instr.r4u_1.u4u_1.i31_1));
  }
  function tryRightArgument($this, instr) {
    if (!(instr instanceof FunctionCall2Arg))
      return null;
    var tmp0_subject = instr.p4u_1;
    var tmp;
    if (tmp0_subject instanceof AddAPLFunctionImpl) {
      var tmp_0 = instr.r4u_1;
      if (!(tmp_0 instanceof LiteralInteger))
        return null;
      tmp = instr.r4u_1.x1();
    } else {
      if (tmp0_subject instanceof SubAPLFunctionImpl) {
        var tmp_1 = instr.r4u_1;
        if (!(tmp_1 instanceof LiteralInteger))
          return null;
        tmp = instr.r4u_1.x1().d3();
      } else {
        return null;
      }
    }
    var offset = tmp;
    var tmp_2 = instr.q4u_1;
    if (!(tmp_2 instanceof FunctionCall1Arg))
      return null;
    var tmp_3 = instr.q4u_1.t4u_1;
    if (!(tmp_3 instanceof IotaAPLFunctionImpl))
      return null;
    var iotaArg = instr.q4u_1.u4u_1;
    if (!(iotaArg instanceof LiteralInteger))
      return null;
    var width = iotaArg.x1();
    return new WidthAndOffset(width, offset, instr.q4u_1.i31_1.q4t(instr.r4u_1.i31_1));
  }
  function WidthAndOffset(width, offset, pos) {
    this.s54_1 = width;
    this.t54_1 = offset;
    this.u54_1 = pos;
  }
  protoOf(WidthAndOffset).de = function () {
    return this.s54_1;
  };
  protoOf(WidthAndOffset).ee = function () {
    return this.t54_1;
  };
  protoOf(WidthAndOffset).v54 = function () {
    return this.u54_1;
  };
  protoOf(WidthAndOffset).toString = function () {
    return 'WidthAndOffset(width=' + this.s54_1.toString() + ', offset=' + this.t54_1.toString() + ', pos=' + this.u54_1.toString() + ')';
  };
  protoOf(WidthAndOffset).hashCode = function () {
    var result = this.s54_1.hashCode();
    result = imul(result, 31) + this.t54_1.hashCode() | 0;
    result = imul(result, 31) + this.u54_1.hashCode() | 0;
    return result;
  };
  protoOf(WidthAndOffset).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof WidthAndOffset))
      return false;
    var tmp0_other_with_cast = other instanceof WidthAndOffset ? other : THROW_CCE();
    if (!this.s54_1.equals(tmp0_other_with_cast.s54_1))
      return false;
    if (!this.t54_1.equals(tmp0_other_with_cast.t54_1))
      return false;
    if (!this.u54_1.equals(tmp0_other_with_cast.u54_1))
      return false;
    return true;
  };
  function IotaAddOptimiser() {
  }
  protoOf(IotaAddOptimiser).a53 = function (instr) {
    var tmp0_elvis_lhs = findWidthAndOffset(this, instr);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var _destruct__k2r9zo = tmp;
    var width = _destruct__k2r9zo.de();
    var offset = _destruct__k2r9zo.ee();
    var pos = _destruct__k2r9zo.v54();
    if (width.a1(new Long(0, 0)) < 0 || width.a1(new Long(2147483647, 0)) > 0 || offset.a1(new Long(-2147483648, -1)) < 0) {
      return null;
    }
    if (width.a1(new Long(0, 0)) > 0) {
      try {
        // Inline function 'kotlin.Long.minus' call
        // Inline function 'com.dhsdevelopments.mpbignum.addExact' call
        var a = width.x2(toLong_0(1));
        if (a.a1(new Long(0, 0)) > 0 && offset.a1(new Long(0, 0)) > 0) {
          if (a.a1((new Long(-1, 2147483647)).x2(offset)) > 0) {
            throw ArithmeticException_init_$Create$();
          }
        } else if (a.a1(new Long(0, 0)) < 0 && offset.a1(new Long(0, 0)) < 0) {
          if (a.a1((new Long(0, -2147483648)).x2(offset)) < 0) {
            throw ArithmeticException_init_$Create$();
          }
        }
        a.w2(offset);
      } catch ($p) {
        if ($p instanceof ArithmeticException) {
          var _unused_var__etf5q3 = $p;
          return null;
        } else {
          throw $p;
        }
      }
    }
    var widthAsInt = width.c1();
    var tmp_0;
    if (offset.equals(new Long(0, 0))) {
      tmp_0 = new IotaArrayLong(widthAsInt);
    } else {
      tmp_0 = new ResizedIotaArrayLong(dimensionsOfSize(new Int32Array([widthAsInt])), widthAsInt, offset);
    }
    var instr_0 = tmp_0;
    return new ConstantValueInstruction(instr_0, pos);
  };
  var IotaAddOptimiser_instance;
  function IotaAddOptimiser_getInstance() {
    return IotaAddOptimiser_instance;
  }
  function SingleElementConstantListOptimiser() {
  }
  protoOf(SingleElementConstantListOptimiser).a53 = function (instr) {
    if (!(instr instanceof FunctionCall1Arg))
      return null;
    var tmp = instr.t4u_1;
    if (!(tmp instanceof ConcatenateAPLFunctionLastAxisImpl))
      return null;
    var args = instr.u4u_1;
    var tmp_0;
    if (args instanceof FunctionCall1Arg) {
      var tmp_1 = args.t4u_1;
      if (!(tmp_1 instanceof EncloseAPLFunctionImpl))
        return null;
      var tmp_2 = args.u4u_1;
      if (!(tmp_2 instanceof LiteralAPLValueInstruction))
        return null;
      tmp_0 = new OptimisedConstantListInstruction(ResizedArrayImpls_instance.p2l(dimensionsOfSize(new Int32Array([1])), args.u4u_1.b4t()), args.u4u_1.i31_1);
    } else {
      if (args instanceof LiteralAPLValueInstruction) {
        var value = args.b4t();
        if (!(_Dimensions___get_size__impl__uu37ek(value.o2i()) === 0))
          return null;
        var disclosedValue = value.o2l();
        var res = ResizedArrayImpls_instance.p2l(dimensionsOfSize(new Int32Array([1])), disclosedValue);
        tmp_0 = new OptimisedConstantListInstruction(res, args.i31_1);
      } else {
        tmp_0 = null;
      }
    }
    return tmp_0;
  };
  var SingleElementConstantListOptimiser_instance;
  function SingleElementConstantListOptimiser_getInstance() {
    return SingleElementConstantListOptimiser_instance;
  }
  function OptimisedConstantListInstruction(valueInt, pos) {
    LiteralAPLValueInstruction.call(this, pos);
    this.x54_1 = valueInt;
  }
  protoOf(OptimisedConstantListInstruction).b4t = function () {
    return this.x54_1;
  };
  protoOf(OptimisedConstantListInstruction).j31 = function (context) {
    return this.x54_1;
  };
  protoOf(OptimisedConstantListInstruction).b1h = function () {
    return emptyList();
  };
  protoOf(OptimisedConstantListInstruction).x4m = function (updatedChildList, newPos) {
    return this;
  };
  function findChildExpressions($this, instr) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = instr.b1h();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = findChildExpressions(StandardOptimiser_getInstance(), item);
      destination.h(tmp$ret$0);
    }
    var childrenCopy = destination;
    // Inline function 'kotlin.require' call
    if (!(childrenCopy.n() === instr.b1h().n())) {
      var message = 'Updated child list size is not the same as original list';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var newInstr = instr.x4m(childrenCopy, instr.i31_1);
    var convertedInstr = maybeConvertLiteral($this, newInstr);
    var tmp0_elvis_lhs = findOptimisedInstruction($this, convertedInstr);
    return tmp0_elvis_lhs == null ? convertedInstr : tmp0_elvis_lhs;
  }
  function findOptimisedInstruction($this, instr) {
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = $this.y54_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var res = element.a53(instr);
      if (!(res == null)) {
        return res;
      }
    }
    return null;
  }
  function maybeConvertLiteral($this, instr) {
    var tmp;
    if (instr instanceof Literal1DArray) {
      tmp = maybeConvertLiteral1DArray($this, instr);
    } else {
      tmp = instr;
    }
    return tmp;
  }
  function maybeConvertLiteral1DArray($this, array) {
    var content = array.w4t_1;
    var tmp;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp_0;
      if (isInterface(content, Collection)) {
        tmp_0 = content.o();
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var _iterator__ex2g4s = content.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        if (!(element instanceof LiteralAPLValueInstruction)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    if (tmp$ret$0) {
      // Inline function 'com.dhsdevelopments.kap.Companion.make' call
      var dimensions = dimensionsOfSize(new Int32Array([content.n()]));
      var st = {_v: new ArrayMemberType(Companion_getInstance_45().d2k_1)};
      var tmp_1 = 0;
      var tmp_2 = Dimensions__contentSize_impl_4eihds(dimensions);
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_3 = Array(tmp_2);
      while (tmp_1 < tmp_2) {
        var tmp_4 = tmp_1;
        var tmp_5 = content.p(tmp_4);
        var instr = tmp_5 instanceof LiteralAPLValueInstruction ? tmp_5 : THROW_CCE();
        // Inline function 'kotlin.also' call
        var this_0 = instr.b4t();
        st._v = new ArrayMemberType(ArrayMemberType__intersection_impl_osmuy1(st._v.e2k_1, this_0.f2k()));
        tmp_3[tmp_4] = this_0;
        tmp_1 = tmp_1 + 1 | 0;
      }
      var content_0 = tmp_3;
      var resultArray = new APLArrayImpl(dimensions, content_0, st._v.e2k_1);
      tmp = new ConstantValueInstruction(resultArray, array.i31_1);
    } else {
      tmp = array;
    }
    return tmp;
  }
  function StandardOptimiser() {
    StandardOptimiser_instance = this;
    this.y54_1 = listOf([SingleElementConstantListOptimiser_instance, DivideToFloorInstructionOptimiser_getInstance(), DivideToCeilInstructionOptimiser_getInstance(), IotaAddOptimiser_instance, IndexOfMaxInstructionOptimiser_getInstance(), IndexOfMinInstructionOptimiser_getInstance()]);
  }
  protoOf(StandardOptimiser).z54 = function (parser, instr) {
    return findChildExpressions(this, instr);
  };
  var StandardOptimiser_instance;
  function StandardOptimiser_getInstance() {
    if (StandardOptimiser_instance == null)
      new StandardOptimiser();
    return StandardOptimiser_instance;
  }
  function attemptRegularChainedFnCalls($this, instr) {
    var tmp;
    if (!(instr instanceof FunctionCall1Arg)) {
      tmp = true;
    } else {
      var tmp_0 = instr.u4u_1;
      tmp = !(tmp_0 instanceof FunctionCall2Arg);
    }
    if (tmp) {
      return null;
    }
    var fn0 = instr.t4u_1;
    var secondInstr = instr.u4u_1;
    var fn1 = secondInstr.p4u_1;
    var tmp0_elvis_lhs = $this.z52(fn0, fn1);
    var tmp_1;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp_1 = tmp0_elvis_lhs;
    }
    var mergedFn = tmp_1;
    return new FunctionCall2Arg(mergedFn, secondInstr.q4u_1, secondInstr.r4u_1, fn0.t2g_1);
  }
  function attemptCallChain($this, instr) {
    var tmp;
    if (!(instr instanceof FunctionCall2Arg)) {
      tmp = true;
    } else {
      var tmp_0 = instr.p4u_1;
      tmp = !(tmp_0 instanceof Chain2);
    }
    if (tmp) {
      return null;
    }
    var fn0 = instr.p4u_1.r2g();
    var fn1 = instr.p4u_1.y2g();
    var tmp0_elvis_lhs = $this.z52(fn0, fn1);
    var tmp_1;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp_1 = tmp0_elvis_lhs;
    }
    var mergedFn = tmp_1;
    return new FunctionCall2Arg(mergedFn, instr.q4u_1, instr.r4u_1, fn0.t2g_1);
  }
  function attemptOuterProduct($this, instr) {
    var tmp;
    if (!(instr instanceof FunctionCall1Arg)) {
      tmp = true;
    } else {
      var tmp_0 = instr.u4u_1;
      tmp = !(tmp_0 instanceof FunctionCall2Arg);
    }
    if (tmp) {
      return null;
    }
    var rightFunction = instr.u4u_1.p4u_1;
    if (!(rightFunction instanceof OuterJoinFunctionImpl)) {
      return null;
    }
    var fn0 = instr.t4u_1;
    var fn1 = rightFunction.u31();
    var tmp0_elvis_lhs = $this.z52(fn0, fn1);
    var tmp_1;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp_1 = tmp0_elvis_lhs;
    }
    var mergedFn = tmp_1;
    var rightArgs = instr.u4u_1;
    var outerJoinFn = new OuterJoinFunctionImpl(rightFunction.c2h(), mergedFn);
    return new FunctionCall2Arg(outerJoinFn, rightArgs.q4u_1, rightArgs.r4u_1, rightFunction.t2g_1);
  }
  function Scalar2ArgInstructionChainOptimiser() {
  }
  protoOf(Scalar2ArgInstructionChainOptimiser).a53 = function (instr) {
    var tmp0_safe_receiver = attemptRegularChainedFnCalls(this, instr);
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp0_safe_receiver;
    }
    var tmp1_safe_receiver = attemptCallChain(this, instr);
    if (tmp1_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp1_safe_receiver;
    }
    var tmp2_safe_receiver = attemptOuterProduct(this, instr);
    if (tmp2_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp2_safe_receiver;
    }
    return null;
  };
  function attemptRegularChainedFnCalls_0($this, instr) {
    var tmp;
    if (!(instr instanceof FunctionCall1Arg)) {
      tmp = true;
    } else {
      var tmp_0 = instr.u4u_1;
      tmp = !(tmp_0 instanceof FunctionCall1Arg);
    }
    if (tmp) {
      return null;
    }
    var secondInstr = instr.u4u_1;
    var tmp0_elvis_lhs = $this.z52(instr.t4u_1, secondInstr.t4u_1);
    var tmp_1;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp_1 = tmp0_elvis_lhs;
    }
    var mergedFn = tmp_1;
    return new FunctionCall1Arg(mergedFn, secondInstr.u4u_1, instr.t4u_1.t2g_1);
  }
  function attemptTwoFunctionChain($this, instr) {
    if (!(instr instanceof FunctionCall1Arg))
      return null;
    var tmp0_elvis_lhs = attemptChain($this, instr.t4u_1, instr.u4u_1);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var mergedFn = tmp;
    return new FunctionCall1Arg(mergedFn, instr.u4u_1, instr.t4u_1.t2g_1);
  }
  function attemptChain($this, fn, rightArgs) {
    var tmp;
    if (fn instanceof Chain2) {
      var recurseResult = attemptChain($this, fn.y2g(), rightArgs);
      var fn1 = recurseResult == null ? fn.y2g() : recurseResult;
      var mergedFn = $this.z52(fn.r2g(), fn1);
      tmp = !(mergedFn == null) ? mergedFn : !(recurseResult == null) ? new Chain2(fn.c2h(), fn.r2g(), recurseResult) : null;
    } else {
      tmp = null;
    }
    return tmp;
  }
  function NonScalar1ArgInstructionChainOptimiser() {
  }
  protoOf(NonScalar1ArgInstructionChainOptimiser).a53 = function (instr) {
    var tmp0_safe_receiver = attemptRegularChainedFnCalls_0(this, instr);
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp0_safe_receiver;
    }
    var tmp1_safe_receiver = attemptTwoFunctionChain(this, instr);
    if (tmp1_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp1_safe_receiver;
    }
    return null;
  };
  var ParserLevel_LIST_instance;
  var ParserLevel_BOOLEAN_instance;
  var ParserLevel_VALUE_instance;
  var ParserLevel_LEFT_ARG_instance;
  var ParserLevel_entriesInitialized;
  function ParserLevel_initEntries() {
    if (ParserLevel_entriesInitialized)
      return Unit_instance;
    ParserLevel_entriesInitialized = true;
    ParserLevel_LIST_instance = new ParserLevel('LIST', 0, 0);
    ParserLevel_BOOLEAN_instance = new ParserLevel('BOOLEAN', 1, 1);
    ParserLevel_VALUE_instance = new ParserLevel('VALUE', 2, 2);
    ParserLevel_LEFT_ARG_instance = new ParserLevel('LEFT_ARG', 3, 3);
  }
  function ParserLevel(name, ordinal, level) {
    Enum.call(this, name, ordinal);
    this.c55_1 = level;
  }
  function ParserLevel_LIST_getInstance() {
    ParserLevel_initEntries();
    return ParserLevel_LIST_instance;
  }
  function ParserLevel_BOOLEAN_getInstance() {
    ParserLevel_initEntries();
    return ParserLevel_BOOLEAN_instance;
  }
  function ParserLevel_VALUE_getInstance() {
    ParserLevel_initEntries();
    return ParserLevel_VALUE_instance;
  }
  function ParserLevel_LEFT_ARG_getInstance() {
    ParserLevel_initEntries();
    return ParserLevel_LEFT_ARG_instance;
  }
  function callCallbacks($this, fn) {
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = $this.e55_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      fn(element);
    }
  }
  function callbackHandler($this, level, startPos, fn, processResults) {
    callCallbacks($this, ParserCallbackManager$callbackHandler$lambda(startPos, level));
    var tmp;
    try {
      tmp = fn();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof ParseException) {
        var e = $p;
        callCallbacks($this, ParserCallbackManager$callbackHandler$lambda_0(startPos, $this, e));
        throw e;
      } else {
        throw $p;
      }
    }
    var res = tmp;
    processResults(res);
    return res;
  }
  function ParserCallbackManager$callbackHandler$lambda($startPos, $level) {
    return function (cb) {
      cb.f55($startPos, $level);
      return Unit_instance;
    };
  }
  function ParserCallbackManager$callbackHandler$lambda_0($startPos, this$0, $e) {
    return function (cb) {
      cb.i55($startPos.h55(this$0.d55_1.u4k_1.g55()), $e);
      return Unit_instance;
    };
  }
  function ParserCallbackManager$withExpressionParser$lambda$lambda($pos) {
    return function (cb) {
      cb.j55($pos);
      return Unit_instance;
    };
  }
  function ParserCallbackManager$withExpressionParser$lambda$lambda_0($pos, $res) {
    return function (cb) {
      cb.k55($pos, $res.l4l_1);
      return Unit_instance;
    };
  }
  function ParserCallbackManager$withExpressionParser$lambda$lambda_1($pos, $res) {
    return function (cb) {
      cb.l55($pos, $res.u52_1);
      return Unit_instance;
    };
  }
  function ParserCallbackManager$withExpressionParser$lambda(this$0) {
    return function (res) {
      var pos = res.d4l_1;
      var tmp;
      if (res instanceof EmptyParseResult) {
        callCallbacks(this$0, ParserCallbackManager$withExpressionParser$lambda$lambda(pos));
        tmp = Unit_instance;
      } else {
        if (res instanceof InstrParseResult) {
          callCallbacks(this$0, ParserCallbackManager$withExpressionParser$lambda$lambda_0(pos, res));
          tmp = Unit_instance;
        } else {
          if (res instanceof FnParseResult) {
            callCallbacks(this$0, ParserCallbackManager$withExpressionParser$lambda$lambda_1(pos, res));
            tmp = Unit_instance;
          } else {
            noWhenBranchMatchedException();
          }
        }
      }
      return Unit_instance;
    };
  }
  function ParserCallbackManager$withValueParser$lambda$lambda($res) {
    return function (cb) {
      cb.k55($res.i31_1, $res);
      return Unit_instance;
    };
  }
  function ParserCallbackManager$withValueParser$lambda(this$0) {
    return function (res) {
      callCallbacks(this$0, ParserCallbackManager$withValueParser$lambda$lambda(res));
      return Unit_instance;
    };
  }
  function ParserCallbackManager(parser, callbacks) {
    this.d55_1 = parser;
    this.e55_1 = callbacks;
  }
  protoOf(ParserCallbackManager).m55 = function (level, startPos, fn) {
    return callbackHandler(this, level, startPos, fn, ParserCallbackManager$withExpressionParser$lambda(this));
  };
  protoOf(ParserCallbackManager).n55 = function (level, startPos, fn, $super) {
    startPos = startPos === VOID ? this.d55_1.u4k_1.g55() : startPos;
    return $super === VOID ? this.m55(level, startPos, fn) : $super.m55.call(this, level, startPos, fn);
  };
  protoOf(ParserCallbackManager).o55 = function (level, startPos, fn) {
    return callbackHandler(this, level, startPos, fn, ParserCallbackManager$withValueParser$lambda(this));
  };
  protoOf(ParserCallbackManager).p55 = function (level, startPos, fn, $super) {
    startPos = startPos === VOID ? this.d55_1.u4k_1.g55() : startPos;
    return $super === VOID ? this.o55(level, startPos, fn) : $super.o55.call(this, level, startPos, fn);
  };
  function Environment(name, parent, closed, isReturnTarget) {
    closed = closed === VOID ? false : closed;
    isReturnTarget = isReturnTarget === VOID ? false : isReturnTarget;
    this.p37_1 = name;
    this.q37_1 = parent;
    this.r37_1 = closed;
    this.s37_1 = isReturnTarget;
    this.t37_1 = this.q37_1 == null ? 0 : this.q37_1.t37_1 + 1 | 0;
    this.u37_1 = ArrayList_init_$Create$();
    this.v37_1 = ArrayList_init_$Create$();
    this.w37_1 = ArrayList_init_$Create$();
    this.x37_1 = false;
    this.y37_1 = ArrayList_init_$Create$();
    this.z37_1 = ArrayList_init_$Create$();
    this.a38_1 = HashMap_init_$Create$();
    this.b38_1 = HashMap_init_$Create$();
    var tmp0_safe_receiver = this.q37_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.collections.plusAssign' call
      tmp0_safe_receiver.w37_1.h(this);
    }
  }
  protoOf(Environment).m4i = function () {
    return this.x37_1;
  };
  protoOf(Environment).f4l = function () {
    this.x37_1 = true;
  };
  protoOf(Environment).j4i = function () {
    return this.q37_1 == null;
  };
  protoOf(Environment).s4p = function (sym) {
    // Inline function 'kotlin.collections.find' call
    var tmp0 = this.z37_1;
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var _iterator__ex2g4s = tmp0.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        if (equals(element.b4i_1, sym)) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  };
  protoOf(Environment).s4o = function (sym) {
    // Inline function 'kotlin.require' call
    if (!(this.s4p(sym) == null)) {
      var message = 'Symbol ' + sym.toString() + ' is already bound in environment';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var storage = new StackStorageDescriptor(this, this.u37_1.n(), 'local binding: ' + sym.t3e() + ' in ' + this.p37_1);
    this.u37_1.h(storage);
    var newBinding = new EnvironmentBinding(this, sym, storage);
    this.z37_1.h(newBinding);
    return newBinding;
  };
  protoOf(Environment).q55 = function (sym, binding) {
    // Inline function 'kotlin.require' call
    if (!(this.s4p(sym) == null)) {
      var message = 'Local binding found when creating remote binding: ' + binding.toString();
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var newBinding = new EnvironmentBinding(this, sym, binding.e4i());
    this.z37_1.h(newBinding);
    return newBinding;
  };
  protoOf(Environment).l4i = function () {
    return this.z37_1;
  };
  protoOf(Environment).r55 = function (name, userFn) {
    // Inline function 'kotlin.require' call
    if (!!this.b38_1.y1(name)) {
      var message = 'Global scoped function already assigned to: ' + name.toString();
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.collections.set' call
    this.b38_1.j2(name, userFn);
  };
  protoOf(Environment).s55 = function (name, userFn) {
    // Inline function 'kotlin.collections.set' call
    this.a38_1.j2(name, userFn);
  };
  protoOf(Environment).t55 = function (name) {
    return this.a38_1.a2(name);
  };
  protoOf(Environment).u55 = function (name) {
    return this.b38_1.a2(name);
  };
  protoOf(Environment).d4w = function () {
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!this.z37_1.o()) {
      return true;
    }
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this.w37_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      if (element.d4w()) {
        return true;
      }
    }
    return false;
  };
  protoOf(Environment).toString = function () {
    return 'Environment[name=' + this.p37_1 + ', numBindings=' + this.z37_1.n() + ']';
  };
  function StackStorageRef(binding) {
    this.j4m_1 = binding;
  }
  protoOf(StackStorageRef).p2 = function () {
    return this.j4m_1.b4i_1;
  };
  protoOf(StackStorageRef).k4m = function () {
    return this.j4m_1.d4i_1;
  };
  protoOf(StackStorageRef).l4m = function () {
    return this.j4m_1.e4i().g4i_1;
  };
  function StackStorageDescriptor(env, index, comment) {
    this.f4i_1 = env;
    this.g4i_1 = index;
    this.h4i_1 = comment;
    this.i4i_1 = false;
  }
  protoOf(StackStorageDescriptor).toString = function () {
    return 'StackStorageDescriptor[comment=' + this.h4i_1 + ']';
  };
  function ExternalStorageRef(frameIndex, storageOffset, envForDebugging) {
    this.d4n_1 = frameIndex;
    this.e4n_1 = storageOffset;
    this.f4n_1 = envForDebugging;
  }
  function UpdateableFunctionImpl($outer, pos) {
    this.d56_1 = $outer;
    DelegatedAPLFunctionImpl.call(this, pos);
    this.b56_1 = this.d56_1.e56_1;
    this.c56_1 = this.b56_1.i2i(pos);
  }
  protoOf(UpdateableFunctionImpl).x4q = function () {
    if (!(this.b56_1 === this.d56_1.e56_1)) {
      this.c56_1 = this.d56_1.e56_1.i2i(this.c2h());
      this.b56_1 = this.d56_1.e56_1;
    }
    return this.c56_1;
  };
  function findFnInstance($this) {
    var tmp0_elvis_lhs = currentStorageStack().w4m($this.j56_1).d4m();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$('Local function ref not assigned');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var v = tmp;
    // Inline function 'kotlin.require' call
    if (!(v instanceof LambdaValue)) {
      var message = 'Local function is not a lambda';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return v.f3a();
  }
  function Instr(instr) {
    TokenParseResult.call(this);
    this.k56_1 = instr;
  }
  function ResHolder(holder) {
    TokenParseResult.call(this);
    this.l56_1 = holder;
  }
  function Empty() {
    TokenParseResult.call(this);
  }
  function findEnvironmentBinding($this, sym) {
    var curr = $this.e4l();
    // Inline function 'kotlin.let' call
    var binding = curr.s4p(sym);
    if (!(binding == null)) {
      return binding;
    }
    if (!curr.r37_1) {
      var _iterator__ex2g4s = rest(asReversed_0($this.v4k_1)).k();
      $l$loop: while (_iterator__ex2g4s.l()) {
        var env = _iterator__ex2g4s.m();
        var binding_0 = env.s4p(sym);
        if (!(binding_0 == null)) {
          return curr.q55(sym, binding_0);
        }
        if (env.r37_1) {
          break $l$loop;
        }
      }
    }
    return curr.s4o(sym);
  }
  function parseList($this) {
    var tmp = ParserLevel_LIST_getInstance();
    return $this.x4k_1.n55(tmp, VOID, APLParser$parseList$lambda($this));
  }
  function parseListInner($this) {
    var firstValue = parseBooleanExpression($this);
    if (equals(firstValue.c4l_1.o52_1, ListSeparator_getInstance())) {
      if (firstValue instanceof FnParseResult) {
        throw new ParseException("Function expressions can't be part of a list", firstValue.d4l_1);
      }
      var statementList = ArrayList_init_$Create$();
      statementList.h(parseListInner$mkInstr(firstValue));
      while (true) {
        var holder = parseBooleanExpression($this);
        statementList.h(parseListInner$mkInstr(holder));
        if (!equals(holder.c4l_1.o52_1, ListSeparator_getInstance())) {
          // Inline function 'kotlin.require' call
          if (!(statementList.n() >= 2)) {
            var message = 'It is assumed a list is at least 2 elements';
            throw IllegalArgumentException_init_$Create$(toString(message));
          }
          var pos = first(statementList).i31_1.q4t(last(statementList).i31_1);
          return new InstrParseResult(LiteralAPLList_init_$Create$(statementList), pos, holder.c4l_1);
        }
      }
    } else {
      return firstValue;
    }
  }
  function parseBooleanExpression($this) {
    var tmp = ParserLevel_BOOLEAN_getInstance();
    return $this.x4k_1.n55(tmp, VOID, APLParser$parseBooleanExpression$lambda($this));
  }
  function parseBooleanExpressionInner($this) {
    var leftValue = $this.a4l();
    var curr = leftValue;
    while ($this.y4k_1.y1(curr.c4l_1.o52_1)) {
      var a = parseBooleanExpressionInner$mkInstr(curr);
      var rightValue = $this.a4l();
      var b = parseBooleanExpressionInner$mkInstr(rightValue);
      var fn = ensureNotNull($this.y4k_1.a2(curr.c4l_1.o52_1)).i2i(new FunctionInstantiation($this.m52(), leftValue.c4l_1.p52_1, $this.e4l()));
      var newInstr = new FunctionCall2Arg(fn, a, b, rightValue.c4l_1.p52_1);
      curr = new InstrParseResult(newInstr, leftValue.d4l_1.q4t(rightValue.d4l_1), rightValue.c4l_1);
    }
    return curr;
  }
  function processFn($this, fn, leftArgs, functionReferencePos) {
    var parsedFn = $this.m56(fn);
    var openParenTokenWithPosition = $this.u4k_1.n52();
    var tmp = openParenTokenWithPosition.o52_1;
    if (tmp instanceof FunctionCallOpenParen) {
      var holder = $this.r52(FunctionCallCloseParen_getInstance());
      var tmp_0;
      if (holder instanceof EmptyParseResult) {
        tmp_0 = new FunctionCall1Arg(parsedFn, new ConstantValueInstruction(new APLList(emptyList()), holder.d4l_1), functionReferencePos.q4t(holder.d4l_1));
      } else {
        if (holder instanceof InstrParseResult) {
          tmp_0 = new FunctionCall1Arg(parsedFn, holder.l4l_1, functionReferencePos.q4t(holder.d4l_1));
        } else {
          if (holder instanceof FnParseResult) {
            throw new ParseException('Function call arguments should be a value, got function', holder.d4l_1);
          } else {
            noWhenBranchMatchedException();
          }
        }
      }
      var instr = tmp_0;
      return new Instr(instr);
    } else {
      $this.u4k_1.l52(openParenTokenWithPosition);
      var holder_0 = $this.a4l();
      var tmp_1;
      if (holder_0 instanceof EmptyParseResult) {
        var tmp_2;
        if (leftArgs.o()) {
          tmp_2 = new FnParseResult(parsedFn, functionReferencePos.q4t(holder_0.d4l_1), holder_0.c4l_1);
        } else {
          tmp_2 = makeLeftBindFunctionParseResult($this, leftArgs, parsedFn, holder_0.c4l_1);
        }
        tmp_1 = tmp_2;
      } else {
        if (holder_0 instanceof InstrParseResult) {
          var tmp_3;
          if (leftArgs.o()) {
            tmp_3 = new InstrParseResult(new FunctionCall1Arg(parsedFn, holder_0.l4l_1, functionReferencePos), functionReferencePos.q4t(holder_0.d4l_1), holder_0.c4l_1);
          } else {
            var tmp0_elvis_lhs = makeResultList(leftArgs);
            var tmp_4;
            if (tmp0_elvis_lhs == null) {
              throw new ParseException('Left args is empty', holder_0.d4l_1);
            } else {
              tmp_4 = tmp0_elvis_lhs;
            }
            var _destruct__k2r9zo = tmp_4;
            var leftArgsInstr = _destruct__k2r9zo.de();
            var leftArgsPos = _destruct__k2r9zo.ee();
            tmp_3 = new InstrParseResult(new FunctionCall2Arg(parsedFn, leftArgsInstr, holder_0.l4l_1, functionReferencePos), leftArgsPos.q4t(holder_0.d4l_1), holder_0.c4l_1);
          }
          tmp_1 = tmp_3;
        } else {
          if (holder_0 instanceof FnParseResult) {
            var tmp_5;
            if (leftArgs.o()) {
              tmp_5 = new FnParseResult(new Chain2(parsedFn.c2h(), parsedFn, holder_0.u52_1), functionReferencePos.q4t(holder_0.d4l_1), holder_0.c4l_1);
            } else {
              var b = makeLeftBindFunction($this, leftArgs, parsedFn);
              tmp_5 = new FnParseResult(new Chain2(parsedFn.c2h(), b, holder_0.u52_1), first(leftArgs).i31_1.q4t(holder_0.d4l_1), holder_0.c4l_1);
            }
            tmp_1 = tmp_5;
          } else {
            noWhenBranchMatchedException();
          }
        }
      }
      var res = tmp_1;
      return new ResHolder(res);
    }
  }
  function makeLeftBindFunctionParseResult($this, leftArgs, baseFn, lastToken) {
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!!leftArgs.o()) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var fn = makeLeftBindFunction($this, leftArgs, baseFn);
    return new FnParseResult(fn, first(leftArgs).i31_1.q4t(baseFn.t2g_1), lastToken);
  }
  function makeLeftBindFunction($this, leftArgs, baseFn) {
    var firstArgPos = first(leftArgs).i31_1;
    var tmp0_elvis_lhs = makeResultList(leftArgs);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$('Result list is null');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var resultList = tmp;
    var env = $this.e4l();
    // Inline function 'com.dhsdevelopments.kap.FunctionInstantiation.updatePos' call
    var this_0 = baseFn.c2h();
    var tmp$ret$0 = this_0.d38_1.g4w(VOID, firstArgPos.w4j_1, firstArgPos.x4j_1);
    var tmp$ret$1 = new FunctionInstantiation(this_0.c38_1, tmp$ret$0, this_0.e38_1);
    return new LeftAssignedFunction(baseFn, resultList.be_1, tmp$ret$1, env.d4w() ? env : null);
  }
  function processAssignment($this, pos, leftArgs) {
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!(leftArgs.n() === 1)) {
      throw new IncompatibleTypeParseException('Can only assign to a single variable', pos);
    }
    var dest = leftArgs.p(0);
    var holder = $this.a4l();
    var tmp;
    if (holder instanceof InstrParseResult) {
      var lvalueReader = dest.y4m();
      tmp = new InstrParseResult(new DestructureAssignInstruction(lvalueReader, holder.l4l_1, holder.d4l_1), first(leftArgs).i31_1.q4t(holder.d4l_1), holder.c4l_1);
    } else {
      if (holder instanceof FnParseResult) {
        throw new IllegalContextForFunction(holder.d4l_1);
      } else {
        if (holder instanceof EmptyParseResult) {
          throw new ParseException('No right-side value in assignment instruction', pos);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  }
  function DefinedUserFunction(fn, name, pos) {
    this.n56_1 = fn;
    this.o56_1 = name;
    this.p56_1 = pos;
  }
  protoOf(DefinedUserFunction).toString = function () {
    return 'DefinedUserFunction(fn=' + toString(this.n56_1) + ', name=' + this.o56_1.toString() + ', pos=' + this.p56_1.toString() + ')';
  };
  protoOf(DefinedUserFunction).hashCode = function () {
    var result = hashCode(this.n56_1);
    result = imul(result, 31) + hashCode(this.o56_1) | 0;
    result = imul(result, 31) + this.p56_1.hashCode() | 0;
    return result;
  };
  protoOf(DefinedUserFunction).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DefinedUserFunction))
      return false;
    var tmp0_other_with_cast = other instanceof DefinedUserFunction ? other : THROW_CCE();
    if (!equals(this.n56_1, tmp0_other_with_cast.n56_1))
      return false;
    if (!equals(this.o56_1, tmp0_other_with_cast.o56_1))
      return false;
    if (!this.p56_1.equals(tmp0_other_with_cast.p56_1))
      return false;
    return true;
  };
  function UpdateableFunction(innerFnDescriptor) {
    this.e56_1 = innerFnDescriptor;
  }
  protoOf(UpdateableFunction).i2i = function (instantiation) {
    return new UpdateableFunctionImpl(this, instantiation);
  };
  protoOf(UpdateableFunction).q56 = function (newFn) {
    this.e56_1 = newFn;
  };
  function processFunctionDefinition($this, pos, leftArgs) {
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!leftArgs.o()) {
      throw new ParseException('Function definition with non-null left argument', pos);
    }
    parseAndDefineUserDefinedFn($this, pos);
    return new LiteralAPLNullValue(pos);
  }
  function UpdateLocalFunctionInstruction(fn, pos, relatedInstructions, storageRef, env) {
    Instruction.call(this, pos);
    this.s56_1 = fn;
    this.t56_1 = relatedInstructions;
    this.u56_1 = storageRef;
    this.v56_1 = env;
    this.w56_1 = 'localCall: ' + this.u56_1.p2().toString();
  }
  protoOf(UpdateLocalFunctionInstruction).j31 = function (context) {
    var res = {_v: null};
    var tmp0 = this.v56_1;
    var tmp1 = this.w56_1;
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.i31_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_0 = currentStorageStack();
    var frame = StorageStackFrame_init_$Create$(this_0, tmp0, tmp1, pos);
    this_0.r3b_1.h(frame);
    var result;
    try {
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = asReversed(this.t56_1).k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        element.j31(context);
      }
      res._v = new LambdaValue(this.s56_1, currentStorageStack().s3b());
      result = APLNullValue_getInstance();
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp0) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_0.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame.i4m();
    }
    context.t4p(this.u56_1, res._v);
    return APLNullValue_getInstance();
  };
  protoOf(UpdateLocalFunctionInstruction).b1h = function () {
    return this.t56_1;
  };
  protoOf(UpdateLocalFunctionInstruction).x4m = function (updatedChildList, newPos) {
    return new UpdateLocalFunctionInstruction(this.s56_1, newPos, updatedChildList, this.u56_1, this.v56_1);
  };
  function LocalFunctionCall(binding, instantiation) {
    APLFunction.call(this, instantiation);
    this.j56_1 = new StackStorageRef(binding);
  }
  protoOf(LocalFunctionCall).w2g = function (context, a, axis) {
    return findFnInstance(this).w2g(context, a, axis);
  };
  protoOf(LocalFunctionCall).a2h = function (context, a, b, axis) {
    return findFnInstance(this).a2h(context, a, b, axis);
  };
  protoOf(LocalFunctionCall).q2h = function (context, a, axis) {
    return findFnInstance(this).q2h(context, a, axis);
  };
  protoOf(LocalFunctionCall).r2h = function (context, a, b, axis) {
    return findFnInstance(this).r2h(context, a, b, axis);
  };
  protoOf(LocalFunctionCall).s2h = function (context, a, b, axis) {
    return findFnInstance(this).s2h(context, a, b, axis);
  };
  protoOf(LocalFunctionCall).v2h = function (baseFn, context, a, axis) {
    return findFnInstance(this).v2h(baseFn, context, a, axis);
  };
  protoOf(LocalFunctionCall).w2h = function (baseFn, context, a, b, axis) {
    return findFnInstance(this).w2h(baseFn, context, a, b, axis);
  };
  protoOf(LocalFunctionCall).x2h = function () {
    return listOf_0(this.j56_1.j4m_1.a4i_1);
  };
  function processShortFormFn($this, pos, tokenWithPosition) {
    var tmp = tokenWithPosition.o52_1;
    var sym = tmp instanceof Symbol ? tmp : THROW_CCE();
    var holder;
    var closureFn;
    var instructions;
    var env;
    var tmp0_elvis_lhs = $this.e4l().t55(sym);
    var fnBinding = tmp0_elvis_lhs == null ? $this.e4l().s4o($this.u4k_1.l4q_1.o4o('short form function: ' + sym.t3e())) : tmp0_elvis_lhs;
    var ref = new StackStorageRef(fnBinding);
    $this.e4l().s55(sym, fnBinding);
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
      var env_0 = $this.z4k(null, false, false);
      try {
        holder = $this.a4l();
        if (!(holder instanceof FnParseResult)) {
          throw new ParseException('Right side of the arrow must be a function', pos);
        }
        var res = holder.u52_1.t2h($this);
        closureFn = res.be_1;
        instructions = res.ce_1;
        env = $this.e4l();
        env.f4l();
        break $l$block;
      }finally {
        $this.b4l();
      }
    }
    var instr = new UpdateLocalFunctionInstruction(closureFn, pos, instructions, ref, env);
    $this.e4l().f4l();
    return new InstrParseResult(instr, tokenWithPosition.p52_1.q4t(holder.d4l_1), holder.c4l_1);
  }
  function registerDefinedUserFunction($this, definedUserFunction) {
    var engine = $this.u4k_1.l4q_1;
    var oldDefinition = engine.m4o(definedUserFunction.o56_1);
    if (oldDefinition == null) {
      engine.v4g(definedUserFunction.o56_1, new UpdateableFunction(definedUserFunction.n56_1));
    } else {
      if (oldDefinition instanceof UpdateableFunction) {
        oldDefinition.q56(definedUserFunction.n56_1);
      } else {
        throw new InvalidFunctionRedefinition(definedUserFunction.o56_1, definedUserFunction.p56_1);
      }
    }
  }
  function parseAndDefineUserDefinedFn($this, pos) {
    var componentList = ArrayList_init_$Create$();
    $l$loop: while (true) {
      var _destruct__k2r9zo = $this.u4k_1.n52();
      var token = _destruct__k2r9zo.de();
      var innerPos = _destruct__k2r9zo.ee();
      if (token instanceof OpenFnDef)
        break $l$loop;
      else {
        if (token instanceof Symbol) {
          // Inline function 'kotlin.collections.plusAssign' call
          var element = new APLParser$parseAndDefineUserDefinedFn$FnArgComponent(listOf_0(token), false);
          componentList.h(element);
        } else {
          if (token instanceof OpenParen) {
            // Inline function 'kotlin.collections.plusAssign' call
            var element_0 = parseAndDefineUserDefinedFn$parseSymbolList($this);
            componentList.h(element_0);
          } else {
            throw new UnexpectedToken(token, innerPos);
          }
        }
      }
    }
    if (componentList.o())
      throw new ParseException('No function name specified', pos);
    else if (componentList.n() === 1) {
      parseAndDefineUserDefinedFn$processFnWithArg($this, pos, componentList.p(0), null, null);
    } else if (componentList.n() === 2) {
      parseAndDefineUserDefinedFn$processFnWithArg($this, pos, componentList.p(0), null, componentList.p(1));
    } else if (componentList.n() === 3) {
      parseAndDefineUserDefinedFn$processFnWithArg($this, pos, componentList.p(1), componentList.p(0), componentList.p(2));
    } else
      throw new ParseException('Invalid function definition format', pos);
  }
  function parseValueInner($this) {
    var leftArgs = ArrayList_init_$Create$();
    while (true) {
      var tokenWithPosition = $this.u4k_1.n52();
      var token = tokenWithPosition.de();
      var pos = tokenWithPosition.ee();
      if (Companion_getInstance_37().y56_1.s1(token)) {
        var resultList = makeResultList(leftArgs);
        var tmp;
        if (resultList == null) {
          tmp = new EmptyParseResult(pos, tokenWithPosition);
        } else {
          tmp = new InstrParseResult(resultList.be_1, resultList.ce_1, tokenWithPosition);
        }
        return tmp;
      }
      var tmp_0;
      if (token instanceof Symbol) {
        var customSyntax = $this.u4k_1.l4q_1.c4p(token);
        var tmp_1;
        if (!(customSyntax == null)) {
          tmp_1 = new Instr(processCustomSyntax($this, customSyntax));
        } else {
          var fnDefTokenWithPosition = $this.u4k_1.n52();
          var tmp_2;
          var tmp_3 = fnDefTokenWithPosition.o52_1;
          if (tmp_3 instanceof FnDefArrow) {
            // Inline function 'kotlin.collections.isNotEmpty' call
            if (!leftArgs.o()) {
              throw new ParseException('The function name must be a single symbol', fnDefTokenWithPosition.p52_1);
            }
            tmp_2 = new ResHolder(processShortFormFn($this, fnDefTokenWithPosition.p52_1, tokenWithPosition));
          } else {
            $this.u4k_1.l52(fnDefTokenWithPosition);
            var fn = $this.w52(token, APLParser$parseValueInner$lambda($this, pos, token));
            var tmp_4;
            if (!(fn == null)) {
              tmp_4 = processFn($this, fn, leftArgs, pos);
            } else if (!($this.u4k_1.l4q_1.n4o(token) == null)) {
              throw new InvalidOperatorArgument(token, pos);
            } else {
              tmp_4 = new Instr(makeVariableRef($this, token, pos));
            }
            tmp_2 = tmp_4;
          }
          tmp_1 = tmp_2;
        }
        tmp_0 = tmp_1;
      } else {
        if (token instanceof OpenParen) {
          var expr = $this.r52(CloseParen_getInstance());
          var tmp_5;
          if (expr instanceof InstrParseResult) {
            // Inline function 'kotlin.let' call
            var e = expr.l4l_1;
            tmp_5 = new Instr(e.x4m(e.b1h(), pos.q4t(expr.c4l_1.p52_1)));
          } else {
            if (expr instanceof FnParseResult) {
              tmp_5 = processFn($this, expr.u52_1, leftArgs, expr.d4l_1);
            } else {
              if (expr instanceof EmptyParseResult) {
                throw new ParseException('Empty expression', pos);
              } else {
                noWhenBranchMatchedException();
              }
            }
          }
          tmp_0 = tmp_5;
        } else {
          if (token instanceof OpenFnDef) {
            tmp_0 = processFn($this, $this.v52().i2i(new FunctionInstantiation($this.m52(), pos, $this.e4l())), leftArgs, pos);
          } else {
            if (token instanceof ApplyToken) {
              tmp_0 = processFn($this, $this.q52().i2i(new FunctionInstantiation($this.m52(), pos, $this.e4l())), leftArgs, pos);
            } else {
              if (token instanceof MethodCallToken) {
                tmp_0 = processFn($this, parseValueInner$processMethodCall(leftArgs, $this, pos).i2i(new FunctionInstantiation($this.m52(), pos, $this.e4l())), leftArgs, pos);
              } else {
                if (token instanceof ParsedLong) {
                  tmp_0 = new Instr(LiteralInteger_init_$Create$(token.f57_1, pos));
                } else {
                  if (token instanceof ParsedDouble) {
                    tmp_0 = new Instr(LiteralDouble_init_$Create$(token.e57_1, pos));
                  } else {
                    if (token instanceof ParsedComplex) {
                      tmp_0 = new Instr(LiteralComplex_init_$Create$(token.d57_1, pos));
                    } else {
                      if (token instanceof ParsedBigInt) {
                        tmp_0 = new Instr(LiteralBigInt_init_$Create$(token.c57_1, pos));
                      } else {
                        if (token instanceof ParsedRational) {
                          tmp_0 = new Instr(LiteralRational_init_$Create$(token.b57_1, pos));
                        } else {
                          if (token instanceof ParsedCharacter) {
                            tmp_0 = new Instr(LiteralCharacter_init_$Create$(token.a57_1, pos));
                          } else {
                            if (token instanceof LeftArrow) {
                              tmp_0 = new ResHolder(processAssignment($this, pos, leftArgs));
                            } else {
                              if (token instanceof DynassignToken) {
                                tmp_0 = new ResHolder(processDynamicAssignment($this, pos, leftArgs));
                              } else {
                                if (token instanceof FnDefSym) {
                                  tmp_0 = new Instr(processFunctionDefinition($this, pos, leftArgs));
                                } else {
                                  if (token instanceof APLNullSym) {
                                    tmp_0 = new Instr(new LiteralAPLNullValue(pos));
                                  } else {
                                    if (token instanceof NilToken) {
                                      tmp_0 = new Instr(new EmptyValueMarker(pos));
                                    } else {
                                      if (token instanceof StringToken) {
                                        tmp_0 = new Instr(LiteralStringValue_init_$Create$(token.z56_1, pos));
                                      } else {
                                        if (token instanceof QuotePrefix) {
                                          var tmp3 = $this.u4k_1;
                                          var tmp$ret$3;
                                          $l$block: {
                                            // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
                                            var _destruct__k2r9zo = tmp3.n52();
                                            var token_0 = _destruct__k2r9zo.de();
                                            var pos_0 = _destruct__k2r9zo.ee();
                                            if (token_0 instanceof Symbol) {
                                              tmp$ret$3 = token_0;
                                              break $l$block;
                                            } else {
                                              throw new UnexpectedToken(token_0, pos_0);
                                            }
                                          }
                                          tmp_0 = new Instr(LiteralSymbol_init_$Create$(tmp$ret$3, pos));
                                        } else {
                                          if (token instanceof LambdaToken) {
                                            tmp_0 = new Instr(processLambda($this, pos));
                                          } else {
                                            if (token instanceof NamespaceToken) {
                                              processNamespace($this);
                                              // Inline function 'kotlin.run' call
                                              tmp_0 = new Empty();
                                            } else {
                                              if (token instanceof ImportToken) {
                                                processImport($this);
                                                // Inline function 'kotlin.run' call
                                                tmp_0 = new Empty();
                                              } else {
                                                if (token instanceof DefsyntaxSubToken) {
                                                  processDefsyntaxSub($this, pos);
                                                  // Inline function 'kotlin.run' call
                                                  tmp_0 = new Empty();
                                                } else {
                                                  if (token instanceof DefsyntaxToken) {
                                                    tmp_0 = new Instr(processDefsyntax($this, pos));
                                                  } else {
                                                    if (token instanceof IncludeToken) {
                                                      tmp_0 = new Instr(processInclude($this, pos));
                                                    } else {
                                                      if (token instanceof DeclareToken) {
                                                        processDeclare($this);
                                                        // Inline function 'kotlin.run' call
                                                        tmp_0 = new Empty();
                                                      } else {
                                                        if (token instanceof OpenBracket) {
                                                          tmp_0 = new Instr(parseValueInner$processIndex($this, leftArgs, pos));
                                                        } else {
                                                          if (token instanceof MemberDereferenceToken) {
                                                            tmp_0 = new Instr(parseValueInner$processMemberDereference($this, leftArgs, pos));
                                                          } else {
                                                            throw new UnexpectedToken(token, pos);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      var res = tmp_0;
      if (res instanceof Instr) {
        parseValueInner$addLeftArg($this, leftArgs, res.k56_1);
      } else {
        if (res instanceof ResHolder)
          return res.l56_1;
        else {
          if (!(res instanceof Empty)) {
            noWhenBranchMatchedException();
          }
        }
      }
    }
  }
  function makeVariableRef($this, symbol, pos) {
    var tmp;
    if ($this.u4k_1.l4q_1.v4o(symbol)) {
      tmp = LiteralSymbol_init_$Create$(symbol, pos);
    } else {
      tmp = new VariableRef(symbol, new StackStorageRef(findEnvironmentBinding($this, symbol)), pos);
    }
    return tmp;
  }
  function processInclude($this, pos) {
    var engine = $this.u4k_1.l4q_1;
    var tmp0 = $this.u4k_1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos_0 = _destruct__k2r9zo.ee();
      if (token instanceof OpenParen) {
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos_0);
      }
    }
    var tmp1 = $this.u4k_1;
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_0 = tmp1.n52();
      var token_0 = _destruct__k2r9zo_0.de();
      var pos_1 = _destruct__k2r9zo_0.ee();
      if (token_0 instanceof StringToken) {
        tmp$ret$1 = token_0;
        break $l$block_0;
      } else {
        throw new UnexpectedToken(token_0, pos_1);
      }
    }
    var filename = tmp$ret$1;
    var tmp2 = $this.u4k_1;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_1 = tmp2.n52();
      var token_1 = _destruct__k2r9zo_1.de();
      var pos_2 = _destruct__k2r9zo_1.ee();
      if (token_1 instanceof CloseParen) {
        break $l$block_1;
      } else {
        throw new UnexpectedToken(token_1, pos_2);
      }
    }
    var tmp0_elvis_lhs = engine.i4o(filename.z56_1);
    var resolved = tmp0_elvis_lhs == null ? filename.z56_1 : tmp0_elvis_lhs;
    try {
      var innerParser = new APLParser(new TokenGenerator(engine, new FileSourceLocation(resolved)));
      // Inline function 'com.dhsdevelopments.kap.Engine.withSavedNamespace' call
      var oldNamespace = engine.g39_1;
      try {
        return innerParser.t4o(EndOfFile_getInstance());
      }finally {
        engine.g39_1 = oldNamespace;
      }
    } catch ($p) {
      if ($p instanceof MPFileException) {
        var e = $p;
        throw new ParseException('Error loading file: ' + resolved + ': ' + e.message, pos, e);
      } else {
        throw $p;
      }
    }
  }
  function processNamespace($this) {
    var tmp0 = $this.u4k_1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof OpenParen) {
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var tmp1 = $this.u4k_1;
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_0 = tmp1.n52();
      var token_0 = _destruct__k2r9zo_0.de();
      var pos_0 = _destruct__k2r9zo_0.ee();
      if (token_0 instanceof StringToken) {
        tmp$ret$1 = token_0;
        break $l$block_0;
      } else {
        throw new UnexpectedToken(token_0, pos_0);
      }
    }
    var namespaceName = tmp$ret$1;
    var tmp2 = $this.u4k_1;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_1 = tmp2.n52();
      var token_1 = _destruct__k2r9zo_1.de();
      var pos_1 = _destruct__k2r9zo_1.ee();
      if (token_1 instanceof CloseParen) {
        break $l$block_1;
      } else {
        throw new UnexpectedToken(token_1, pos_1);
      }
    }
    var namespace = $this.u4k_1.l4q_1.x4e(namespaceName.z56_1);
    $this.u4k_1.l4q_1.g39_1 = namespace;
  }
  function processImport($this) {
    var tmp0 = $this.u4k_1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof OpenParen) {
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var tmp1 = $this.u4k_1;
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_0 = tmp1.n52();
      var token_0 = _destruct__k2r9zo_0.de();
      var pos_0 = _destruct__k2r9zo_0.ee();
      if (token_0 instanceof StringToken) {
        tmp$ret$1 = token_0;
        break $l$block_0;
      } else {
        throw new UnexpectedToken(token_0, pos_0);
      }
    }
    var namespaceName = tmp$ret$1;
    var tmp2 = $this.u4k_1;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_1 = tmp2.n52();
      var token_1 = _destruct__k2r9zo_1.de();
      var pos_1 = _destruct__k2r9zo_1.ee();
      if (token_1 instanceof CloseParen) {
        break $l$block_1;
      } else {
        throw new UnexpectedToken(token_1, pos_1);
      }
    }
    var namespace = $this.u4k_1.l4q_1.x4e(namespaceName.z56_1);
    $this.u4k_1.l4q_1.g39_1.g57(namespace.a3k_1);
  }
  function parseSymbolOrSymbolList($this, fn) {
    var _destruct__k2r9zo = $this.u4k_1.n52();
    var firstToken = _destruct__k2r9zo.de();
    var firstTokenPos = _destruct__k2r9zo.ee();
    if (firstToken instanceof Symbol)
      fn(firstToken);
    else {
      if (firstToken instanceof OpenParen) {
        $l$loop: while (true) {
          var _destruct__k2r9zo_0 = $this.u4k_1.n52();
          var token = _destruct__k2r9zo_0.de();
          var pos = _destruct__k2r9zo_0.ee();
          if (token instanceof Symbol)
            fn(token);
          else {
            if (token instanceof CloseParen)
              break $l$loop;
            else {
              throw new UnexpectedToken(token, pos);
            }
          }
        }
      } else {
        if (!(firstToken instanceof CloseParen))
          throw new UnexpectedToken(firstToken, firstTokenPos);
      }
    }
  }
  function processExport($this) {
    parseSymbolOrSymbolList($this, APLParser$processExport$lambda($this));
  }
  function processLocal($this) {
    parseSymbolOrSymbolList($this, APLParser$processLocal$lambda($this));
  }
  function processConst($this) {
    parseSymbolOrSymbolList($this, APLParser$processConst$lambda($this));
  }
  function processSingleCharDeclaration($this) {
    var tmp0 = $this.u4k_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenAndPosWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof StringToken) {
        tmp$ret$0 = new Pair(token, pos);
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var _destruct__k2r9zo_0 = tmp$ret$0;
    var stringToken = _destruct__k2r9zo_0.de();
    var stringPos = _destruct__k2r9zo_0.ee();
    var codepointList = asCodepointList(stringToken.z56_1);
    if (!(codepointList.n() === 1)) {
      throw new IllegalDeclaration('singleChar declaration argument must be a string of length 1', stringPos);
    }
    $this.u4k_1.l4q_1.f4p(stringToken.z56_1);
  }
  function processDeclare($this) {
    var engine = $this.u4k_1.l4q_1;
    var tmp0 = $this.u4k_1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof OpenParen) {
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var tmp1 = $this.u4k_1;
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenAndPosWithType' call
      var _destruct__k2r9zo_0 = tmp1.n52();
      var token_0 = _destruct__k2r9zo_0.de();
      var pos_0 = _destruct__k2r9zo_0.ee();
      if (token_0 instanceof Symbol) {
        tmp$ret$1 = new Pair(token_0, pos_0);
        break $l$block_0;
      } else {
        throw new UnexpectedToken(token_0, pos_0);
      }
    }
    var _destruct__k2r9zo_1 = tmp$ret$1;
    var sym = _destruct__k2r9zo_1.de();
    var symPosition = _destruct__k2r9zo_1.ee();
    // Inline function 'com.dhsdevelopments.kap.unless' call
    if (!equals(sym.i2j_1, engine.i3i().a3k_1)) {
      throw new IllegalDeclaration('Declaration name must be a keyword', symPosition);
    }
    switch (sym.h2j_1) {
      case 'singleCharExported':
        processSingleCharDeclaration($this);
        break;
      case 'export':
        processExport($this);
        break;
      case 'local':
        processLocal($this);
        break;
      case 'const':
        processConst($this);
        break;
      default:
        throw new IllegalDeclaration('Unknown declaration name: ' + sym.t3e());
    }
    var tmp3 = $this.u4k_1;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_2 = tmp3.n52();
      var token_1 = _destruct__k2r9zo_2.de();
      var pos_1 = _destruct__k2r9zo_2.ee();
      if (token_1 instanceof CloseParen) {
        break $l$block_1;
      } else {
        throw new UnexpectedToken(token_1, pos_1);
      }
    }
  }
  function exportSymbolIfInterned($this, symbol) {
    $this.u4k_1.l4q_1.k4p(symbol.i2j_1).h57(symbol);
  }
  function processLambda($this, pos) {
    var _destruct__k2r9zo = $this.u4k_1.n52();
    var token = _destruct__k2r9zo.de();
    var tokenPos = _destruct__k2r9zo.ee();
    var tmp;
    if (token instanceof OpenFnDef) {
      tmp = $this.v52().i2i(new FunctionInstantiation($this.m52(), pos, $this.e4l()));
    } else {
      if (token instanceof Symbol) {
        var tmp1_elvis_lhs = $this.w52(token, APLParser$processLambda$lambda($this, pos));
        var tmp_0;
        if (tmp1_elvis_lhs == null) {
          throw new ParseException('Symbol is not a valid function', tokenPos);
        } else {
          tmp_0 = tmp1_elvis_lhs;
        }
        tmp = tmp_0;
      } else {
        if (token instanceof OpenParen) {
          var holder = $this.r52(CloseParen_getInstance());
          if (!(holder instanceof FnParseResult)) {
            throw new ParseException('Argument is not a function', pos);
          }
          tmp = holder.u52_1;
        } else {
          throw new UnexpectedToken(token, tokenPos);
        }
      }
    }
    var fn = tmp;
    var _destruct__k2r9zo_0 = fn.t2h($this);
    var closureFn = _destruct__k2r9zo_0.de();
    var relatedInstructions = _destruct__k2r9zo_0.ee();
    $this.e4l().f4l();
    return new EvalLambdaFnx(closureFn, pos, relatedInstructions);
  }
  function ParseToplevelResult(instr, lastTokenPosition, endPosition) {
    this.i57_1 = instr;
    this.j57_1 = lastTokenPosition;
    this.k57_1 = endPosition;
  }
  protoOf(ParseToplevelResult).toString = function () {
    return 'ParseToplevelResult(instr=' + toString(this.i57_1) + ', lastTokenPosition=' + this.j57_1.toString() + ', endPosition=' + this.k57_1.toString() + ')';
  };
  protoOf(ParseToplevelResult).hashCode = function () {
    var result = hashCode(this.i57_1);
    result = imul(result, 31) + this.j57_1.hashCode() | 0;
    result = imul(result, 31) + this.k57_1.hashCode() | 0;
    return result;
  };
  protoOf(ParseToplevelResult).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof ParseToplevelResult))
      return false;
    var tmp0_other_with_cast = other instanceof ParseToplevelResult ? other : THROW_CCE();
    if (!equals(this.i57_1, tmp0_other_with_cast.i57_1))
      return false;
    if (!this.j57_1.equals(tmp0_other_with_cast.j57_1))
      return false;
    if (!this.k57_1.equals(tmp0_other_with_cast.k57_1))
      return false;
    return true;
  };
  function TokenParseResult() {
  }
  function Companion_35() {
    Companion_instance_37 = this;
    this.x56_1 = '\u2353';
    this.y56_1 = listOf([CloseParen_getInstance(), EndOfFile_getInstance(), StatementSeparator_getInstance(), CloseFnDef_getInstance(), CloseBracket_getInstance(), ListSeparator_getInstance(), Newline_getInstance(), RightForkToken_getInstance(), AndToken_getInstance(), OrToken_getInstance(), FunctionCallCloseParen_getInstance()]);
  }
  var Companion_instance_37;
  function Companion_getInstance_37() {
    if (Companion_instance_37 == null)
      new Companion_35();
    return Companion_instance_37;
  }
  function parseExprToplevel$throwIfInvalidToken(holder) {
    if (!equals(holder.c4l_1.o52_1, StatementSeparator_getInstance()) && !equals(holder.c4l_1.o52_1, Newline_getInstance())) {
      throw new UnexpectedToken(holder.c4l_1.o52_1, holder.d4l_1);
    }
  }
  function parseExprToplevel$addInstr(statementList, holder) {
    if (holder instanceof InstrParseResult) {
      statementList.h(holder.l4l_1);
    } else {
      if (!(holder instanceof EmptyParseResult)) {
        throw new IllegalContextForFunction(holder.d4l_1);
      }
    }
  }
  function parseListInner$mkInstr(v) {
    var tmp;
    if (v instanceof EmptyParseResult) {
      tmp = new EmptyValueMarker(v.d4l_1);
    } else {
      if (v instanceof InstrParseResult) {
        tmp = v.l4l_1;
      } else {
        if (v instanceof FnParseResult) {
          throw new ParseException("Function expressions can't be part of a list", v.d4l_1);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  }
  function parseBooleanExpressionInner$mkInstr(v) {
    var tmp;
    if (v instanceof EmptyParseResult) {
      throw new ParseException('Empty expression was passed as an argument to a boolean function', v.d4l_1);
    } else {
      if (v instanceof FnParseResult) {
        throw new ParseException('Function expression cannot be an argument to a boolean function', v.d4l_1);
      } else {
        if (v instanceof InstrParseResult) {
          tmp = v.l4l_1;
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  }
  function parseAndDefineUserDefinedFn$collectTokenList(this$0, list) {
    while (true) {
      var _destruct__k2r9zo = this$0.u4k_1.n52();
      var token = _destruct__k2r9zo.de();
      var innerPos = _destruct__k2r9zo.ee();
      if (token instanceof Symbol)
        list.h(token);
      else {
        if (token instanceof CloseParen)
          return Unit_instance;
        else {
          throw new UnexpectedToken(token, innerPos);
        }
      }
    }
  }
  function parseAndDefineUserDefinedFn$collectSemicolonSeparatedList(this$0, list) {
    while (true) {
      var tmp0 = this$0.u4k_1;
      var tmp$ret$0;
      $l$block: {
        // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
        var _destruct__k2r9zo = tmp0.n52();
        var token = _destruct__k2r9zo.de();
        var pos = _destruct__k2r9zo.ee();
        if (token instanceof Symbol) {
          tmp$ret$0 = token;
          break $l$block;
        } else {
          throw new UnexpectedToken(token, pos);
        }
      }
      list.h(tmp$ret$0);
      var _destruct__k2r9zo_0 = this$0.u4k_1.n52();
      var token_0 = _destruct__k2r9zo_0.de();
      var innerPos = _destruct__k2r9zo_0.ee();
      if (token_0 instanceof CloseParen)
        return Unit_instance;
      else {
        if (!(token_0 instanceof ListSeparator))
          throw new UnexpectedToken(token_0, innerPos);
      }
    }
  }
  function parseAndDefineUserDefinedFn$parseSymbolList(this$0) {
    var list = ArrayList_init_$Create$();
    var tmp0 = this$0.u4k_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof Symbol) {
        tmp$ret$0 = token;
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    list.h(tmp$ret$0);
    var _destruct__k2r9zo_0 = this$0.u4k_1.n52();
    var token_0 = _destruct__k2r9zo_0.de();
    var innerPos = _destruct__k2r9zo_0.ee();
    var tmp;
    if (token_0 instanceof ListSeparator) {
      parseAndDefineUserDefinedFn$collectSemicolonSeparatedList(this$0, list);
      tmp = new APLParser$parseAndDefineUserDefinedFn$FnArgComponent(list, true);
    } else {
      if (token_0 instanceof Symbol) {
        list.h(token_0);
        parseAndDefineUserDefinedFn$collectTokenList(this$0, list);
        tmp = new APLParser$parseAndDefineUserDefinedFn$FnArgComponent(list, false);
      } else {
        if (token_0 instanceof CloseParen) {
          tmp = new APLParser$parseAndDefineUserDefinedFn$FnArgComponent(list, false);
        } else {
          throw new UnexpectedToken(token_0, innerPos);
        }
      }
    }
    return tmp;
  }
  function parseAndDefineUserDefinedFn$mkArg($pos, args) {
    var tmp;
    if (args == null) {
      tmp = emptyList();
    } else if (args.l57_1.n() > 1 && !args.m57_1) {
      throw new ParseException('Argument list element must be separated by semicolons', $pos);
    } else {
      tmp = args.l57_1;
    }
    return tmp;
  }
  function parseAndDefineUserDefinedFn$processFnWithArg(this$0, $pos, nameComponent, leftArgsComponent, rightArgsComponent) {
    var engine = this$0.u4k_1.l4q_1;
    var name = nameComponent.l57_1.p(0);
    var leftAndRightArgsIsEmpty = leftArgsComponent == null && rightArgsComponent == null;
    var tmp;
    if (leftAndRightArgsIsEmpty) {
      tmp = new Pair(listOf_0(engine.s39('\u237A', engine.r39())), listOf_0(engine.s39('\u2375', engine.r39())));
    } else {
      tmp = new Pair(parseAndDefineUserDefinedFn$mkArg($pos, leftArgsComponent), parseAndDefineUserDefinedFn$mkArg($pos, rightArgsComponent));
    }
    var _destruct__k2r9zo = tmp;
    var leftArgs = _destruct__k2r9zo.de();
    var rightArgs = _destruct__k2r9zo.ee();
    if (rightArgs.o()) {
      throw new ParseException('Right argument list is empty', $pos);
    }
    var combined = plus_1(leftArgs, rightArgs);
    // Inline function 'kotlin.collections.groupingBy' call
    var tmp$ret$0 = new APLParser$parseAndDefineUserDefinedFn$processFnWithArg$$inlined$groupingBy$1(combined);
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = eachCount(tmp$ret$0);
    // Inline function 'kotlin.collections.filterTo' call
    var destination = LinkedHashMap_init_$Create$_0();
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = tmp0.c2().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      if (element.x1() > 1) {
        destination.j2(element.w1(), element.x1());
      }
    }
    var duplicated = destination.b2();
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!duplicated.o()) {
      throw new ParseException('Symbols in multiple position: ' + joinToString_0(duplicated, ' ', VOID, VOID, VOID, VOID, APLParser$parseAndDefineUserDefinedFn$processFnWithArg$lambda), $pos);
    }
    var nameSymbols = nameComponent.l57_1;
    switch (nameSymbols.n()) {
      case 1:
        var tmp6 = 'function0: ' + name.t3e();
        var tmp$ret$13;
        $l$block: {
          // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
          var env = this$0.z4k(tmp6, true, true);
          try {
            // Inline function 'kotlin.collections.map' call
            // Inline function 'kotlin.collections.mapTo' call
            var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(leftArgs, 10));
            var _iterator__ex2g4s_0 = leftArgs.k();
            while (_iterator__ex2g4s_0.l()) {
              var item = _iterator__ex2g4s_0.m();
              var tmp$ret$6 = env.s4o(item);
              destination_0.h(tmp$ret$6);
            }
            var leftFnBindings = destination_0;
            // Inline function 'kotlin.collections.map' call
            // Inline function 'kotlin.collections.mapTo' call
            var destination_1 = ArrayList_init_$Create$_0(collectionSizeOrDefault(rightArgs, 10));
            var _iterator__ex2g4s_1 = rightArgs.k();
            while (_iterator__ex2g4s_1.l()) {
              var item_0 = _iterator__ex2g4s_1.m();
              var tmp$ret$9 = env.s4o(item_0);
              destination_1.h(tmp$ret$9);
            }
            var rightFnBindings = destination_1;
            var inProcessUserFunction = new UserFunction(name, leftFnBindings, rightFnBindings, new DummyInstr($pos), env);
            env.r55(name, inProcessUserFunction);
            var instr = this$0.t4o(CloseFnDef_getInstance());
            inProcessUserFunction.h4u_1 = instr;
            tmp$ret$13 = new DefinedUserFunction(inProcessUserFunction, name, $pos);
            break $l$block;
          }finally {
            this$0.b4l();
          }
        }

        var definedUserFunction = tmp$ret$13;
        registerDefinedUserFunction(this$0, definedUserFunction);
        break;
      case 2:
        if (nameComponent.m57_1)
          throw new ParseException('Invalid function name', $pos);
        var tmp11 = 'function1: ' + name.t3e();
        var tmp$ret$21;
        $l$block_0: {
          // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
          var env_0 = this$0.z4k(tmp11, true, true);
          try {
            // Inline function 'kotlin.collections.map' call
            // Inline function 'kotlin.collections.mapTo' call
            var destination_2 = ArrayList_init_$Create$_0(collectionSizeOrDefault(leftArgs, 10));
            var _iterator__ex2g4s_2 = leftArgs.k();
            while (_iterator__ex2g4s_2.l()) {
              var item_1 = _iterator__ex2g4s_2.m();
              var tmp$ret$14 = env_0.s4o(item_1);
              destination_2.h(tmp$ret$14);
            }
            var leftFnBindings_0 = destination_2;
            // Inline function 'kotlin.collections.map' call
            // Inline function 'kotlin.collections.mapTo' call
            var destination_3 = ArrayList_init_$Create$_0(collectionSizeOrDefault(rightArgs, 10));
            var _iterator__ex2g4s_3 = rightArgs.k();
            while (_iterator__ex2g4s_3.l()) {
              var item_2 = _iterator__ex2g4s_3.m();
              var tmp$ret$17 = env_0.s4o(item_2);
              destination_3.h(tmp$ret$17);
            }
            var rightFnBindings_0 = destination_3;
            var opBinding = env_0.s4o(nameSymbols.p(0));
            var instr_0 = this$0.t4o(CloseFnDef_getInstance());
            tmp$ret$21 = new UserDefinedOperatorOneArg(nameSymbols.p(1), opBinding, leftFnBindings_0, rightFnBindings_0, instr_0, env_0);
            break $l$block_0;
          }finally {
            this$0.b4l();
          }
        }

        var op = tmp$ret$21;
        engine.m4n(op.n50_1, op);
        break;
      case 3:
        if (nameComponent.m57_1)
          throw new ParseException('Invalid function name', $pos);
        var tmp16 = 'function2: ' + name.t3e();
        var tmp$ret$29;
        $l$block_1: {
          // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
          var env_1 = this$0.z4k(tmp16, true, true);
          try {
            // Inline function 'kotlin.collections.map' call
            // Inline function 'kotlin.collections.mapTo' call
            var destination_4 = ArrayList_init_$Create$_0(collectionSizeOrDefault(leftArgs, 10));
            var _iterator__ex2g4s_4 = leftArgs.k();
            while (_iterator__ex2g4s_4.l()) {
              var item_3 = _iterator__ex2g4s_4.m();
              var tmp$ret$22 = env_1.s4o(item_3);
              destination_4.h(tmp$ret$22);
            }
            var leftFnBindings_1 = destination_4;
            // Inline function 'kotlin.collections.map' call
            // Inline function 'kotlin.collections.mapTo' call
            var destination_5 = ArrayList_init_$Create$_0(collectionSizeOrDefault(rightArgs, 10));
            var _iterator__ex2g4s_5 = rightArgs.k();
            while (_iterator__ex2g4s_5.l()) {
              var item_4 = _iterator__ex2g4s_5.m();
              var tmp$ret$25 = env_1.s4o(item_4);
              destination_5.h(tmp$ret$25);
            }
            var rightFnBindings_1 = destination_5;
            var leftOpBinding = env_1.s4o(nameSymbols.p(0));
            var rightOpBinding = env_1.s4o(nameSymbols.p(2));
            var instr_1 = this$0.t4o(CloseFnDef_getInstance());
            tmp$ret$29 = new UserDefinedOperatorTwoArg(nameSymbols.p(1), leftOpBinding, rightOpBinding, leftFnBindings_1, rightFnBindings_1, instr_1, env_1);
            break $l$block_1;
          }finally {
            this$0.b4l();
          }
        }

        var op_0 = tmp$ret$29;
        engine.m4n(op_0.f51_1, op_0);
        break;
      default:
        throw new ParseException('Invalid name specifier', $pos);
    }
  }
  function lookupFunction$makeLocalFunctionCall($makeInstantiation, binding) {
    return new LocalFunctionCall(binding, $makeInstantiation());
  }
  function parseValueInner$addLeftArg(this$0, leftArgs, instr) {
    var tmp = ParserLevel_LEFT_ARG_getInstance();
    this$0.x4k_1.p55(tmp, VOID, APLParser$parseValueInner$addLeftArg$lambda(leftArgs, instr));
  }
  function parseValueInner$processLeftArgAdjustment(leftArgs, name, pos, fn) {
    if (leftArgs.o()) {
      throw new ParseException(name + ' without argument', pos);
    }
    var element = removeLast(leftArgs);
    return fn(element);
  }
  function parseValueInner$processIndex(this$0, leftArgs, pos) {
    return parseValueInner$processLeftArgAdjustment(leftArgs, 'Index dereference', pos, APLParser$parseValueInner$processIndex$lambda(this$0));
  }
  function parseValueInner$processMemberDereference(this$0, leftArgs, pos) {
    return parseValueInner$processLeftArgAdjustment(leftArgs, 'Member dereference', pos, APLParser$parseValueInner$processMemberDereference$lambda(this$0, pos));
  }
  function parseValueInner$processMethodCall(leftArgs, this$0, pos) {
    if (leftArgs.o()) {
      throw new ParseException('Method call without source reference', pos);
    }
    var ref = removeLast(leftArgs);
    var tmp0 = this$0.u4k_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos_0 = _destruct__k2r9zo.ee();
      if (token instanceof Symbol) {
        tmp$ret$0 = token;
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos_0);
      }
    }
    var methodName = tmp$ret$0;
    return new MethodCallFunction(ref, methodName);
  }
  function APLParser$parseList$lambda(this$0) {
    return function () {
      return parseListInner(this$0);
    };
  }
  function APLParser$parseBooleanExpression$lambda(this$0) {
    return function () {
      return parseBooleanExpressionInner(this$0);
    };
  }
  function APLParser$parseAndDefineUserDefinedFn$FnArgComponent(symbols, semicolonSeparated) {
    this.l57_1 = symbols;
    this.m57_1 = semicolonSeparated;
  }
  function APLParser$parseValue$lambda(this$0) {
    return function () {
      return parseValueInner(this$0);
    };
  }
  function APLParser$parseValueInner$lambda(this$0, $pos, $token) {
    return function () {
      return new FunctionInstantiation(this$0.m52(), $pos.y52($token.h2j_1), this$0.e4l());
    };
  }
  function APLParser$processExport$lambda(this$0) {
    return function (sym) {
      exportSymbolIfInterned(this$0, sym);
      return Unit_instance;
    };
  }
  function APLParser$processLocal$lambda(this$0) {
    return function (sym) {
      this$0.e4l().s4o(sym);
      return Unit_instance;
    };
  }
  function APLParser$processConst$lambda(this$0) {
    return function (sym) {
      var binding = findEnvironmentBinding(this$0, sym);
      binding.e4i().i4i_1 = true;
      return Unit_instance;
    };
  }
  function APLParser$processLambda$lambda(this$0, $pos) {
    return function () {
      return new FunctionInstantiation(this$0.m52(), $pos, this$0.e4l());
    };
  }
  function APLParser$parseAndDefineUserDefinedFn$processFnWithArg$$inlined$groupingBy$1($this) {
    this.n57_1 = $this;
  }
  protoOf(APLParser$parseAndDefineUserDefinedFn$processFnWithArg$$inlined$groupingBy$1).c4 = function () {
    return this.n57_1.k();
  };
  protoOf(APLParser$parseAndDefineUserDefinedFn$processFnWithArg$$inlined$groupingBy$1).o57 = function (element) {
    return element;
  };
  protoOf(APLParser$parseAndDefineUserDefinedFn$processFnWithArg$$inlined$groupingBy$1).d4 = function (element) {
    return this.o57((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  function APLParser$parseAndDefineUserDefinedFn$processFnWithArg$lambda(it) {
    return it.h2j_1;
  }
  function APLParser$parseValueInner$addLeftArg$lambda($leftArgs, $instr) {
    return function () {
      $leftArgs.h($instr);
      return $instr;
    };
  }
  function APLParser$parseValueInner$processIndex$lambda(this$0) {
    return function (element) {
      var res = this$0.p57(CloseBracket_getInstance());
      return new ArrayIndex(element, res.i57_1, element.i31_1.q4t(res.k57_1));
    };
  }
  function APLParser$parseValueInner$processMemberDereference$lambda(this$0, $pos) {
    return function (element) {
      var _destruct__k2r9zo = this$0.u4k_1.n52();
      var rightArgToken = _destruct__k2r9zo.de();
      var rightArgPos = _destruct__k2r9zo.ee();
      var tmp;
      if (rightArgToken instanceof Symbol) {
        tmp = new MemberDereferenceInstruction(element, LiteralSymbol_init_$Create$(rightArgToken, rightArgPos), $pos);
      } else {
        if (rightArgToken instanceof OpenParen) {
          var expr = this$0.t4o(CloseParen_getInstance());
          tmp = new MemberDereferenceInstruction(element, expr, $pos);
        } else {
          throw new ParseException('Invalid token after member dereference. Expected symbol or open paren, got: ' + toString(rightArgToken), rightArgPos);
        }
      }
      return tmp;
    };
  }
  function APLParser(tokeniser, selectedOptimiser, callbacks) {
    Companion_getInstance_37();
    selectedOptimiser = selectedOptimiser === VOID ? null : selectedOptimiser;
    callbacks = callbacks === VOID ? emptyList() : callbacks;
    this.u4k_1 = tokeniser;
    this.v4k_1 = mutableListOf([this.u4k_1.l4q_1.b39_1]);
    var tmp = this;
    tmp.w4k_1 = selectedOptimiser == null ? this.u4k_1.l4q_1.k38_1 : selectedOptimiser;
    this.x4k_1 = new ParserCallbackManager(this, callbacks);
    this.y4k_1 = mapOf([to(AndToken_getInstance(), new BooleanAndFunction()), to(OrToken_getInstance(), new BooleanOrFunction())]);
  }
  protoOf(APLParser).e4l = function () {
    return last(this.v4k_1);
  };
  protoOf(APLParser).m52 = function () {
    return this.u4k_1.l4q_1;
  };
  protoOf(APLParser).z4k = function (name, closed, returnTarget) {
    var env = new Environment(name == null ? '<unnamed>' : name, this.e4l(), closed, returnTarget);
    this.v4k_1.h(env);
    return env;
  };
  protoOf(APLParser).b4l = function () {
    var env = removeLast(this.v4k_1);
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.require' call
    if (!!this.v4k_1.o()) {
      var message = 'attempt to pop environment when environment list is empty';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return env;
  };
  protoOf(APLParser).p57 = function (endToken) {
    var result = this.r52(endToken);
    var tmp;
    if (result instanceof EmptyParseResult) {
      tmp = new ParseToplevelResult(new EmptyValueMarker(result.d4l_1), result.d4l_1, result.c4l_1.p52_1);
    } else {
      if (result instanceof InstrParseResult) {
        tmp = new ParseToplevelResult(result.l4l_1, result.d4l_1, result.c4l_1.p52_1);
      } else {
        if (result instanceof FnParseResult) {
          throw new IllegalContextForFunction(result.d4l_1);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  };
  protoOf(APLParser).t4o = function (endToken) {
    var result = this.p57(endToken).i57_1;
    return this.w4k_1.z54(this, result);
  };
  protoOf(APLParser).r52 = function (endToken) {
    var firstExpr = parseList(this);
    if (equals(firstExpr.c4l_1.o52_1, endToken)) {
      return firstExpr;
    }
    parseExprToplevel$throwIfInvalidToken(firstExpr);
    var statementList = ArrayList_init_$Create$();
    parseExprToplevel$addInstr(statementList, firstExpr);
    while (true) {
      var holder = parseList(this);
      parseExprToplevel$addInstr(statementList, holder);
      if (equals(holder.c4l_1.o52_1, endToken)) {
        return statementList.n() === 0 ? new InstrParseResult(new EmptyValueMarker(holder.d4l_1), holder.d4l_1, holder.c4l_1) : Companion_instance_38.q57(statementList, holder.c4l_1);
      } else {
        parseExprToplevel$throwIfInvalidToken(holder);
      }
    }
  };
  protoOf(APLParser).w52 = function (name, makeInstantiation) {
    var curr = this.e4l();
    var tmp0_safe_receiver = curr.u55(name);
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp0_safe_receiver.i2i(makeInstantiation());
    }
    var tmp1_safe_receiver = curr.t55(name);
    if (tmp1_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return lookupFunction$makeLocalFunctionCall(makeInstantiation, tmp1_safe_receiver);
    }
    if (!curr.j4i()) {
      if (!curr.r37_1) {
        var parentEnvsExceptRoot = asReversed_0(this.v4k_1.u1(1, this.v4k_1.n() - 1 | 0));
        var _iterator__ex2g4s = parentEnvsExceptRoot.k();
        $l$loop: while (_iterator__ex2g4s.l()) {
          var env = _iterator__ex2g4s.m();
          var tmp2_safe_receiver = env.t55(name);
          if (tmp2_safe_receiver == null)
            null;
          else {
            // Inline function 'kotlin.let' call
            return lookupFunction$makeLocalFunctionCall(makeInstantiation, this.e4l().q55(this.u4k_1.l4q_1.o4o('local function: ' + name.t3e()), tmp2_safe_receiver));
          }
          if (env.r37_1) {
            break $l$loop;
          }
        }
      }
      var tmp3_safe_receiver = first(this.v4k_1).t55(name);
      if (tmp3_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        return lookupFunction$makeLocalFunctionCall(makeInstantiation, this.e4l().q55(this.u4k_1.l4q_1.o4o('root function: ' + name.t3e()), tmp3_safe_receiver));
      }
    }
    var tmp4_safe_receiver = this.u4k_1.l4q_1.m4o(name);
    return tmp4_safe_receiver == null ? null : tmp4_safe_receiver.i2i(makeInstantiation());
  };
  protoOf(APLParser).a4l = function () {
    var tmp = ParserLevel_VALUE_getInstance();
    return this.x4k_1.n55(tmp, VOID, APLParser$parseValue$lambda(this));
  };
  protoOf(APLParser).q52 = function () {
    var _destruct__k2r9zo = this.u4k_1.n52();
    var token = _destruct__k2r9zo.de();
    var firstPos = _destruct__k2r9zo.ee();
    var tmp;
    if (token instanceof Symbol) {
      tmp = makeVariableRef(this, token, firstPos);
    } else {
      if (token instanceof OpenParen) {
        tmp = this.t4o(CloseParen_getInstance());
      } else {
        throw new UnexpectedToken(token, firstPos);
      }
    }
    var ref = tmp;
    return new DynamicFunctionDescriptor(ref);
  };
  protoOf(APLParser).r57 = function (endToken, allocateEnvironment) {
    var tmp;
    if (allocateEnvironment) {
      tmp = this.t57(endToken);
    } else {
      tmp = this.s57(endToken);
    }
    return tmp;
  };
  protoOf(APLParser).v52 = function (endToken, allocateEnvironment, $super) {
    endToken = endToken === VOID ? CloseFnDef_getInstance() : endToken;
    allocateEnvironment = allocateEnvironment === VOID ? true : allocateEnvironment;
    return $super === VOID ? this.r57(endToken, allocateEnvironment) : $super.r57.call(this, endToken, allocateEnvironment);
  };
  protoOf(APLParser).u57 = function (endToken, name, returnTarget, bindLocalArguments) {
    var engine = this.u4k_1.l4q_1;
    // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
    var env = this.z4k(name, false, returnTarget);
    try {
      var leftArgName;
      var rightArgName;
      if (bindLocalArguments) {
        leftArgName = engine.s39('\u237A', engine.r39());
        rightArgName = engine.s39('\u2375', engine.r39());
      } else {
        leftArgName = engine.p4o();
        rightArgName = engine.p4o();
      }
      var leftBinding = env.s4o(leftArgName);
      var rightBinding = env.s4o(rightArgName);
      var instruction = this.t4o(endToken);
      return new DeclaredFunction('<unnamed>', instruction, leftBinding, rightBinding, env);
    }finally {
      this.b4l();
    }
  };
  protoOf(APLParser).t57 = function (endToken, name, returnTarget, bindLocalArguments, $super) {
    endToken = endToken === VOID ? CloseFnDef_getInstance() : endToken;
    name = name === VOID ? 'declared function' : name;
    returnTarget = returnTarget === VOID ? true : returnTarget;
    bindLocalArguments = bindLocalArguments === VOID ? true : bindLocalArguments;
    return $super === VOID ? this.u57(endToken, name, returnTarget, bindLocalArguments) : $super.u57.call(this, endToken, name, returnTarget, bindLocalArguments);
  };
  protoOf(APLParser).s57 = function (endToken) {
    var instruction = this.t4o(endToken);
    return new DeclaredNonBoundFunction(instruction);
  };
  protoOf(APLParser).m56 = function (fn) {
    var currentFn = fn;
    var currToken;
    $l$loop_0: while (true) {
      var axis = this.x52();
      if (!(axis == null)) {
        var env = this.e4l();
        currentFn = new AxisValAssignedFunctionDirect(currentFn, axis, env.d4w() ? env : null);
      }
      var readToken = this.u4k_1.n52();
      currToken = readToken;
      var token = currToken.o52_1;
      if (token instanceof Symbol) {
        var tmp0_elvis_lhs = this.u4k_1.l4q_1.n4o(token);
        var tmp;
        if (tmp0_elvis_lhs == null) {
          break $l$loop_0;
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var op = tmp;
        currentFn = op.m2g(this, currentFn, new FunctionInstantiation(this.m52(), fn.t2g_1.g4w(VOID, VOID, VOID, token.h2j_1, currToken.p52_1.z4j_1, currToken.p52_1.a4k_1), this.e4l()));
      } else {
        if (token instanceof LeftForkToken) {
          var midExpr = this.r52(RightForkToken_getInstance());
          if (!(midExpr instanceof FnParseResult)) {
            throw new ParseException('Value in a fork was not a function', currToken.p52_1);
          }
          var res = parseFunctionForOperatorRightArg(this);
          if (res instanceof Left) {
            currentFn = new Chain3(new FunctionInstantiation(this.m52(), currToken.p52_1.q4t(res.vz_1.ce_1), this.e4l()), currentFn, midExpr.u52_1, res.vz_1.be_1);
          } else {
            if (res instanceof Right) {
              throw new ParseException('Right argument is not a function', res.wz_1.ce_1);
            } else {
              noWhenBranchMatchedException();
            }
          }
        } else {
          break $l$loop_0;
        }
      }
    }
    this.u4k_1.l52(currToken);
    return currentFn;
  };
  protoOf(APLParser).x52 = function () {
    var token = this.u4k_1.n52();
    if (!equals(token.o52_1, OpenBracket_getInstance())) {
      this.u4k_1.l52(token);
      return null;
    }
    return this.t4o(CloseBracket_getInstance());
  };
  function recomputeStorageIndex($this) {
    var newIndex = -1;
    if ($this.e4i().f4i_1.j4i()) {
      newIndex = -2;
    } else {
      var i = 0;
      var curr = $this.a4i_1;
      $l$loop: while (!(curr == null)) {
        if (curr === $this.c4i_1.f4i_1) {
          newIndex = i;
          break $l$loop;
        }
        i = i + 1 | 0;
        curr = curr.q37_1;
      }
      // Inline function 'kotlin.require' call
      if (!!(newIndex === -1)) {
        var message = 'storage descriptor not found in parent environments';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
    $this.d4i_1 = newIndex;
  }
  function EnvironmentBinding(environment, name, storage) {
    this.a4i_1 = environment;
    this.b4i_1 = name;
    this.d4i_1 = -1;
    this.c4i_1 = storage;
    recomputeStorageIndex(this);
  }
  protoOf(EnvironmentBinding).e4i = function () {
    return this.c4i_1;
  };
  protoOf(EnvironmentBinding).k4i = function (storage) {
    this.c4i_1 = storage;
    recomputeStorageIndex(this);
  };
  protoOf(EnvironmentBinding).toString = function () {
    return 'EnvironmentBinding[environment=' + this.a4i_1.toString() + ', name=' + this.b4i_1.toString() + ', key=' + toString_0(hashCode(this), 16) + ', storage=' + this.e4i().toString() + ']';
  };
  function Companion_36() {
  }
  protoOf(Companion_36).q57 = function (statementList, lastToken) {
    var tmp;
    switch (statementList.n()) {
      case 0:
        throw IllegalStateException_init_$Create$('Empty statement list');
      case 1:
        tmp = new InstrParseResult(statementList.p(0), statementList.p(0).i31_1, lastToken);
        break;
      default:
        tmp = new InstrParseResult(InstructionList_init_$Create$(statementList), first(statementList).i31_1.q4t(last(statementList).i31_1), lastToken);
        break;
    }
    return tmp;
  };
  var Companion_instance_38;
  function Companion_getInstance_38() {
    return Companion_instance_38;
  }
  function InstrParseResult(instr, pos, lastToken) {
    ParseResultHolder.call(this, lastToken, pos);
    this.l4l_1 = instr;
  }
  function FnParseResult(fn, pos, lastToken) {
    ParseResultHolder.call(this, lastToken, pos);
    this.u52_1 = fn;
  }
  function EmptyParseResult(pos, lastToken) {
    ParseResultHolder.call(this, lastToken, pos);
  }
  function ParseResultHolder(lastToken, pos) {
    this.c4l_1 = lastToken;
    this.d4l_1 = pos;
  }
  function makeResultList(leftArgs) {
    return leftArgs.o() ? null : leftArgs.n() === 1 ? new Pair(first(leftArgs), first(leftArgs).i31_1) : new Pair(Companion_instance_26.r4t(leftArgs), first(leftArgs).i31_1.q4t(last(leftArgs).i31_1));
  }
  function init$registerFn($engine, namespace, name, fn) {
    $engine.v4g(namespace.e3k(name), fn);
  }
  function RegexpModule() {
  }
  protoOf(RegexpModule).p2 = function () {
    return 'regex';
  };
  protoOf(RegexpModule).u4g = function (engine) {
    var namespace = engine.x4e('regex');
    init$registerFn(engine, namespace, 'match', new RegexpMatchesFunction());
    init$registerFn(engine, namespace, 'find', new RegexpFindFunction());
    init$registerFn(engine, namespace, 'findall', new RegexpFindAllFunction());
    init$registerFn(engine, namespace, 'compile', new CreateRegexpFunction());
    init$registerFn(engine, namespace, 'split', new RegexpSplitFunction());
    init$registerFn(engine, namespace, 'replace', new RegexpReplaceFunction());
  };
  function RegexpMatchesFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RegexpMatchesFunctionImpl).t2i = function (context, a, b) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var matchString = result;
    var regexp = regexpFromValue(a, this.t2g_1);
    return !(regexp.eb(matchString) == null) ? get_APLLONG_1() : get_APLLONG_0();
  };
  protoOf(RegexpMatchesFunctionImpl).a2i = function () {
    return 'match regexp';
  };
  function RegexpMatchesFunction() {
  }
  protoOf(RegexpMatchesFunction).i2i = function (instantiation) {
    return new RegexpMatchesFunctionImpl(instantiation);
  };
  function RegexpFindFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RegexpFindFunctionImpl).t2i = function (context, a, b) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var matchString = result;
    var regexp = regexpFromValue(a, this.t2g_1);
    var tmp0_elvis_lhs = regexp.eb(matchString);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return APLNullValue_getInstance();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var result_0 = tmp;
    return makeAPLValueFromGroups(result_0, context);
  };
  protoOf(RegexpFindFunctionImpl).a2i = function () {
    return 'find regexp';
  };
  function RegexpFindFunction() {
  }
  protoOf(RegexpFindFunction).i2i = function (instantiation) {
    return new RegexpFindFunctionImpl(instantiation);
  };
  function RegexpFindAllFunction$RegexFindAllFunctionImpl$eval2Arg$lambda($context) {
    return function (matchResult) {
      return makeAPLValueFromGroups(matchResult, $context);
    };
  }
  function RegexFindAllFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RegexFindAllFunctionImpl).t2i = function (context, a, b) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var matchString = result;
    var regexp = regexpFromValue(a, this.t2g_1);
    var result_0 = regexp.gb(matchString);
    var l = toList(map(result_0, RegexpFindAllFunction$RegexFindAllFunctionImpl$eval2Arg$lambda(context)));
    return new APLArrayList(dimensionsOfSize(new Int32Array([l.n()])), l);
  };
  function RegexpFindAllFunction() {
  }
  protoOf(RegexpFindAllFunction).i2i = function (instantiation) {
    return new RegexFindAllFunctionImpl(instantiation);
  };
  function valueToFlag($this, v) {
    var s = v.g2k();
    if (!(s instanceof APLSymbol)) {
      throwAPLException(new APLEvalException('Regexp flag must be a symbol', $this.t2g_1));
    }
    var sym = s.g2j_1;
    if (equals(sym.i2j_1, Companion_getInstance_41().k2j_1)) {
      var tmp;
      switch (sym.h2j_1) {
        case 'ignoreCase':
          tmp = RegexOption_IGNORE_CASE_getInstance();
          break;
        case 'multiLine':
          tmp = RegexOption_MULTILINE_getInstance();
          break;
        default:
          valueToFlag$throwUnknownRegexpFlag(sym, $this);
          break;
      }
      return tmp;
    } else {
      valueToFlag$throwUnknownRegexpFlag(sym, $this);
    }
  }
  function eval2Arg$mkFlag(this$0, v) {
    return valueToFlag(this$0, v);
  }
  function valueToFlag$throwUnknownRegexpFlag(sym, this$0) {
    throwAPLException(new APLEvalException('Unknown regexp flag: ' + sym.h2j_1, this$0.t2g_1));
  }
  function CreateRegexpFunction$CreateRegexpFunctionImpl$eval2Arg$mkFlag$ref(this$0) {
    var l = function (p0) {
      return eval2Arg$mkFlag(this$0, p0);
    };
    l.callableName = 'mkFlag';
    return l;
  }
  function CreateRegexpFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(CreateRegexpFunctionImpl).n2i = function (context, a) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(a);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    return new RegexpMatcherValue(createRegexOrThrowKapError(result, emptySet(), this.t2g_1));
  };
  protoOf(CreateRegexpFunctionImpl).t2i = function (context, a, b) {
    var tmp;
    switch (_Dimensions___get_size__impl__uu37ek(a.o2i())) {
      case 0:
        tmp = setOf(eval2Arg$mkFlag(this, a));
        break;
      case 1:
        var tmp_0 = a.l2p();
        tmp = toSet(map(tmp_0, CreateRegexpFunction$CreateRegexpFunctionImpl$eval2Arg$mkFlag$ref(this)));
        break;
      default:
        throwAPLException(new APLEvalException('Regexp flags must be a single symbol or a one-dimensional array', this.t2g_1));
        break;
    }
    var flags = tmp;
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    return new RegexpMatcherValue(createRegexOrThrowKapError(result, flags, this.t2g_1));
  };
  protoOf(CreateRegexpFunctionImpl).z2h = function () {
    return 'create regexp';
  };
  function CreateRegexpFunction() {
  }
  protoOf(CreateRegexpFunction).i2i = function (instantiation) {
    return new CreateRegexpFunctionImpl(instantiation);
  };
  function RegexpSplitFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RegexpSplitFunctionImpl).t2i = function (context, a, b) {
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(b);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var matchString = result;
    var regexp = regexpFromValue(a, this.t2g_1);
    var result_0 = regexp.rb(matchString);
    var tmp = dimensionsOfSize(new Int32Array([result_0.n()]));
    var tmp3_map_$receiver = Companion_getInstance_46();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(result_0, 10));
    var _iterator__ex2g4s = result_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$2 = tmp3_map_$receiver.k2o(item);
      destination.h(tmp$ret$2);
    }
    return new APLArrayList(tmp, destination);
  };
  protoOf(RegexpSplitFunctionImpl).a2i = function () {
    return 'split regexp';
  };
  function RegexpSplitFunction() {
  }
  protoOf(RegexpSplitFunction).i2i = function (instantiation) {
    return new RegexpSplitFunctionImpl(instantiation);
  };
  function RegexpReplaceFunction$RegexpReplaceFunctionImpl$eval2Arg$lambda($replacementClosure, $context, this$0) {
    return function (r) {
      var tmp0 = $replacementClosure.w2g($context, makeAPLValueFromGroups(r, $context), null);
      // Inline function 'com.dhsdevelopments.kap.toStringValue' call
      var pos = this$0.t2g_1;
      var result = toStringValueOrNull(tmp0);
      if (result == null) {
        var m = null;
        var messagePrefix = m == null ? '' : '' + m + ': ';
        throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
      }
      return result;
    };
  }
  function RegexpReplaceFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(RegexpReplaceFunctionImpl).t2i = function (context, a, b) {
    var regexp = regexpFromValue(a, this.t2g_1);
    var args = listify(b);
    if (!(args.n3h() === 2)) {
      throwAPLException(new IllegalArgumentNumException(2, args.n3h(), this.t2g_1));
    }
    var tmp0 = args.v4p(0);
    // Inline function 'com.dhsdevelopments.kap.toStringValue' call
    var pos = this.t2g_1;
    var result = toStringValueOrNull(tmp0);
    if (result == null) {
      var m = null;
      var messagePrefix = m == null ? '' : '' + m + ': ';
      throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
    }
    var matchString = result;
    var replacementArg = args.v4p(1).x2g();
    var tmp;
    if (isStringValue(replacementArg)) {
      // Inline function 'com.dhsdevelopments.kap.toStringValue' call
      var pos_0 = this.t2g_1;
      var result_0 = toStringValueOrNull(replacementArg);
      if (result_0 == null) {
        var m_0 = null;
        var messagePrefix_0 = m_0 == null ? '' : '' + m_0 + ': ';
        throwAPLException(new IncompatibleTypeException(messagePrefix_0 + 'Argument is not a string', pos_0));
      }
      tmp = regexp.ib(matchString, result_0);
    } else {
      if (replacementArg instanceof LambdaValue) {
        var replacementClosure = replacementArg.f3a();
        tmp = regexp.jb(matchString, RegexpReplaceFunction$RegexpReplaceFunctionImpl$eval2Arg$lambda(replacementClosure, context, this));
      } else {
        throwAPLException(new APLIllegalArgumentException('Replacement must be either a string or a lambda', this.t2g_1));
      }
    }
    var s = tmp;
    return Companion_getInstance_46().k2o(s);
  };
  function RegexpReplaceFunction() {
  }
  protoOf(RegexpReplaceFunction).i2i = function (instantiation) {
    return new RegexpReplaceFunctionImpl(instantiation);
  };
  function regexpFromValue(a, pos) {
    var tmp;
    if (a instanceof RegexpMatcherValue) {
      tmp = a.s3k_1;
    } else {
      // Inline function 'com.dhsdevelopments.kap.toStringValue' call
      var result = toStringValueOrNull(a);
      if (result == null) {
        var m = null;
        var messagePrefix = m == null ? '' : '' + m + ': ';
        throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
      }
      var regexpString = result;
      return createRegexOrThrowKapError(regexpString, emptySet(), pos);
    }
    return tmp;
  }
  function makeAPLValueFromGroups(result, context) {
    var groups = result.wb();
    var undefinedSym = {_v: null};
    var tmp = dimensionsOfSize(new Int32Array([groups.n()]));
    var tmp_0 = 0;
    var tmp_1 = groups.n();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_2 = Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      var v = groups.p(tmp_3);
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.require' call
      if (!!(tmp_3 === 0 && v == null)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      var tmp_4;
      if (v == null) {
        if (undefinedSym._v == null) {
          undefinedSym._v = context.j38_1.i3i().l4f('undefined');
        }
        tmp_4 = new APLSymbol(undefinedSym._v);
      } else {
        tmp_4 = Companion_getInstance_46().k2o(v.sb_1);
      }
      tmp_2[tmp_3] = tmp_4;
      tmp_0 = tmp_0 + 1 | 0;
    }
    return new APLArrayImpl(tmp, tmp_2);
  }
  function RegexpMatcherValue(matcher) {
    KotlinObjectWrappedValue.call(this, matcher);
  }
  protoOf(RegexpMatcherValue).z2p = function () {
    return Companion_getInstance_35().s3l_1;
  };
  protoOf(RegexpMatcherValue).i2o = function (style) {
    return 'regex-matcher';
  };
  protoOf(RegexpMatcherValue).h2n = function (reference, pos, typeDiscrimination) {
    var tmp;
    if (reference instanceof RegexpMatcherValue) {
      tmp = equals(this.s3k_1, reference.s3k_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  function createRegexOrThrowKapError(regexpString, flags, pos) {
    var tmp;
    try {
      tmp = toRegexpWithException(regexpString, flags);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof RegexpParseException) {
        var _unused_var__etf5q3 = $p;
        throwAPLException(new InvalidRegexp('Invalid format: ' + regexpString, pos));
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function InvalidRegexp(message, pos) {
    pos = pos === VOID ? null : pos;
    APLEvalException.call(this, message, pos);
    captureStack(this, InvalidRegexp);
  }
  function maybeWrapInParens(buf, value) {
    var shouldWrap = value.e2q();
    if (shouldWrap) {
      buf.i('(');
    }
    buf.i(value.i2o(FormatStyle_READABLE_getInstance()));
    if (shouldWrap) {
      buf.i(')');
    }
  }
  function String2D_init_$Init$(value, $this) {
    String2D.call($this);
    var tmp = $this;
    // Inline function 'kotlin.collections.map' call
    var this_0 = split(value, charArrayOf([_Char___init__impl__6a9atx(10)]));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = asGraphemeList(item);
      destination.h(tmp$ret$0);
    }
    tmp.u58_1 = destination;
    $this.v58_1 = computeLongestRow($this, $this.u58_1);
    return $this;
  }
  function String2D_init_$Create$(value) {
    return String2D_init_$Init$(value, objectCreate(protoOf(String2D)));
  }
  function String2D_init_$Init$_0(initContent, $this) {
    String2D.call($this);
    $this.u58_1 = initContent;
    $this.v58_1 = computeLongestRow($this, initContent);
    return $this;
  }
  function String2D_init_$Create$_0(initContent) {
    return String2D_init_$Init$_0(initContent, objectCreate(protoOf(String2D)));
  }
  function computeLongestRow($this, rows) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(rows, 10));
    var _iterator__ex2g4s = rows.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = item.n();
      destination.h(tmp$ret$0);
    }
    // Inline function 'com.dhsdevelopments.kap.reduceWithInitial' call
    var curr = 0;
    var _iterator__ex2g4s_0 = destination.k();
    while (_iterator__ex2g4s_0.l()) {
      var element = _iterator__ex2g4s_0.m();
      // Inline function 'kotlin.math.max' call
      var a = curr;
      curr = Math.max(a, element);
    }
    return curr;
  }
  protoOf(String2D).w58 = function () {
    return this.v58_1;
  };
  protoOf(String2D).x58 = function () {
    return this.u58_1.n();
  };
  protoOf(String2D).y58 = function (i) {
    return i < this.u58_1.n() ? this.u58_1.p(i) : emptyList();
  };
  protoOf(String2D).z58 = function () {
    var newContent = ArrayList_init_$Create$();
    // Inline function 'kotlin.let' call
    var row = ArrayList_init_$Create$();
    row.h('\u250F');
    // Inline function 'kotlin.repeat' call
    var times = this.v58_1;
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        row.h('\u2501');
      }
       while (inductionVariable < times);
    row.h('\u2513');
    newContent.h(row);
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this.u58_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var newRow = ArrayList_init_$Create$();
      newRow.h('\u2503');
      newRow.q(element);
      // Inline function 'kotlin.repeat' call
      var times_0 = this.v58_1 - element.n() | 0;
      var inductionVariable_0 = 0;
      if (inductionVariable_0 < times_0)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          newRow.h(' ');
        }
         while (inductionVariable_0 < times_0);
      newRow.h('\u2503');
      newContent.h(newRow);
    }
    // Inline function 'kotlin.let' call
    var row_0 = ArrayList_init_$Create$();
    row_0.h('\u2517');
    // Inline function 'kotlin.repeat' call
    var times_1 = this.v58_1;
    var inductionVariable_1 = 0;
    if (inductionVariable_1 < times_1)
      do {
        var index_1 = inductionVariable_1;
        inductionVariable_1 = inductionVariable_1 + 1 | 0;
        row_0.h('\u2501');
      }
       while (inductionVariable_1 < times_1);
    row_0.h('\u251B');
    newContent.h(row_0);
    return String2D_init_$Create$_0(newContent);
  };
  protoOf(String2D).a59 = function () {
    var buf = StringBuilder_init_$Create$();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = this.u58_1.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var i = checkIndexOverflow(_unary__edvuaz);
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s_0 = item.k();
      while (_iterator__ex2g4s_0.l()) {
        var element = _iterator__ex2g4s_0.m();
        buf.i8(element);
      }
      if (i < (this.u58_1.n() - 1 | 0)) {
        buf.i8('\n');
      }
    }
    return buf.toString();
  };
  function String2D() {
  }
  function formatArrayAsPlain(value) {
    var d = value.o2i();
    var tmp;
    switch (_Dimensions___get_size__impl__uu37ek(d)) {
      case 0:
        tmp = value.h2k(0).i2o(FormatStyle_PLAIN_getInstance());
        break;
      case 1:
        var buf = StringBuilder_init_$Create$();
        // Inline function 'com.dhsdevelopments.kap.iterateMembers' call

        if (value.b2l()) {
          buf.i8(value.i2o(FormatStyle_PLAIN_getInstance()));
        } else {
          var inductionVariable = 0;
          var last = value.n();
          if (inductionVariable < last)
            do {
              var i = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              var v = value.h2k(i);
              buf.i8(v.i2o(FormatStyle_PLAIN_getInstance()));
            }
             while (inductionVariable < last);
        }

        tmp = buf.toString();
        break;
      default:
        var width = Dimensions__lastDimension$default_impl_b2ui3x(d);
        var tmp_0;
        if (width === 0) {
          tmp_0 = '';
        } else {
          var buf_0 = StringBuilder_init_$Create$();
          // Inline function 'com.dhsdevelopments.kap.iterateMembersWithPosition' call
          if (value.b2l()) {
            buf_0.i8(value.i2o(FormatStyle_PLAIN_getInstance()));
            if (((0 + 1 | 0) % width | 0) === 0) {
              buf_0.i8('\n');
            }
          } else {
            var inductionVariable_0 = 0;
            var last_0 = value.n();
            if (inductionVariable_0 < last_0)
              do {
                var i_0 = inductionVariable_0;
                inductionVariable_0 = inductionVariable_0 + 1 | 0;
                var v_0 = value.h2k(i_0);
                buf_0.i8(v_0.i2o(FormatStyle_PLAIN_getInstance()));
                if (((i_0 + 1 | 0) % width | 0) === 0) {
                  buf_0.i8('\n');
                }
              }
               while (inductionVariable_0 < last_0);
          }
          tmp_0 = buf_0.toString();
        }

        tmp = tmp_0;
        break;
    }
    return tmp;
  }
  function encloseInBox(value, style) {
    var tmp;
    if (value instanceof APLSingleValue) {
      tmp = value.i2o(style);
    } else {
      if (value.n2l()) {
        tmp = encloseString(String2D_init_$Create$(value.h2k(0).i2o(style)));
      } else {
        if (isNullValue(value)) {
          tmp = renderNullValue(style);
        } else {
          if (isStringValue(value)) {
            tmp = renderStringValue(value, style);
          } else {
            tmp = encloseNDim(value);
          }
        }
      }
    }
    return tmp;
  }
  function renderStringValue(value, style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = renderStringValueOptionalQuotes(value, false);
        break;
      case 2:
        tmp = renderStringValueOptionalQuotes(value, true);
        break;
      case 1:
        tmp = renderStringValueOptionalQuotes(value, true);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  }
  function encloseString(s) {
    return s.z58().a59();
  }
  function renderNullValue(style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = '';
        break;
      case 2:
        tmp = '\u236C';
        break;
      case 1:
        tmp = '\u236C';
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  }
  function encloseNDim(value, renderLabels) {
    renderLabels = renderLabels === VOID ? true : renderLabels;
    var dimensions = value.o2i();
    var multipliers = Dimensions__multipliers_impl_u1suko(dimensions);
    // Inline function 'kotlin.collections.map' call
    var this_0 = until(0, value.n());
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var inductionVariable = this_0.u_1;
    var last = this_0.v_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var index = item;
        var tmp$ret$0 = String2D_init_$Create$(value.h2k(index).i2o(FormatStyle_PRETTY_getInstance()));
        destination.h(tmp$ret$0);
      }
       while (!(item === last));
    var renderedValues = destination;
    var tmp;
    if (renderLabels) {
      var tmp0_safe_receiver = value.m2l().p2r();
      tmp = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.q2r_1;
    } else {
      tmp = null;
    }
    var labelsArray = tmp;
    var tmp_0;
    switch (_Dimensions___get_size__impl__uu37ek(dimensions)) {
      case 1:
        // Inline function 'kotlin.arrayOf' call

        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp_0 = [null, null, null, 0];
        break;
      case 2:
        // Inline function 'kotlin.arrayOf' call

        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp_0 = [null, null, 0, 1];
        break;
      case 3:
        // Inline function 'kotlin.arrayOf' call

        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp_0 = [0, null, 1, 2];
        break;
      case 4:
        // Inline function 'kotlin.arrayOf' call

        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp_0 = [1, 0, 2, 3];
        break;
      default:
        var reason = 'No support for printing higher-dimension arrays';
        throw new NotImplementedError('An operation is not implemented: ' + reason);
    }
    var indexes = tmp_0;
    var s0 = !(indexes[0] == null) ? Dimensions__get_impl_4npepw(dimensions, ensureNotNull(indexes[0])) : 1;
    var s1 = !(indexes[1] == null) ? Dimensions__get_impl_4npepw(dimensions, ensureNotNull(indexes[1])) : 1;
    var s2 = !(indexes[2] == null) ? Dimensions__get_impl_4npepw(dimensions, ensureNotNull(indexes[2])) : 1;
    var s3 = !(indexes[3] == null) ? Dimensions__get_impl_4npepw(dimensions, ensureNotNull(indexes[3])) : 1;
    var yLabelsWidth = 0;
    var yLabelsArray = ArrayList_init_$Create$();
    if (!(labelsArray == null) && !(indexes[2] == null)) {
      // Inline function 'kotlin.repeat' call
      var inductionVariable_0 = 0;
      if (inductionVariable_0 < s2)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          var tmp0_safe_receiver_0 = labelsArray.p(ensureNotNull(indexes[2]));
          var text = tmp0_safe_receiver_0 == null ? null : tmp0_safe_receiver_0.p(index_0);
          if (!(text == null)) {
            var s = String2D_init_$Create$(text.j35_1);
            yLabelsArray.h(s);
            var tmp0 = s.w58();
            // Inline function 'kotlin.math.max' call
            var b = yLabelsWidth;
            yLabelsWidth = Math.max(tmp0, b);
          } else {
            yLabelsArray.h(null);
          }
        }
         while (inductionVariable_0 < s2);
    }
    var tmp_1 = 0;
    var tmp_2 = imul(s1, s3);
    var tmp_3 = new Int32Array(tmp_2);
    while (tmp_1 < tmp_2) {
      tmp_3[tmp_1] = 0;
      tmp_1 = tmp_1 + 1 | 0;
    }
    var colWidths = tmp_3;
    var inductionVariable_1 = 0;
    if (inductionVariable_1 < s0)
      do {
        var outerY = inductionVariable_1;
        inductionVariable_1 = inductionVariable_1 + 1 | 0;
        var inductionVariable_2 = 0;
        if (inductionVariable_2 < s2)
          do {
            var innerY = inductionVariable_2;
            inductionVariable_2 = inductionVariable_2 + 1 | 0;
            var inductionVariable_3 = 0;
            if (inductionVariable_3 < s1)
              do {
                var outerX = inductionVariable_3;
                inductionVariable_3 = inductionVariable_3 + 1 | 0;
                var inductionVariable_4 = 0;
                if (inductionVariable_4 < s3)
                  do {
                    var innerX = inductionVariable_4;
                    inductionVariable_4 = inductionVariable_4 + 1 | 0;
                    var index_1 = imul(outerX, s3) + innerX | 0;
                    var p = encloseNDim$lookupByCoords(indexes, multipliers, outerY, outerX, innerY, innerX);
                    var cell = renderedValues.p(p);
                    var tmp9 = cell.w58();
                    // Inline function 'kotlin.math.max' call
                    var b_0 = colWidths[index_1];
                    colWidths[index_1] = Math.max(tmp9, b_0);
                  }
                   while (inductionVariable_4 < s3);
              }
               while (inductionVariable_3 < s1);
          }
           while (inductionVariable_2 < s2);
      }
       while (inductionVariable_1 < s0);
    var xLabelsArray = ArrayList_init_$Create$();
    var maxXLabelsHeight = 0;
    if (!(labelsArray == null)) {
      var inductionVariable_5 = 0;
      if (inductionVariable_5 < s3)
        do {
          var innerX_0 = inductionVariable_5;
          inductionVariable_5 = inductionVariable_5 + 1 | 0;
          var tmp2_safe_receiver = labelsArray.p(ensureNotNull(indexes[3]));
          var text_0 = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.p(innerX_0);
          if (!(text_0 == null)) {
            var s_0 = String2D_init_$Create$(text_0.j35_1);
            xLabelsArray.h(s_0);
            var tmp11 = s_0.x58();
            // Inline function 'kotlin.math.max' call
            var b_1 = maxXLabelsHeight;
            maxXLabelsHeight = Math.max(tmp11, b_1);
          } else {
            xLabelsArray.h(null);
          }
        }
         while (inductionVariable_5 < s3);
      var inductionVariable_6 = 0;
      if (inductionVariable_6 < s1)
        do {
          var outerX_0 = inductionVariable_6;
          inductionVariable_6 = inductionVariable_6 + 1 | 0;
          var inductionVariable_7 = 0;
          if (inductionVariable_7 < s3)
            do {
              var innerX_1 = inductionVariable_7;
              inductionVariable_7 = inductionVariable_7 + 1 | 0;
              var index_2 = imul(outerX_0, s3) + innerX_1 | 0;
              var s_1 = xLabelsArray.p(innerX_1);
              if (!(s_1 == null)) {
                var tmp13 = s_1.w58();
                // Inline function 'kotlin.math.max' call
                var b_2 = colWidths[index_2];
                colWidths[index_2] = Math.max(tmp13, b_2);
              }
            }
             while (inductionVariable_7 < s3);
        }
         while (inductionVariable_6 < s1);
    }
    var doubleBoxed = _Dimensions___get_size__impl__uu37ek(dimensions) > 2;
    var allColsWidth = (sum(colWidths) + imul(s1, s3) | 0) - 1 | 0;
    var content = ArrayList_init_$Create$();
    if (!(labelsArray == null) && maxXLabelsHeight > 0) {
      // Inline function 'kotlin.let' call
      var row = ArrayList_init_$Create$();
      row.h(doubleBoxed ? '\u2554' : '\u250F');
      if (yLabelsWidth > 0) {
        // Inline function 'kotlin.repeat' call
        var times = yLabelsWidth;
        var inductionVariable_8 = 0;
        if (inductionVariable_8 < times)
          do {
            var index_3 = inductionVariable_8;
            inductionVariable_8 = inductionVariable_8 + 1 | 0;
            row.h(doubleBoxed ? '\u2550' : '\u2501');
          }
           while (inductionVariable_8 < times);
        row.h(doubleBoxed ? '\u2566' : '\u2533');
      }
      // Inline function 'kotlin.repeat' call
      var inductionVariable_9 = 0;
      if (inductionVariable_9 < s1)
        do {
          var index_4 = inductionVariable_9;
          inductionVariable_9 = inductionVariable_9 + 1 | 0;
          if (index_4 > 0) {
            row.h(doubleBoxed ? '\u2564' : '\u2533');
          }
          // Inline function 'kotlin.repeat' call
          var times_0 = encloseNDim$widthOfOuterCol(s3, colWidths, index_4);
          var inductionVariable_10 = 0;
          if (inductionVariable_10 < times_0)
            do {
              var index_5 = inductionVariable_10;
              inductionVariable_10 = inductionVariable_10 + 1 | 0;
              row.h(doubleBoxed ? '\u2550' : '\u2501');
            }
             while (inductionVariable_10 < times_0);
        }
         while (inductionVariable_9 < s1);
      row.h(doubleBoxed ? '\u2557' : '\u2513');
      content.h(row);
      var inductionVariable_11 = 0;
      var last_0 = maxXLabelsHeight;
      if (inductionVariable_11 < last_0)
        do {
          var internalRow = inductionVariable_11;
          inductionVariable_11 = inductionVariable_11 + 1 | 0;
          var row_0 = ArrayList_init_$Create$();
          row_0.h(doubleBoxed ? '\u2551' : '\u2503');
          if (yLabelsWidth > 0) {
            // Inline function 'kotlin.repeat' call
            var times_1 = yLabelsWidth;
            var inductionVariable_12 = 0;
            if (inductionVariable_12 < times_1)
              do {
                var index_6 = inductionVariable_12;
                inductionVariable_12 = inductionVariable_12 + 1 | 0;
                row_0.h(' ');
              }
               while (inductionVariable_12 < times_1);
            row_0.h(doubleBoxed ? '\u2551' : '\u2503');
          }
          // Inline function 'kotlin.repeat' call
          var inductionVariable_13 = 0;
          if (inductionVariable_13 < s1)
            do {
              var index_7 = inductionVariable_13;
              inductionVariable_13 = inductionVariable_13 + 1 | 0;
              if (index_7 > 0) {
                row_0.h('\u2502');
              }
              // Inline function 'kotlin.repeat' call
              var inductionVariable_14 = 0;
              if (inductionVariable_14 < s3)
                do {
                  var index_8 = inductionVariable_14;
                  inductionVariable_14 = inductionVariable_14 + 1 | 0;
                  if (index_8 > 0) {
                    row_0.h(' ');
                  }
                  var text_1 = xLabelsArray.p(index_8);
                  var index_9 = imul(index_7, s3) + index_8 | 0;
                  if (!(text_1 == null)) {
                    var rowText = text_1.y58(internalRow);
                    // Inline function 'kotlin.repeat' call
                    var times_2 = colWidths[index_9] - rowText.n() | 0;
                    var inductionVariable_15 = 0;
                    if (inductionVariable_15 < times_2)
                      do {
                        var index_10 = inductionVariable_15;
                        inductionVariable_15 = inductionVariable_15 + 1 | 0;
                        row_0.h(' ');
                      }
                       while (inductionVariable_15 < times_2);
                    row_0.q(rowText);
                  } else {
                    // Inline function 'kotlin.repeat' call
                    var times_3 = colWidths[index_9];
                    var inductionVariable_16 = 0;
                    if (inductionVariable_16 < times_3)
                      do {
                        var index_11 = inductionVariable_16;
                        inductionVariable_16 = inductionVariable_16 + 1 | 0;
                        row_0.h(' ');
                      }
                       while (inductionVariable_16 < times_3);
                  }
                }
                 while (inductionVariable_14 < s3);
            }
             while (inductionVariable_13 < s1);
          row_0.h(doubleBoxed ? '\u2551' : '\u2503');
          content.h(row_0);
        }
         while (inductionVariable_11 < last_0);
      // Inline function 'kotlin.let' call
      var row_1 = ArrayList_init_$Create$();
      row_1.h(doubleBoxed ? '\u2560' : '\u2523');
      if (yLabelsWidth > 0) {
        // Inline function 'kotlin.repeat' call
        var times_4 = yLabelsWidth;
        var inductionVariable_17 = 0;
        if (inductionVariable_17 < times_4)
          do {
            var index_12 = inductionVariable_17;
            inductionVariable_17 = inductionVariable_17 + 1 | 0;
            row_1.h(doubleBoxed ? '\u2550' : '\u2501');
          }
           while (inductionVariable_17 < times_4);
        row_1.h(doubleBoxed ? '\u256C' : '\u254B');
      }
      // Inline function 'kotlin.repeat' call
      var inductionVariable_18 = 0;
      if (inductionVariable_18 < s1)
        do {
          var index_13 = inductionVariable_18;
          inductionVariable_18 = inductionVariable_18 + 1 | 0;
          if (index_13 > 0) {
            row_1.h(doubleBoxed ? '\u2567' : '\u253B');
          }
          // Inline function 'kotlin.repeat' call
          var times_5 = encloseNDim$widthOfOuterCol(s3, colWidths, index_13);
          var inductionVariable_19 = 0;
          if (inductionVariable_19 < times_5)
            do {
              var index_14 = inductionVariable_19;
              inductionVariable_19 = inductionVariable_19 + 1 | 0;
              row_1.h(doubleBoxed ? '\u2550' : '\u2501');
            }
             while (inductionVariable_19 < times_5);
        }
         while (inductionVariable_18 < s1);
      row_1.h(doubleBoxed ? '\u2563' : '\u252B');
      content.h(row_1);
    } else {
      // Inline function 'kotlin.let' call
      var row_2 = ArrayList_init_$Create$();
      row_2.h(doubleBoxed ? '\u2554' : '\u250F');
      if (yLabelsWidth > 0) {
        // Inline function 'kotlin.repeat' call
        var times_6 = yLabelsWidth;
        var inductionVariable_20 = 0;
        if (inductionVariable_20 < times_6)
          do {
            var index_15 = inductionVariable_20;
            inductionVariable_20 = inductionVariable_20 + 1 | 0;
            row_2.h(doubleBoxed ? '\u2550' : '\u2501');
          }
           while (inductionVariable_20 < times_6);
        row_2.h(doubleBoxed ? '\u2566' : '\u2533');
      }
      // Inline function 'kotlin.repeat' call
      var inductionVariable_21 = 0;
      if (inductionVariable_21 < allColsWidth)
        do {
          var index_16 = inductionVariable_21;
          inductionVariable_21 = inductionVariable_21 + 1 | 0;
          row_2.h(doubleBoxed ? '\u2550' : '\u2501');
        }
         while (inductionVariable_21 < allColsWidth);
      row_2.h(doubleBoxed ? '\u2557' : '\u2513');
      content.h(row_2);
    }
    var inductionVariable_22 = 0;
    if (inductionVariable_22 < s0)
      do {
        var outerY_0 = inductionVariable_22;
        inductionVariable_22 = inductionVariable_22 + 1 | 0;
        if (outerY_0 > 0) {
          var row_3 = ArrayList_init_$Create$();
          row_3.h(doubleBoxed ? '\u2551' : '\u2503');
          if (yLabelsWidth > 0) {
            // Inline function 'kotlin.repeat' call
            var times_7 = yLabelsWidth;
            var inductionVariable_23 = 0;
            if (inductionVariable_23 < times_7)
              do {
                var index_17 = inductionVariable_23;
                inductionVariable_23 = inductionVariable_23 + 1 | 0;
                row_3.h(' ');
              }
               while (inductionVariable_23 < times_7);
            row_3.h(doubleBoxed ? '\u2551' : '\u2503');
          }
          // Inline function 'kotlin.repeat' call
          var inductionVariable_24 = 0;
          if (inductionVariable_24 < allColsWidth)
            do {
              var index_18 = inductionVariable_24;
              inductionVariable_24 = inductionVariable_24 + 1 | 0;
              row_3.h(' ');
            }
             while (inductionVariable_24 < allColsWidth);
          row_3.h(doubleBoxed ? '\u2551' : '\u2503');
          content.h(row_3);
        }
        var inductionVariable_25 = 0;
        if (inductionVariable_25 < s2)
          do {
            var innerY_0 = inductionVariable_25;
            inductionVariable_25 = inductionVariable_25 + 1 | 0;
            var numInternalRows = 0;
            var inductionVariable_26 = 0;
            if (inductionVariable_26 < s1)
              do {
                var outerX_1 = inductionVariable_26;
                inductionVariable_26 = inductionVariable_26 + 1 | 0;
                var inductionVariable_27 = 0;
                if (inductionVariable_27 < s3)
                  do {
                    var innerX_2 = inductionVariable_27;
                    inductionVariable_27 = inductionVariable_27 + 1 | 0;
                    var cell_0 = renderedValues.p(encloseNDim$lookupByCoords(indexes, multipliers, outerY_0, outerX_1, innerY_0, innerX_2));
                    var tmp29 = cell_0.x58();
                    // Inline function 'kotlin.math.max' call
                    var b_3 = numInternalRows;
                    numInternalRows = Math.max(tmp29, b_3);
                  }
                   while (inductionVariable_27 < s3);
              }
               while (inductionVariable_26 < s1);
            if (yLabelsWidth > 0) {
              var tmp3_safe_receiver = yLabelsArray.p(innerY_0);
              var tmp4_elvis_lhs = tmp3_safe_receiver == null ? null : tmp3_safe_receiver.x58();
              var tmp31 = tmp4_elvis_lhs == null ? 0 : tmp4_elvis_lhs;
              // Inline function 'kotlin.math.max' call
              var b_4 = numInternalRows;
              numInternalRows = Math.max(tmp31, b_4);
            }
            var inductionVariable_28 = 0;
            var last_1 = numInternalRows;
            if (inductionVariable_28 < last_1)
              do {
                var internalRow_0 = inductionVariable_28;
                inductionVariable_28 = inductionVariable_28 + 1 | 0;
                var row_4 = ArrayList_init_$Create$();
                row_4.h(doubleBoxed ? '\u2551' : '\u2503');
                if (yLabelsWidth > 0) {
                  var text_2 = yLabelsArray.p(innerY_0);
                  if (!(text_2 == null)) {
                    var rowText_0 = text_2.y58(internalRow_0);
                    // Inline function 'kotlin.repeat' call
                    var times_8 = yLabelsWidth - rowText_0.n() | 0;
                    var inductionVariable_29 = 0;
                    if (inductionVariable_29 < times_8)
                      do {
                        var index_19 = inductionVariable_29;
                        inductionVariable_29 = inductionVariable_29 + 1 | 0;
                        row_4.h(' ');
                      }
                       while (inductionVariable_29 < times_8);
                    row_4.q(rowText_0);
                  } else {
                    // Inline function 'kotlin.repeat' call
                    var times_9 = yLabelsWidth;
                    var inductionVariable_30 = 0;
                    if (inductionVariable_30 < times_9)
                      do {
                        var index_20 = inductionVariable_30;
                        inductionVariable_30 = inductionVariable_30 + 1 | 0;
                        row_4.h(' ');
                      }
                       while (inductionVariable_30 < times_9);
                  }
                  row_4.h(doubleBoxed ? '\u2551' : '\u2503');
                }
                var inductionVariable_31 = 0;
                if (inductionVariable_31 < s1)
                  do {
                    var outerX_2 = inductionVariable_31;
                    inductionVariable_31 = inductionVariable_31 + 1 | 0;
                    if (outerX_2 > 0) {
                      row_4.h('\u2502');
                    }
                    var inductionVariable_32 = 0;
                    if (inductionVariable_32 < s3)
                      do {
                        var innerX_3 = inductionVariable_32;
                        inductionVariable_32 = inductionVariable_32 + 1 | 0;
                        if (innerX_3 > 0) {
                          row_4.h(' ');
                        }
                        var cell_1 = renderedValues.p(encloseNDim$lookupByCoords(indexes, multipliers, outerY_0, outerX_2, innerY_0, innerX_3));
                        var index_21 = imul(outerX_2, s3) + innerX_3 | 0;
                        rightJustified(row_4, cell_1.y58(internalRow_0), colWidths[index_21]);
                      }
                       while (inductionVariable_32 < s3);
                  }
                   while (inductionVariable_31 < s1);
                row_4.h(doubleBoxed ? '\u2551' : '\u2503');
                content.h(row_4);
              }
               while (inductionVariable_28 < last_1);
          }
           while (inductionVariable_25 < s2);
      }
       while (inductionVariable_22 < s0);
    // Inline function 'kotlin.let' call
    var row_5 = ArrayList_init_$Create$();
    row_5.h(doubleBoxed ? '\u255A' : '\u2517');
    if (yLabelsWidth > 0) {
      // Inline function 'kotlin.repeat' call
      var times_10 = yLabelsWidth;
      var inductionVariable_33 = 0;
      if (inductionVariable_33 < times_10)
        do {
          var index_22 = inductionVariable_33;
          inductionVariable_33 = inductionVariable_33 + 1 | 0;
          row_5.h(doubleBoxed ? '\u2550' : '\u2501');
        }
         while (inductionVariable_33 < times_10);
      row_5.h(doubleBoxed ? '\u2569' : '\u253B');
    }
    // Inline function 'kotlin.repeat' call
    var inductionVariable_34 = 0;
    if (inductionVariable_34 < allColsWidth)
      do {
        var index_23 = inductionVariable_34;
        inductionVariable_34 = inductionVariable_34 + 1 | 0;
        row_5.h(doubleBoxed ? '\u2550' : '\u2501');
      }
       while (inductionVariable_34 < allColsWidth);
    row_5.h(doubleBoxed ? '\u255D' : '\u251B');
    content.h(row_5);
    return String2D_init_$Create$_0(content).a59();
  }
  function renderStringValueOptionalQuotes(value, showQuotes) {
    var buf = StringBuilder_init_$Create$();
    if (showQuotes) {
      buf.i8('"');
    }
    var inductionVariable = 0;
    var last = value.n();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var v = value.h2k(i);
        if (!(v instanceof APLChar)) {
          throw IllegalStateException_init_$Create$('String contain non-chars');
        }
        var ch = v.m2z_1;
        var tmp;
        // Inline function 'kotlin.code' call
        var this_0 = _Char___init__impl__6a9atx(34);
        if (ch === Char__toInt_impl_vasixd(this_0)) {
          tmp = showQuotes;
        } else {
          tmp = false;
        }
        if (tmp)
          buf.i8('\\"');
        else {
          var tmp_0;
          // Inline function 'kotlin.code' call
          var this_1 = _Char___init__impl__6a9atx(92);
          if (ch === Char__toInt_impl_vasixd(this_1)) {
            tmp_0 = showQuotes;
          } else {
            tmp_0 = false;
          }
          if (tmp_0)
            buf.i8('\\\\');
          else {
            addCodepoint(buf, ch);
          }
        }
      }
       while (inductionVariable < last);
    if (showQuotes) {
      buf.i8('"');
    }
    return buf.toString();
  }
  function rightJustified(dest, s, width) {
    var inductionVariable = 0;
    var last = width - s.n() | 0;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        dest.h(' ');
      }
       while (inductionVariable < last);
    dest.q(s);
  }
  function encloseNDim$lookupByCoords(indexes, multipliers, a, b, c, d) {
    return (((!(indexes[0] == null) ? imul(DimensionMultipliers__get_impl_90rsg3(multipliers, ensureNotNull(indexes[0])), a) : 0) + (!(indexes[1] == null) ? imul(DimensionMultipliers__get_impl_90rsg3(multipliers, ensureNotNull(indexes[1])), b) : 0) | 0) + (!(indexes[2] == null) ? imul(DimensionMultipliers__get_impl_90rsg3(multipliers, ensureNotNull(indexes[2])), c) : 0) | 0) + d | 0;
  }
  function encloseNDim$widthOfOuterCol(s3, colWidths, colIndex) {
    var n = 0;
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < s3)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var index_0 = imul(colIndex, s3) + index | 0;
        n = n + colWidths[index_0] | 0;
      }
       while (inductionVariable < s3);
    return (n + s3 | 0) - 1 | 0;
  }
  function get_SINGLE_NEWLINE_REGEX() {
    _init_properties_stringutils_kt__16v0z2();
    return SINGLE_NEWLINE_REGEX;
  }
  var SINGLE_NEWLINE_REGEX;
  function get_HASH_AT_END_OF_LINE_REGEX() {
    _init_properties_stringutils_kt__16v0z2();
    return HASH_AT_END_OF_LINE_REGEX;
  }
  var HASH_AT_END_OF_LINE_REGEX;
  function reformatLines(_this__u8e3s4) {
    _init_properties_stringutils_kt__16v0z2();
    var tmp0 = trimIndent(_this__u8e3s4);
    var tmp1 = get_SINGLE_NEWLINE_REGEX();
    // Inline function 'kotlin.text.replace' call
    var transform = reformatLines$lambda;
    var tmp3 = tmp1.jb(tmp0, transform);
    // Inline function 'kotlin.text.replace' call
    return get_HASH_AT_END_OF_LINE_REGEX().ib(tmp3, '\n');
  }
  function reformatLines$lambda(result) {
    _init_properties_stringutils_kt__16v0z2();
    return ensureNotNull(result.wb().p(1)).sb_1 + toString_2(_Char___init__impl__6a9atx(32)) + ensureNotNull(result.wb().p(2)).sb_1;
  }
  var properties_initialized_stringutils_kt_qj00uo;
  function _init_properties_stringutils_kt__16v0z2() {
    if (!properties_initialized_stringutils_kt_qj00uo) {
      properties_initialized_stringutils_kt_qj00uo = true;
      // Inline function 'kotlin.text.toRegex' call
      var this_0 = '([^\\n#])\\n([^\\n])';
      SINGLE_NEWLINE_REGEX = Regex_init_$Create$(this_0);
      // Inline function 'kotlin.text.toRegex' call
      HASH_AT_END_OF_LINE_REGEX = Regex_init_$Create$('#\n');
    }
  }
  function CustomSyntax(name, environment, rulesList, instr, pos) {
    this.x4o_1 = name;
    this.y4o_1 = environment;
    this.z4o_1 = rulesList;
    this.a4p_1 = instr;
    this.b4p_1 = pos;
  }
  function processCustomSyntax(parser, customSyntax) {
    var bindings = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = customSyntax.z4o_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      element.b59(parser, bindings);
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(bindings, 10));
    var _iterator__ex2g4s_0 = bindings.k();
    while (_iterator__ex2g4s_0.l()) {
      var item = _iterator__ex2g4s_0.m();
      var tmp$ret$2 = new Pair(item.c59_1, item.d59_1);
      destination.h(tmp$ret$2);
    }
    var envBindings = destination;
    return Companion_instance_39.e59('CustomSyntax: ' + customSyntax.x4o_1.t3e(), customSyntax.a4p_1, customSyntax.y4o_1, envBindings, customSyntax.b4p_1);
  }
  function processDefsyntaxSub(parser, pos) {
    var tokeniser = parser.u4k_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tokeniser.n52();
      var token = _destruct__k2r9zo.de();
      var pos_0 = _destruct__k2r9zo.ee();
      if (token instanceof Symbol) {
        tmp$ret$0 = token;
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos_0);
      }
    }
    var name = tmp$ret$0;
    var tmp2 = 'defsyntaxsub: ' + name.t3e();
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
      var env = parser.z4k(tmp2, false, false);
      try {
        var rulesList = processPairs(parser);
        $l$block_0: {
          // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
          var _destruct__k2r9zo_0 = tokeniser.n52();
          var token_0 = _destruct__k2r9zo_0.de();
          var pos_1 = _destruct__k2r9zo_0.ee();
          if (token_0 instanceof OpenFnDef) {
            break $l$block_0;
          } else {
            throw new UnexpectedToken(token_0, pos_1);
          }
        }
        var instr = parser.t4o(CloseFnDef_getInstance());
        tokeniser.l4q_1.d4p(new CustomSyntax(name, parser.e4l(), rulesList, instr, pos));
        break $l$block_1;
      }finally {
        parser.b4l();
      }
    }
  }
  function processDefsyntax(parser, pos) {
    var tokeniser = parser.u4k_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tokeniser.n52();
      var token = _destruct__k2r9zo.de();
      var pos_0 = _destruct__k2r9zo.ee();
      if (token instanceof Symbol) {
        tmp$ret$0 = token;
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos_0);
      }
    }
    var triggerSymbol = tmp$ret$0;
    // Inline function 'com.dhsdevelopments.kap.APLParser.withEnvironment' call
    var name = 'defsyntax: ' + triggerSymbol.t3e();
    var env = parser.z4k(name, false, false);
    try {
      var rulesList = processPairs(parser);
      $l$block_0: {
        // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
        var _destruct__k2r9zo_0 = tokeniser.n52();
        var token_0 = _destruct__k2r9zo_0.de();
        var pos_1 = _destruct__k2r9zo_0.ee();
        if (token_0 instanceof OpenFnDef) {
          break $l$block_0;
        } else {
          throw new UnexpectedToken(token_0, pos_1);
        }
      }
      var instr = parser.t4o(CloseFnDef_getInstance());
      tokeniser.l4q_1.w4o(new CustomSyntax(triggerSymbol, parser.e4l(), rulesList, instr, pos));
      return LiteralSymbol_init_$Create$(triggerSymbol, pos);
    }finally {
      parser.b4l();
    }
  }
  function SyntaxRuleVariableBinding(name, value) {
    this.c59_1 = name;
    this.d59_1 = value;
  }
  function Companion_37() {
  }
  protoOf(Companion_37).e59 = function (name, instr, env, bindings, pos) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(bindings, 10));
    var _iterator__ex2g4s = bindings.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var b = item.de();
      var instr_0 = item.ee();
      var tmp$ret$0 = new Pair(new StackStorageRef(b), instr_0);
      destination.h(tmp$ret$0);
    }
    var refs = destination;
    return new CallWithVarInstruction(name, instr, env, refs, pos);
  };
  var Companion_instance_39;
  function Companion_getInstance_39() {
    return Companion_instance_39;
  }
  function CallWithVarInstruction(name, instr, env, refs, pos) {
    Instruction.call(this, pos);
    this.g59_1 = name;
    this.h59_1 = instr;
    this.i59_1 = env;
    this.j59_1 = refs;
  }
  protoOf(CallWithVarInstruction).j31 = function (context) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.j59_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var envBinding = item.de();
      var instr = item.ee();
      var tmp$ret$0 = new Pair(envBinding, instr.j31(context));
      destination.h(tmp$ret$0);
    }
    var results = destination;
    var tmp2 = this.i59_1;
    var tmp3 = this.g59_1;
    // Inline function 'com.dhsdevelopments.kap.withLinkedContext' call
    var pos = this.i31_1;
    // Inline function 'com.dhsdevelopments.kap.StorageStack.withStackFrame' call
    var this_1 = currentStorageStack();
    var frame = StorageStackFrame_init_$Create$(this_1, tmp2, tmp3, pos);
    this_1.r3b_1.h(frame);
    var result;
    try {
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s_0 = results.k();
      while (_iterator__ex2g4s_0.l()) {
        var element = _iterator__ex2g4s_0.m();
        var envBinding_0 = element.de();
        var result_0 = element.ee();
        context.t4p(envBinding_0, result_0);
      }
      result = this.h59_1.j31(context);
    } catch ($p) {
      if ($p instanceof ReturnValue) {
        var retValue = $p;
        if (retValue.t4j_1 === tmp2) {
          result = retValue.s4j_1;
        } else {
          throw retValue;
        }
      } else {
        throw $p;
      }
    }
    finally {
      var removed = removeLast(this_1.r3b_1);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      frame.i4m();
    }
    return result;
  };
  protoOf(CallWithVarInstruction).b1h = function () {
    return listOf_0(this.h59_1);
  };
  protoOf(CallWithVarInstruction).x4m = function (updatedChildList, newPos) {
    return new CallWithVarInstruction(this.g59_1, updatedChildList.p(0), this.i59_1, this.j59_1, newPos);
  };
  function processPairs(parser) {
    var tmp0 = parser.u4k_1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof OpenParen) {
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var rulesList = ArrayList_init_$Create$();
    var tmp1 = parser.u4k_1;
    // Inline function 'com.dhsdevelopments.kap.TokenGenerator.iterateUntilToken' call
    var endToken = CloseParen_getInstance();
    $l$loop: while (true) {
      var _destruct__k2r9zo_0 = tmp1.n52();
      var token_0 = _destruct__k2r9zo_0.de();
      var pos_0 = _destruct__k2r9zo_0.ee();
      if (equals(token_0, endToken)) {
        break $l$loop;
      }
      if (token_0 instanceof Symbol) {
        processPair(parser, rulesList, token_0, pos_0);
      } else {
        throw new UnexpectedToken(token_0, pos_0);
      }
    }
    return rulesList;
  }
  function processPair(parser, curr, token, pos) {
    var tokeniser = parser.u4k_1;
    processPair$ensureKeyword(tokeniser, pos, token);
    switch (token.h2j_1) {
      case 'constant':
        var tmp$ret$0;
        $l$block: {
          // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
          var _destruct__k2r9zo = tokeniser.n52();
          var token_0 = _destruct__k2r9zo.de();
          var pos_0 = _destruct__k2r9zo.ee();
          if (token_0 instanceof Symbol) {
            tmp$ret$0 = token_0;
            break $l$block;
          } else {
            throw new UnexpectedToken(token_0, pos_0);
          }
        }

        curr.h(new ConstantSyntaxRule(tmp$ret$0));
        break;
      case 'special':
        curr.h(Companion_instance_40.k59(tokeniser));
        break;
      case 'value':
        var tmp = parser.e4l();
        var tmp$ret$1;
        $l$block_0: {
          // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
          var _destruct__k2r9zo_0 = tokeniser.n52();
          var token_1 = _destruct__k2r9zo_0.de();
          var pos_1 = _destruct__k2r9zo_0.ee();
          if (token_1 instanceof Symbol) {
            tmp$ret$1 = token_1;
            break $l$block_0;
          } else {
            throw new UnexpectedToken(token_1, pos_1);
          }
        }

        curr.h(new ValueSyntaxRule(tmp.s4o(tmp$ret$1)));
        break;
      case 'string':
        var tmp_0 = parser.e4l();
        var tmp$ret$2;
        $l$block_1: {
          // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
          var _destruct__k2r9zo_1 = tokeniser.n52();
          var token_2 = _destruct__k2r9zo_1.de();
          var pos_2 = _destruct__k2r9zo_1.ee();
          if (token_2 instanceof Symbol) {
            tmp$ret$2 = token_2;
            break $l$block_1;
          } else {
            throw new UnexpectedToken(token_2, pos_2);
          }
        }

        curr.h(new StringSyntaxRule(tmp_0.s4o(tmp$ret$2)));
        break;
      case 'function':
        var tmp_1 = parser.e4l();
        var tmp$ret$3;
        $l$block_2: {
          // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
          var _destruct__k2r9zo_2 = tokeniser.n52();
          var token_3 = _destruct__k2r9zo_2.de();
          var pos_3 = _destruct__k2r9zo_2.ee();
          if (token_3 instanceof Symbol) {
            tmp$ret$3 = token_3;
            break $l$block_2;
          } else {
            throw new UnexpectedToken(token_3, pos_3);
          }
        }

        curr.h(new BFunctionSyntaxRule(tmp_1.s4o(tmp$ret$3)));
        break;
      case 'nfunction':
        var tmp_2 = parser.e4l();
        var tmp$ret$4;
        $l$block_3: {
          // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
          var _destruct__k2r9zo_3 = tokeniser.n52();
          var token_4 = _destruct__k2r9zo_3.de();
          var pos_4 = _destruct__k2r9zo_3.ee();
          if (token_4 instanceof Symbol) {
            tmp$ret$4 = token_4;
            break $l$block_3;
          } else {
            throw new UnexpectedToken(token_4, pos_4);
          }
        }

        curr.h(new NFunctionSyntaxRule(tmp_2.s4o(tmp$ret$4)));
        break;
      case 'exprfunction':
        var tmp_3 = parser.e4l();
        var tmp$ret$5;
        $l$block_4: {
          // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
          var _destruct__k2r9zo_4 = tokeniser.n52();
          var token_5 = _destruct__k2r9zo_4.de();
          var pos_5 = _destruct__k2r9zo_4.ee();
          if (token_5 instanceof Symbol) {
            tmp$ret$5 = token_5;
            break $l$block_4;
          } else {
            throw new UnexpectedToken(token_5, pos_5);
          }
        }

        curr.h(new ExprFunctionSyntaxRule(tmp_3.s4o(tmp$ret$5)));
        break;
      case 'nexprfunction':
        var tmp_4 = parser.e4l();
        var tmp$ret$6;
        $l$block_5: {
          // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
          var _destruct__k2r9zo_5 = tokeniser.n52();
          var token_6 = _destruct__k2r9zo_5.de();
          var pos_6 = _destruct__k2r9zo_5.ee();
          if (token_6 instanceof Symbol) {
            tmp$ret$6 = token_6;
            break $l$block_5;
          } else {
            throw new UnexpectedToken(token_6, pos_6);
          }
        }

        curr.h(new NExprFunctionSyntaxRule(tmp_4.s4o(tmp$ret$6)));
        break;
      case 'optional':
        curr.h(processOptional(parser));
        break;
      case 'repeat':
        curr.h(processRepeat(parser));
        break;
      default:
        throw new ParseException('Unexpected tag: ' + token.t3e());
    }
  }
  function ConstantSyntaxRule(symbolName) {
    this.l59_1 = symbolName;
  }
  protoOf(ConstantSyntaxRule).m59 = function (token) {
    return token === this.l59_1;
  };
  protoOf(ConstantSyntaxRule).b59 = function (parser, syntaxRuleBindings) {
    var tmp0 = parser.u4k_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenAndPosWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof Symbol) {
        tmp$ret$0 = new Pair(token, pos);
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var _destruct__k2r9zo_0 = tmp$ret$0;
    var sym = _destruct__k2r9zo_0.de();
    var pos_0 = _destruct__k2r9zo_0.ee();
    if (!(sym === this.l59_1)) {
      throw new SyntaxRuleMismatch(this.l59_1, sym, pos_0);
    }
  };
  function Companion_38() {
  }
  protoOf(Companion_38).k59 = function (tokeniser) {
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenAndPosWithType' call
      var _destruct__k2r9zo = tokeniser.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof Symbol) {
        tmp$ret$0 = new Pair(token, pos);
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var _destruct__k2r9zo_0 = tmp$ret$0;
    var symbol = _destruct__k2r9zo_0.de();
    var pos_0 = _destruct__k2r9zo_0.ee();
    if (!equals(symbol.i2j_1, tokeniser.l4q_1.i3i().a3k_1)) {
      throw new ParseException('Special type must be a keyword', pos_0);
    }
    var tmp;
    switch (symbol.h2j_1) {
      case 'openBrace':
        tmp = OpenFnDef_getInstance();
        break;
      case 'closeBrace':
        tmp = CloseFnDef_getInstance();
        break;
      case 'newline':
        tmp = Newline_getInstance();
        break;
      default:
        throw new ParseException('Invalid special token', pos_0);
    }
    var token_0 = tmp;
    return new TokenSyntaxRule(token_0);
  };
  var Companion_instance_40;
  function Companion_getInstance_40() {
    return Companion_instance_40;
  }
  function TokenSyntaxRule(matchToken) {
    this.n59_1 = matchToken;
  }
  protoOf(TokenSyntaxRule).m59 = function (token) {
    return equals(this.n59_1, token);
  };
  protoOf(TokenSyntaxRule).b59 = function (parser, syntaxRuleBindings) {
    var tmp0 = parser.u4k_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenAndPosWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof Token) {
        tmp$ret$0 = new Pair(token, pos);
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var _destruct__k2r9zo_0 = tmp$ret$0;
    var token_0 = _destruct__k2r9zo_0.de();
    var pos_0 = _destruct__k2r9zo_0.ee();
    if (!equals(this.n59_1, token_0)) {
      throw new ParseException('Expected token ' + this.n59_1.u4j() + ', found: ' + token_0.u4j(), pos_0);
    }
  };
  function ValueSyntaxRule(variable) {
    this.o59_1 = variable;
  }
  protoOf(ValueSyntaxRule).m59 = function (token) {
    return token instanceof OpenParen;
  };
  protoOf(ValueSyntaxRule).b59 = function (parser, syntaxRuleBindings) {
    var tmp0 = parser.u4k_1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof OpenParen) {
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var instr = parser.t4o(CloseParen_getInstance());
    syntaxRuleBindings.h(new SyntaxRuleVariableBinding(this.o59_1, instr));
  };
  function StringSyntaxRule(variable) {
    this.p59_1 = variable;
  }
  protoOf(StringSyntaxRule).m59 = function (token) {
    return token instanceof StringToken;
  };
  protoOf(StringSyntaxRule).b59 = function (parser, syntaxRuleBindings) {
    var tmp0 = parser.u4k_1;
    var tmp$ret$0;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenAndPosWithType' call
      var _destruct__k2r9zo = tmp0.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof StringToken) {
        tmp$ret$0 = new Pair(token, pos);
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var _destruct__k2r9zo_0 = tmp$ret$0;
    var token_0 = _destruct__k2r9zo_0.de();
    var pos_0 = _destruct__k2r9zo_0.ee();
    syntaxRuleBindings.h(new SyntaxRuleVariableBinding(this.p59_1, LiteralStringValue_init_$Create$(token_0.z56_1, pos_0)));
  };
  function BFunctionSyntaxRule(variable) {
    FunctionSyntaxRule.call(this, variable);
  }
  protoOf(BFunctionSyntaxRule).r59 = function () {
    return OpenFnDef_getInstance();
  };
  protoOf(BFunctionSyntaxRule).s59 = function () {
    return CloseFnDef_getInstance();
  };
  protoOf(BFunctionSyntaxRule).t59 = function () {
    return true;
  };
  function NFunctionSyntaxRule(variable) {
    FunctionSyntaxRule.call(this, variable);
  }
  protoOf(NFunctionSyntaxRule).r59 = function () {
    return OpenFnDef_getInstance();
  };
  protoOf(NFunctionSyntaxRule).s59 = function () {
    return CloseFnDef_getInstance();
  };
  protoOf(NFunctionSyntaxRule).t59 = function () {
    return false;
  };
  function ExprFunctionSyntaxRule(variable) {
    FunctionSyntaxRule.call(this, variable);
  }
  protoOf(ExprFunctionSyntaxRule).r59 = function () {
    return OpenParen_getInstance();
  };
  protoOf(ExprFunctionSyntaxRule).s59 = function () {
    return CloseParen_getInstance();
  };
  protoOf(ExprFunctionSyntaxRule).t59 = function () {
    return true;
  };
  function NExprFunctionSyntaxRule(variable) {
    FunctionSyntaxRule.call(this, variable);
  }
  protoOf(NExprFunctionSyntaxRule).r59 = function () {
    return OpenParen_getInstance();
  };
  protoOf(NExprFunctionSyntaxRule).s59 = function () {
    return CloseParen_getInstance();
  };
  protoOf(NExprFunctionSyntaxRule).t59 = function () {
    return false;
  };
  function OptionalSyntaxRule(initialRule, rest) {
    this.y59_1 = initialRule;
    this.z59_1 = rest;
  }
  protoOf(OptionalSyntaxRule).m59 = function (token) {
    return true;
  };
  protoOf(OptionalSyntaxRule).b59 = function (parser, syntaxRuleBindings) {
    if (this.y59_1.m59(parser.u4k_1.a5a())) {
      this.y59_1.b59(parser, syntaxRuleBindings);
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = this.z59_1.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        element.b59(parser, syntaxRuleBindings);
      }
    }
  };
  function processOptional(parser) {
    var rulesList = processPairs(parser);
    if (rulesList.o()) {
      throw new ParseException('Optional syntax rules must have at least one rule');
    }
    return new OptionalSyntaxRule(rulesList.p(0), drop(rulesList, 1));
  }
  function processRepeat(parser) {
    var tokeniser = parser.u4k_1;
    $l$block: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo = tokeniser.n52();
      var token = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (token instanceof OpenParen) {
        break $l$block;
      } else {
        throw new UnexpectedToken(token, pos);
      }
    }
    var tmp = parser.e4l();
    var tmp$ret$1;
    $l$block_0: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_0 = tokeniser.n52();
      var token_0 = _destruct__k2r9zo_0.de();
      var pos_0 = _destruct__k2r9zo_0.ee();
      if (token_0 instanceof Symbol) {
        tmp$ret$1 = token_0;
        break $l$block_0;
      } else {
        throw new UnexpectedToken(token_0, pos_0);
      }
    }
    var name = tmp.s4o(tmp$ret$1);
    var tmp$ret$2;
    $l$block_1: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenAndPosWithType' call
      var _destruct__k2r9zo_1 = tokeniser.n52();
      var token_1 = _destruct__k2r9zo_1.de();
      var pos_1 = _destruct__k2r9zo_1.ee();
      if (token_1 instanceof Symbol) {
        tmp$ret$2 = new Pair(token_1, pos_1);
        break $l$block_1;
      } else {
        throw new UnexpectedToken(token_1, pos_1);
      }
    }
    var _destruct__k2r9zo_2 = tmp$ret$2;
    var subName = _destruct__k2r9zo_2.de();
    var subNamePos = _destruct__k2r9zo_2.ee();
    $l$block_2: {
      // Inline function 'com.dhsdevelopments.kap.TokenGenerator.nextTokenWithType' call
      var _destruct__k2r9zo_3 = tokeniser.n52();
      var token_2 = _destruct__k2r9zo_3.de();
      var pos_2 = _destruct__k2r9zo_3.ee();
      if (token_2 instanceof CloseParen) {
        break $l$block_2;
      } else {
        throw new UnexpectedToken(token_2, pos_2);
      }
    }
    var tmp0_elvis_lhs = tokeniser.l4q_1.e4p(subName);
    var tmp_0;
    if (tmp0_elvis_lhs == null) {
      throw new SyntaxSubRuleNotFound(subName, subNamePos);
    } else {
      tmp_0 = tmp0_elvis_lhs;
    }
    var subRules = tmp_0;
    return new RepeatSyntaxRule(name, subRules);
  }
  function FunctionSyntaxRule(variable) {
    this.u59_1 = variable;
  }
  protoOf(FunctionSyntaxRule).m59 = function (token) {
    return equals(token, this.r59());
  };
  protoOf(FunctionSyntaxRule).b59 = function (parser, syntaxRuleBindings) {
    var _destruct__k2r9zo = parser.u4k_1.n52();
    var token = _destruct__k2r9zo.de();
    var pos = _destruct__k2r9zo.ee();
    if (!equals(token, this.r59())) {
      throw new UnexpectedToken(token, pos);
    }
    var tmp;
    if (this.t59()) {
      tmp = parser.t57(this.s59(), 'function syntax rule: ' + this.u59_1.b4i_1.t3e(), false);
    } else {
      tmp = parser.s57(this.s59());
    }
    var fnDefinition = tmp;
    parser.e4l().f4l();
    syntaxRuleBindings.h(new SyntaxRuleVariableBinding(this.u59_1, new EvalLambdaFnx(fnDefinition.i2i(new FunctionInstantiation(parser.m52(), pos, parser.e4l())), pos)));
  };
  function RepeatSyntaxRule(name, customSyntax) {
    this.b5a_1 = name;
    this.c5a_1 = customSyntax;
  }
  protoOf(RepeatSyntaxRule).m59 = function (token) {
    return first(this.c5a_1.z4o_1).m59(token);
  };
  protoOf(RepeatSyntaxRule).b59 = function (parser, syntaxRuleBindings) {
    var tokeniser = parser.u4k_1;
    var instructions = ArrayList_init_$Create$();
    while (first(this.c5a_1.z4o_1).m59(tokeniser.a5a())) {
      instructions.h(processCustomSyntax(parser, this.c5a_1));
    }
    syntaxRuleBindings.h(new SyntaxRuleVariableBinding(this.b5a_1, new MultiResultInstr(instructions, this.c5a_1.b4p_1)));
  };
  function MultiResultInstr(instructionList, pos) {
    Instruction.call(this, pos);
    this.e5a_1 = instructionList;
  }
  protoOf(MultiResultInstr).j31 = function (context) {
    var tmp = 0;
    var tmp_0 = this.e5a_1.n();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = this.e5a_1.p(tmp_2).j31(context);
      tmp = tmp + 1 | 0;
    }
    var valueList = tmp_1;
    return new APLArrayImpl(dimensionsOfSize(new Int32Array([valueList.length])), valueList);
  };
  protoOf(MultiResultInstr).b1h = function () {
    return this.e5a_1;
  };
  protoOf(MultiResultInstr).x4m = function (updatedChildList, newPos) {
    return new MultiResultInstr(updatedChildList, newPos);
  };
  function processPair$ensureKeyword(tokeniser, $pos, symbol) {
    if (!equals(symbol.i2j_1, tokeniser.l4q_1.i3i().a3k_1)) {
      throw new ParseException('Tag is not a keyword: ' + symbol.t3e(), $pos);
    }
  }
  function Position(source, line, col, callerName, endLine, endCol) {
    callerName = callerName === VOID ? null : callerName;
    endLine = endLine === VOID ? null : endLine;
    endCol = endCol === VOID ? null : endCol;
    this.v4j_1 = source;
    this.w4j_1 = line;
    this.x4j_1 = col;
    this.y4j_1 = callerName;
    this.z4j_1 = endLine;
    this.a4k_1 = endCol;
  }
  protoOf(Position).y52 = function (s) {
    return this.g4w(VOID, VOID, VOID, s);
  };
  protoOf(Position).q4t = function (pos) {
    return this.g4w(VOID, VOID, VOID, VOID, pos.e4w(), pos.f4w());
  };
  protoOf(Position).h55 = function (pos) {
    return this.g4w(VOID, VOID, VOID, VOID, pos.w4j_1, pos.x4j_1);
  };
  protoOf(Position).f4w = function () {
    var tmp0_elvis_lhs = this.a4k_1;
    return tmp0_elvis_lhs == null ? this.x4j_1 + 1 | 0 : tmp0_elvis_lhs;
  };
  protoOf(Position).e4w = function () {
    var tmp0_elvis_lhs = this.z4j_1;
    return tmp0_elvis_lhs == null ? this.w4j_1 : tmp0_elvis_lhs;
  };
  protoOf(Position).f5a = function (source, line, col, callerName, endLine, endCol) {
    return new Position(source, line, col, callerName, endLine, endCol);
  };
  protoOf(Position).g4w = function (source, line, col, callerName, endLine, endCol, $super) {
    source = source === VOID ? this.v4j_1 : source;
    line = line === VOID ? this.w4j_1 : line;
    col = col === VOID ? this.x4j_1 : col;
    callerName = callerName === VOID ? this.y4j_1 : callerName;
    endLine = endLine === VOID ? this.z4j_1 : endLine;
    endCol = endCol === VOID ? this.a4k_1 : endCol;
    return $super === VOID ? this.f5a(source, line, col, callerName, endLine, endCol) : $super.f5a.call(this, source, line, col, callerName, endLine, endCol);
  };
  protoOf(Position).toString = function () {
    return 'Position(source=' + toString(this.v4j_1) + ', line=' + this.w4j_1 + ', col=' + this.x4j_1 + ', callerName=' + this.y4j_1 + ', endLine=' + this.z4j_1 + ', endCol=' + this.a4k_1 + ')';
  };
  protoOf(Position).hashCode = function () {
    var result = hashCode(this.v4j_1);
    result = imul(result, 31) + this.w4j_1 | 0;
    result = imul(result, 31) + this.x4j_1 | 0;
    result = imul(result, 31) + (this.y4j_1 == null ? 0 : getStringHashCode(this.y4j_1)) | 0;
    result = imul(result, 31) + (this.z4j_1 == null ? 0 : this.z4j_1) | 0;
    result = imul(result, 31) + (this.a4k_1 == null ? 0 : this.a4k_1) | 0;
    return result;
  };
  protoOf(Position).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Position))
      return false;
    var tmp0_other_with_cast = other instanceof Position ? other : THROW_CCE();
    if (!equals(this.v4j_1, tmp0_other_with_cast.v4j_1))
      return false;
    if (!(this.w4j_1 === tmp0_other_with_cast.w4j_1))
      return false;
    if (!(this.x4j_1 === tmp0_other_with_cast.x4j_1))
      return false;
    if (!(this.y4j_1 == tmp0_other_with_cast.y4j_1))
      return false;
    if (!(this.z4j_1 == tmp0_other_with_cast.z4j_1))
      return false;
    if (!(this.a4k_1 == tmp0_other_with_cast.a4k_1))
      return false;
    return true;
  };
  function Symbol(symbolName, namespace) {
    Token.call(this);
    this.h2j_1 = symbolName;
    this.i2j_1 = namespace;
  }
  protoOf(Symbol).toString = function () {
    return 'Symbol[name=' + this.t3e() + ']';
  };
  protoOf(Symbol).g5a = function (other) {
    var tmp;
    if (!(this.i2j_1.d4f_1 === other.i2j_1.d4f_1)) {
      tmp = get_sign_0(compareTo_3(this.i2j_1.d4f_1, other.i2j_1.d4f_1));
    } else {
      tmp = get_sign_0(compareTo_3(this.h2j_1, other.h2j_1));
    }
    return tmp;
  };
  protoOf(Symbol).d = function (other) {
    return this.g5a(other instanceof Symbol ? other : THROW_CCE());
  };
  protoOf(Symbol).u4j = function () {
    return this.t3e();
  };
  protoOf(Symbol).t3e = function () {
    return equals(this.i2j_1, Companion_getInstance_41().k2j_1) ? ':' + this.h2j_1 : this.i2j_1.d4f_1 + ':' + this.h2j_1;
  };
  function makeNamespaceName($this, name) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    $this.v4n_1;
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    $this.v4n_1;
    // Inline function 'kotlin.collections.getOrPut' call
    var this_0 = $this.w4n_1;
    var value = this_0.a2(name);
    var tmp;
    if (value == null) {
      var answer = new NamespaceName(name);
      this_0.j2(name, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    return tmp;
  }
  function Companion_39() {
    Companion_instance_41 = this;
    this.j2j_1 = new NamespaceName('kap');
    this.k2j_1 = new NamespaceName('keyword');
    this.l2j_1 = new NamespaceName('default');
    this.m2j_1 = new NamespaceName('anonymous');
  }
  var Companion_instance_41;
  function Companion_getInstance_41() {
    if (Companion_instance_41 == null)
      new Companion_39();
    return Companion_instance_41;
  }
  function NamespaceList() {
    Companion_getInstance_41();
    this.v4n_1 = new MPLock();
    this.w4n_1 = HashMap_init_$Create$();
    this.x4n_1 = HashMap_init_$Create$();
    this.y4n_1 = this.h5a(Companion_getInstance_41().j2j_1, true);
    this.z4n_1 = this.h5a(Companion_getInstance_41().k2j_1, true);
    this.a4o_1 = this.i5a(Companion_getInstance_41().l2j_1);
    var tmp0 = this.w4n_1;
    var tmp1 = this.y4n_1.a3k_1.d4f_1;
    // Inline function 'kotlin.collections.set' call
    var value = this.y4n_1.a3k_1;
    tmp0.j2(tmp1, value);
    var tmp3 = this.w4n_1;
    var tmp4 = this.z4n_1.a3k_1.d4f_1;
    // Inline function 'kotlin.collections.set' call
    var value_0 = this.z4n_1.a3k_1;
    tmp3.j2(tmp4, value_0);
    var tmp6 = this.w4n_1;
    var tmp7 = this.a4o_1.a3k_1.d4f_1;
    // Inline function 'kotlin.collections.set' call
    var value_1 = this.a4o_1.a3k_1;
    tmp6.j2(tmp7, value_1);
  }
  protoOf(NamespaceList).u4o = function (name, overrideDefaultImport) {
    var nsName = makeNamespaceName(this, name);
    return this.h5a(nsName, overrideDefaultImport);
  };
  protoOf(NamespaceList).h5a = function (nsName, overrideDefaultImport) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.v4n_1;
    // Inline function 'kotlin.collections.getOrPut' call
    var this_0 = this.x4n_1;
    var value = this_0.a2(nsName);
    var tmp;
    if (value == null) {
      var ns = new Namespace(nsName);
      if (!overrideDefaultImport) {
        ns.g57(this.y4n_1.a3k_1);
      }
      var answer = ns;
      this_0.j2(nsName, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    return tmp;
  };
  protoOf(NamespaceList).i5a = function (nsName, overrideDefaultImport, $super) {
    overrideDefaultImport = overrideDefaultImport === VOID ? false : overrideDefaultImport;
    return $super === VOID ? this.h5a(nsName, overrideDefaultImport) : $super.h5a.call(this, nsName, overrideDefaultImport);
  };
  protoOf(NamespaceList).j4p = function (namespaceName, name) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.v4n_1;
    var tmp0_elvis_lhs = this.x4n_1.a2(namespaceName);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var mainNs = tmp;
    var sym = mainNs.j5a(name, true);
    if (!(sym == null)) {
      return sym;
    }
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = mainNs.d3k_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var importedNs = this.x4n_1.a2(element);
      if (!(importedNs == null)) {
        var importedSymbol = importedNs.j5a(name, false);
        if (!(importedSymbol == null)) {
          return importedSymbol;
        }
      }
    }
    return null;
  };
  protoOf(NamespaceList).l4p = function (namespaceName) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.v4n_1;
    var ns = this.x4n_1.a2(namespaceName);
    // Inline function 'kotlin.require' call
    if (!!(ns == null)) {
      var message = 'Cannot find namespace: ' + namespaceName.toString();
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return ns;
  };
  function NamespaceEntry(symbol, exported) {
    this.k5a_1 = symbol;
    this.l5a_1 = exported;
  }
  function Namespace(name) {
    this.a3k_1 = name;
    this.b3k_1 = new MPLock();
    this.c3k_1 = HashMap_init_$Create$();
    this.d3k_1 = ArrayList_init_$Create$();
  }
  protoOf(Namespace).toString = function () {
    return 'Namespace[name=' + this.a3k_1.toString() + ']';
  };
  protoOf(Namespace).j5a = function (name, includePrivate) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.b3k_1;
    var e = this.c3k_1.a2(name);
    return e == null ? null : includePrivate ? e.k5a_1 : e.l5a_1 ? e.k5a_1 : null;
  };
  protoOf(Namespace).l4f = function (symbolName) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.b3k_1;
    var e = this.c3k_1.a2(symbolName);
    var tmp;
    if (e == null) {
      // Inline function 'kotlin.also' call
      var this_0 = new Symbol(symbolName, this.a3k_1);
      var tmp0 = this.c3k_1;
      // Inline function 'kotlin.collections.set' call
      var value = new NamespaceEntry(this_0, false);
      tmp0.j2(symbolName, value);
      tmp = this_0;
    } else {
      tmp = e.k5a_1;
    }
    return tmp;
  };
  protoOf(Namespace).g57 = function (namespace) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.b3k_1;
    if (!(namespace === this.a3k_1)) {
      this.d3k_1.h(namespace);
    }
  };
  protoOf(Namespace).e3k = function (symbolName) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.b3k_1;
    var e = this.c3k_1.a2(symbolName);
    var tmp;
    if (e == null) {
      // Inline function 'kotlin.also' call
      var this_0 = new NamespaceEntry(new Symbol(symbolName, this.a3k_1), true);
      // Inline function 'kotlin.collections.set' call
      this.c3k_1.j2(symbolName, this_0);
      tmp = this_0;
    } else {
      e.l5a_1 = true;
      tmp = e;
    }
    var e2 = tmp;
    return e2.k5a_1;
  };
  protoOf(Namespace).h57 = function (symbol) {
    // Inline function 'com.dhsdevelopments.kap.mpthread.withLocked' call
    this.b3k_1;
    var v = this.c3k_1.a2(symbol.h2j_1);
    if (v == null || !(v.k5a_1 === symbol)) {
      throw IllegalArgumentException_init_$Create$('Symbol is not interned in namespace');
    }
    v.l5a_1 = true;
  };
  function withNeg($this, isNegative, s) {
    return isNegative ? '-' + s : s;
  }
  function isNegationSign($this, ch) {
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(175);
    return ch === Char__toInt_impl_vasixd(this_0);
  }
  function isQuoteChar($this, ch) {
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(34);
    return ch === Char__toInt_impl_vasixd(this_0);
  }
  function isCommentChar($this, ch) {
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(9053);
    return ch === Char__toInt_impl_vasixd(this_0);
  }
  function isSymbolStartChar($this, ch) {
    var tmp;
    var tmp_0;
    var tmp_1;
    var tmp_2;
    if (isLetter(ch)) {
      tmp_2 = true;
    } else {
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(95);
      tmp_2 = ch === Char__toInt_impl_vasixd(this_0);
    }
    if (tmp_2) {
      tmp_1 = true;
    } else {
      // Inline function 'kotlin.code' call
      var this_1 = _Char___init__impl__6a9atx(58);
      tmp_1 = ch === Char__toInt_impl_vasixd(this_1);
    }
    if (tmp_1) {
      tmp_0 = true;
    } else {
      // Inline function 'kotlin.code' call
      var this_2 = _Char___init__impl__6a9atx(8710);
      tmp_0 = ch === Char__toInt_impl_vasixd(this_2);
    }
    if (tmp_0) {
      tmp = true;
    } else {
      // Inline function 'kotlin.code' call
      var this_3 = _Char___init__impl__6a9atx(9049);
      tmp = ch === Char__toInt_impl_vasixd(this_3);
    }
    return tmp;
  }
  function isSymbolContinuation($this, ch) {
    return isSymbolStartChar($this, ch) || isDigit(ch);
  }
  function isNumericConstituent($this, ch) {
    var tmp;
    var tmp_0;
    var tmp_1;
    if (isDigit(ch) || isNegationSign($this, ch)) {
      tmp_1 = true;
    } else {
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(46);
      tmp_1 = ch === Char__toInt_impl_vasixd(this_0);
    }
    if (tmp_1) {
      tmp_0 = true;
    } else {
      // Inline function 'kotlin.code' call
      var this_1 = _Char___init__impl__6a9atx(97);
      var containsLower = Char__toInt_impl_vasixd(this_1);
      var tmp_2;
      // Inline function 'kotlin.code' call
      var this_2 = _Char___init__impl__6a9atx(122);
      if (ch <= Char__toInt_impl_vasixd(this_2)) {
        tmp_2 = containsLower <= ch;
      } else {
        tmp_2 = false;
      }
      tmp_0 = tmp_2;
    }
    if (tmp_0) {
      tmp = true;
    } else {
      // Inline function 'kotlin.code' call
      var this_3 = _Char___init__impl__6a9atx(65);
      var containsLower_0 = Char__toInt_impl_vasixd(this_3);
      var tmp_3;
      // Inline function 'kotlin.code' call
      var this_4 = _Char___init__impl__6a9atx(90);
      if (ch <= Char__toInt_impl_vasixd(this_4)) {
        tmp_3 = containsLower_0 <= ch;
      } else {
        tmp_3 = false;
      }
      tmp = tmp_3;
    }
    return tmp;
  }
  function isCharQuote($this, ch) {
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(64);
    return ch === Char__toInt_impl_vasixd(this_0);
  }
  function isQuotePrefixChar($this, ch) {
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(39);
    return ch === Char__toInt_impl_vasixd(this_0);
  }
  function isNewline($this, ch) {
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(10);
    return ch === Char__toInt_impl_vasixd(this_0);
  }
  function isBackquote($this, ch) {
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(96);
    return ch === Char__toInt_impl_vasixd(this_0);
  }
  function collectSymbol($this, firstChar, content, posBeforeParse) {
    var buf = StringBuilder_init_$Create$();
    addCodepoint(buf, firstChar);
    var foundColon = false;
    var prevCharIsColon = false;
    $l$loop_1: while (true) {
      var tmp0_elvis_lhs = content.e3j();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        break $l$loop_1;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var ch = tmp;
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(58);
      if (ch === Char__toInt_impl_vasixd(this_0)) {
        if (foundColon) {
          throw new ParseException('Multiple : characters in symbol', posBeforeParse);
        }
        foundColon = true;
        prevCharIsColon = true;
      } else {
        if (prevCharIsColon) {
          prevCharIsColon = false;
          if (!isSymbolStartChar($this, ch)) {
            content.e4x();
            break $l$loop_1;
          }
        } else {
          if (!isSymbolContinuation($this, ch)) {
            content.e4x();
            break $l$loop_1;
          }
        }
      }
      addCodepoint(buf, ch);
    }
    var name = buf.toString();
    // Inline function 'kotlin.text.toRegex' call
    var this_1 = '^:([^:]+)$';
    var keywordResult = Regex_init_$Create$(this_1).hb(name);
    var tmp_0;
    if (!(keywordResult == null)) {
      tmp_0 = new Pair('keyword', ensureNotNull(keywordResult.wb().p(1)).sb_1);
    } else {
      // Inline function 'kotlin.text.toRegex' call
      var this_2 = '^(?:([^:]+):)?([^:]+)$';
      var tmp1_elvis_lhs = Regex_init_$Create$(this_2).hb(name);
      var tmp_1;
      if (tmp1_elvis_lhs == null) {
        throw new ParseException("Malformed symbol: '" + name + "'", posBeforeParse);
      } else {
        tmp_1 = tmp1_elvis_lhs;
      }
      var result = tmp_1;
      var symbolString = ensureNotNull(result.wb().p(2)).sb_1;
      var nsName = result.wb().p(1);
      tmp_0 = new Pair(nsName == null ? null : nsName.sb_1, symbolString);
    }
    return tmp_0;
  }
  function makeDoubleWithExponent($this, sign, value, exponentSign, exponent) {
    var valueWithExponent = !(exponentSign == null) && !(exponent == null) ? value + 'e' + withNeg($this, !(exponentSign === ''), exponent) : value;
    return toDouble(withNeg($this, !(sign === ''), valueWithExponent));
  }
  function TokenGenerator$Companion$NUMBER_PARSERS$lambda(result, _unused_var__etf5q3) {
    var groups = result.wb();
    var sign = ensureNotNull(groups.p(1)).sb_1;
    var s = ensureNotNull(groups.p(2)).sb_1;
    return new ParsedDouble(makeDoubleWithExponent(Companion_getInstance_42(), sign, s, null, null));
  }
  function TokenGenerator$Companion$NUMBER_PARSERS$lambda_0(result, _unused_var__etf5q3) {
    var groups = result.wb();
    var sign = ensureNotNull(groups.p(1)).sb_1;
    var s = ensureNotNull(groups.p(2)).sb_1;
    var exponentSign = ensureNotNull(groups.p(3)).sb_1;
    var exponent = ensureNotNull(groups.p(4)).sb_1;
    return new ParsedDouble(makeDoubleWithExponent(Companion_getInstance_42(), sign, s, exponentSign, exponent));
  }
  function TokenGenerator$Companion$NUMBER_PARSERS$lambda_1(result, _unused_var__etf5q3) {
    var groups = result.wb();
    var sign = ensureNotNull(groups.p(1));
    var s = ensureNotNull(groups.p(2));
    var v = of(Companion_instance, withNeg(Companion_getInstance_42(), !(sign.sb_1 === ''), s.sb_1));
    var tmp;
    if (compareTo_2(v, new Long(0, -2147483648)) >= 0 && compareTo_2(v, new Long(-1, 2147483647)) <= 0) {
      tmp = new ParsedLong(toLong(v));
    } else {
      tmp = new ParsedBigInt(v);
    }
    return tmp;
  }
  function TokenGenerator$Companion$NUMBER_PARSERS$lambda_2(result, _unused_var__etf5q3) {
    var groups = result.wb();
    var sign = ensureNotNull(groups.p(1));
    var s = ensureNotNull(groups.p(2));
    var v = of(Companion_instance, withNeg(Companion_getInstance_42(), !(sign.sb_1 === ''), s.sb_1), 16);
    var tmp;
    if (compareTo_2(v, new Long(0, -2147483648)) >= 0 && compareTo_2(v, new Long(-1, 2147483647)) <= 0) {
      tmp = new ParsedLong(toLong(v));
    } else {
      tmp = new ParsedBigInt(v);
    }
    return tmp;
  }
  function TokenGenerator$Companion$NUMBER_PARSERS$lambda_3(result, _unused_var__etf5q3) {
    var groups = result.wb();
    var sign = ensureNotNull(groups.p(1));
    var s = ensureNotNull(groups.p(2));
    var v = of(Companion_instance, withNeg(Companion_getInstance_42(), !(sign.sb_1 === ''), s.sb_1), 2);
    var tmp;
    if (compareTo_2(v, new Long(0, -2147483648)) >= 0 && compareTo_2(v, new Long(-1, 2147483647)) <= 0) {
      tmp = new ParsedLong(toLong(v));
    } else {
      tmp = new ParsedBigInt(v);
    }
    return tmp;
  }
  function TokenGenerator$Companion$NUMBER_PARSERS$lambda_4(result, _unused_var__etf5q3) {
    var groups = result.wb();
    var realSign = ensureNotNull(groups.p(1)).sb_1;
    var realS = ensureNotNull(groups.p(2)).sb_1;
    var tmp0_safe_receiver = groups.p(3);
    var realExpSign = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.sb_1;
    var tmp1_safe_receiver = groups.p(4);
    var realExpS = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.sb_1;
    var complexSign = ensureNotNull(groups.p(5)).sb_1;
    var complexS = ensureNotNull(groups.p(6)).sb_1;
    var tmp2_safe_receiver = groups.p(7);
    var complexExpSign = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.sb_1;
    var tmp3_safe_receiver = groups.p(8);
    var complexExpS = tmp3_safe_receiver == null ? null : tmp3_safe_receiver.sb_1;
    return new ParsedComplex(new Complex(makeDoubleWithExponent(Companion_getInstance_42(), realSign, realS, realExpSign, realExpS), makeDoubleWithExponent(Companion_getInstance_42(), complexSign, complexS, complexExpSign, complexExpS)));
  }
  function TokenGenerator$Companion$NUMBER_PARSERS$lambda_5(result, pos) {
    var groups = result.wb();
    var sign = !(ensureNotNull(groups.p(1)).sb_1 === '');
    var numString = ensureNotNull(groups.p(2)).sb_1;
    var denString = ensureNotNull(groups.p(3)).sb_1;
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.all' call
      var inductionVariable = 0;
      while (inductionVariable < charSequenceLength(denString)) {
        var element = charSequenceGet(denString, inductionVariable);
        inductionVariable = inductionVariable + 1 | 0;
        if (!(element === _Char___init__impl__6a9atx(48))) {
          tmp$ret$1 = false;
          break $l$block;
        }
      }
      tmp$ret$1 = true;
    }
    if (tmp$ret$1) {
      throw new IllegalNumberFormat('Denominator is zero', pos);
    }
    var res = make_0(Companion_getInstance(), numString, denString);
    var tmp;
    if (sign) {
      tmp = res.d3();
    } else {
      tmp = res;
    }
    var resWithSign = tmp;
    var tmp_0;
    if (equals(resWithSign.pj(), BigIntConstants_getInstance().ij_1)) {
      var b = resWithSign.oj();
      var tmp_1;
      if (rangeInLong(b)) {
        tmp_1 = new ParsedLong(toLong(b));
      } else {
        tmp_1 = new ParsedBigInt(b);
      }
      tmp_0 = tmp_1;
    } else {
      tmp_0 = new ParsedRational(resWithSign);
    }
    return tmp_0;
  }
  function TokenGenerator$Companion$NUMBER_PARSERS$lambda_6(result, _unused_var__etf5q3) {
    var groups = result.wb();
    var sign = !(ensureNotNull(groups.p(1)).sb_1 === '');
    var intRes = ensureNotNull(groups.p(2)).sb_1;
    var tmp0_safe_receiver = groups.p(3);
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.sb_1;
    var s = tmp1_elvis_lhs == null ? '' : tmp1_elvis_lhs;
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.indexOfLast' call
      var inductionVariable = charSequenceLength(s) - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          if (!(charSequenceGet(s, index) === _Char___init__impl__6a9atx(48))) {
            tmp$ret$1 = index;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$1 = -1;
    }
    // Inline function 'kotlin.text.substring' call
    var endIndex = tmp$ret$1 + 1 | 0;
    // Inline function 'kotlin.js.asDynamic' call
    var fracRes = s.substring(0, endIndex);
    var tmp;
    var tmp$ret$5;
    $l$block_0: {
      // Inline function 'kotlin.text.all' call
      var inductionVariable_0 = 0;
      while (inductionVariable_0 < charSequenceLength(fracRes)) {
        var element = charSequenceGet(fracRes, inductionVariable_0);
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        if (!(element === _Char___init__impl__6a9atx(48))) {
          tmp$ret$5 = false;
          break $l$block_0;
        }
      }
      tmp$ret$5 = true;
    }
    if (tmp$ret$5) {
      var v = of(Companion_instance, withNeg(Companion_getInstance_42(), sign, intRes));
      var tmp_0;
      if (rangeInLong(v)) {
        tmp_0 = new ParsedLong(toLong(v));
      } else {
        tmp_0 = new ParsedBigInt(v);
      }
      tmp = tmp_0;
    } else {
      // Inline function 'kotlin.text.map' call
      // Inline function 'kotlin.text.mapTo' call
      var destination = ArrayList_init_$Create$_0(charSequenceLength(fracRes));
      var inductionVariable_1 = 0;
      while (inductionVariable_1 < charSequenceLength(fracRes)) {
        var item = charSequenceGet(fracRes, inductionVariable_1);
        inductionVariable_1 = inductionVariable_1 + 1 | 0;
        var tmp$ret$6 = new Char(_Char___init__impl__6a9atx(48));
        destination.h(tmp$ret$6);
      }
      var zeroes = joinToString_0(destination, '');
      var b = make_0(Companion_getInstance(), intRes, '1');
      var res = b.qj(make_0(Companion_getInstance(), fracRes, '1' + zeroes));
      var tmp_1;
      if (sign) {
        tmp_1 = res.d3();
      } else {
        tmp_1 = res;
      }
      var resWithSign = tmp_1;
      tmp = new ParsedRational(resWithSign);
    }
    return tmp;
  }
  function skipUntilNewline($this) {
    $l$loop_0: while (true) {
      var tmp0_elvis_lhs = $this.m4q_1.e3j();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        break $l$loop_0;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var ch = tmp;
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(10);
      if (ch === Char__toInt_impl_vasixd(this_0)) {
        $this.m4q_1.e4x();
        break $l$loop_0;
      }
    }
    return Newline_getInstance();
  }
  function skipNextNewline($this) {
    while (true) {
      var _destruct__k2r9zo = $this.m4q_1.d4x();
      var ch = _destruct__k2r9zo.de();
      var pos = _destruct__k2r9zo.ee();
      if (ch == null)
        throw new ParseException('End of file after continuation character', pos);
      else if (isNewline(Companion_getInstance_42(), ch))
        return Whitespace_getInstance();
      else if (!isWhitespace_0(ch))
        throw new ParseException('Non-whitespace characters after continuation character', pos);
    }
  }
  function nextCodepointForCharacterOrError($this, posBeforeParse) {
    var tmp0_elvis_lhs = $this.m4q_1.e3j();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw new ParseException('Incomplete character in input', posBeforeParse);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function collectChar($this, pos) {
    var ch = nextCodepointForCharacterOrError($this, pos);
    var tmp;
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(92);
    if (ch === Char__toInt_impl_vasixd(this_0)) {
      tmp = processEscapedChar($this, pos);
    } else {
      tmp = new ParsedCharacter(ch);
    }
    return tmp;
  }
  function processEscapedChar($this, pos) {
    var ch = nextCodepointForCharacterOrError($this, pos);
    var tmp;
    // Inline function 'kotlin.code' call
    var this_0 = _Char___init__impl__6a9atx(110);
    if (ch === Char__toInt_impl_vasixd(this_0)) {
      // Inline function 'kotlin.code' call
      var this_1 = _Char___init__impl__6a9atx(10);
      tmp = Char__toInt_impl_vasixd(this_1);
    } else {
      // Inline function 'kotlin.code' call
      var this_2 = _Char___init__impl__6a9atx(114);
      if (ch === Char__toInt_impl_vasixd(this_2)) {
        // Inline function 'kotlin.code' call
        var this_3 = _Char___init__impl__6a9atx(13);
        tmp = Char__toInt_impl_vasixd(this_3);
      } else {
        // Inline function 'kotlin.code' call
        var this_4 = _Char___init__impl__6a9atx(101);
        if (ch === Char__toInt_impl_vasixd(this_4)) {
          tmp = 27;
        } else {
          // Inline function 'kotlin.code' call
          var this_5 = _Char___init__impl__6a9atx(48);
          if (ch === Char__toInt_impl_vasixd(this_5)) {
            tmp = 0;
          } else {
            // Inline function 'kotlin.code' call
            var this_6 = _Char___init__impl__6a9atx(115);
            if (ch === Char__toInt_impl_vasixd(this_6)) {
              // Inline function 'kotlin.code' call
              var this_7 = _Char___init__impl__6a9atx(32);
              tmp = Char__toInt_impl_vasixd(this_7);
            } else {
              // Inline function 'kotlin.code' call
              var this_8 = _Char___init__impl__6a9atx(116);
              if (ch === Char__toInt_impl_vasixd(this_8)) {
                // Inline function 'kotlin.code' call
                var this_9 = _Char___init__impl__6a9atx(9);
                tmp = Char__toInt_impl_vasixd(this_9);
              } else {
                // Inline function 'kotlin.code' call
                var this_10 = _Char___init__impl__6a9atx(92);
                if (ch === Char__toInt_impl_vasixd(this_10)) {
                  // Inline function 'kotlin.code' call
                  var this_11 = _Char___init__impl__6a9atx(92);
                  tmp = Char__toInt_impl_vasixd(this_11);
                } else {
                  // Inline function 'kotlin.code' call
                  var this_12 = _Char___init__impl__6a9atx(117);
                  if (ch === Char__toInt_impl_vasixd(this_12)) {
                    tmp = processUnicodeHexCode($this, pos);
                  } else {
                    // Inline function 'kotlin.code' call
                    var this_13 = _Char___init__impl__6a9atx(65);
                    var containsLower = Char__toInt_impl_vasixd(this_13);
                    var tmp_0;
                    // Inline function 'kotlin.code' call
                    var this_14 = _Char___init__impl__6a9atx(90);
                    if (ch <= Char__toInt_impl_vasixd(this_14)) {
                      tmp_0 = containsLower <= ch;
                    } else {
                      tmp_0 = false;
                    }
                    if (tmp_0) {
                      tmp = processUnicodeName($this, ch, pos);
                    } else {
                      throw new ParseException('Invalid character specification', pos);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var resultChar = tmp;
    return new ParsedCharacter(resultChar);
  }
  function processUnicodeHexCode($this, pos) {
    var buf = StringBuilder_init_$Create$();
    $l$loop_0: while (true) {
      var tmp0_elvis_lhs = $this.m4q_1.e3j();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        break $l$loop_0;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var ch = tmp;
      if (!isAlphanumeric(ch)) {
        $this.m4q_1.e4x();
        break $l$loop_0;
      }
      var tmp_0;
      var tmp_1;
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(48);
      var containsLower = Char__toInt_impl_vasixd(this_0);
      var tmp_2;
      // Inline function 'kotlin.code' call
      var this_1 = _Char___init__impl__6a9atx(57);
      if (ch <= Char__toInt_impl_vasixd(this_1)) {
        tmp_2 = containsLower <= ch;
      } else {
        tmp_2 = false;
      }
      if (tmp_2) {
        tmp_1 = true;
      } else {
        // Inline function 'kotlin.code' call
        var this_2 = _Char___init__impl__6a9atx(97);
        var containsLower_0 = Char__toInt_impl_vasixd(this_2);
        var tmp_3;
        // Inline function 'kotlin.code' call
        var this_3 = _Char___init__impl__6a9atx(122);
        if (ch <= Char__toInt_impl_vasixd(this_3)) {
          tmp_3 = containsLower_0 <= ch;
        } else {
          tmp_3 = false;
        }
        tmp_1 = tmp_3;
      }
      if (tmp_1) {
        tmp_0 = true;
      } else {
        // Inline function 'kotlin.code' call
        var this_4 = _Char___init__impl__6a9atx(65);
        var containsLower_1 = Char__toInt_impl_vasixd(this_4);
        var tmp_4;
        // Inline function 'kotlin.code' call
        var this_5 = _Char___init__impl__6a9atx(90);
        if (ch <= Char__toInt_impl_vasixd(this_5)) {
          tmp_4 = containsLower_1 <= ch;
        } else {
          tmp_4 = false;
        }
        tmp_0 = tmp_4;
      }
      if (!tmp_0) {
        throw new ParseException('Invalid character in hex code', pos);
      }
      addCodepoint(buf, ch);
    }
    var s = buf.toString();
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(s) === 0) {
      throw new ParseException('Hex code is blank', pos);
    }
    var tmp_5;
    try {
      tmp_5 = toInt_0(s, 16);
    } catch ($p) {
      var tmp_6;
      if ($p instanceof NumberFormatException) {
        var _unused_var__etf5q3 = $p;
        processUnicodeHexCode$throwInvalidHexCodeException(s, pos);
      } else {
        throw $p;
      }
      tmp_5 = tmp_6;
    }
    var code = tmp_5;
    if (code < 0 || code > 1114111) {
      processUnicodeHexCode$throwInvalidHexCodeException(s, pos);
    }
    return code;
  }
  function processUnicodeName($this, firstChar, pos) {
    var buf = StringBuilder_init_$Create$();
    addCodepoint(buf, firstChar);
    $l$loop_0: while (true) {
      var tmp0_elvis_lhs = $this.m4q_1.e3j();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        break $l$loop_0;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var ch = tmp;
      var tmp_0;
      var tmp_1;
      if (!isAlphanumeric(ch)) {
        // Inline function 'kotlin.code' call
        var this_0 = _Char___init__impl__6a9atx(95);
        tmp_1 = !(ch === Char__toInt_impl_vasixd(this_0));
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        // Inline function 'kotlin.code' call
        var this_1 = _Char___init__impl__6a9atx(45);
        tmp_0 = !(ch === Char__toInt_impl_vasixd(this_1));
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        $this.m4q_1.e4x();
        break $l$loop_0;
      }
      var tmp_2;
      var tmp_3;
      var tmp_4;
      // Inline function 'kotlin.code' call
      var this_2 = _Char___init__impl__6a9atx(65);
      var containsLower = Char__toInt_impl_vasixd(this_2);
      var tmp_5;
      // Inline function 'kotlin.code' call
      var this_3 = _Char___init__impl__6a9atx(90);
      if (ch <= Char__toInt_impl_vasixd(this_3)) {
        tmp_5 = containsLower <= ch;
      } else {
        tmp_5 = false;
      }
      if (tmp_5) {
        tmp_4 = true;
      } else {
        // Inline function 'kotlin.code' call
        var this_4 = _Char___init__impl__6a9atx(48);
        var containsLower_0 = Char__toInt_impl_vasixd(this_4);
        var tmp_6;
        // Inline function 'kotlin.code' call
        var this_5 = _Char___init__impl__6a9atx(57);
        if (ch <= Char__toInt_impl_vasixd(this_5)) {
          tmp_6 = containsLower_0 <= ch;
        } else {
          tmp_6 = false;
        }
        tmp_4 = tmp_6;
      }
      if (tmp_4) {
        tmp_3 = true;
      } else {
        // Inline function 'kotlin.code' call
        var this_6 = _Char___init__impl__6a9atx(95);
        tmp_3 = ch === Char__toInt_impl_vasixd(this_6);
      }
      if (tmp_3) {
        tmp_2 = true;
      } else {
        // Inline function 'kotlin.code' call
        var this_7 = _Char___init__impl__6a9atx(45);
        tmp_2 = ch === Char__toInt_impl_vasixd(this_7);
      }
      if (!tmp_2) {
        throw new ParseException('Invalid character in unicode name', pos);
      }
      addCodepoint(buf, ch);
    }
    var s = replace(buf.toString(), _Char___init__impl__6a9atx(95), _Char___init__impl__6a9atx(32));
    var tmp1_elvis_lhs = nameToCodepoint(s);
    var tmp_7;
    if (tmp1_elvis_lhs == null) {
      throw new ParseException("Invalid codepoint name: '" + s + "'", pos);
    } else {
      tmp_7 = tmp1_elvis_lhs;
    }
    return tmp_7;
  }
  function collectNumber($this) {
    var buf = StringBuilder_init_$Create$();
    var posStart = $this.m4q_1.q1n();
    var lastPos = posStart;
    loop: while (true) {
      var posBeforeParse = $this.m4q_1.q1n();
      var tmp0_elvis_lhs = $this.m4q_1.e3j();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        break loop;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var ch = tmp;
      if (!isNumericConstituent(Companion_getInstance_42(), ch)) {
        $this.m4q_1.e4x();
        break loop;
      }
      lastPos = posBeforeParse;
      addCodepoint(buf, ch);
    }
    var posForNumber = posStart.q4t(lastPos);
    var s = buf.toString();
    var _iterator__ex2g4s = Companion_getInstance_42().n5a_1.k();
    while (_iterator__ex2g4s.l()) {
      var parser = _iterator__ex2g4s.m();
      var result = parser.q5a(s, posForNumber);
      if (!(result == null)) {
        return result;
      }
    }
    throw new IllegalNumberFormat("Content cannot be parsed as a number: '" + s + "'", posForNumber);
  }
  function collectSymbolOrKeyword($this, firstChar, posBeforeParse) {
    var _destruct__k2r9zo = collectSymbol(Companion_getInstance_42(), firstChar, $this.m4q_1, posBeforeParse);
    var nsName = _destruct__k2r9zo.de();
    var symbolName = _destruct__k2r9zo.ee();
    var tmp;
    if (nsName == null) {
      var keyword = Companion_getInstance_42().m5a_1.a2(symbolName);
      if (!(keyword == null)) {
        return keyword;
      }
      var sym = $this.l4q_1.i4p(symbolName);
      if (!(sym == null)) {
        return sym;
      }
      tmp = null;
    } else {
      tmp = $this.l4q_1.x4e(nsName);
    }
    var namespace = tmp;
    return $this.l4q_1.s39(symbolName, namespace);
  }
  function collectString($this, posBeforeParse) {
    var buf = StringBuilder_init_$Create$();
    loop: while (true) {
      var tmp0_elvis_lhs = $this.m4q_1.e3j();
      var tmp;
      if (tmp0_elvis_lhs == null) {
        collectString$throwMissingEndQuoteError($this, posBeforeParse);
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var ch = tmp;
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(34);
      if (ch === Char__toInt_impl_vasixd(this_0))
        break loop;
      else {
        // Inline function 'kotlin.code' call
        var this_1 = _Char___init__impl__6a9atx(92);
        if (ch === Char__toInt_impl_vasixd(this_1)) {
          var tmp2_elvis_lhs = $this.m4q_1.e3j();
          var tmp_0;
          if (tmp2_elvis_lhs == null) {
            collectString$throwMissingEndQuoteError($this, posBeforeParse);
          } else {
            tmp_0 = tmp2_elvis_lhs;
          }
          var next = tmp_0;
          // Inline function 'kotlin.code' call
          var this_2 = _Char___init__impl__6a9atx(110);
          if (next === Char__toInt_impl_vasixd(this_2)) {
            // Inline function 'kotlin.code' call
            var this_3 = _Char___init__impl__6a9atx(10);
            var tmp$ret$3 = Char__toInt_impl_vasixd(this_3);
            addCodepoint(buf, tmp$ret$3);
          } else {
            // Inline function 'kotlin.code' call
            var this_4 = _Char___init__impl__6a9atx(114);
            if (next === Char__toInt_impl_vasixd(this_4)) {
              // Inline function 'kotlin.code' call
              var this_5 = _Char___init__impl__6a9atx(13);
              var tmp$ret$5 = Char__toInt_impl_vasixd(this_5);
              addCodepoint(buf, tmp$ret$5);
            } else {
              addCodepoint(buf, next);
            }
          }
        } else {
          addCodepoint(buf, ch);
        }
      }
    }
    return new StringToken(buf.toString());
  }
  function NumberParser(pattern, fn) {
    this.o5a_1 = pattern;
    this.p5a_1 = fn;
  }
  protoOf(NumberParser).q5a = function (s, pos) {
    var result = this.o5a_1.hb(s);
    var tmp;
    if (result == null) {
      tmp = null;
    } else {
      tmp = this.p5a_1(result, pos);
    }
    return tmp;
  };
  function Companion_40() {
    Companion_instance_42 = this;
    this.m5a_1 = hashMapOf([to('namespace', NamespaceToken_getInstance()), to('import', ImportToken_getInstance()), to('defsyntaxsub', DefsyntaxSubToken_getInstance()), to('defsyntax', DefsyntaxToken_getInstance()), to('use', IncludeToken_getInstance()), to('declare', DeclareToken_getInstance()), to('dynamicequal', DynassignToken_getInstance()), to('or', OrToken_getInstance()), to('and', AndToken_getInstance()), to('null', NilToken_getInstance())]);
    var tmp = this;
    // Inline function 'kotlin.text.toRegex' call
    var this_0 = '^(\xAF?)([0-9]+\\.[0-9]*)$';
    var tmp_0 = Regex_init_$Create$(this_0);
    var tmp_1 = new NumberParser(tmp_0, TokenGenerator$Companion$NUMBER_PARSERS$lambda);
    // Inline function 'kotlin.text.toRegex' call
    var this_1 = '^(\xAF?)([0-9]+(?:\\.[0-9]*)?)[eE](\xAF?)([0-9]+)$';
    var tmp_2 = Regex_init_$Create$(this_1);
    var tmp_3 = new NumberParser(tmp_2, TokenGenerator$Companion$NUMBER_PARSERS$lambda_0);
    // Inline function 'kotlin.text.toRegex' call
    var this_2 = '^(\xAF?)([0-9]+)$';
    var tmp_4 = Regex_init_$Create$(this_2);
    var tmp_5 = new NumberParser(tmp_4, TokenGenerator$Companion$NUMBER_PARSERS$lambda_1);
    // Inline function 'kotlin.text.toRegex' call
    var this_3 = '^(\xAF?)0x([0-9a-fA-F]+)$';
    var tmp_6 = Regex_init_$Create$(this_3);
    var tmp_7 = new NumberParser(tmp_6, TokenGenerator$Companion$NUMBER_PARSERS$lambda_2);
    // Inline function 'kotlin.text.toRegex' call
    var this_4 = '^(\xAF?)0b([01]+)$';
    var tmp_8 = Regex_init_$Create$(this_4);
    var tmp_9 = new NumberParser(tmp_8, TokenGenerator$Companion$NUMBER_PARSERS$lambda_3);
    // Inline function 'kotlin.text.toRegex' call
    var this_5 = '^(\xAF?)([0-9]+(?:\\.[0-9]*)?)(?:[eE](\xAF?)([0-9]+))?[jJ](\xAF?)([0-9]+(?:\\.[0-9]*)?)(?:[eE](\xAF?)([0-9]+))?$';
    var tmp_10 = Regex_init_$Create$(this_5);
    var tmp_11 = new NumberParser(tmp_10, TokenGenerator$Companion$NUMBER_PARSERS$lambda_4);
    // Inline function 'kotlin.text.toRegex' call
    var this_6 = '^(\xAF?)([0-9]+)r([0-9]+)$';
    var tmp_12 = Regex_init_$Create$(this_6);
    var tmp_13 = new NumberParser(tmp_12, TokenGenerator$Companion$NUMBER_PARSERS$lambda_5);
    // Inline function 'kotlin.text.toRegex' call
    var this_7 = '^(\xAF?)([0-9]+)(?:\\.([0-9]*))?r$';
    var tmp_14 = Regex_init_$Create$(this_7);
    tmp.n5a_1 = listOf([tmp_1, tmp_3, tmp_5, tmp_7, tmp_9, tmp_11, tmp_13, new NumberParser(tmp_14, TokenGenerator$Companion$NUMBER_PARSERS$lambda_6)]);
  }
  var Companion_instance_42;
  function Companion_getInstance_42() {
    if (Companion_instance_42 == null)
      new Companion_40();
    return Companion_instance_42;
  }
  function nextTokenOrSpace$mkpos(this$0, posBeforeParse, token) {
    var newPos = this$0.m4q_1.q1n();
    return new TokenWithPosition(token, posBeforeParse.g4w(VOID, VOID, VOID, VOID, newPos.w4j_1, newPos.x4j_1));
  }
  function processUnicodeHexCode$throwInvalidHexCodeException(s, $pos) {
    throw new ParseException('Invalid hex code: ' + s, $pos);
  }
  function collectString$throwMissingEndQuoteError(this$0, $posBeforeParse) {
    var pos = this$0.m4q_1.q1n();
    throw new ParseException('End of input in the middle of string', $posBeforeParse.g4w(VOID, VOID, VOID, VOID, pos.w4j_1, pos.x4j_1));
  }
  function TokenGenerator(engine, contentArg) {
    Companion_getInstance_42();
    this.l4q_1 = engine;
    this.m4q_1 = new PushBackCharacterProvider(contentArg);
    this.n4q_1 = ArrayList_init_$Create$();
    this.o4q_1 = hashMapOf([to('(', OpenParen_getInstance()), to(')', CloseParen_getInstance()), to('{', OpenFnDef_getInstance()), to('}', CloseFnDef_getInstance()), to('[', OpenBracket_getInstance()), to(']', CloseBracket_getInstance()), to('\u2190', LeftArrow_getInstance()), to('\u25CA', StatementSeparator_getInstance()), to('\u22C4', StatementSeparator_getInstance()), to('\u2207', FnDefSym_getInstance()), to('\u21D0', FnDefArrow_getInstance()), to('\u236C', APLNullSym_getInstance()), to('\u03BB', LambdaToken_getInstance()), to('\u235E', ApplyToken_getInstance()), to(';', ListSeparator_getInstance()), to('\xAB', LeftForkToken_getInstance()), to('\xBB', RightForkToken_getInstance()), to('.', MemberDereferenceToken_getInstance()), to('\u2360', MethodCallToken_getInstance()), to('\u27E6', FunctionCallOpenParen_getInstance()), to('\u27E7', FunctionCallCloseParen_getInstance()), to('\u29BB', NilToken_getInstance())]);
    this.p4q_1 = false;
  }
  protoOf(TokenGenerator).a5a = function () {
    var res = this.n52();
    this.l52(res);
    return res.o52_1;
  };
  protoOf(TokenGenerator).h1l = function () {
    if (!this.p4q_1) {
      this.m4q_1.h1l();
      this.p4q_1 = true;
    }
  };
  protoOf(TokenGenerator).g55 = function () {
    var tmp;
    if (this.n4q_1.o()) {
      tmp = this.m4q_1.q1n();
    } else {
      var p = last(this.n4q_1).p52_1;
      tmp = new Position(this.m4q_1.w4w_1, p.w4j_1, p.x4j_1);
    }
    return tmp;
  };
  protoOf(TokenGenerator).r5a = function () {
    var posBeforeParse = this.g55();
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!this.n4q_1.o()) {
      return removeLast(this.n4q_1);
    }
    // Inline function 'kotlin.require' call
    if (!!this.p4q_1) {
      var message = 'tokeniser has been closed';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var ch = this.m4q_1.e3j();
    if (ch == null) {
      this.h1l();
      return nextTokenOrSpace$mkpos(this, posBeforeParse, EndOfFile_getInstance());
    }
    var tmp0_safe_receiver = this.o4q_1.a2(charToString(ch));
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.also' call
      return nextTokenOrSpace$mkpos(this, posBeforeParse, tmp0_safe_receiver);
    }
    var tmp;
    if (this.l4q_1.b4o(charToString(ch))) {
      var name = charToString(ch);
      tmp = this.l4q_1.h4p(name);
    } else if (isNegationSign(Companion_getInstance_42(), ch) || isDigit(ch)) {
      this.m4q_1.e4x();
      tmp = collectNumber(this);
    } else if (isNewline(Companion_getInstance_42(), ch)) {
      tmp = Newline_getInstance();
    } else if (isWhitespace_0(ch)) {
      tmp = Whitespace_getInstance();
    } else if (isCharQuote(Companion_getInstance_42(), ch)) {
      tmp = collectChar(this, posBeforeParse);
    } else if (isSymbolStartChar(Companion_getInstance_42(), ch)) {
      tmp = collectSymbolOrKeyword(this, ch, posBeforeParse);
    } else if (isQuoteChar(Companion_getInstance_42(), ch)) {
      tmp = collectString(this, posBeforeParse);
    } else if (isCommentChar(Companion_getInstance_42(), ch)) {
      skipUntilNewline(this);
      tmp = Comment_getInstance();
    } else if (isQuotePrefixChar(Companion_getInstance_42(), ch)) {
      tmp = QuotePrefix_getInstance();
    } else if (isBackquote(Companion_getInstance_42(), ch)) {
      tmp = skipNextNewline(this);
    } else {
      throw new UnexpectedSymbol(ch, posBeforeParse);
    }
    return nextTokenOrSpace$mkpos(this, posBeforeParse, tmp);
  };
  protoOf(TokenGenerator).l52 = function (token) {
    this.n4q_1.h(token);
  };
  protoOf(TokenGenerator).n52 = function () {
    while (true) {
      var tokenAndPos = this.r5a();
      if (!equals(tokenAndPos.o52_1, Whitespace_getInstance()) && !equals(tokenAndPos.o52_1, Comment_getInstance())) {
        return tokenAndPos;
      }
    }
  };
  function NamespaceName(name) {
    this.d4f_1 = name;
  }
  protoOf(NamespaceName).toString = function () {
    return 'NamespaceName[name=' + this.d4f_1 + ']';
  };
  function SourceLocation() {
  }
  function EndOfFile() {
    EndOfFile_instance = this;
    Token.call(this);
  }
  var EndOfFile_instance;
  function EndOfFile_getInstance() {
    if (EndOfFile_instance == null)
      new EndOfFile();
    return EndOfFile_instance;
  }
  function Token() {
  }
  protoOf(Token).u4j = function () {
    var tmp0_elvis_lhs = getKClassFromExpression(this).b9();
    return tmp0_elvis_lhs == null ? toString(this) : tmp0_elvis_lhs;
  };
  function TokenWithPosition(token, pos) {
    this.o52_1 = token;
    this.p52_1 = pos;
  }
  protoOf(TokenWithPosition).de = function () {
    return this.o52_1;
  };
  protoOf(TokenWithPosition).ee = function () {
    return this.p52_1;
  };
  protoOf(TokenWithPosition).toString = function () {
    return 'TokenWithPosition(token=' + toString(this.o52_1) + ', pos=' + this.p52_1.toString() + ')';
  };
  protoOf(TokenWithPosition).hashCode = function () {
    var result = hashCode(this.o52_1);
    result = imul(result, 31) + this.p52_1.hashCode() | 0;
    return result;
  };
  protoOf(TokenWithPosition).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof TokenWithPosition))
      return false;
    var tmp0_other_with_cast = other instanceof TokenWithPosition ? other : THROW_CCE();
    if (!equals(this.o52_1, tmp0_other_with_cast.o52_1))
      return false;
    if (!this.p52_1.equals(tmp0_other_with_cast.p52_1))
      return false;
    return true;
  };
  function StatementSeparator() {
    StatementSeparator_instance = this;
    Token.call(this);
  }
  var StatementSeparator_instance;
  function StatementSeparator_getInstance() {
    if (StatementSeparator_instance == null)
      new StatementSeparator();
    return StatementSeparator_instance;
  }
  function Newline() {
    Newline_instance = this;
    Token.call(this);
  }
  var Newline_instance;
  function Newline_getInstance() {
    if (Newline_instance == null)
      new Newline();
    return Newline_instance;
  }
  function ListSeparator() {
    ListSeparator_instance = this;
    Token.call(this);
  }
  var ListSeparator_instance;
  function ListSeparator_getInstance() {
    if (ListSeparator_instance == null)
      new ListSeparator();
    return ListSeparator_instance;
  }
  function AndToken() {
    AndToken_instance = this;
    Token.call(this);
  }
  var AndToken_instance;
  function AndToken_getInstance() {
    if (AndToken_instance == null)
      new AndToken();
    return AndToken_instance;
  }
  function OrToken() {
    OrToken_instance = this;
    Token.call(this);
  }
  var OrToken_instance;
  function OrToken_getInstance() {
    if (OrToken_instance == null)
      new OrToken();
    return OrToken_instance;
  }
  function FunctionCallOpenParen() {
    FunctionCallOpenParen_instance = this;
    Token.call(this);
  }
  var FunctionCallOpenParen_instance;
  function FunctionCallOpenParen_getInstance() {
    if (FunctionCallOpenParen_instance == null)
      new FunctionCallOpenParen();
    return FunctionCallOpenParen_instance;
  }
  function FunctionCallCloseParen() {
    FunctionCallCloseParen_instance = this;
    Token.call(this);
  }
  var FunctionCallCloseParen_instance;
  function FunctionCallCloseParen_getInstance() {
    if (FunctionCallCloseParen_instance == null)
      new FunctionCallCloseParen();
    return FunctionCallCloseParen_instance;
  }
  function CloseParen() {
    CloseParen_instance = this;
    Token.call(this);
  }
  var CloseParen_instance;
  function CloseParen_getInstance() {
    if (CloseParen_instance == null)
      new CloseParen();
    return CloseParen_instance;
  }
  function CloseFnDef() {
    CloseFnDef_instance = this;
    Token.call(this);
  }
  var CloseFnDef_instance;
  function CloseFnDef_getInstance() {
    if (CloseFnDef_instance == null)
      new CloseFnDef();
    return CloseFnDef_instance;
  }
  function OpenFnDef() {
    OpenFnDef_instance = this;
    Token.call(this);
  }
  var OpenFnDef_instance;
  function OpenFnDef_getInstance() {
    if (OpenFnDef_instance == null)
      new OpenFnDef();
    return OpenFnDef_instance;
  }
  function OpenParen() {
    OpenParen_instance = this;
    Token.call(this);
  }
  var OpenParen_instance;
  function OpenParen_getInstance() {
    if (OpenParen_instance == null)
      new OpenParen();
    return OpenParen_instance;
  }
  function CloseBracket() {
    CloseBracket_instance = this;
    Token.call(this);
  }
  var CloseBracket_instance;
  function CloseBracket_getInstance() {
    if (CloseBracket_instance == null)
      new CloseBracket();
    return CloseBracket_instance;
  }
  function FnDefArrow() {
    FnDefArrow_instance = this;
    Token.call(this);
  }
  var FnDefArrow_instance;
  function FnDefArrow_getInstance() {
    if (FnDefArrow_instance == null)
      new FnDefArrow();
    return FnDefArrow_instance;
  }
  function ApplyToken() {
    ApplyToken_instance = this;
    Token.call(this);
  }
  var ApplyToken_instance;
  function ApplyToken_getInstance() {
    if (ApplyToken_instance == null)
      new ApplyToken();
    return ApplyToken_instance;
  }
  function MethodCallToken() {
    MethodCallToken_instance = this;
    Token.call(this);
  }
  var MethodCallToken_instance;
  function MethodCallToken_getInstance() {
    if (MethodCallToken_instance == null)
      new MethodCallToken();
    return MethodCallToken_instance;
  }
  function ParsedLong(value) {
    ConstantToken.call(this);
    this.f57_1 = value;
  }
  protoOf(ParsedLong).toString = function () {
    return 'ParsedLong[' + this.f57_1.toString() + ']';
  };
  function ParsedDouble(value) {
    ConstantToken.call(this);
    this.e57_1 = value;
  }
  protoOf(ParsedDouble).toString = function () {
    return 'ParsedDouble[' + this.e57_1 + ']';
  };
  function ParsedComplex(value) {
    ConstantToken.call(this);
    this.d57_1 = value;
  }
  protoOf(ParsedComplex).toString = function () {
    return 'ParsedComplex[' + this.d57_1.toString() + ']';
  };
  function ParsedBigInt(value) {
    ConstantToken.call(this);
    this.c57_1 = value;
  }
  protoOf(ParsedBigInt).toString = function () {
    return 'ParsedBigInt[' + BigInt__toString_impl_xmp9e6(this.c57_1) + ']';
  };
  function ParsedRational(value) {
    ConstantToken.call(this);
    this.b57_1 = value;
  }
  protoOf(ParsedRational).toString = function () {
    return 'ParsedRational[' + toString(this.b57_1) + ']';
  };
  function ParsedCharacter(value) {
    ConstantToken.call(this);
    this.a57_1 = value;
  }
  protoOf(ParsedCharacter).toString = function () {
    return 'ParsedCharacter[' + this.a57_1 + ']';
  };
  function LeftArrow() {
    LeftArrow_instance = this;
    Token.call(this);
  }
  var LeftArrow_instance;
  function LeftArrow_getInstance() {
    if (LeftArrow_instance == null)
      new LeftArrow();
    return LeftArrow_instance;
  }
  function DynassignToken() {
    DynassignToken_instance = this;
    Token.call(this);
  }
  var DynassignToken_instance;
  function DynassignToken_getInstance() {
    if (DynassignToken_instance == null)
      new DynassignToken();
    return DynassignToken_instance;
  }
  function FnDefSym() {
    FnDefSym_instance = this;
    Token.call(this);
  }
  var FnDefSym_instance;
  function FnDefSym_getInstance() {
    if (FnDefSym_instance == null)
      new FnDefSym();
    return FnDefSym_instance;
  }
  function APLNullSym() {
    APLNullSym_instance = this;
    Token.call(this);
  }
  var APLNullSym_instance;
  function APLNullSym_getInstance() {
    if (APLNullSym_instance == null)
      new APLNullSym();
    return APLNullSym_instance;
  }
  function NilToken() {
    NilToken_instance = this;
    ConstantToken.call(this);
  }
  var NilToken_instance;
  function NilToken_getInstance() {
    if (NilToken_instance == null)
      new NilToken();
    return NilToken_instance;
  }
  function StringToken(value) {
    ConstantToken.call(this);
    this.z56_1 = value;
  }
  protoOf(StringToken).toString = function () {
    return "StringToken['" + this.z56_1 + "']";
  };
  function QuotePrefix() {
    QuotePrefix_instance = this;
    Token.call(this);
  }
  var QuotePrefix_instance;
  function QuotePrefix_getInstance() {
    if (QuotePrefix_instance == null)
      new QuotePrefix();
    return QuotePrefix_instance;
  }
  function LambdaToken() {
    LambdaToken_instance = this;
    Token.call(this);
  }
  var LambdaToken_instance;
  function LambdaToken_getInstance() {
    if (LambdaToken_instance == null)
      new LambdaToken();
    return LambdaToken_instance;
  }
  function NamespaceToken() {
    NamespaceToken_instance = this;
    Token.call(this);
  }
  var NamespaceToken_instance;
  function NamespaceToken_getInstance() {
    if (NamespaceToken_instance == null)
      new NamespaceToken();
    return NamespaceToken_instance;
  }
  function ImportToken() {
    ImportToken_instance = this;
    Token.call(this);
  }
  var ImportToken_instance;
  function ImportToken_getInstance() {
    if (ImportToken_instance == null)
      new ImportToken();
    return ImportToken_instance;
  }
  function DefsyntaxSubToken() {
    DefsyntaxSubToken_instance = this;
    Token.call(this);
  }
  var DefsyntaxSubToken_instance;
  function DefsyntaxSubToken_getInstance() {
    if (DefsyntaxSubToken_instance == null)
      new DefsyntaxSubToken();
    return DefsyntaxSubToken_instance;
  }
  function DefsyntaxToken() {
    DefsyntaxToken_instance = this;
    Token.call(this);
  }
  var DefsyntaxToken_instance;
  function DefsyntaxToken_getInstance() {
    if (DefsyntaxToken_instance == null)
      new DefsyntaxToken();
    return DefsyntaxToken_instance;
  }
  function IncludeToken() {
    IncludeToken_instance = this;
    Token.call(this);
  }
  var IncludeToken_instance;
  function IncludeToken_getInstance() {
    if (IncludeToken_instance == null)
      new IncludeToken();
    return IncludeToken_instance;
  }
  function DeclareToken() {
    DeclareToken_instance = this;
    Token.call(this);
  }
  var DeclareToken_instance;
  function DeclareToken_getInstance() {
    if (DeclareToken_instance == null)
      new DeclareToken();
    return DeclareToken_instance;
  }
  function OpenBracket() {
    OpenBracket_instance = this;
    Token.call(this);
  }
  var OpenBracket_instance;
  function OpenBracket_getInstance() {
    if (OpenBracket_instance == null)
      new OpenBracket();
    return OpenBracket_instance;
  }
  function MemberDereferenceToken() {
    MemberDereferenceToken_instance = this;
    Token.call(this);
  }
  var MemberDereferenceToken_instance;
  function MemberDereferenceToken_getInstance() {
    if (MemberDereferenceToken_instance == null)
      new MemberDereferenceToken();
    return MemberDereferenceToken_instance;
  }
  function FileSourceLocation(file) {
    this.s5a_1 = file;
  }
  protoOf(FileSourceLocation).c4x = function () {
    return openInputCharFile(this.s5a_1);
  };
  protoOf(FileSourceLocation).toString = function () {
    return "FileSourceLocation[file='" + this.s5a_1 + "']";
  };
  protoOf(FileSourceLocation).p2 = function () {
    return this.s5a_1;
  };
  function LeftForkToken() {
    LeftForkToken_instance = this;
    Token.call(this);
  }
  var LeftForkToken_instance;
  function LeftForkToken_getInstance() {
    if (LeftForkToken_instance == null)
      new LeftForkToken();
    return LeftForkToken_instance;
  }
  function RightForkToken() {
    RightForkToken_instance = this;
    Token.call(this);
  }
  var RightForkToken_instance;
  function RightForkToken_getInstance() {
    if (RightForkToken_instance == null)
      new RightForkToken();
    return RightForkToken_instance;
  }
  function Whitespace() {
    Whitespace_instance = this;
    Token.call(this);
  }
  var Whitespace_instance;
  function Whitespace_getInstance() {
    if (Whitespace_instance == null)
      new Whitespace();
    return Whitespace_instance;
  }
  function Comment() {
    Comment_instance = this;
    Token.call(this);
  }
  var Comment_instance;
  function Comment_getInstance() {
    if (Comment_instance == null)
      new Comment();
    return Comment_instance;
  }
  function StringSourceLocation(sourceText) {
    this.t5a_1 = sourceText;
  }
  protoOf(StringSourceLocation).c4x = function () {
    return makeStringCharacterProvider(this.t5a_1);
  };
  function ConstantToken() {
    Token.call(this);
  }
  function CmpKey(value) {
    this.u5a_1 = value;
  }
  protoOf(CmpKey).x1 = function () {
    return this.u5a_1;
  };
  protoOf(CmpKey).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, APLValueKey) : false) {
      tmp = this.u5a_1.r2n(other.x1());
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(CmpKey).hashCode = function () {
    return this.u5a_1.h2q();
  };
  function NumericKey(value) {
    this.v5a_1 = value;
  }
  protoOf(NumericKey).x1 = function () {
    return this.v5a_1;
  };
  protoOf(NumericKey).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, APLValueKey) : false) {
      tmp = this.v5a_1.r2n(other.x1(), VOID, false);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(NumericKey).hashCode = function () {
    return this.v5a_1.i2q();
  };
  function Companion_41() {
    Companion_instance_43 = this;
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.w5a_1 = [getKClass(APLLong), getKClass(APLBigInt), getKClass(APLRational), getKClass(APLDouble), getKClass(APLComplex), getKClass(APLChar), getKClass(APLSymbol), getKClass(APLNilValue), getKClass(APLArray), getKClass(APLMap), getKClass(APLList), getKClass(APLTimestamp)];
  }
  protoOf(Companion_41).x5a = function (ref) {
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var indexedObject = this.w5a_1;
    var inductionVariable = 0;
    var last = indexedObject.length;
    while (inductionVariable < last) {
      var item = indexedObject[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      if (item.c9(ref)) {
        return _unary__edvuaz;
      }
    }
    return null;
  };
  var Companion_instance_43;
  function Companion_getInstance_43() {
    if (Companion_instance_43 == null)
      new Companion_41();
    return Companion_instance_43;
  }
  function APLValueKey() {
  }
  function APLValue$membersSequence$1($index, $length, $v) {
    this.y5a_1 = $index;
    this.z5a_1 = $length;
    this.a5b_1 = $v;
  }
  protoOf(APLValue$membersSequence$1).l = function () {
    return this.y5a_1._v < this.z5a_1;
  };
  protoOf(APLValue$membersSequence$1).m = function () {
    var _unary__edvuaz = this.y5a_1._v;
    this.y5a_1._v = _unary__edvuaz + 1 | 0;
    return this.a5b_1.h2k(_unary__edvuaz);
  };
  function APLValue$membersSequence$$inlined$Sequence$1($v) {
    this.b5b_1 = $v;
  }
  protoOf(APLValue$membersSequence$$inlined$Sequence$1).k = function () {
    var length = this.b5b_1.n();
    var index = {_v: 0};
    return new APLValue$membersSequence$1(index, length, this.b5b_1);
  };
  function APLValue() {
    Companion_getInstance_43();
  }
  protoOf(APLValue).t2q = function () {
    return _ArrayMemberType___get_isAtom__impl__6h2tm6(this.f2n());
  };
  protoOf(APLValue).a2q = function () {
    return this.z2p().p2();
  };
  protoOf(APLValue).c2q = function (withDiscard, $super) {
    withDiscard = withDiscard === VOID ? false : withDiscard;
    return $super === VOID ? this.b2q(withDiscard) : $super.b2q.call(this, withDiscard);
  };
  protoOf(APLValue).n2l = function () {
    return this.v2i() === 0;
  };
  protoOf(APLValue).u2i = function () {
    return this.v2i() === 0 ? ResizedArrayImpls_instance.p2l(size1Dimensions(), this.o2l()) : this;
  };
  protoOf(APLValue).r2n = function (reference, pos, typeDiscrimination, $super) {
    pos = pos === VOID ? null : pos;
    typeDiscrimination = typeDiscrimination === VOID ? true : typeDiscrimination;
    return $super === VOID ? this.h2n(reference, pos, typeDiscrimination) : $super.h2n.call(this, reference, pos, typeDiscrimination);
  };
  protoOf(APLValue).g2q = function (reference, pos, typeDiscrimination, $super) {
    pos = pos === VOID ? null : pos;
    typeDiscrimination = typeDiscrimination === VOID ? true : typeDiscrimination;
    return $super === VOID ? this.f2q(reference, pos, typeDiscrimination) : $super.f2q.call(this, reference, pos, typeDiscrimination);
  };
  protoOf(APLValue).r2k = function (withDiscard) {
    var m = this.m2l().z2r();
    var v = this.b2q(withDiscard);
    return v === this ? this : m.y2r() || withDiscard ? v : new MetadataOverrideArray(v, m);
  };
  protoOf(APLValue).x2g = function (withDiscard, $super) {
    withDiscard = withDiscard === VOID ? false : withDiscard;
    return $super === VOID ? this.r2k(withDiscard) : $super.r2k.call(this, withDiscard);
  };
  protoOf(APLValue).s2o = function () {
    return new CmpKey(this);
  };
  protoOf(APLValue).u2q = function () {
    return new NumericKey(this);
  };
  protoOf(APLValue).v2q = function () {
    var tmp;
    if (this.v2i() === 0) {
      tmp = this;
    } else if (this.n() === 1) {
      tmp = this.h2k(0);
    } else {
      throw IllegalStateException_init_$Create$('Expected a single element in array, found ' + this.n() + ' elements');
    }
    return tmp;
  };
  protoOf(APLValue).p2i = function (pos) {
    var tmp0_elvis_lhs = this.l2q();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new IncompatibleTypeException('Wanted a value of type number. Got: ' + this.a2q(), pos));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(APLValue).w2q = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.p2i(pos) : $super.p2i.call(this, pos);
  };
  protoOf(APLValue).n2q = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.m2q(pos) : $super.m2q.call(this, pos);
  };
  protoOf(APLValue).q2q = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.p2q(pos) : $super.p2q.call(this, pos);
  };
  protoOf(APLValue).y2k = function (pos) {
    var tmp = 0;
    var tmp_0 = this.n();
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = this.r2i(tmp_2, pos);
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  };
  protoOf(APLValue).s2q = function (pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.r2q(pos) : $super.r2q.call(this, pos);
  };
  protoOf(APLValue).l2p = function () {
    var v = this.g2k();
    var tmp;
    if (v.b2l()) {
      tmp = sequenceOf([v]);
    } else {
      // Inline function 'kotlin.sequences.Sequence' call
      tmp = new APLValue$membersSequence$$inlined$Sequence$1(v);
    }
    return tmp;
  };
  function Companion_42() {
  }
  protoOf(Companion_42).c4j = function (a, pos) {
    var a0 = a.g2k();
    if (!(a0 instanceof LambdaValue)) {
      throwAPLException(new IncompatibleTypeException('Expected a lambda value, got: ' + a0.z2p().p2(), pos));
    }
    return a0;
  };
  var Companion_instance_44;
  function Companion_getInstance_44() {
    return Companion_instance_44;
  }
  function LambdaValue$makeClosure$1(this$0) {
    this.g5b_1 = this$0;
    APLFunction.call(this, this$0.d3a_1.c2h(), listOf_0(this$0.d3a_1));
  }
  protoOf(LambdaValue$makeClosure$1).w2g = function (context, a, axis) {
    // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
    var frame = this.g5b_1.e3a_1;
    var stack = currentStorageStack().r3b_1;
    stack.h(frame);
    try {
      return this.g5b_1.d3a_1.w2g(context, a, axis);
    }finally {
      var removed = removeLast(stack);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  };
  protoOf(LambdaValue$makeClosure$1).a2h = function (context, a, b, axis) {
    // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
    var frame = this.g5b_1.e3a_1;
    var stack = currentStorageStack().r3b_1;
    stack.h(frame);
    try {
      return this.g5b_1.d3a_1.a2h(context, a, b, axis);
    }finally {
      var removed = removeLast(stack);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  };
  protoOf(LambdaValue$makeClosure$1).q2h = function (context, a, axis) {
    // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
    var frame = this.g5b_1.e3a_1;
    var stack = currentStorageStack().r3b_1;
    stack.h(frame);
    try {
      return this.g5b_1.d3a_1.q2h(context, a, axis);
    }finally {
      var removed = removeLast(stack);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  };
  protoOf(LambdaValue$makeClosure$1).r2h = function (context, a, b, axis) {
    // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
    var frame = this.g5b_1.e3a_1;
    var stack = currentStorageStack().r3b_1;
    stack.h(frame);
    try {
      return this.g5b_1.d3a_1.r2h(context, a, b, axis);
    }finally {
      var removed = removeLast(stack);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  };
  protoOf(LambdaValue$makeClosure$1).s2h = function (context, a, b, axis) {
    // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
    var frame = this.g5b_1.e3a_1;
    var stack = currentStorageStack().r3b_1;
    stack.h(frame);
    try {
      return this.g5b_1.d3a_1.s2h(context, a, b, axis);
    }finally {
      var removed = removeLast(stack);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  };
  protoOf(LambdaValue$makeClosure$1).v2h = function (baseFn, context, a, axis) {
    // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
    var frame = this.g5b_1.e3a_1;
    var stack = currentStorageStack().r3b_1;
    stack.h(frame);
    try {
      return this.g5b_1.d3a_1.v2h(baseFn, context, a, axis);
    }finally {
      var removed = removeLast(stack);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  };
  protoOf(LambdaValue$makeClosure$1).w2h = function (baseFn, context, a, b, axis) {
    // Inline function 'com.dhsdevelopments.kap.withSavedStackFrame' call
    var frame = this.g5b_1.e3a_1;
    var stack = currentStorageStack().r3b_1;
    stack.h(frame);
    try {
      return this.g5b_1.d3a_1.w2h(baseFn, context, a, b, axis);
    }finally {
      var removed = removeLast(stack);
      // Inline function 'kotlin.require' call
      if (!(removed === frame)) {
        var message = 'Removed frame does not match inserted frame';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
  };
  protoOf(LambdaValue$makeClosure$1).j2h = function () {
    return this.g5b_1.d3a_1.j2h();
  };
  function LambdaValue(fn, savedFrame) {
    APLSingleValue.call(this);
    this.d3a_1 = fn;
    this.e3a_1 = savedFrame;
  }
  protoOf(LambdaValue).z2p = function () {
    return Companion_getInstance_35().l3l_1;
  };
  protoOf(LambdaValue).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = 'function';
        break;
      case 1:
        throw IllegalArgumentException_init_$Create$("Functions can't be printed in readable form");
      case 2:
        tmp = 'function';
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(LambdaValue).h2n = function (reference, pos, typeDiscrimination) {
    return this === reference;
  };
  protoOf(LambdaValue).h2q = function () {
    return hashCode(this.d3a_1);
  };
  protoOf(LambdaValue).f3a = function () {
    return new LambdaValue$makeClosure$1(this);
  };
  function _ArrayMemberType___init__impl__mmi9ho(flags) {
    return flags;
  }
  function _get_flags__hiz1sm($this) {
    return $this;
  }
  function ArrayMemberType__intersection_impl_osmuy1($this, uType) {
    return _ArrayMemberType___init__impl__mmi9ho(_get_flags__hiz1sm($this) & _get_flags__hiz1sm(uType));
  }
  function ArrayMemberType__union_impl_f3mg97($this, uType) {
    return _ArrayMemberType___init__impl__mmi9ho(_get_flags__hiz1sm($this) | _get_flags__hiz1sm(uType));
  }
  function _ArrayMemberType___get_isLong__impl__xzhfcp($this) {
    return (_get_flags__hiz1sm($this) & 1) === 1;
  }
  function _ArrayMemberType___get_isDouble__impl__6s2782($this) {
    return (_get_flags__hiz1sm($this) & 2) === 2;
  }
  function _ArrayMemberType___get_isBoolean__impl__u1snhv($this) {
    return (_get_flags__hiz1sm($this) & 4) === 4;
  }
  function _ArrayMemberType___get_isChar__impl__wk0snn($this) {
    return (_get_flags__hiz1sm($this) & 16) === 16;
  }
  function _ArrayMemberType___get_isGeneric__impl__mdbj0($this) {
    return _get_flags__hiz1sm($this) === 0;
  }
  function _ArrayMemberType___get_isAtom__impl__6h2tm6($this) {
    return (_get_flags__hiz1sm($this) & 8) === 8;
  }
  function ArrayMemberType__toString_impl_4sk40k($this) {
    var propList = ArrayList_init_$Create$();
    if (_ArrayMemberType___get_isLong__impl__xzhfcp($this)) {
      propList.h('long');
    }
    if (_ArrayMemberType___get_isDouble__impl__6s2782($this)) {
      propList.h('double');
    }
    if (_ArrayMemberType___get_isBoolean__impl__u1snhv($this)) {
      propList.h('boolean');
    }
    if (_ArrayMemberType___get_isChar__impl__wk0snn($this)) {
      propList.h('char');
    }
    if (_ArrayMemberType___get_isAtom__impl__6h2tm6($this)) {
      propList.h('atom');
    }
    return propList.o() ? 'generic' : joinToString_0(propList, ',');
  }
  function Companion_43() {
    Companion_instance_45 = this;
    this.s2j_1 = 1;
    this.t2j_1 = 2;
    this.u2j_1 = 4;
    this.v2j_1 = 8;
    this.w2j_1 = 16;
    this.x2j_1 = _ArrayMemberType___init__impl__mmi9ho(9);
    this.y2j_1 = _ArrayMemberType___init__impl__mmi9ho(10);
    this.z2j_1 = _ArrayMemberType___init__impl__mmi9ho(0);
    this.a2k_1 = _ArrayMemberType___init__impl__mmi9ho(13);
    this.b2k_1 = _ArrayMemberType___init__impl__mmi9ho(8);
    this.c2k_1 = _ArrayMemberType___init__impl__mmi9ho(24);
    this.d2k_1 = _ArrayMemberType___init__impl__mmi9ho(31);
  }
  var Companion_instance_45;
  function Companion_getInstance_45() {
    if (Companion_instance_45 == null)
      new Companion_43();
    return Companion_instance_45;
  }
  function ArrayMemberType__hashCode_impl_gylssb($this) {
    return $this;
  }
  function ArrayMemberType__equals_impl_wg29i9($this, other) {
    if (!(other instanceof ArrayMemberType))
      return false;
    if (!($this === (other instanceof ArrayMemberType ? other.e2k_1 : THROW_CCE())))
      return false;
    return true;
  }
  function ArrayMemberType(flags) {
    Companion_getInstance_45();
    this.e2k_1 = flags;
  }
  protoOf(ArrayMemberType).toString = function () {
    return ArrayMemberType__toString_impl_4sk40k(this.e2k_1);
  };
  protoOf(ArrayMemberType).hashCode = function () {
    return ArrayMemberType__hashCode_impl_gylssb(this.e2k_1);
  };
  protoOf(ArrayMemberType).equals = function (other) {
    return ArrayMemberType__equals_impl_wg29i9(this.e2k_1, other);
  };
  var FormatStyle_PLAIN_instance;
  var FormatStyle_READABLE_instance;
  var FormatStyle_PRETTY_instance;
  var FormatStyle_entriesInitialized;
  function FormatStyle_initEntries() {
    if (FormatStyle_entriesInitialized)
      return Unit_instance;
    FormatStyle_entriesInitialized = true;
    FormatStyle_PLAIN_instance = new FormatStyle('PLAIN', 0);
    FormatStyle_READABLE_instance = new FormatStyle('READABLE', 1);
    FormatStyle_PRETTY_instance = new FormatStyle('PRETTY', 2);
  }
  function FormatStyle(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function APLList$formatted$lambda(v) {
    return v.i2o(FormatStyle_PLAIN_getInstance());
  }
  function APLList$formatted$lambda_0(v) {
    return v.i2o(FormatStyle_PRETTY_getInstance());
  }
  function APLList$formatted$lambda_1(v) {
    return v.i2o(FormatStyle_READABLE_getInstance());
  }
  function APLList(elements) {
    APLSingleValue.call(this);
    this.e3c_1 = elements;
  }
  protoOf(APLList).z2p = function () {
    return Companion_getInstance_35().m3l_1;
  };
  protoOf(APLList).o2i = function () {
    return emptyDimensions();
  };
  protoOf(APLList).e2q = function () {
    return true;
  };
  protoOf(APLList).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = joinToString_0(this.e3c_1, ' ; ', VOID, VOID, VOID, VOID, APLList$formatted$lambda);
        break;
      case 2:
        tmp = joinToString_0(this.e3c_1, '\n; value\n', VOID, VOID, VOID, VOID, APLList$formatted$lambda_0);
        break;
      case 1:
        tmp = joinToString_0(this.e3c_1, ' ; ', VOID, VOID, VOID, VOID, APLList$formatted$lambda_1);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLList).b2q = function (withDiscard) {
    var tmp;
    if (withDiscard) {
      // Inline function 'kotlin.collections.forEach' call
      var _iterator__ex2g4s = this.e3c_1.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        element.r2k(true);
      }
      tmp = UnusedResultAPLValue_getInstance();
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this.e3c_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s_0 = this_0.k();
      while (_iterator__ex2g4s_0.l()) {
        var item = _iterator__ex2g4s_0.m();
        var tmp$ret$2 = item.r2k(false);
        destination.h(tmp$ret$2);
      }
      var res = destination;
      tmp = new CollapsedAPLList(res);
    }
    return tmp;
  };
  protoOf(APLList).h2n = function (reference, pos, typeDiscrimination) {
    if (!(reference instanceof APLList)) {
      return false;
    }
    if (!(this.e3c_1.n() === reference.e3c_1.n())) {
      return false;
    }
    // Inline function 'kotlin.collections.forEach' call
    var progression = get_indices_0(this.e3c_1);
    var inductionVariable = progression.u_1;
    var last = progression.v_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var i = element;
        if (!this.v4p(i).h2n(reference.v4p(i), pos, typeDiscrimination)) {
          return false;
        }
      }
       while (!(element === last));
    return true;
  };
  protoOf(APLList).h2q = function () {
    // Inline function 'com.dhsdevelopments.kap.APLList.computeHashCodeFromList' call
    var curr = 0;
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this.e3c_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var tmp = imul(curr, 63);
      curr = tmp ^ element.h2q();
    }
    return curr;
  };
  protoOf(APLList).i2q = function () {
    // Inline function 'com.dhsdevelopments.kap.APLList.computeHashCodeFromList' call
    var curr = 0;
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this.e3c_1.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var tmp = imul(curr, 63);
      curr = tmp ^ element.i2q();
    }
    return curr;
  };
  protoOf(APLList).n3h = function () {
    return this.e3c_1.n();
  };
  protoOf(APLList).o3h = function (index, pos) {
    var tmp;
    if (index >= 0 && index < this.e3c_1.n()) {
      tmp = this.e3c_1.p(index);
    } else {
      throwAPLException(new ListOutOfBounds('Attempt to access element ' + index + ' from list. Size: ' + this.e3c_1.n(), pos));
    }
    return tmp;
  };
  protoOf(APLList).v4p = function (index, pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.o3h(index, pos) : $super.o3h.call(this, index, pos);
  };
  protoOf(APLList).w3l = function (reference, pos) {
    var other = reference instanceof APLList ? reference : THROW_CCE();
    var tmp;
    if (this.e3c_1.n() === other.e3c_1.n()) {
      // Inline function 'kotlin.repeat' call
      var times = this.e3c_1.n();
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var res = this.e3c_1.p(index).g2q(other.e3c_1.p(index));
          if (!(res === 0)) {
            return res;
          }
        }
         while (inductionVariable < times);
      return 0;
    } else {
      tmp = compareTo_3(this.e3c_1.n(), other.e3c_1.n());
    }
    return tmp;
  };
  function APLString_init_$Init$(string, $this) {
    APLString.call($this, toIntArray(asCodepointList(string)));
    return $this;
  }
  function APLString_init_$Create$(string) {
    return APLString_init_$Init$(string, objectCreate(protoOf(APLString)));
  }
  function Companion_44() {
    Companion_instance_46 = this;
    this.j2o_1 = APLString_init_$Create$('');
  }
  protoOf(Companion_44).k2o = function (s) {
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(s) === 0) {
      tmp = this.j2o_1;
    } else {
      tmp = APLString_init_$Create$(s);
    }
    return tmp;
  };
  var Companion_instance_46;
  function Companion_getInstance_46() {
    if (Companion_instance_46 == null)
      new Companion_44();
    return Companion_instance_46;
  }
  function charToString$ref() {
    var l = function (p0) {
      return charToString(p0);
    };
    l.callableName = 'charToString';
    return l;
  }
  function APLString(content) {
    Companion_getInstance_46();
    APLArray.call(this);
    this.b35_1 = content;
    this.c35_1 = dimensionsOfSize(new Int32Array([this.b35_1.length]));
  }
  protoOf(APLString).o2i = function () {
    return this.c35_1;
  };
  protoOf(APLString).h2k = function (p) {
    return new APLChar(this.b35_1[p]);
  };
  protoOf(APLString).b2q = function (withDiscard) {
    return this;
  };
  protoOf(APLString).f2n = function () {
    return Companion_getInstance_45().c2k_1;
  };
  protoOf(APLString).toString = function () {
    return 'APLString[value=[' + joinToString(this.b35_1, VOID, VOID, VOID, VOID, VOID, charToString$ref()) + ']]';
  };
  function isStringValue(_this__u8e3s4) {
    var dimensions = _this__u8e3s4.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(dimensions) === 1)) {
      return false;
    }
    if (_ArrayMemberType___get_isChar__impl__wk0snn(_this__u8e3s4.f2n())) {
      return true;
    }
    // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
    if (_this__u8e3s4.b2l()) {
      if (!(_this__u8e3s4 instanceof APLChar)) {
        return false;
      }
    } else {
      var inductionVariable = 0;
      var last = _this__u8e3s4.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (!(_this__u8e3s4.h2k(i) instanceof APLChar)) {
            return false;
          }
        }
         while (inductionVariable < last);
    }
    return true;
  }
  function formatMapReadable($this) {
    var buf = StringBuilder_init_$Create$();
    buf.i8('map ' + $this.s3m_1.n() + ' 2\u2374');
    var first = true;
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = $this.s3m_1.c2().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      // Inline function 'kotlin.collections.component1' call
      var k = element.w1();
      // Inline function 'kotlin.collections.component2' call
      var v = element.x1();
      if (first) {
        first = false;
      } else {
        buf.i8(' ');
      }
      maybeWrapInParens(buf, k.x1());
      buf.i8(' ');
      maybeWrapInParens(buf, v);
    }
    return buf.toString();
  }
  function formatMapPretty($this) {
    var buf = StringBuilder_init_$Create$();
    buf.i8('map(size=' + $this.s3m_1.n() + ')\n');
    var s = String2D_init_$Create$($this.e3n().i2o(FormatStyle_PRETTY_getInstance()));
    // Inline function 'kotlin.repeat' call
    var times = s.x58();
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        buf.i8('  ');
        // Inline function 'kotlin.collections.forEach' call
        var _iterator__ex2g4s = s.y58(index).k();
        while (_iterator__ex2g4s.l()) {
          var element = _iterator__ex2g4s.m();
          buf.i8(element);
        }
        buf.i8('\n');
      }
       while (inductionVariable < times);
    return buf.toString();
  }
  function APLMap(content) {
    APLSingleValue.call(this);
    this.s3m_1 = content;
    this.t3m_1 = emptyDimensions();
  }
  protoOf(APLMap).z2p = function () {
    return Companion_getInstance_35().n3l_1;
  };
  protoOf(APLMap).o2i = function () {
    return this.t3m_1;
  };
  protoOf(APLMap).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = 'map[size=' + this.s3m_1.n() + ']';
        break;
      case 1:
        tmp = formatMapReadable(this);
        break;
      case 2:
        tmp = formatMapPretty(this);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLMap).h2n = function (reference, pos, typeDiscrimination) {
    if (!(reference instanceof APLMap)) {
      return false;
    }
    if (!(this.s3m_1.n() === reference.s3m_1.n())) {
      return false;
    }
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = this.s3m_1.c2().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      // Inline function 'kotlin.collections.component1' call
      var key = element.w1();
      // Inline function 'kotlin.collections.component2' call
      var value = element.x1();
      var tmp0_elvis_lhs = reference.s3m_1.a2(key);
      var tmp;
      if (tmp0_elvis_lhs == null) {
        return false;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var v = tmp;
      if (!value.r2n(v, pos)) {
        return false;
      }
    }
    return true;
  };
  protoOf(APLMap).h2q = function () {
    var curr = 0;
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = this.s3m_1.c2().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      // Inline function 'kotlin.collections.component1' call
      var key = element.w1();
      // Inline function 'kotlin.collections.component2' call
      var value = element.x1();
      curr = imul(curr, 63) ^ key.x1().h2q();
      curr = imul(curr, 63) ^ value.h2q();
    }
    return curr;
  };
  protoOf(APLMap).i2q = function () {
    return this.h2q();
  };
  protoOf(APLMap).o2q = function (pos) {
    return this;
  };
  protoOf(APLMap).o3n = function (key) {
    return this.s3m_1.a2(key);
  };
  protoOf(APLMap).u3m = function (elements) {
    var tmp;
    switch (elements.n()) {
      case 0:
        tmp = this;
        break;
      case 1:
        // Inline function 'kotlin.let' call

        var destruct = elements.p(0);
        var key = destruct.de();
        var value = destruct.ee();
        tmp = new APLMap(this.s3m_1.d4y(key, value));
        break;
      default:
        // Inline function 'kotlin.collections.map' call

        // Inline function 'kotlin.collections.mapTo' call

        var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(elements, 10));
        var _iterator__ex2g4s = elements.k();
        while (_iterator__ex2g4s.l()) {
          var item = _iterator__ex2g4s.m();
          var tmp$ret$2 = new Pair(item.be_1, item.ce_1);
          destination.h(tmp$ret$2);
        }

        // Inline function 'kotlin.collections.toTypedArray' call

        var tmp$ret$5 = copyToArray(destination);
        tmp = new APLMap(this.s3m_1.e4y(tmp$ret$5.slice()));
        break;
    }
    return tmp;
  };
  protoOf(APLMap).z3m = function (toRemove) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(toRemove, 10));
    var _iterator__ex2g4s = toRemove.k();
    while (_iterator__ex2g4s.l()) {
      var item = _iterator__ex2g4s.m();
      var tmp$ret$0 = item.s2o();
      destination.h(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$3 = copyToArray(destination);
    return new APLMap(this.s3m_1.f4y(tmp$ret$3));
  };
  protoOf(APLMap).e3n = function () {
    var res = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = this.s3m_1.c2().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      // Inline function 'kotlin.collections.component1' call
      var key = element.w1();
      // Inline function 'kotlin.collections.component2' call
      var value = element.x1();
      res.h(key.x1());
      res.h(value);
    }
    return new APLArrayList(dimensionsOfSize(new Int32Array([res.n() / 2 | 0, 2])), res);
  };
  function APLSymbol(value) {
    APLSingleValue.call(this);
    this.g2j_1 = value;
  }
  protoOf(APLSymbol).z2p = function () {
    return Companion_getInstance_35().k3l_1;
  };
  protoOf(APLSymbol).h2n = function (reference, pos, typeDiscrimination) {
    var tmp;
    if (reference instanceof APLSymbol) {
      tmp = equals(this.g2j_1, reference.g2j_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(APLSymbol).w3l = function (reference, pos) {
    return this.g2j_1.g5a((reference instanceof APLSymbol ? reference : THROW_CCE()).g2j_1);
  };
  protoOf(APLSymbol).m2q = function (pos) {
    return this;
  };
  protoOf(APLSymbol).h2q = function () {
    return hashCode(this.g2j_1);
  };
  protoOf(APLSymbol).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = this.g2j_1.t3e();
        break;
      case 2:
        tmp = this.g2j_1.t3e();
        break;
      case 1:
        var quotePrefix = equals(this.g2j_1.i2j_1, Companion_getInstance_41().k2j_1) ? '' : "'";
        tmp = quotePrefix + this.g2j_1.t3e();
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLSymbol).j2q = function (buf) {
    escapeHtml(this.i2o(FormatStyle_PLAIN_getInstance()), buf);
  };
  function APLNilValue() {
    APLNilValue_instance = this;
    APLSingleValue.call(this);
  }
  protoOf(APLNilValue).z2p = function () {
    return Companion_getInstance_35().r3l_1;
  };
  protoOf(APLNilValue).i2o = function (style) {
    return 'null';
  };
  protoOf(APLNilValue).h2n = function (reference, pos, typeDiscrimination) {
    return reference === this;
  };
  protoOf(APLNilValue).h2q = function () {
    return 0;
  };
  var APLNilValue_instance;
  function APLNilValue_getInstance() {
    if (APLNilValue_instance == null)
      new APLNilValue();
    return APLNilValue_instance;
  }
  function toStringValueOrNull(_this__u8e3s4) {
    var dimensions = _this__u8e3s4.o2i();
    if (!(_Dimensions___get_size__impl__uu37ek(dimensions) === 1)) {
      return null;
    }
    var buf = StringBuilder_init_$Create$();
    var inductionVariable = 0;
    var last = _this__u8e3s4.n();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var v = _this__u8e3s4.h2k(i);
        if (!(v instanceof APLChar)) {
          return null;
        }
        buf.i8(v.a59());
      }
       while (inductionVariable < last);
    return buf.toString();
  }
  function throwOrderingNotSupportedException($this, cl, pos) {
    throwAPLException(new APLEvalException('Objects of type ' + cl.p2() + ' cannot be compared', pos));
  }
  function APLSingleValue() {
    AbstractAPLValue.call(this);
  }
  protoOf(APLSingleValue).o2i = function () {
    return emptyDimensions();
  };
  protoOf(APLSingleValue).b2l = function () {
    return true;
  };
  protoOf(APLSingleValue).h2k = function (p) {
    var tmp;
    if (p === 0) {
      tmp = this;
    } else {
      throwAPLException(new APLIndexOutOfBoundsException('Reading at non-zero index ' + p + ' from scalar'));
    }
    return tmp;
  };
  protoOf(APLSingleValue).n = function () {
    return 1;
  };
  protoOf(APLSingleValue).v2i = function () {
    return 0;
  };
  protoOf(APLSingleValue).b2q = function (withDiscard) {
    return this;
  };
  protoOf(APLSingleValue).d2q = function () {
    return this;
  };
  protoOf(APLSingleValue).o2l = function () {
    return this;
  };
  protoOf(APLSingleValue).f2n = function () {
    return Companion_getInstance_45().b2k_1;
  };
  protoOf(APLSingleValue).f2k = function () {
    return Companion_getInstance_45().b2k_1;
  };
  protoOf(APLSingleValue).u3l = function (reference, pos, typeDiscrimination) {
    throwAPLException(new NumericComparisonNotSupported('Cannot compare values of type: ' + this.z2p().p2() + ' to ' + reference.z2p().p2(), pos));
  };
  protoOf(APLSingleValue).n32 = function (reference, pos, typeDiscrimination, $super) {
    pos = pos === VOID ? null : pos;
    typeDiscrimination = typeDiscrimination === VOID ? false : typeDiscrimination;
    return $super === VOID ? this.u3l(reference, pos, typeDiscrimination) : $super.u3l.call(this, reference, pos, typeDiscrimination);
  };
  protoOf(APLSingleValue).v3l = function () {
    return false;
  };
  protoOf(APLSingleValue).g2k = function () {
    return this;
  };
  protoOf(APLSingleValue).d32 = function (reference, pos) {
    var tmp;
    if (reference instanceof APLComplex) {
      // Inline function 'com.dhsdevelopments.kap.Companion.compareEqualsComplexToSingleValue' call
      var tmp_0;
      if (!(reference.z3n_1.b3o_1 === 0.0)) {
        var tmp_1;
        if (this instanceof APLComplex) {
          tmp_1 = reference.z3n_1.equals(this.z3n_1);
        } else {
          tmp_1 = false;
        }
        tmp_0 = tmp_1;
      } else {
        tmp_0 = reference.u3l(this, pos, false) === 0;
      }
      tmp = tmp_0;
    } else {
      if (this.v3l() && reference.v3l()) {
        tmp = this.n32(reference, VOID, false) === 0;
      } else {
        tmp = this.f2q(reference, pos, false) === 0;
      }
    }
    return tmp;
  };
  protoOf(APLSingleValue).f2q = function (reference, pos, typeDiscrimination) {
    var other = reference.g2k();
    var tmp;
    var tmp_0;
    var tmp_1;
    if (other instanceof APLSingleValue) {
      tmp_1 = this.v3l();
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = other.v3l();
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.u3l(other, pos, typeDiscrimination);
    } else {
      if (getKClassFromExpression(this).equals(getKClassFromExpression(other))) {
        tmp = this.w3l(other, pos);
      } else {
        var tmp0_elvis_lhs = Companion_getInstance_43().x5a(this);
        var tmp_2;
        if (tmp0_elvis_lhs == null) {
          throwOrderingNotSupportedException(this, this.z2p(), pos);
        } else {
          tmp_2 = tmp0_elvis_lhs;
        }
        var pos0 = tmp_2;
        var tmp1_elvis_lhs = Companion_getInstance_43().x5a(other);
        var tmp_3;
        if (tmp1_elvis_lhs == null) {
          throwOrderingNotSupportedException(this, other.z2p(), pos);
        } else {
          tmp_3 = tmp1_elvis_lhs;
        }
        var pos1 = tmp_3;
        // Inline function 'kotlin.require' call
        // Inline function 'kotlin.require' call
        if (!!(pos0 === pos1)) {
          var message = 'Failed requirement.';
          throw IllegalArgumentException_init_$Create$(toString(message));
        }
        return pos0 < pos1 ? -1 : 1;
      }
    }
    return tmp;
  };
  protoOf(APLSingleValue).w3l = function (reference, pos) {
    throwOrderingNotSupportedException(this, this.z2p(), pos);
  };
  protoOf(APLSingleValue).i2q = function () {
    return this.h2q();
  };
  function listify(_this__u8e3s4) {
    var v = _this__u8e3s4.g2k();
    var tmp;
    if (v instanceof APLList) {
      tmp = v;
    } else {
      tmp = new APLList(listOf_0(v));
    }
    return tmp;
  }
  function Companion_45() {
    Companion_instance_47 = this;
    var tmp = this;
    // Inline function 'kotlin.text.HexFormat' call
    // Inline function 'kotlin.apply' call
    var this_0 = new Builder();
    this_0.nh_1 = true;
    // Inline function 'kotlin.text.Builder.number' call
    this_0.qh().ah_1 = true;
    tmp.c3o_1 = this_0.l5();
  }
  protoOf(Companion_45).d3o = function (value, pos) {
    if (value.a1(new Long(0, 0)) < 0) {
      throwAPLException(new APLEvalException('Codepoints cannot be negative: ' + value.toString(), pos));
    }
    if (value.a1(new Long(2147483647, 0)) > 0) {
      throwAPLException(new APLEvalException('Invalid codepoint: ' + value.toString(), pos));
    }
    return new APLChar(value.c1());
  };
  var Companion_instance_47;
  function Companion_getInstance_47() {
    if (Companion_instance_47 == null)
      new Companion_45();
    return Companion_instance_47;
  }
  function APLChar(value) {
    Companion_getInstance_47();
    APLSingleValue.call(this);
    this.m2z_1 = value;
    if (this.m2z_1 < 0) {
      throw IllegalArgumentException_init_$Create$('Char values cannot be negative');
    }
  }
  protoOf(APLChar).f2k = function () {
    return Companion_getInstance_45().c2k_1;
  };
  protoOf(APLChar).z2p = function () {
    return Companion_getInstance_35().i3l_1;
  };
  protoOf(APLChar).a59 = function () {
    return charToString(this.m2z_1);
  };
  protoOf(APLChar).e2q = function () {
    return false;
  };
  protoOf(APLChar).h2n = function (reference, pos, typeDiscrimination) {
    // Inline function 'kotlin.let' call
    var v = reference.g2k();
    var tmp;
    if (v instanceof APLChar) {
      tmp = this.m2z_1 === v.m2z_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(APLChar).u3l = function (reference, pos, typeDiscrimination) {
    var tmp;
    if (reference instanceof APLChar) {
      tmp = compareTo_3(this.m2z_1, reference.m2z_1);
    } else {
      tmp = protoOf(APLSingleValue).u3l.call(this, reference, pos, typeDiscrimination);
    }
    return tmp;
  };
  protoOf(APLChar).w3l = function (reference, pos) {
    return this.n32(reference, pos);
  };
  protoOf(APLChar).p2q = function (pos) {
    return this;
  };
  protoOf(APLChar).toString = function () {
    return "APLChar['" + this.a59() + "' 0x" + toString_0(this.m2z_1, 16) + ']';
  };
  protoOf(APLChar).h2q = function () {
    return this.m2z_1;
  };
  protoOf(APLChar).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = charToString(this.m2z_1);
        break;
      case 2:
        tmp = '@' + charToString(this.m2z_1);
        break;
      case 1:
        var tmp_0;
        var tmp_1;
        var containsArg = this.m2z_1;
        if (33 <= containsArg ? containsArg <= 126 : false) {
          tmp_1 = !(this.m2z_1 === 92);
        } else {
          tmp_1 = false;
        }

        if (tmp_1) {
          tmp_0 = '@' + charToString(this.m2z_1);
        } else {
          tmp_0 = '@\\u' + toHexString(this.m2z_1, Companion_getInstance_47().c3o_1);
        }

        tmp = tmp_0;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLChar).j2q = function (buf) {
    escapeHtml(this.i2o(FormatStyle_READABLE_getInstance()), buf);
  };
  function Companion_46() {
  }
  var Companion_instance_48;
  function Companion_getInstance_48() {
    return Companion_instance_48;
  }
  function APLArrayImpl(dimensions, values, specialisedType) {
    specialisedType = specialisedType === VOID ? Companion_getInstance_45().z2j_1 : specialisedType;
    APLArray.call(this);
    this.h5b_1 = dimensions;
    this.i5b_1 = values;
    this.j5b_1 = specialisedType;
  }
  protoOf(APLArrayImpl).o2i = function () {
    return this.h5b_1;
  };
  protoOf(APLArrayImpl).f2n = function () {
    return this.j5b_1;
  };
  protoOf(APLArrayImpl).toString = function () {
    return 'APLArrayImpl[' + Dimensions__toString_impl_fhouq4(this.o2i()) + ', ' + ArrayUtils_instance.tz(this.i5b_1) + ']';
  };
  protoOf(APLArrayImpl).n = function () {
    return this.i5b_1.length;
  };
  protoOf(APLArrayImpl).h2k = function (p) {
    return this.i5b_1[p];
  };
  protoOf(APLArrayImpl).i2n = function (p) {
    var v = this.h2k(p).x2g();
    var tmp;
    if (v instanceof APLLong) {
      tmp = v.g2n_1;
    } else {
      if (v instanceof APLBigInt) {
        throw new LongExpressionOverflow(v.z2q_1);
      } else {
        var message = 'Unexpected type in APLArrayImpl: ' + getKClassFromExpression(v).b9();
        throw IllegalStateException_init_$Create$(toString(message));
      }
    }
    return tmp;
  };
  protoOf(APLArrayImpl).y2p = function (p) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!_ArrayMemberType___get_isDouble__impl__6s2782(this.f2n())) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return this.h2k(p).w2q().r2z();
  };
  function APLNullValue() {
    APLNullValue_instance = this;
    APLArray.call(this);
  }
  protoOf(APLNullValue).o2i = function () {
    return emptyListDimensions();
  };
  protoOf(APLNullValue).f2n = function () {
    return Companion_getInstance_45().d2k_1;
  };
  protoOf(APLNullValue).h2k = function (p) {
    throwAPLException(new APLIndexOutOfBoundsException('Attempt to read a value from the null value'));
  };
  var APLNullValue_instance;
  function APLNullValue_getInstance() {
    if (APLNullValue_instance == null)
      new APLNullValue();
    return APLNullValue_instance;
  }
  function computeSpecialisedType_0($this, values) {
    var st = Companion_getInstance_45().d2k_1;
    var _iterator__ex2g4s = values.k();
    $l$loop: while (_iterator__ex2g4s.l()) {
      var v = _iterator__ex2g4s.m();
      st = ArrayMemberType__intersection_impl_osmuy1(st, v.f2k());
      if (_ArrayMemberType___get_isGeneric__impl__mdbj0(st)) {
        break $l$loop;
      }
    }
    return st;
  }
  function Companion_47() {
  }
  var Companion_instance_49;
  function Companion_getInstance_49() {
    return Companion_instance_49;
  }
  function APLArrayList(dimensions, values, specialisedType) {
    specialisedType = specialisedType === VOID ? computeSpecialisedType_0(Companion_instance_49, values) : specialisedType;
    APLArray.call(this);
    this.k5b_1 = dimensions;
    this.l5b_1 = values;
    this.m5b_1 = specialisedType;
  }
  protoOf(APLArrayList).o2i = function () {
    return this.k5b_1;
  };
  protoOf(APLArrayList).f2n = function () {
    return this.m5b_1;
  };
  protoOf(APLArrayList).h2k = function (p) {
    return this.l5b_1.p(p);
  };
  protoOf(APLArrayList).toString = function () {
    return toString(this.l5b_1);
  };
  protoOf(APLArrayList).n = function () {
    return this.l5b_1.n();
  };
  protoOf(APLArrayList).i2n = function (p) {
    return this.l5b_1.p(p).w2q().f2j();
  };
  protoOf(APLArrayList).y2p = function (p) {
    return this.l5b_1.p(p).w2q().r2z();
  };
  function AbstractAPLValue() {
    APLValue.call(this);
  }
  protoOf(AbstractAPLValue).v2i = function () {
    return _Dimensions___get_size__impl__uu37ek(this.o2i());
  };
  protoOf(AbstractAPLValue).f2n = function () {
    return Companion_getInstance_45().z2j_1;
  };
  protoOf(AbstractAPLValue).f2k = function () {
    return Companion_getInstance_45().z2j_1;
  };
  protoOf(AbstractAPLValue).g2k = function () {
    return Dimensions__isEmpty_impl_2yd13(this.o2i()) ? Companion_instance_51.s2i(this.h2k(0).g2k()) : this;
  };
  protoOf(AbstractAPLValue).i2n = function (p) {
    var message = 'valueAtLong not implemented for class ' + getKClassFromExpression(this).b9();
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(AbstractAPLValue).y2p = function (p) {
    var message = 'valueAtDouble not implemented for class ' + getKClassFromExpression(this).b9();
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(AbstractAPLValue).r2i = function (p, pos) {
    var tmp;
    if (_ArrayMemberType___get_isLong__impl__xzhfcp(this.f2n())) {
      tmp = this.i2n(p);
    } else {
      tmp = this.h2k(p).p2i(pos).w2s(pos);
    }
    var l = tmp;
    if (l.a1(new Long(-2147483648, -1)) < 0 || l.a1(new Long(2147483647, 0)) > 0) {
      throwAPLException(new IntMagnitudeException(l, pos));
    }
    return l.c1();
  };
  protoOf(AbstractAPLValue).k2q = function (p, pos) {
    var st = this.f2n();
    var tmp;
    if (_ArrayMemberType___get_isLong__impl__xzhfcp(st)) {
      var tmp_0;
      try {
        tmp_0 = this.i2n(p).l3();
      } catch ($p) {
        var tmp_1;
        if ($p instanceof LongExpressionOverflow) {
          var e = $p;
          tmp_1 = toDouble_0(e.ek_1);
        } else {
          throw $p;
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    } else if (_ArrayMemberType___get_isDouble__impl__6s2782(st)) {
      tmp = this.y2p(p);
    } else {
      tmp = this.h2k(p).p2i(pos).x2s(pos);
    }
    return tmp;
  };
  protoOf(AbstractAPLValue).n = function () {
    return Dimensions__contentSize_impl_4eihds(this.o2i());
  };
  protoOf(AbstractAPLValue).e2q = function () {
    return true;
  };
  protoOf(AbstractAPLValue).h2n = function (reference, pos, typeDiscrimination) {
    return this.f2q(reference, null, typeDiscrimination) === 0;
  };
  protoOf(AbstractAPLValue).f2q = function (reference, pos, typeDiscrimination) {
    throwAPLException(new IncompatibleTypeException('Comparison not implemented for objects of type ' + this.z2p().p2() + ' to ' + reference.z2p().p2(), pos));
  };
  protoOf(AbstractAPLValue).m2l = function () {
    return DefaultMetadata_instance;
  };
  protoOf(AbstractAPLValue).l2q = function () {
    var v = this.g2k();
    var tmp;
    if (v === this) {
      tmp = null;
    } else {
      tmp = v.l2q();
    }
    return tmp;
  };
  protoOf(AbstractAPLValue).m2q = function (pos) {
    var v = this.g2k();
    if (v === this) {
      throwAPLException(new IncompatibleTypeException('Value ' + toString(this) + ' is not a symbol (type=' + this.z2p().p2() + ')', pos));
    } else {
      return v.m2q(pos);
    }
  };
  protoOf(AbstractAPLValue).o2q = function (pos) {
    var v = this.g2k();
    if (v === this) {
      throwAPLException(new IncompatibleTypeException('Value ' + toString(this) + ' is not a map (type=' + this.z2p().p2() + ')', pos));
    } else {
      return v.o2q(pos);
    }
  };
  protoOf(AbstractAPLValue).p2q = function (pos) {
    var v = this.g2k();
    if (v === this) {
      throwAPLException(new IncompatibleTypeException('Value ' + toString(this) + ' is not a char (type=' + this.z2p().p2() + ')', pos));
    } else {
      return v.p2q(pos);
    }
  };
  protoOf(AbstractAPLValue).r2q = function (pos) {
    var v = this.g2k();
    var tmp;
    if (v === this) {
      tmp = true;
    } else {
      tmp = v.r2q(pos);
    }
    return tmp;
  };
  protoOf(AbstractAPLValue).j2q = function (buf) {
    buf.i('<pre>');
    escapeHtml(this.i2o(FormatStyle_PRETTY_getInstance()), buf);
    buf.i('<\/pre>');
  };
  function AxisLabel(title) {
    this.j35_1 = title;
  }
  protoOf(AxisLabel).toString = function () {
    return 'AxisLabel[title=' + this.j35_1 + ']';
  };
  function Companion_48() {
  }
  protoOf(Companion_48).n5b = function (dimensions, oldLabels, newLabels) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(newLabels.n() === _Dimensions___get_size__impl__uu37ek(dimensions))) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var oldLabelsList = oldLabels == null ? null : oldLabels.q2r_1;
    var result = ArrayList_init_$Create$_0(_Dimensions___get_size__impl__uu37ek(dimensions));
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek(dimensions);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var newLabelsList = newLabels.p(index);
        var tmp;
        if (!(newLabelsList == null)) {
          // Inline function 'kotlin.require' call
          if (!(newLabelsList.n() === Dimensions__get_impl_4npepw(dimensions, index))) {
            var message_0 = 'newLabelsList does not have correct size';
            throw IllegalArgumentException_init_$Create$(toString(message_0));
          }
          tmp = newLabelsList;
        } else if (!(oldLabelsList == null)) {
          tmp = oldLabelsList.p(index);
        } else {
          tmp = null;
        }
        var v = tmp;
        result.h(v);
      }
       while (inductionVariable < times);
    return new DimensionLabels(result);
  };
  protoOf(Companion_48).d4e = function (newLabels) {
    var tmp;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp_0;
      if (isInterface(newLabels, Collection)) {
        tmp_0 = newLabels.o();
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var _iterator__ex2g4s = newLabels.k();
      while (_iterator__ex2g4s.l()) {
        var element = _iterator__ex2g4s.m();
        if (!(element == null)) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    if (tmp$ret$0) {
      tmp = new DimensionLabels(newLabels);
    } else {
      tmp = null;
    }
    return tmp;
  };
  var Companion_instance_50;
  function Companion_getInstance_50() {
    return Companion_instance_50;
  }
  function DimensionLabels(labels) {
    this.q2r_1 = labels;
  }
  protoOf(DimensionLabels).m32 = function (axis) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(axis >= 0 && axis <= this.q2r_1.n())) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var res = ArrayList_init_$Create$();
    // Inline function 'kotlin.repeat' call
    var times = this.q2r_1.n() + 1 | 0;
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var l = index < axis ? this.q2r_1.p(index) : index > axis ? this.q2r_1.p(index - 1 | 0) : null;
        res.h(l);
      }
       while (inductionVariable < times);
    return new DimensionLabels(res);
  };
  function APLArray$valueAt$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.h2k(p0);
    };
    l.callableName = 'valueAt';
    return l;
  }
  function APLArray() {
    AbstractAPLValue.call(this);
  }
  protoOf(APLArray).z2p = function () {
    return Companion_getInstance_35().j3l_1;
  };
  protoOf(APLArray).b2l = function () {
    return false;
  };
  protoOf(APLArray).a2q = function () {
    return 'array ' + Dimensions__toString_impl_fhouq4(this.o2i());
  };
  protoOf(APLArray).b2q = function (withDiscard) {
    var v = this.g2k();
    var tmp;
    if (withDiscard) {
      if (v.v2i() === 0)
        v.h2k(0).r2k(true);
      else {
        // Inline function 'com.dhsdevelopments.kap.iterateMembers' call
        if (v.b2l()) {
          v.r2k(true);
        } else {
          var inductionVariable = 0;
          var last = v.n();
          if (inductionVariable < last)
            do {
              var i = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              v.h2k(i).r2k(true);
            }
             while (inductionVariable < last);
        }
      }
      tmp = UnusedResultAPLValue_getInstance();
    } else {
      tmp = v.v2i() === 0 ? Companion_instance_51.s2i(v.h2k(0).x2g()) : Companion_instance_52.s2i(v);
    }
    return tmp;
  };
  protoOf(APLArray).d2q = function () {
    var tmp = this.o2i();
    var tmp_0 = 0;
    var tmp_1 = this.n();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_2 = Array(tmp_1);
    var tmp0 = APLArray$valueAt$ref(this);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = tmp0(tmp_3);
      tmp_0 = tmp_0 + 1 | 0;
    }
    return new APLArrayImpl(tmp, tmp_2);
  };
  protoOf(APLArray).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = formatArrayAsPlain(this);
        break;
      case 2:
        tmp = encloseInBox(this, FormatStyle_PRETTY_getInstance());
        break;
      case 1:
        tmp = arrayToAPLFormat(this);
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(APLArray).e2q = function () {
    return !isStringValue(this);
  };
  protoOf(APLArray).h2n = function (reference, pos, typeDiscrimination) {
    var u = this.g2k();
    if (u instanceof APLSingleValue) {
      return u.r2n(reference, pos);
    } else {
      var uRef = reference.g2k();
      if (!Dimensions__compareEquals_impl_5g4nme(u.o2i(), uRef.o2i())) {
        return false;
      }
      var inductionVariable = 0;
      var last = u.n();
      if (inductionVariable < last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var o1 = u.h2k(i);
          var o2 = uRef.h2k(i);
          if (!o1.r2n(o2, pos)) {
            return false;
          }
        }
         while (inductionVariable < last);
      return true;
    }
  };
  protoOf(APLArray).f2q = function (reference, pos, typeDiscrimination) {
    return compareAPLArrays(this, reference, pos, typeDiscrimination);
  };
  protoOf(APLArray).o2l = function () {
    return _Dimensions___get_size__impl__uu37ek(this.o2i()) === 0 ? this.h2k(0) : this;
  };
  protoOf(APLArray).h2q = function () {
    // Inline function 'com.dhsdevelopments.kap.APLArray.computeHashCode' call
    var curr = 0;
    // Inline function 'com.dhsdevelopments.kap.Dimensions.forEach' call
    var this_0 = this.o2i();
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek(this_0);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var dim = Dimensions__get_impl_4npepw(this_0, index);
        curr = imul(curr, 63) ^ dim;
      }
       while (inductionVariable < times);
    // Inline function 'kotlin.sequences.forEach' call
    var _iterator__ex2g4s = this.l2p().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var tmp = imul(curr, 63);
      curr = tmp ^ element.h2q();
    }
    return curr;
  };
  protoOf(APLArray).i2q = function () {
    // Inline function 'com.dhsdevelopments.kap.APLArray.computeHashCode' call
    var curr = 0;
    // Inline function 'com.dhsdevelopments.kap.Dimensions.forEach' call
    var this_0 = this.o2i();
    // Inline function 'kotlin.repeat' call
    var times = _Dimensions___get_size__impl__uu37ek(this_0);
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var dim = Dimensions__get_impl_4npepw(this_0, index);
        curr = imul(curr, 63) ^ dim;
      }
       while (inductionVariable < times);
    // Inline function 'kotlin.sequences.forEach' call
    var _iterator__ex2g4s = this.l2p().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var tmp = imul(curr, 63);
      curr = tmp ^ element.i2q();
    }
    return curr;
  };
  protoOf(APLArray).j2q = function (buf) {
    var d = this.o2i();
    if (_Dimensions___get_size__impl__uu37ek(d) === 1 && isStringValue(this)) {
      buf.i('<span style="color: #00c000;">');
      // Inline function 'com.dhsdevelopments.kap.toStringValue' call
      var result = toStringValueOrNull(this);
      if (result == null) {
        var m = null;
        var messagePrefix = m == null ? '' : '' + m + ': ';
        throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', null));
      }
      escapeHtml(result, buf);
      buf.i('<\/span>');
    } else if (_Dimensions___get_size__impl__uu37ek(d) === 2) {
      array2DAsHtml(this, buf);
    } else {
      protoOf(AbstractAPLValue).j2q.call(this, buf);
    }
  };
  function raiseError($this) {
    var message = UnusedResultAPLValue$raiseError$lambda;
    throw IllegalStateException_init_$Create$(toString(message));
  }
  function UnusedResultAPLValue$raiseError$lambda() {
    return 'Attempt to call unused value';
  }
  function UnusedResultAPLValue() {
    UnusedResultAPLValue_instance = this;
    APLValue.call(this);
  }
  protoOf(UnusedResultAPLValue).z2p = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).o5b = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).o2i = function () {
    return this.o5b();
  };
  protoOf(UnusedResultAPLValue).v2i = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).p5b = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).f2n = function () {
    return this.p5b();
  };
  protoOf(UnusedResultAPLValue).q5b = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).f2k = function () {
    return this.q5b();
  };
  protoOf(UnusedResultAPLValue).b2l = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).f2q = function (reference, pos, typeDiscrimination) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).h2k = function (p) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).i2n = function (p) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).y2p = function (p) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).r2i = function (p, pos) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).k2q = function (p, pos) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).n = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).i2o = function (style) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).e2q = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).b2q = function (withDiscard) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).d2q = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).g2k = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).h2n = function (reference, pos, typeDiscrimination) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).o2l = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).m2l = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).l2q = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).m2q = function (pos) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).o2q = function (pos) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).p2q = function (pos) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).r2q = function (pos) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).r5b = function (buf) {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).j2q = function (buf) {
    return this.r5b(buf);
  };
  protoOf(UnusedResultAPLValue).h2q = function () {
    raiseError(this);
  };
  protoOf(UnusedResultAPLValue).i2q = function () {
    raiseError(this);
  };
  var UnusedResultAPLValue_instance;
  function UnusedResultAPLValue_getInstance() {
    if (UnusedResultAPLValue_instance == null)
      new UnusedResultAPLValue();
    return UnusedResultAPLValue_instance;
  }
  function CollapsedAPLList(elements) {
    APLList.call(this, elements);
  }
  protoOf(CollapsedAPLList).b2q = function (withDiscard) {
    return this;
  };
  function Companion_49() {
  }
  protoOf(Companion_49).s2i = function (value) {
    var tmp;
    if (value instanceof APLSingleValue) {
      tmp = value.g2k();
    } else {
      tmp = new EnclosedAPLValue(value);
    }
    return tmp;
  };
  var Companion_instance_51;
  function Companion_getInstance_51() {
    return Companion_instance_51;
  }
  function EnclosedAPLValue(value) {
    APLArray.call(this);
    this.t5b_1 = value;
  }
  protoOf(EnclosedAPLValue).o2i = function () {
    return emptyDimensions();
  };
  protoOf(EnclosedAPLValue).h2k = function (p) {
    if (!(p === 0)) {
      throwAPLException(new APLIndexOutOfBoundsException('Attempt to read from a non-zero index'));
    }
    return this.t5b_1;
  };
  protoOf(EnclosedAPLValue).o2l = function () {
    return this.t5b_1;
  };
  protoOf(EnclosedAPLValue).g2k = function () {
    var v = this.t5b_1.g2k();
    var tmp;
    if (this.t5b_1 === v) {
      tmp = this;
    } else {
      var tmp_0 = this.t5b_1;
      if (tmp_0 instanceof APLSingleValue) {
        tmp = v;
      } else {
        tmp = new EnclosedAPLValue(v);
      }
    }
    return tmp;
  };
  function Companion_50() {
  }
  protoOf(Companion_50).s2i = function (orig) {
    var d = orig.o2i();
    var dSize = orig.n();
    if (dSize === 0) {
      return new APLEmptyArray(d);
    }
    var st = orig.f2n();
    var tmp;
    if (_ArrayMemberType___get_isBoolean__impl__u1snhv(st)) {
      var tmp_0 = 0;
      var tmp_1 = booleanArray(dSize);
      while (tmp_0 < dSize) {
        var tmp_2 = tmp_0;
        var tmp_3;
        try {
          var tmp0_subject = orig.i2n(tmp_2);
          var tmp_4;
          if (tmp0_subject.equals(new Long(0, 0))) {
            tmp_4 = false;
          } else if (tmp0_subject.equals(new Long(1, 0))) {
            tmp_4 = true;
          } else {
            var message = 'Unexpected value in boolean array';
            throw IllegalStateException_init_$Create$(toString(message));
          }
          tmp_3 = tmp_4;
        } catch ($p) {
          var tmp_5;
          if ($p instanceof LongExpressionOverflow) {
            var e = $p;
            var tmp1_subject = e.ek_1;
            var tmp_6;
            if (equals(tmp1_subject, BigIntConstants_getInstance().hj_1)) {
              tmp_6 = false;
            } else if (equals(tmp1_subject, BigIntConstants_getInstance().ij_1)) {
              tmp_6 = true;
            } else {
              var message_0 = 'Unexpected value in boolean array';
              throw IllegalStateException_init_$Create$(toString(message_0));
            }
            tmp_5 = tmp_6;
          } else {
            throw $p;
          }
          tmp_3 = tmp_5;
        }
        tmp_1[tmp_2] = tmp_3;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = new APLArrayBoolean(d, tmp_1);
    } else if (_ArrayMemberType___get_isLong__impl__xzhfcp(st)) {
      tmp = makeWithOverflowCheck(Companion_instance_53, d, orig);
    } else if (_ArrayMemberType___get_isDouble__impl__6s2782(st)) {
      var tmp_7 = 0;
      var tmp_8 = new Float64Array(dSize);
      while (tmp_7 < dSize) {
        var tmp_9 = tmp_7;
        tmp_8[tmp_9] = orig.y2p(tmp_9);
        tmp_7 = tmp_7 + 1 | 0;
      }
      tmp = new APLArrayDouble(d, tmp_8);
    } else {
      var innerType = {_v: new ArrayMemberType(Companion_getInstance_45().d2k_1)};
      var tmp_10 = 0;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_11 = Array(dSize);
      while (tmp_10 < dSize) {
        var tmp_12 = tmp_10;
        // Inline function 'kotlin.also' call
        var this_0 = orig.h2k(tmp_12).x2g();
        innerType._v = new ArrayMemberType(ArrayMemberType__intersection_impl_osmuy1(innerType._v.e2k_1, this_0.f2k()));
        tmp_11[tmp_12] = this_0;
        tmp_10 = tmp_10 + 1 | 0;
      }
      var content = tmp_11;
      tmp = new CollapsedArrayImpl(d, content, innerType._v.e2k_1);
    }
    return tmp;
  };
  var Companion_instance_52;
  function Companion_getInstance_52() {
    return Companion_instance_52;
  }
  function CollapsedArrayImpl(dimensions, values, specialisedType) {
    APLArrayImpl.call(this, dimensions, values);
    this.x5b_1 = specialisedType;
  }
  protoOf(CollapsedArrayImpl).f2n = function () {
    return this.x5b_1;
  };
  protoOf(CollapsedArrayImpl).b2q = function (withDiscard) {
    return this;
  };
  function arrayToAPLFormat(value) {
    var v = value.x2g();
    var labelsDefinition = makeReadableLabelsDefinitionIfExists(v.m2l());
    var tmp;
    if (isStringValue(v)) {
      tmp = renderStringValue(v, FormatStyle_READABLE_getInstance());
    } else {
      tmp = arrayToAPLFormatStandard(v instanceof APLArray ? v : THROW_CCE());
    }
    var s = tmp;
    var tmp_0;
    if (labelsDefinition == null) {
      tmp_0 = s;
    } else {
      tmp_0 = '' + labelsDefinition + s;
    }
    return tmp_0;
  }
  function throwError($this) {
    throwAPLException(new APLIndexOutOfBoundsException('Cannot get value from empty array', null));
  }
  function APLEmptyArray(dimensions) {
    APLArray.call(this);
    this.y5b_1 = dimensions;
    // Inline function 'kotlin.require' call
    if (!!(_Dimensions___get_size__impl__uu37ek(this.y5b_1) === 0)) {
      var message = 'Empty arrays must not be rank 0';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    if (!(Dimensions__contentSize_impl_4eihds(this.y5b_1) === 0)) {
      var message_0 = 'Empty arrays cannot have a size';
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
  }
  protoOf(APLEmptyArray).o2i = function () {
    return this.y5b_1;
  };
  protoOf(APLEmptyArray).f2n = function () {
    return Companion_getInstance_45().d2k_1;
  };
  protoOf(APLEmptyArray).h2k = function (p) {
    throwError(this);
  };
  protoOf(APLEmptyArray).y2p = function (p) {
    throwError(this);
  };
  function APLArrayBoolean(dimensions, values) {
    APLArray.call(this);
    this.z5b_1 = dimensions;
    this.a5c_1 = values;
  }
  protoOf(APLArrayBoolean).o2i = function () {
    return this.z5b_1;
  };
  protoOf(APLArrayBoolean).f2n = function () {
    return Companion_getInstance_45().a2k_1;
  };
  protoOf(APLArrayBoolean).h2k = function (p) {
    return this.a5c_1[p] ? get_APLLONG_1() : get_APLLONG_0();
  };
  protoOf(APLArrayBoolean).i2n = function (p) {
    return this.a5c_1[p] ? new Long(1, 0) : new Long(0, 0);
  };
  protoOf(APLArrayBoolean).b2q = function (withDiscard) {
    return this;
  };
  protoOf(APLArrayBoolean).n = function () {
    return this.a5c_1.length;
  };
  function makeWithOverflowCheck(_this__u8e3s4, d, orig) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!_ArrayMemberType___get_isLong__impl__xzhfcp(orig.f2n())) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var result = longArray(Dimensions__contentSize_impl_4eihds(d));
    var booleanCheckPattern = new Long(0, 0);
    var i = {_v: 0};
    try {
      // Inline function 'kotlin.repeat' call
      var times = result.length;
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var v = orig.i2n(i._v);
          booleanCheckPattern = booleanCheckPattern.j3(v);
          result[i._v] = v;
          i._v = i._v + 1 | 0;
        }
         while (inductionVariable < times);
      return new APLArrayLong(d, result, booleanCheckPattern.equals(new Long(0, 0)) || booleanCheckPattern.equals(new Long(1, 0)));
    } catch ($p) {
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        var tmp = 0;
        var tmp_0 = result.length;
        // Inline function 'kotlin.arrayOfNulls' call
        var tmp_1 = Array(tmp_0);
        while (tmp < tmp_0) {
          var tmp_2 = tmp;
          var tmp_3;
          if (tmp_2 < i._v) {
            tmp_3 = makeAPLNumber_0(result[tmp_2]);
          } else if (tmp_2 === i._v) {
            tmp_3 = new APLBigInt(e.ek_1);
          } else {
            tmp_3 = orig.h2k(tmp_2);
          }
          tmp_1[tmp_2] = tmp_3;
          tmp = tmp + 1 | 0;
        }
        var array = tmp_1;
        return new APLArrayImpl(d, array, Companion_getInstance_45().b2k_1);
      } else {
        throw $p;
      }
    }
  }
  function Companion_51() {
  }
  var Companion_instance_53;
  function Companion_getInstance_53() {
    return Companion_instance_53;
  }
  function APLArrayLong(dimensions, values, isBoolean) {
    isBoolean = isBoolean === VOID ? false : isBoolean;
    APLArray.call(this);
    this.b5c_1 = dimensions;
    this.c5c_1 = values;
    this.d5c_1 = isBoolean ? Companion_getInstance_45().a2k_1 : Companion_getInstance_45().x2j_1;
  }
  protoOf(APLArrayLong).o2i = function () {
    return this.b5c_1;
  };
  protoOf(APLArrayLong).f2n = function () {
    return this.d5c_1;
  };
  protoOf(APLArrayLong).h2k = function (p) {
    return makeAPLNumber_0(this.c5c_1[p]);
  };
  protoOf(APLArrayLong).i2n = function (p) {
    return this.c5c_1[p];
  };
  protoOf(APLArrayLong).b2q = function (withDiscard) {
    return this;
  };
  protoOf(APLArrayLong).n = function () {
    return this.c5c_1.length;
  };
  function APLArrayDouble(dimensions, values) {
    APLArray.call(this);
    this.e5c_1 = dimensions;
    this.f5c_1 = values;
  }
  protoOf(APLArrayDouble).o2i = function () {
    return this.e5c_1;
  };
  protoOf(APLArrayDouble).f2n = function () {
    return Companion_getInstance_45().y2j_1;
  };
  protoOf(APLArrayDouble).h2k = function (p) {
    return makeAPLNumber(this.f5c_1[p]);
  };
  protoOf(APLArrayDouble).y2p = function (p) {
    return this.f5c_1[p];
  };
  protoOf(APLArrayDouble).b2q = function (withDiscard) {
    return this;
  };
  protoOf(APLArrayDouble).n = function () {
    return this.f5c_1.length;
  };
  function makeReadableLabelsDefinitionIfExists(metadata) {
    var labels = metadata.p2r();
    var tmp;
    if (!(labels == null)) {
      var appender = StringBuilder_init_$Create$();
      // Inline function 'kotlin.collections.forEachIndexed' call
      var index = 0;
      var _iterator__ex2g4s = labels.q2r_1.k();
      while (_iterator__ex2g4s.l()) {
        var item = _iterator__ex2g4s.m();
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        var i = checkIndexOverflow(_unary__edvuaz);
        var tmp_0;
        if (!(item == null)) {
          var tmp$ret$0;
          $l$block_0: {
            // Inline function 'kotlin.collections.any' call
            var tmp_1;
            if (isInterface(item, Collection)) {
              tmp_1 = item.o();
            } else {
              tmp_1 = false;
            }
            if (tmp_1) {
              tmp$ret$0 = false;
              break $l$block_0;
            }
            var _iterator__ex2g4s_0 = item.k();
            while (_iterator__ex2g4s_0.l()) {
              var element = _iterator__ex2g4s_0.m();
              if (!(element == null)) {
                tmp$ret$0 = true;
                break $l$block_0;
              }
            }
            tmp$ret$0 = false;
          }
          tmp_0 = tmp$ret$0;
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          // Inline function 'kotlin.collections.forEach' call
          var _iterator__ex2g4s_1 = item.k();
          while (_iterator__ex2g4s_1.l()) {
            var element_0 = _iterator__ex2g4s_1.m();
            if (element_0 == null) {
              appender.i8('null ');
            } else {
              appender.i8('"');
              appender.i8(replace_0(element_0.j35_1, '"', '\\"'));
              appender.i8('" ');
            }
          }
          appender.i8('labels[');
          appender.i8(i.toString());
          appender.i8('] ');
        }
      }
      tmp = appender.toString();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function arrayToAPLFormatStandard(value) {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    var dimensions = value.o2i();
    if (_Dimensions___get_size__impl__uu37ek(dimensions) === 0) {
      this_0.i8('\u2282');
      this_0.i8(value.h2k(0).i2o(FormatStyle_READABLE_getInstance()));
    } else {
      this_0.ka(Dimensions__get_impl_4npepw(dimensions, 0));
      // Inline function 'kotlin.repeat' call
      var times = _Dimensions___get_size__impl__uu37ek(dimensions) - 1 | 0;
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          this_0.i8(' ');
          this_0.ka(Dimensions__get_impl_4npepw(dimensions, index + 1 | 0));
        }
         while (inductionVariable < times);
      this_0.i8('\u2374');
      switch (value.n()) {
        case 0:
          this_0.i8('1');
          break;
        case 1:
          var a = value.h2k(0);
          if (!a.b2l()) {
            this_0.i8('\u2282');
          }

          this_0.i8(a.i2o(FormatStyle_READABLE_getInstance()));
          break;
        default:
          var inductionVariable_0 = 0;
          var last = value.n();
          if (inductionVariable_0 < last)
            do {
              var i = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              var a_0 = value.h2k(i);
              if (i > 0) {
                this_0.i8(' ');
              }
              maybeWrapInParens(this_0, a_0);
            }
             while (inductionVariable_0 < last);
          break;
      }
    }
    return this_0.toString();
  }
  function AbstractDelegatedValue() {
    APLValue.call(this);
  }
  protoOf(AbstractDelegatedValue).z2p = function () {
    return this.x1().z2p();
  };
  protoOf(AbstractDelegatedValue).o2i = function () {
    return this.x1().o2i();
  };
  protoOf(AbstractDelegatedValue).b2l = function () {
    return this.x1().b2l();
  };
  protoOf(AbstractDelegatedValue).v2i = function () {
    return this.x1().v2i();
  };
  protoOf(AbstractDelegatedValue).f2n = function () {
    return this.x1().f2n();
  };
  protoOf(AbstractDelegatedValue).f2k = function () {
    return this.x1().f2k();
  };
  protoOf(AbstractDelegatedValue).h2k = function (p) {
    return this.x1().h2k(p);
  };
  protoOf(AbstractDelegatedValue).i2n = function (p) {
    return this.x1().i2n(p);
  };
  protoOf(AbstractDelegatedValue).y2p = function (p) {
    return this.x1().y2p(p);
  };
  protoOf(AbstractDelegatedValue).r2i = function (p, pos) {
    return this.x1().r2i(p, pos);
  };
  protoOf(AbstractDelegatedValue).k2q = function (p, pos) {
    return this.x1().k2q(p, pos);
  };
  protoOf(AbstractDelegatedValue).n = function () {
    return this.x1().n();
  };
  protoOf(AbstractDelegatedValue).i2o = function (style) {
    return this.x1().i2o(style);
  };
  protoOf(AbstractDelegatedValue).b2q = function (withDiscard) {
    return this.x1().b2q(withDiscard);
  };
  protoOf(AbstractDelegatedValue).d2q = function () {
    return this.x1().d2q();
  };
  protoOf(AbstractDelegatedValue).m2l = function () {
    return this.x1().m2l();
  };
  protoOf(AbstractDelegatedValue).g2k = function () {
    return this.x1().g2k();
  };
  protoOf(AbstractDelegatedValue).h2n = function (reference, pos, typeDiscrimination) {
    return this.x1().r2n(reference, pos);
  };
  protoOf(AbstractDelegatedValue).f2q = function (reference, pos, typeDiscrimination) {
    return this.x1().g2q(reference, pos);
  };
  protoOf(AbstractDelegatedValue).o2l = function () {
    return this.x1().o2l();
  };
  protoOf(AbstractDelegatedValue).m2q = function (pos) {
    return this.x1().m2q(pos);
  };
  protoOf(AbstractDelegatedValue).o2q = function (pos) {
    return this.x1().o2q(pos);
  };
  protoOf(AbstractDelegatedValue).p2q = function (pos) {
    return this.x1().p2q(pos);
  };
  protoOf(AbstractDelegatedValue).r2q = function (pos) {
    return this.x1().r2q(pos);
  };
  protoOf(AbstractDelegatedValue).e2q = function () {
    return this.x1().e2q();
  };
  protoOf(AbstractDelegatedValue).l2q = function () {
    return this.x1().l2q();
  };
  protoOf(AbstractDelegatedValue).j2q = function (buf) {
    return this.x1().j2q(buf);
  };
  protoOf(AbstractDelegatedValue).h2q = function () {
    return this.x1().h2q();
  };
  protoOf(AbstractDelegatedValue).i2q = function () {
    return this.x1().i2q();
  };
  function LongToDoubleArrayProjection(value, pos) {
    DelegatedValue.call(this, value);
    this.h5c_1 = pos;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!_ArrayMemberType___get_isLong__impl__xzhfcp(value.f2n())) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(LongToDoubleArrayProjection).f2n = function () {
    return ArrayMemberType__union_impl_f3mg97(this.x1().f2n(), Companion_getInstance_45().y2j_1);
  };
  protoOf(LongToDoubleArrayProjection).y2p = function (p) {
    var tmp;
    try {
      tmp = this.i2n(p).l3();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof LongExpressionOverflow) {
        var e = $p;
        tmp_0 = toDouble_0(e.ek_1);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(LongToDoubleArrayProjection).k2q = function (p, pos) {
    return this.y2p(p);
  };
  function EmptyValueMetadata() {
  }
  protoOf(EmptyValueMetadata).hv = function () {
    return APLNilValue_getInstance();
  };
  function EmptyValue() {
    EmptyValue_instance = this;
    APLArray.call(this);
    this.i5c_1 = emptyListDimensions();
    this.j5c_1 = new EmptyValueMetadata();
  }
  protoOf(EmptyValue).o2i = function () {
    return this.i5c_1;
  };
  protoOf(EmptyValue).h2k = function (p) {
    throwAPLException(new APLIndexOutOfBoundsException('Attempt to read value from the empty value'));
  };
  protoOf(EmptyValue).m2l = function () {
    return this.j5c_1;
  };
  var EmptyValue_instance;
  function EmptyValue_getInstance() {
    if (EmptyValue_instance == null)
      new EmptyValue();
    return EmptyValue_instance;
  }
  function Companion_52() {
  }
  var Companion_instance_54;
  function Companion_getInstance_54() {
    return Companion_instance_54;
  }
  function IntArrayValue(srcDimensions, values) {
    APLArray.call(this);
    this.n4s_1 = values;
    this.o4s_1 = srcDimensions;
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.collections.isEmpty' call
    // Inline function 'kotlin.require' call
    if (!!(this.n4s_1.length === 0)) {
      var message = 'IntArrayValue with size 0';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(IntArrayValue).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(IntArrayValue).o2i = function () {
    return this.o4s_1;
  };
  protoOf(IntArrayValue).h2k = function (p) {
    return makeAPLNumber_4(this.n4s_1[p]);
  };
  protoOf(IntArrayValue).i2n = function (p) {
    return toLong_0(this.n4s_1[p]);
  };
  protoOf(IntArrayValue).z4s = function (p) {
    return this.n4s_1[p];
  };
  function APLArrayInt(dimensions, values) {
    APLArray.call(this);
    this.k5c_1 = dimensions;
    this.l5c_1 = values;
  }
  protoOf(APLArrayInt).o2i = function () {
    return this.k5c_1;
  };
  protoOf(APLArrayInt).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(APLArrayInt).h2k = function (p) {
    return makeAPLNumber_4(this.l5c_1[p]);
  };
  protoOf(APLArrayInt).r2i = function (p, pos) {
    return this.l5c_1[p];
  };
  protoOf(APLArrayInt).i2n = function (p) {
    return toLong_0(this.l5c_1[p]);
  };
  protoOf(APLArrayInt).b2q = function (withDiscard) {
    return this;
  };
  protoOf(APLArrayInt).n = function () {
    return this.l5c_1.length;
  };
  function ConstantArray(dimensions, value) {
    APLArray.call(this);
    this.m5c_1 = dimensions;
    this.n5c_1 = value.g2k();
  }
  protoOf(ConstantArray).o2i = function () {
    return this.m5c_1;
  };
  protoOf(ConstantArray).f2n = function () {
    return this.n5c_1.f2k();
  };
  protoOf(ConstantArray).h2k = function (p) {
    return this.n5c_1;
  };
  protoOf(ConstantArray).i2n = function (p) {
    return this.n5c_1.w2q().f2j();
  };
  protoOf(ConstantArray).y2p = function (p) {
    return this.n5c_1.w2q().r2z();
  };
  function DelegatedValue(delegate) {
    AbstractDelegatedValue.call(this);
    this.s3e_1 = delegate;
  }
  protoOf(DelegatedValue).x1 = function () {
    return this.s3e_1;
  };
  function APLArrayByte(dimensions, values) {
    APLArray.call(this);
    this.o5c_1 = dimensions;
    this.p5c_1 = values;
  }
  protoOf(APLArrayByte).o2i = function () {
    return this.o5c_1;
  };
  protoOf(APLArrayByte).f2n = function () {
    return Companion_getInstance_45().x2j_1;
  };
  protoOf(APLArrayByte).h2k = function (p) {
    return makeAPLNumber_0(toLong_0(this.p5c_1[p]).i3(new Long(255, 0)));
  };
  protoOf(APLArrayByte).i2n = function (p) {
    return toLong_0(this.p5c_1[p]).i3(new Long(255, 0));
  };
  protoOf(APLArrayByte).b2q = function (withDiscard) {
    return this;
  };
  protoOf(APLArrayByte).n = function () {
    return this.p5c_1.length;
  };
  function asByteArray(_this__u8e3s4, pos) {
    pos = pos === VOID ? null : pos;
    var v = _this__u8e3s4.x2g().u2i();
    if (!(_Dimensions___get_size__impl__uu37ek(v.o2i()) === 1)) {
      throwAPLException(new InvalidDimensionsException('Value must be a scalar or a one-dimensional array', pos));
    }
    var size = Dimensions__get_impl_4npepw(v.o2i(), 0);
    if (size === 0) {
      // Inline function 'kotlin.byteArrayOf' call
      return new Int8Array([]);
    } else {
      var firstValue = v.h2k(0);
      var tmp;
      if (firstValue instanceof APLNumber) {
        var tmp_0 = 0;
        var tmp_1 = new Int8Array(size);
        while (tmp_0 < size) {
          var tmp_2 = tmp_0;
          var valueInt = (tmp_2 === 0 ? firstValue : v.h2k(tmp_2)).p2i(pos).q2i(pos);
          if (valueInt < 0 || valueInt > 255) {
            throwAPLException(new IncompatibleTypeException('Element at index ' + tmp_2 + ' in array is not a byte: ' + valueInt, pos));
          }
          tmp_1[tmp_2] = toByte(valueInt);
          tmp_0 = tmp_0 + 1 | 0;
        }
        tmp = tmp_1;
      } else {
        if (firstValue instanceof APLChar) {
          // Inline function 'com.dhsdevelopments.kap.toStringValue' call
          var result = toStringValueOrNull(v);
          if (result == null) {
            var m = null;
            var messagePrefix = m == null ? '' : '' + m + ': ';
            throwAPLException(new IncompatibleTypeException(messagePrefix + 'Argument is not a string', pos));
          }
          tmp = encodeToByteArray(result);
        } else {
          throwAPLException(new IncompatibleTypeException('Value cannot be converted to byte array', pos));
        }
      }
      return tmp;
    }
  }
  function isNullValue(value) {
    var dimensions = value.o2i();
    return _Dimensions___get_size__impl__uu37ek(dimensions) === 1 && Dimensions__get_impl_4npepw(dimensions, 0) === 0;
  }
  function FormatStyle_PLAIN_getInstance() {
    FormatStyle_initEntries();
    return FormatStyle_PLAIN_instance;
  }
  function FormatStyle_READABLE_getInstance() {
    FormatStyle_initEntries();
    return FormatStyle_READABLE_instance;
  }
  function FormatStyle_PRETTY_getInstance() {
    FormatStyle_initEntries();
    return FormatStyle_PRETTY_instance;
  }
  function AssignPrototypeFunction$AssignPrototypeFunctionImpl$APLValueMetadataOverridePrototype$labels$delegate$lambda(this$0) {
    return function () {
      return this$0.q5c_1.p2r();
    };
  }
  function APLValueMetadataOverridePrototype(bm, a) {
    this.q5c_1 = bm;
    var tmp = this;
    tmp.r5c_1 = lazy(AssignPrototypeFunction$AssignPrototypeFunctionImpl$APLValueMetadataOverridePrototype$labels$delegate$lambda(this));
    this.s5c_1 = a;
  }
  protoOf(APLValueMetadataOverridePrototype).p2r = function () {
    var tmp0 = this.r5c_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_14();
    return tmp0.x1();
  };
  protoOf(APLValueMetadataOverridePrototype).hv = function () {
    return this.s5c_1;
  };
  function Companion_53() {
  }
  protoOf(Companion_53).t5c = function (value, defaultValue, pos) {
    if (value.b2l()) {
      throwAPLException(new APLIllegalArgumentException('Prototypes can only be set for arrays. Argument is atomic.', pos));
    }
    var bm = value.m2l();
    var newMetadata = new APLValueMetadataOverridePrototype(bm, defaultValue);
    var curr = value;
    $l$loop: while (curr instanceof MetadataOverrideArray) {
      curr = curr.h2r_1;
    }
    return new MetadataOverrideArray(curr, newMetadata);
  };
  protoOf(Companion_53).k2r = function (value, defaultValue, pos, $super) {
    pos = pos === VOID ? null : pos;
    return $super === VOID ? this.t5c(value, defaultValue, pos) : $super.t5c.call(this, value, defaultValue, pos);
  };
  var Companion_instance_55;
  function Companion_getInstance_55() {
    return Companion_instance_55;
  }
  function AssignPrototypeFunctionImpl(pos) {
    NoAxisAPLFunction.call(this, pos);
  }
  protoOf(AssignPrototypeFunctionImpl).t2i = function (context, a, b) {
    return Companion_instance_55.t5c(b, a, this.t2g_1);
  };
  function AssignPrototypeFunction() {
  }
  protoOf(AssignPrototypeFunction).i2i = function (instantiation) {
    return new AssignPrototypeFunctionImpl(instantiation);
  };
  function DefaultMetadata() {
  }
  protoOf(DefaultMetadata).p2r = function () {
    return null;
  };
  protoOf(DefaultMetadata).hv = function () {
    return get_APLLONG_0();
  };
  protoOf(DefaultMetadata).y2r = function () {
    return true;
  };
  protoOf(DefaultMetadata).z2r = function () {
    return this;
  };
  var DefaultMetadata_instance;
  function DefaultMetadata_getInstance() {
    return DefaultMetadata_instance;
  }
  function CollapsedAPLValueMetadata(parent) {
    this.y5c_1 = parent.p2r();
    this.z5c_1 = parent.hv();
  }
  protoOf(CollapsedAPLValueMetadata).p2r = function () {
    return this.y5c_1;
  };
  protoOf(CollapsedAPLValueMetadata).hv = function () {
    return this.z5c_1;
  };
  protoOf(CollapsedAPLValueMetadata).z2r = function () {
    return this;
  };
  function APLValueMetadata() {
  }
  function Companion_54() {
  }
  protoOf(Companion_54).n3a = function (value, extraLabels) {
    var m = new APLValueMetadataOverrideLabels(value.m2l(), Companion_instance_50.n5b(value.o2i(), value.m2l().p2r(), extraLabels));
    return new MetadataOverrideArray(value, m);
  };
  var Companion_instance_56;
  function Companion_getInstance_56() {
    return Companion_instance_56;
  }
  function APLValueMetadataOverrideLabels(sourceMetadata, labels) {
    this.a5d_1 = sourceMetadata;
    this.b5d_1 = labels;
  }
  protoOf(APLValueMetadataOverrideLabels).p2r = function () {
    return this.b5d_1;
  };
  protoOf(APLValueMetadataOverrideLabels).hv = function () {
    return this.a5d_1.hv();
  };
  function MetadataOverrideArray(value, metadata) {
    AbstractDelegatedValue.call(this);
    this.h2r_1 = value;
    this.i2r_1 = metadata;
    // Inline function 'kotlin.require' call
    if (!!this.h2r_1.b2l()) {
      var message = 'Attempt to override metadata for an atomic value';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(MetadataOverrideArray).x1 = function () {
    return this.h2r_1;
  };
  protoOf(MetadataOverrideArray).m2l = function () {
    return this.i2r_1;
  };
  protoOf(MetadataOverrideArray).i2o = function (style) {
    var tmp;
    switch (style.o2_1) {
      case 0:
        tmp = this.h2r_1.i2o(style);
        break;
      case 2:
        tmp = this.h2r_1.i2o(style);
        break;
      case 1:
        var labelsDefinition = makeReadableLabelsDefinitionIfExists(this.i2r_1);
        var content = this.h2r_1.i2o(style);
        var tmp_0;
        if (labelsDefinition == null) {
          tmp_0 = content;
        } else {
          tmp_0 = '' + labelsDefinition + content;
        }

        tmp = tmp_0;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(MetadataOverrideArray).g2k = function () {
    var v = this.h2r_1.g2k();
    // Inline function 'kotlin.require' call
    if (!!(v instanceof APLSingleValue)) {
      var message = 'Metadata was attached to singlevalue';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new MetadataOverrideArray(v, this.i2r_1);
  };
  function DerivedAPLValueMetadata$labels$delegate$lambda($parent) {
    return function () {
      return $parent.p2r();
    };
  }
  function DerivedAPLValueMetadata$defaultValue$delegate$lambda($parent) {
    return function () {
      return $parent.hv();
    };
  }
  function DerivedAPLValueMetadata(parent) {
    var tmp = this;
    tmp.h4e_1 = lazy(DerivedAPLValueMetadata$labels$delegate$lambda(parent));
    var tmp_0 = this;
    tmp_0.i4e_1 = lazy(DerivedAPLValueMetadata$defaultValue$delegate$lambda(parent));
  }
  protoOf(DerivedAPLValueMetadata).p2r = function () {
    var tmp0 = this.h4e_1;
    // Inline function 'kotlin.getValue' call
    labels$factory_15();
    return tmp0.x1();
  };
  protoOf(DerivedAPLValueMetadata).hv = function () {
    var tmp0 = this.i4e_1;
    // Inline function 'kotlin.getValue' call
    defaultValue$factory();
    return tmp0.x1();
  };
  function labels$factory_14() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function labels$factory_15() {
    return getPropertyCallableRef('labels', 1, KProperty1, function (receiver) {
      return receiver.p2r();
    }, null);
  }
  function defaultValue$factory() {
    return getPropertyCallableRef('defaultValue', 1, KProperty1, function (receiver) {
      return receiver.hv();
    }, null);
  }
  function get_XRegExp() {
    _init_properties_charsets_js_kt__askr1f();
    return XRegExp;
  }
  var XRegExp;
  function get_letterRegexp() {
    _init_properties_charsets_js_kt__askr1f();
    return letterRegexp;
  }
  var letterRegexp;
  function get_digitRegexp() {
    _init_properties_charsets_js_kt__askr1f();
    return digitRegexp;
  }
  var digitRegexp;
  function get_whitespaceRegexp() {
    _init_properties_charsets_js_kt__askr1f();
    return whitespaceRegexp;
  }
  var whitespaceRegexp;
  var backendSupportsUnicodeNames;
  function get_GraphemeSplitter() {
    _init_properties_charsets_js_kt__askr1f();
    return GraphemeSplitter;
  }
  var GraphemeSplitter;
  function get_graphemeSplitter() {
    _init_properties_charsets_js_kt__askr1f();
    return graphemeSplitter;
  }
  var graphemeSplitter;
  function charToString(codepoint) {
    _init_properties_charsets_js_kt__askr1f();
    var tmp;
    if (codepoint < 65536) {
      tmp = toString_2(numberToChar(codepoint));
    } else {
      var off = 55232;
      var high = off + (codepoint >> 10) | 0;
      var low = 56320 + (codepoint & 1023) | 0;
      tmp = toString_2(numberToChar(high)) + toString_2(numberToChar(low));
    }
    return tmp;
  }
  function addCodepoint(_this__u8e3s4, codepoint) {
    _init_properties_charsets_js_kt__askr1f();
    _this__u8e3s4.i8(charToString(codepoint));
    return _this__u8e3s4;
  }
  function asCodepointList(_this__u8e3s4) {
    _init_properties_charsets_js_kt__askr1f();
    var result = ArrayList_init_$Create$();
    var i = 0;
    while (i < _this__u8e3s4.length) {
      var _unary__edvuaz = i;
      i = _unary__edvuaz + 1 | 0;
      var ch = charSequenceGet(_this__u8e3s4, _unary__edvuaz);
      var tmp;
      if (isHighSurrogate(ch)) {
        var _unary__edvuaz_0 = i;
        i = _unary__edvuaz_0 + 1 | 0;
        var low = charSequenceGet(_this__u8e3s4, _unary__edvuaz_0);
        var tmp_0;
        if (isLowSurrogate(low)) {
          tmp_0 = makeCharFromSurrogatePair(ch, low);
        } else {
          // Inline function 'kotlin.code' call
          var tmp$ret$0 = Char__toInt_impl_vasixd(low);
          throw IllegalStateException_init_$Create$('Expected low surrogate, got: ' + tmp$ret$0);
        }
        tmp = tmp_0;
      } else if (isLowSurrogate(ch)) {
        // Inline function 'kotlin.code' call
        var tmp$ret$1 = Char__toInt_impl_vasixd(ch);
        throw IllegalStateException_init_$Create$('Standalone low surrogate found: ' + tmp$ret$1);
      } else {
        // Inline function 'kotlin.code' call
        tmp = Char__toInt_impl_vasixd(ch);
      }
      var v = tmp;
      result.h(v);
    }
    return result;
  }
  function isDigit(codepoint) {
    _init_properties_charsets_js_kt__askr1f();
    var tmp = get_digitRegexp().test(toString_2(numberToChar(codepoint)));
    return (!(tmp == null) ? typeof tmp === 'boolean' : false) ? tmp : THROW_CCE();
  }
  function isWhitespace_0(codepoint) {
    _init_properties_charsets_js_kt__askr1f();
    var tmp = get_whitespaceRegexp().test(toString_2(numberToChar(codepoint)));
    return typeof tmp === 'boolean' ? tmp : THROW_CCE();
  }
  function nameToCodepoint(name) {
    _init_properties_charsets_js_kt__askr1f();
    return null;
  }
  function isLetter(codepoint) {
    _init_properties_charsets_js_kt__askr1f();
    var tmp = get_letterRegexp().test(charToString(codepoint));
    return (!(tmp == null) ? typeof tmp === 'boolean' : false) ? tmp : THROW_CCE();
  }
  function asGraphemeList(_this__u8e3s4) {
    _init_properties_charsets_js_kt__askr1f();
    var tmp = get_graphemeSplitter().splitGraphemes(_this__u8e3s4);
    var result = (!(tmp == null) ? isArray(tmp) : false) ? tmp : THROW_CCE();
    return asList(result);
  }
  function codepointToName(codepoint) {
    _init_properties_charsets_js_kt__askr1f();
    return null;
  }
  var properties_initialized_charsets_js_kt_omfhy7;
  function _init_properties_charsets_js_kt__askr1f() {
    if (!properties_initialized_charsets_js_kt_omfhy7) {
      properties_initialized_charsets_js_kt_omfhy7 = true;
      XRegExp = require('xregexp');
      letterRegexp = get_XRegExp()('^\\p{L}$');
      digitRegexp = get_XRegExp()('^\\p{N}$');
      whitespaceRegexp = new RegExp('^[ \\t]$');
      backendSupportsUnicodeNames = false;
      GraphemeSplitter = require('grapheme-splitter');
      graphemeSplitter = get_GraphemeSplitter()();
    }
  }
  function get_NON_SCIENTIFIC_INTEGER_REGEX() {
    _init_properties_div_js_kt__uh0jzv();
    return NON_SCIENTIFIC_INTEGER_REGEX;
  }
  var NON_SCIENTIFIC_INTEGER_REGEX;
  function makeTimerHandler(engine) {
    _init_properties_div_js_kt__uh0jzv();
    return null;
  }
  function makeBackgroundDispatcher(numThreads) {
    _init_properties_div_js_kt__uh0jzv();
    return new SingleThreadedThreadPoolExecutor();
  }
  function numCores() {
    _init_properties_div_js_kt__uh0jzv();
    return 1;
  }
  function makeNativeData() {
    _init_properties_div_js_kt__uh0jzv();
    return new JsNativeData();
  }
  function formatDouble(_this__u8e3s4) {
    _init_properties_div_js_kt__uh0jzv();
    var tmp;
    if (equals(_this__u8e3s4, -0.0)) {
      tmp = '-0.0';
    } else {
      var s = _this__u8e3s4.toString();
      var tmp_0;
      if (get_NON_SCIENTIFIC_INTEGER_REGEX().cb(s)) {
        tmp_0 = s + '.0';
      } else {
        tmp_0 = s;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function toRegexpWithException(string, options) {
    _init_properties_div_js_kt__uh0jzv();
    var tmp;
    try {
      // Inline function 'kotlin.text.toRegex' call
      tmp = new Regex(string, options);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        throw new RegexpParseException('Error parsing regexp: "' + string + '"', e);
      } else {
        throw $p;
      }
    }
    return tmp;
  }
  function JsNativeData() {
    this.d4o_1 = null;
    this.e4o_1 = null;
    this.c4o_1 = Companion_instance_0.xz();
  }
  protoOf(JsNativeData).c5d = function (time) {
    var tmp0_elvis_lhs = this.c4o_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw new SleepNotSupportedException();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var queue = tmp;
    queue.c10(time);
  };
  protoOf(JsNativeData).h1l = function () {
  };
  function jsNativeData(_this__u8e3s4) {
    _init_properties_div_js_kt__uh0jzv();
    var tmp = _this__u8e3s4.m39_1;
    return tmp instanceof JsNativeData ? tmp : THROW_CCE();
  }
  function sleepMillis(engine, time) {
    _init_properties_div_js_kt__uh0jzv();
    jsNativeData(engine).c5d(time);
  }
  function sleepMillisCallback(engine, time, pos, callback) {
    _init_properties_div_js_kt__uh0jzv();
    setTimeout(sleepMillisCallback$lambda(callback), time.l3());
  }
  function make_1(_this__u8e3s4, ref) {
    _init_properties_div_js_kt__uh0jzv();
    return new JsWeakReference(ref);
  }
  function JsWeakReference(ref) {
    var inst = ref;
    this.d5d_1 = new WeakRef(inst);
  }
  protoOf(JsWeakReference).x1 = function () {
    var inst = this.d5d_1;
    var v = function () {
      var a = inst.deref();
      if (a) {
        return a;
      } else {
        return null;
      }
    }.call(this);
    return (v == null ? true : !(v == null)) ? v : THROW_CCE();
  };
  function sleepMillisCallback$lambda($callback) {
    return function () {
      $callback();
      return Unit_instance;
    };
  }
  var properties_initialized_div_js_kt_je194p;
  function _init_properties_div_js_kt__uh0jzv() {
    if (!properties_initialized_div_js_kt_je194p) {
      properties_initialized_div_js_kt_je194p = true;
      // Inline function 'kotlin.text.toRegex' call
      var this_0 = '^-?[0-9]+$';
      NON_SCIENTIFIC_INTEGER_REGEX = Regex_init_$Create$(this_0);
    }
  }
  function httpRequestCallback(engine, httpRequestData, pos, callback) {
    var tmp0_elvis_lhs = jsNativeData(engine).d4o_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new APLEvalException('Backend does not support HTTP calls', pos));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var manager = tmp;
    return manager.e5d(engine, httpRequestData, pos, callback);
  }
  function httpRequest(engine, httpRequestData, pos) {
    pos = pos === VOID ? null : pos;
    var tmp0_elvis_lhs = jsNativeData(engine).d4o_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throwAPLException(new APLEvalException('Backend does not support HTTP calls', pos));
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var manager = tmp;
    return manager.f5d(engine, httpRequestData, pos);
  }
  var currentLocalStorage;
  function currentStorageStackOrNull() {
    return currentLocalStorage;
  }
  function platformInit(engine) {
    var tmp0 = engine.k39_1;
    var tmp1 = engine.l39_1.m4p();
    // Inline function 'kotlin.collections.set' call
    var value = new ConstantSymbolSystemParameterProvider(engine.s39('js', engine.r39()));
    tmp0.j2(tmp1, value);
  }
  function currentStorageStack() {
    return ensureNotNull(currentLocalStorage);
  }
  function withThreadLocalStorageStackAssigned(stack, fn) {
    var prevStack = currentLocalStorage;
    currentLocalStorage = stack;
    try {
      return fn();
    }finally {
      currentLocalStorage = prevStack;
    }
  }
  function get_registeredFilesRoot() {
    _init_properties_io_js_kt__9io16q();
    return registeredFilesRoot;
  }
  var registeredFilesRoot;
  function fileType(path) {
    _init_properties_io_js_kt__9io16q();
    var found = get_registeredFilesRoot().i5d(path);
    var tmp;
    if (found == null) {
      tmp = null;
    } else {
      if (found instanceof File) {
        tmp = FileNameType_FILE_getInstance();
      } else {
        if (found instanceof Directory) {
          tmp = FileNameType_DIRECTORY_getInstance();
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    return tmp;
  }
  function currentDirectory() {
    _init_properties_io_js_kt__9io16q();
    return '/';
  }
  function resolveDirectoryPathInt(fileName, workingDirectory) {
    _init_properties_io_js_kt__9io16q();
    var tmp;
    if (startsWith(fileName, '/')) {
      tmp = fileName;
    } else {
      var i = workingDirectory.length;
      while (i > 0 && charSequenceGet(workingDirectory, i - 1 | 0) === _Char___init__impl__6a9atx(47)) {
        i = i - 1 | 0;
      }
      // Inline function 'kotlin.text.substring' call
      var endIndex = i;
      // Inline function 'kotlin.js.asDynamic' call
      var fixedDirName = workingDirectory.substring(0, endIndex);
      tmp = fixedDirName + '/' + fileName;
    }
    return tmp;
  }
  function openInputCharFile(name) {
    _init_properties_io_js_kt__9io16q();
    return new ByteToCharacterProvider(openInputFile(name));
  }
  function makeStringCharacterProvider(s) {
    _init_properties_io_js_kt__9io16q();
    return new JsStringCharacterProvider(s);
  }
  function splitName($this, path) {
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = split_0(path, ['/']);
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$();
    var _iterator__ex2g4s = tmp0.k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      // Inline function 'kotlin.text.isNotEmpty' call
      if (charSequenceLength(element) > 0) {
        destination.h(element);
      }
    }
    return destination;
  }
  function findPathElement($this, parts, createDirs, lastElementIsDir) {
    if (parts.o()) {
      return $this;
    }
    var curr = $this;
    var inductionVariable = 0;
    var last_0 = parts.n() - 1 | 0;
    if (inductionVariable < last_0)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var s = parts.p(i);
        var p = curr.h5d_1.a2(s);
        if (p == null) {
          if (createDirs) {
            p = new Directory(s);
            var tmp0 = curr.h5d_1;
            // Inline function 'kotlin.collections.set' call
            var value = p;
            tmp0.j2(s, value);
          } else {
            return null;
          }
        } else {
          if (!(p instanceof Directory)) {
            return null;
          }
        }
        curr = p;
      }
       while (inductionVariable < last_0);
    var s_0 = last(parts);
    var f = curr.h5d_1.a2(s_0);
    return !(f == null) ? f : createDirs && lastElementIsDir ? curr.j5d(s_0) : null;
  }
  function findPathElement$default($this, parts, createDirs, lastElementIsDir, $super) {
    createDirs = createDirs === VOID ? false : createDirs;
    lastElementIsDir = lastElementIsDir === VOID ? false : lastElementIsDir;
    return findPathElement($this, parts, createDirs, lastElementIsDir);
  }
  function File(name, content) {
    RegisteredEntry.call(this, name);
    this.l5d_1 = content;
  }
  function Directory(name) {
    RegisteredEntry.call(this, name);
    this.h5d_1 = HashMap_init_$Create$();
  }
  protoOf(Directory).i5d = function (path) {
    var parts = splitName(this, path);
    return findPathElement$default(this, parts, false);
  };
  protoOf(Directory).m5d = function (path, content) {
    var parts = splitName(this, path);
    var dir = findPathElement(this, parts.u1(0, parts.n() - 1 | 0), true, true);
    if (!(dir instanceof Directory)) {
      throw new MPFileException('Parent path does not represent a directory');
    }
    var namepart = last(parts);
    var data = new FileEntryData(content);
    var tmp0 = dir.h5d_1;
    // Inline function 'kotlin.collections.set' call
    var value = new File(namepart, data);
    tmp0.j2(namepart, value);
    return data;
  };
  protoOf(Directory).n5d = function (name, errorIfExists) {
    if (errorIfExists && this.h5d_1.y1(name)) {
      throw new MPFileException('Directory already exists: ' + name);
    }
    var dir = new Directory(name);
    // Inline function 'kotlin.collections.set' call
    this.h5d_1.j2(name, dir);
    return dir;
  };
  protoOf(Directory).j5d = function (name, errorIfExists, $super) {
    errorIfExists = errorIfExists === VOID ? true : errorIfExists;
    return $super === VOID ? this.n5d(name, errorIfExists) : $super.n5d.call(this, name, errorIfExists);
  };
  function RegisteredEntry(name) {
    this.o5d_1 = name;
  }
  function openInputFile(name) {
    _init_properties_io_js_kt__9io16q();
    var tmp0_elvis_lhs = get_registeredFilesRoot().i5d(name);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw new MPFileNotFoundException('File not found: ' + name);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var found = tmp;
    if (!(found instanceof File)) {
      throw new MPFileException('Pathname is not a file name: ' + name);
    }
    return new ByteArrayByteProvider(found.l5d_1.r5d(), name);
  }
  function JsStringCharacterProvider(s) {
    this.s5d_1 = s;
    this.t5d_1 = 0;
  }
  protoOf(JsStringCharacterProvider).e3j = function () {
    if (this.t5d_1 >= this.s5d_1.length) {
      return null;
    }
    var _unary__edvuaz = this.t5d_1;
    this.t5d_1 = _unary__edvuaz + 1 | 0;
    var ch = charSequenceGet(this.s5d_1, _unary__edvuaz);
    var tmp;
    if (isHighSurrogate(ch)) {
      var tmp_0;
      if (this.t5d_1 < this.s5d_1.length) {
        var _unary__edvuaz_0 = this.t5d_1;
        this.t5d_1 = _unary__edvuaz_0 + 1 | 0;
        var low = charSequenceGet(this.s5d_1, _unary__edvuaz_0);
        var tmp_1;
        if (isLowSurrogate(low)) {
          tmp_1 = makeCharFromSurrogatePair(ch, low);
        } else {
          throw IllegalStateException_init_$Create$('A high surrogate should be followed by a low surrogate');
        }
        tmp_0 = tmp_1;
      } else {
        throw IllegalStateException_init_$Create$('End of string when low surrogate was expected');
      }
      tmp = tmp_0;
    } else if (isLowSurrogate(ch)) {
      throw IllegalStateException_init_$Create$('Unexpected low surrogate');
    } else {
      // Inline function 'kotlin.code' call
      tmp = Char__toInt_impl_vasixd(ch);
    }
    return tmp;
  };
  protoOf(JsStringCharacterProvider).h1l = function () {
  };
  function Companion_55() {
    this.u5d_1 = 1024;
  }
  var Companion_instance_57;
  function Companion_getInstance_57() {
    return Companion_instance_57;
  }
  function FileEntryData(initialData) {
    initialData = initialData === VOID ? null : initialData;
    if (initialData == null) {
      var tmp = this;
      var tmp_0 = 0;
      var tmp_1 = new Int8Array(1024);
      while (tmp_0 < 1024) {
        tmp_1[tmp_0] = 0;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp.p5d_1 = tmp_1;
      this.q5d_1 = 0;
    } else {
      var tmp_2 = this;
      // Inline function 'kotlin.collections.copyOf' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp_2.p5d_1 = initialData.slice();
      this.q5d_1 = initialData.length;
    }
  }
  protoOf(FileEntryData).n = function () {
    return this.q5d_1;
  };
  protoOf(FileEntryData).v5d = function (value) {
    if (this.q5d_1 >= this.p5d_1.length) {
      // Inline function 'kotlin.math.max' call
      var a = imul(this.p5d_1.length, 3) / 2 | 0;
      var newSize = Math.max(a, 1024);
      var newArray = copyOf_0(this.p5d_1, newSize);
      this.p5d_1 = newArray;
    }
    var tmp = this.p5d_1;
    var _unary__edvuaz = this.q5d_1;
    this.q5d_1 = _unary__edvuaz + 1 | 0;
    tmp[_unary__edvuaz] = value;
  };
  protoOf(FileEntryData).r5d = function () {
    return copyOf_0(this.p5d_1, this.q5d_1);
  };
  function openOutputCharFile(name) {
    _init_properties_io_js_kt__9io16q();
    return new CharacterToByteConsumer(openOutputFile(name));
  }
  function makeKeyboardInput(engine) {
    _init_properties_io_js_kt__9io16q();
    return jsNativeData(engine).e4o_1;
  }
  function readDirectoryContent(dirName) {
    _init_properties_io_js_kt__9io16q();
    var tmp0_elvis_lhs = get_registeredFilesRoot().i5d(dirName);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw new MPFileException('Path not found: ' + dirName);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var dir = tmp;
    if (!(dir instanceof Directory))
      throw new MPFileException('Path does not indicate a directory name: ' + dirName);
    var result = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = dir.h5d_1.m2().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      var tmp_0;
      if (element instanceof File) {
        tmp_0 = new PathEntry(element.o5d_1, toLong_0(element.l5d_1.n()), FileNameType_FILE_getInstance());
      } else {
        if (element instanceof Directory) {
          tmp_0 = new PathEntry(element.o5d_1, new Long(0, 0), FileNameType_DIRECTORY_getInstance());
        } else {
          noWhenBranchMatchedException();
        }
      }
      var e = tmp_0;
      result.h(e);
    }
    return result;
  }
  function openOutputFile(name) {
    _init_properties_io_js_kt__9io16q();
    var entry = get_registeredFilesRoot().i5d(name);
    var tmp;
    if (entry == null) {
      tmp = get_registeredFilesRoot().m5d(name, new Int8Array(0));
    } else {
      if (entry instanceof File) {
        tmp = entry.l5d_1;
      } else {
        if (entry instanceof Directory) {
          throw new MPFileException('Name is a directory: ' + name);
        } else {
          noWhenBranchMatchedException();
        }
      }
    }
    var fileData = tmp;
    return new FileEntryDataByteConsumer(fileData);
  }
  function ensureOpen($this) {
    if ($this.x5d_1) {
      throw new MPFileException('File is closed');
    }
  }
  function FileEntryDataByteConsumer(entry) {
    this.w5d_1 = entry;
    this.x5d_1 = false;
  }
  protoOf(FileEntryDataByteConsumer).a3l = function (value) {
    ensureOpen(this);
    this.w5d_1.v5d(value);
  };
  protoOf(FileEntryDataByteConsumer).k3k = function (buffer, offset, length) {
    ensureOpen(this);
    var inductionVariable = offset;
    var last = offset + (length == null ? buffer.length - offset | 0 : length) | 0;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        this.w5d_1.v5d(buffer[i]);
      }
       while (inductionVariable < last);
  };
  protoOf(FileEntryDataByteConsumer).h1l = function () {
    this.x5d_1 = true;
  };
  var properties_initialized_io_js_kt_baezj4;
  function _init_properties_io_js_kt__9io16q() {
    if (!properties_initialized_io_js_kt_baezj4) {
      properties_initialized_io_js_kt_baezj4 = true;
      registeredFilesRoot = new Directory('/');
    }
  }
  var backendSupportsJson;
  function parseJsonToAPL(input) {
    var buf = StringBuilder_init_$Create$();
    // Inline function 'kotlin.sequences.forEach' call
    var _iterator__ex2g4s = input.y3h().k();
    while (_iterator__ex2g4s.l()) {
      var element = _iterator__ex2g4s.m();
      buf.i8(element);
      buf.i8('\n');
    }
    var tmp;
    try {
      tmp = JSON.parse(buf.toString());
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        // Inline function 'kotlin.text.buildString' call
        // Inline function 'kotlin.apply' call
        var this_0 = StringBuilder_init_$Create$();
        this_0.i8('Error parsing JSON');
        var message = e.message;
        if (!(message == null)) {
          this_0.i8(': ');
          this_0.i8(message);
        }
        var formatted = this_0.toString();
        throw new JsonParseException(formatted);
      } else {
        throw $p;
      }
    }
    var json = tmp;
    return parseEntry(json);
  }
  function parseEntry(value) {
    var tmp;
    if (value == null) {
      tmp = APLNilValue_getInstance();
    } else {
      if (!(value == null) ? isArray(value) : false) {
        tmp = parseArray(value);
      } else {
        if (!(value == null) ? typeof value === 'string' : false) {
          tmp = Companion_getInstance_46().k2o(value);
        } else {
          if (!(value == null) ? typeof value === 'number' : false) {
            tmp = makeAPLNumber(value);
          } else {
            if (!(value == null) ? typeof value === 'boolean' : false) {
              tmp = value ? get_APLLONG_1() : get_APLLONG_0();
            } else {
              // Inline function 'kotlin.js.asDynamic' call
              tmp = parseObject(value);
            }
          }
        }
      }
    }
    return tmp;
  }
  function parseArray(value) {
    var content = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var inductionVariable = 0;
    var last = value.length;
    while (inductionVariable < last) {
      var element = value[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      content.h(parseEntry(element));
    }
    return new APLArrayList(dimensionsOfSize(new Int32Array([content.n()])), content);
  }
  function parseObject(value) {
    var content = ArrayList_init_$Create$();
    var keysFn = Object.keys;
    var keyArray = keysFn(value);
    keyArray.forEach(parseObject$lambda(content, value));
    return new APLMap(Companion_instance_31.s3h(content));
  }
  function parseObject$lambda($content, $value) {
    return function (k) {
      var tmp;
      if (!(!(k == null) ? typeof k === 'string' : false)) {
        throw new JsonParseException('Key is not a string: ' + k);
      }
      var tmp_0 = Companion_getInstance_46();
      // Inline function 'kotlin.js.unsafeCast' call
      return $content.h(to(tmp_0.k2o(k).s2o(), parseEntry($value[k])));
    };
  }
  function MPLock(recursive) {
    recursive = recursive === VOID ? true : recursive;
  }
  function makeMPThreadLocalBackend(type) {
    return new makeMPThreadLocalBackend$1();
  }
  function makeAtomicRefArray(size) {
    return new JsAtomicRefArray(size);
  }
  function JsAtomicRefArray(size) {
    this.y5d_1 = ArrayList_init_$Create$();
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        this.y5d_1.h(null);
      }
       while (inductionVariable < size);
  }
  protoOf(JsAtomicRefArray).p = function (index) {
    return this.y5d_1.p(index);
  };
  protoOf(JsAtomicRefArray).f4d = function (index, expected, newValue) {
    var v = this.y5d_1.p(index);
    if (equals(v, expected)) {
      this.y5d_1.g2(index, newValue);
    }
    return v;
  };
  function makeMPThreadLocalBackend$1() {
    this.z5d_1 = null;
  }
  protoOf(makeMPThreadLocalBackend$1).a5e = function (_set____db54di) {
    this.z5d_1 = _set____db54di;
  };
  protoOf(makeMPThreadLocalBackend$1).l48 = function (_set____db54di) {
    return this.a5e((_set____db54di == null ? true : !(_set____db54di == null)) ? _set____db54di : THROW_CCE());
  };
  protoOf(makeMPThreadLocalBackend$1).x1 = function () {
    return this.z5d_1;
  };
  //region block: post-declaration
  protoOf(CallAsyncOp).m2g = parseAndCombineFunctions;
  protoOf(TransposedAPLValueMetadata).y2r = get_isDefault;
  protoOf(TransposedAPLValueMetadata).z2r = collapse;
  protoOf(DropArrayValueMetadata).y2r = get_isDefault;
  protoOf(DropArrayValueMetadata).z2r = collapse;
  protoOf(TakeArrayValueMetadata).y2r = get_isDefault;
  protoOf(TakeArrayValueMetadata).z2r = collapse;
  protoOf(OverlayReplacementValueMetadata).hv = get_defaultValue;
  protoOf(OverlayReplacementValueMetadata).y2r = get_isDefault;
  protoOf(OverlayReplacementValueMetadata).z2r = collapse;
  protoOf(InverseAPLValueMetadata).y2r = get_isDefault;
  protoOf(InverseAPLValueMetadata).z2r = collapse;
  protoOf(RotatedAPLValueMetadata).y2r = get_isDefault;
  protoOf(RotatedAPLValueMetadata).z2r = collapse;
  protoOf(MultiRotatedAPLValueMetadata).y2r = get_isDefault;
  protoOf(MultiRotatedAPLValueMetadata).z2r = collapse;
  protoOf(SelectElementsValueMetadata).y2r = get_isDefault;
  protoOf(SelectElementsValueMetadata).z2r = collapse;
  protoOf(BitwiseOp).m2g = parseAndCombineFunctions_0;
  protoOf(CommuteOp).m2g = parseAndCombineFunctions_0;
  protoOf(LessThanResultMetadata).y2r = get_isDefault;
  protoOf(LessThanResultMetadata).z2r = collapse;
  protoOf(GreaterThanResultMetadata).y2r = get_isDefault;
  protoOf(GreaterThanResultMetadata).z2r = collapse;
  protoOf(Concatenated1DArraysMetadata).hv = get_defaultValue;
  protoOf(Concatenated1DArraysMetadata).y2r = get_isDefault;
  protoOf(Concatenated1DArraysMetadata).z2r = collapse;
  protoOf(ConcatenatedMultiDimensionalArraysMetadata).hv = get_defaultValue;
  protoOf(ConcatenatedMultiDimensionalArraysMetadata).y2r = get_isDefault;
  protoOf(ConcatenatedMultiDimensionalArraysMetadata).z2r = collapse;
  protoOf(CatchOperator).m2g = parseAndCombineFunctions_0;
  protoOf(DeferAPLOperator).m2g = parseAndCombineFunctions_0;
  protoOf(AtLeaveScopeOperator).m2g = parseAndCombineFunctions_0;
  protoOf(ForEachOp).m2g = parseAndCombineFunctions_0;
  protoOf(ForEachResult1ArgMetadata).hv = get_defaultValue;
  protoOf(ForEachResult1ArgMetadata).y2r = get_isDefault;
  protoOf(ForEachResult1ArgMetadata).z2r = collapse;
  protoOf(PowerAPLOperator).m2g = parseAndCombineFunctions_1;
  protoOf(RankOperator).m2g = parseAndCombineFunctions_2;
  protoOf(ComposeOp).m2g = parseAndCombineFunctions;
  protoOf(OverOp).m2g = parseAndCombineFunctions;
  protoOf(ReverseComposeOp).m2g = parseAndCombineFunctions;
  protoOf(StructuralUnderOp).m2g = parseAndCombineFunctions;
  protoOf(OuterJoinOp).m2g = parseAndCombineFunctions_0;
  protoOf(OuterInnerJoinOp).m2g = parseAndCombineFunctions;
  protoOf(ParallelOp).m2g = parseAndCombineFunctions_0;
  protoOf(ReduceOpLastAxis).m2g = parseAndCombineFunctions_0;
  protoOf(ReduceOpFirstAxis).m2g = parseAndCombineFunctions_0;
  protoOf(ScanLastAxisOp).m2g = parseAndCombineFunctions_0;
  protoOf(ScanFirstAxisOp).m2g = parseAndCombineFunctions_0;
  protoOf(DerivedAPLValueMetadata).y2r = get_isDefault;
  protoOf(DerivedAPLValueMetadata).z2r = collapse;
  protoOf(UnicodeModule).h1l = close;
  protoOf(ConstantSymbolSystemParameterProvider).n3d = updateValue;
  protoOf(IndexedArrayValueMetadata).hv = get_defaultValue;
  protoOf(IndexedArrayValueMetadata).y2r = get_isDefault;
  protoOf(IndexedArrayValueMetadata).z2r = collapse;
  protoOf(NullCharacterProvider).z3k = nextLine;
  protoOf(NullCharacterProvider).y3h = lines;
  protoOf(PushBackCharacterProvider).z3k = nextLine;
  protoOf(PushBackCharacterProvider).y3h = lines;
  protoOf(ByteToCharacterProvider).z3k = nextLine;
  protoOf(ByteToCharacterProvider).y3h = lines;
  protoOf(ByteArrayByteProvider).j3k = readBlock;
  protoOf(ByteArrayByteConsumer).k3k = writeBlock;
  protoOf(ByteArrayByteConsumer).m4x = writeBlock$default;
  protoOf(JsonAPLModule).h1l = close;
  protoOf(SystemClass).h4y = resolveMethod;
  protoOf(UserDefinedClass).h4y = resolveMethod;
  protoOf(InverseFnOp).m2g = parseAndCombineFunctions_0;
  protoOf(UserDefinedOperatorOneArg).m2g = parseAndCombineFunctions_0;
  protoOf(RegexpModule).h1l = close;
  protoOf(StringSourceLocation).p2 = get_name;
  protoOf(EmptyValueMetadata).p2r = get_labels;
  protoOf(EmptyValueMetadata).y2r = get_isDefault;
  protoOf(EmptyValueMetadata).z2r = collapse;
  protoOf(APLValueMetadataOverridePrototype).y2r = get_isDefault;
  protoOf(APLValueMetadataOverridePrototype).z2r = collapse;
  protoOf(CollapsedAPLValueMetadata).y2r = get_isDefault;
  protoOf(APLValueMetadataOverrideLabels).y2r = get_isDefault;
  protoOf(APLValueMetadataOverrideLabels).z2r = collapse;
  protoOf(JsStringCharacterProvider).z3k = nextLine;
  protoOf(JsStringCharacterProvider).y3h = lines;
  protoOf(FileEntryDataByteConsumer).m4x = writeBlock$default;
  //endregion
  //region block: init
  ResizedArrayImpls_instance = new ResizedArrayImpls();
  Companion_instance_2 = new Companion_0();
  Companion_instance_3 = new Companion_1();
  Companion_instance_4 = new Companion_2();
  NumericRelationErrors_instance = new NumericRelationErrors();
  Companion_instance_5 = new Companion_3();
  Companion_instance_6 = new Companion_4();
  Companion_instance_7 = new Companion_5();
  Companion_instance_8 = new Companion_6();
  Companion_instance_9 = new Companion_7();
  Companion_instance_10 = new Companion_8();
  Companion_instance_12 = new Companion_10();
  Companion_instance_13 = new Companion_11();
  Companion_instance_14 = new Companion_12();
  Companion_instance_15 = new Companion_13();
  Companion_instance_16 = new Companion_14();
  Companion_instance_17 = new Companion_15();
  Companion_instance_20 = new Companion_18();
  Companion_instance_21 = new Companion_19();
  Companion_instance_22 = new Companion_20();
  Companion_instance_23 = new Companion_21();
  Companion_instance_24 = new Companion_22();
  Companion_instance_25 = new Companion_23();
  Companion_instance_26 = new Companion_24();
  Companion_instance_27 = new Companion_25();
  Companion_instance_28 = new Companion_26();
  Companion_instance_29 = new Companion_27();
  ComplexFieldExtension_instance = new ComplexFieldExtension();
  Companion_instance_31 = new Companion_29();
  Companion_instance_32 = new Companion_30();
  Companion_instance_34 = new Companion_32();
  IotaAddOptimiser_instance = new IotaAddOptimiser();
  SingleElementConstantListOptimiser_instance = new SingleElementConstantListOptimiser();
  Companion_instance_38 = new Companion_36();
  Companion_instance_39 = new Companion_37();
  Companion_instance_40 = new Companion_38();
  Companion_instance_44 = new Companion_42();
  Companion_instance_48 = new Companion_46();
  Companion_instance_49 = new Companion_47();
  Companion_instance_50 = new Companion_48();
  Companion_instance_51 = new Companion_49();
  Companion_instance_52 = new Companion_50();
  Companion_instance_53 = new Companion_51();
  Companion_instance_54 = new Companion_52();
  Companion_instance_55 = new Companion_53();
  DefaultMetadata_instance = new DefaultMetadata();
  Companion_instance_56 = new Companion_54();
  currentLocalStorage = null;
  Companion_instance_57 = new Companion_55();
  backendSupportsJson = true;
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = APLBigInt;
  _.$_$.b = APLChar;
  _.$_$.c = APLComplex;
  _.$_$.d = APLDouble;
  _.$_$.e = APLLong;
  _.$_$.f = APLRational;
  _.$_$.g = APLSingleValue;
  _.$_$.h = Dimensions;
  _.$_$.i = StringSourceLocation;
  _.$_$.j = charToString;
  _.$_$.k = isStringValue;
  _.$_$.l = get_registeredFilesRoot;
  _.$_$.m = toStringValueOrNull;
  _.$_$.n = FormatStyle_PLAIN_getInstance;
  _.$_$.o = Engine_init_$Create$;
  _.$_$.p = Dimensions__get_impl_4npepw;
  _.$_$.q = _Dimensions___get_size__impl__uu37ek;
  //endregion
  return _;
}));

//# sourceMappingURL=array-array.js.map
